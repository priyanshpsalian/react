/*! For license information please see main.js.LICENSE.txt */
(()=>{var e={122:(e,t,n)=>{"use strict";function r(){return r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},r.apply(this,arguments)}n.d(t,{Z:()=>r})},552:(e,t,n)=>{"use strict";function r(e,t){return r=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e},r(e,t)}function o(e,t){e.prototype=Object.create(t.prototype),e.prototype.constructor=e,r(e,t)}n.d(t,{Z:()=>o})},756:(e,t,n)=>{"use strict";function r(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}n.d(t,{Z:()=>r})},318:e=>{e.exports=function(e){return e&&e.__esModule?e:{default:e}},e.exports.default=e.exports,e.exports.__esModule=!0},862:(e,t,n)=>{var r=n(8).default;function o(){if("function"!=typeof WeakMap)return null;var e=new WeakMap;return o=function(){return e},e}e.exports=function(e){if(e&&e.__esModule)return e;if(null===e||"object"!==r(e)&&"function"!=typeof e)return{default:e};var t=o();if(t&&t.has(e))return t.get(e);var n={},i=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var a in e)if(Object.prototype.hasOwnProperty.call(e,a)){var u=i?Object.getOwnPropertyDescriptor(e,a):null;u&&(u.get||u.set)?Object.defineProperty(n,a,u):n[a]=e[a]}return n.default=e,t&&t.set(e,n),n},e.exports.default=e.exports,e.exports.__esModule=!0},8:e=>{function t(n){return"function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?(e.exports=t=function(e){return typeof e},e.exports.default=e.exports,e.exports.__esModule=!0):(e.exports=t=function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},e.exports.default=e.exports,e.exports.__esModule=!0),t(n)}e.exports=t,e.exports.default=e.exports,e.exports.__esModule=!0},500:(e,t,n)=>{"use strict";function r(e){for(var t="https://material-ui.com/production-error/?code="+e,n=1;n<arguments.length;n+=1)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified Material-UI error #"+e+"; visit "+t+" for the full message."}function o(e){if("string"!=typeof e)throw new Error(r(7));return e.charAt(0).toUpperCase()+e.slice(1)}function i(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return t.reduce((function(e,t){return null==t?e:function(){for(var n=arguments.length,r=new Array(n),o=0;o<n;o++)r[o]=arguments[o];e.apply(this,r),t.apply(this,r)}}),(function(){}))}n.r(t),n.d(t,{capitalize:()=>o,createChainedFunction:()=>i,createSvgIcon:()=>jr,debounce:()=>Tr,deprecatedPropType:()=>Dr,isMuiElement:()=>Rr,ownerDocument:()=>Lr,ownerWindow:()=>zr,requirePropFactory:()=>Ir,setRef:()=>Br,unstable_useId:()=>Wr,unsupportedProp:()=>Ur,useControlled:()=>Fr,useEventCallback:()=>Hr,useForkRef:()=>Vr,useIsFocusVisible:()=>no});var a=n(122),u=n(294),l=n(756);function c(e,t){if(null==e)return{};var n,r,o=(0,l.Z)(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}n(697);function s(e){var t,n,r="";if("string"==typeof e||"number"==typeof e)r+=e;else if("object"==typeof e)if(Array.isArray(e))for(t=0;t<e.length;t++)e[t]&&(n=s(e[t]))&&(r&&(r+=" "),r+=n);else for(t in e)e[t]&&(r&&(r+=" "),r+=t);return r}function f(){for(var e,t,n=0,r="";n<arguments.length;)(e=arguments[n++])&&(t=s(e))&&(r&&(r+=" "),r+=t);return r}var d=n(679),p=n.n(d),h="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};const v="object"===("undefined"==typeof window?"undefined":h(window))&&"object"===("undefined"==typeof document?"undefined":h(document))&&9===document.nodeType;function g(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function y(e,t,n){return t&&g(e.prototype,t),n&&g(e,n),e}var m=n(552);function b(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}var w={}.constructor;function _(e){if(null==e||"object"!=typeof e)return e;if(Array.isArray(e))return e.map(_);if(e.constructor!==w)return e;var t={};for(var n in e)t[n]=_(e[n]);return t}function x(e,t,n){void 0===e&&(e="unnamed");var r=n.jss,o=_(t),i=r.plugins.onCreateRule(e,o,n);return i||(e[0],null)}var S=function(e,t){for(var n="",r=0;r<e.length&&"!important"!==e[r];r++)n&&(n+=t),n+=e[r];return n},E=function(e,t){if(void 0===t&&(t=!1),!Array.isArray(e))return e;var n="";if(Array.isArray(e[0]))for(var r=0;r<e.length&&"!important"!==e[r];r++)n&&(n+=", "),n+=S(e[r]," ");else n=S(e,", ");return t||"!important"!==e[e.length-1]||(n+=" !important"),n};function k(e,t){for(var n="",r=0;r<t;r++)n+="  ";return n+e}function O(e,t,n){void 0===n&&(n={});var r="";if(!t)return r;var o=n.indent,i=void 0===o?0:o,a=t.fallbacks;if(e&&i++,a)if(Array.isArray(a))for(var u=0;u<a.length;u++){var l=a[u];for(var c in l){var s=l[c];null!=s&&(r&&(r+="\n"),r+=""+k(c+": "+E(s)+";",i))}}else for(var f in a){var d=a[f];null!=d&&(r&&(r+="\n"),r+=""+k(f+": "+E(d)+";",i))}for(var p in t){var h=t[p];null!=h&&"fallbacks"!==p&&(r&&(r+="\n"),r+=""+k(p+": "+E(h)+";",i))}return(r||n.allowEmpty)&&e?(r&&(r="\n"+r+"\n"),k(e+" {"+r,--i)+k("}",i)):r}var C=/([[\].#*$><+~=|^:(),"'`\s])/g,P="undefined"!=typeof CSS&&CSS.escape,M=function(e){return P?P(e):e.replace(C,"\\$1")},A=function(){function e(e,t,n){this.type="style",this.key=void 0,this.isProcessed=!1,this.style=void 0,this.renderer=void 0,this.renderable=void 0,this.options=void 0;var r=n.sheet,o=n.Renderer;this.key=e,this.options=n,this.style=t,r?this.renderer=r.renderer:o&&(this.renderer=new o)}return e.prototype.prop=function(e,t,n){if(void 0===t)return this.style[e];var r=!!n&&n.force;if(!r&&this.style[e]===t)return this;var o=t;n&&!1===n.process||(o=this.options.jss.plugins.onChangeValue(t,e,this));var i=null==o||!1===o,a=e in this.style;if(i&&!a&&!r)return this;var u=i&&a;if(u?delete this.style[e]:this.style[e]=o,this.renderable&&this.renderer)return u?this.renderer.removeProperty(this.renderable,e):this.renderer.setProperty(this.renderable,e,o),this;var l=this.options.sheet;return l&&l.attached,this},e}(),N=function(e){function t(t,n,r){var o;(o=e.call(this,t,n,r)||this).selectorText=void 0,o.id=void 0,o.renderable=void 0;var i=r.selector,a=r.scoped,u=r.sheet,l=r.generateId;return i?o.selectorText=i:!1!==a&&(o.id=l(b(b(o)),u),o.selectorText="."+M(o.id)),o}(0,m.Z)(t,e);var n=t.prototype;return n.applyTo=function(e){var t=this.renderer;if(t){var n=this.toJSON();for(var r in n)t.setProperty(e,r,n[r])}return this},n.toJSON=function(){var e={};for(var t in this.style){var n=this.style[t];"object"!=typeof n?e[t]=n:Array.isArray(n)&&(e[t]=E(n))}return e},n.toString=function(e){var t=this.options.sheet,n=!!t&&t.options.link?(0,a.Z)({},e,{allowEmpty:!0}):e;return O(this.selectorText,this.style,n)},y(t,[{key:"selector",set:function(e){if(e!==this.selectorText){this.selectorText=e;var t=this.renderer,n=this.renderable;if(n&&t)t.setSelector(n,e)||t.replaceRule(n,this)}},get:function(){return this.selectorText}}]),t}(A),j={onCreateRule:function(e,t,n){return"@"===e[0]||n.parent&&"keyframes"===n.parent.type?null:new N(e,t,n)}},T={indent:1,children:!0},D=/@([\w-]+)/,R=function(){function e(e,t,n){this.type="conditional",this.at=void 0,this.key=void 0,this.query=void 0,this.rules=void 0,this.options=void 0,this.isProcessed=!1,this.renderable=void 0,this.key=e;var r=e.match(D);for(var o in this.at=r?r[1]:"unknown",this.query=n.name||"@"+this.at,this.options=n,this.rules=new ie((0,a.Z)({},n,{parent:this})),t)this.rules.add(o,t[o]);this.rules.process()}var t=e.prototype;return t.getRule=function(e){return this.rules.get(e)},t.indexOf=function(e){return this.rules.indexOf(e)},t.addRule=function(e,t,n){var r=this.rules.add(e,t,n);return r?(this.options.jss.plugins.onProcessRule(r),r):null},t.toString=function(e){if(void 0===e&&(e=T),null==e.indent&&(e.indent=T.indent),null==e.children&&(e.children=T.children),!1===e.children)return this.query+" {}";var t=this.rules.toString(e);return t?this.query+" {\n"+t+"\n}":""},e}(),L=/@media|@supports\s+/,z={onCreateRule:function(e,t,n){return L.test(e)?new R(e,t,n):null}},I={indent:1,children:!0},B=/@keyframes\s+([\w-]+)/,U=function(){function e(e,t,n){this.type="keyframes",this.at="@keyframes",this.key=void 0,this.name=void 0,this.id=void 0,this.rules=void 0,this.options=void 0,this.isProcessed=!1,this.renderable=void 0;var r=e.match(B);r&&r[1]?this.name=r[1]:this.name="noname",this.key=this.type+"-"+this.name,this.options=n;var o=n.scoped,i=n.sheet,u=n.generateId;for(var l in this.id=!1===o?this.name:M(u(this,i)),this.rules=new ie((0,a.Z)({},n,{parent:this})),t)this.rules.add(l,t[l],(0,a.Z)({},n,{parent:this}));this.rules.process()}return e.prototype.toString=function(e){if(void 0===e&&(e=I),null==e.indent&&(e.indent=I.indent),null==e.children&&(e.children=I.children),!1===e.children)return this.at+" "+this.id+" {}";var t=this.rules.toString(e);return t&&(t="\n"+t+"\n"),this.at+" "+this.id+" {"+t+"}"},e}(),F=/@keyframes\s+/,X=/\$([\w-]+)/g,H=function(e,t){return"string"==typeof e?e.replace(X,(function(e,n){return n in t?t[n]:e})):e},V=function(e,t,n){var r=e[t],o=H(r,n);o!==r&&(e[t]=o)},W={onCreateRule:function(e,t,n){return"string"==typeof e&&F.test(e)?new U(e,t,n):null},onProcessStyle:function(e,t,n){return"style"===t.type&&n?("animation-name"in e&&V(e,"animation-name",n.keyframes),"animation"in e&&V(e,"animation",n.keyframes),e):e},onChangeValue:function(e,t,n){var r=n.options.sheet;if(!r)return e;switch(t){case"animation":case"animation-name":return H(e,r.keyframes);default:return e}}},Y=function(e){function t(){for(var t,n=arguments.length,r=new Array(n),o=0;o<n;o++)r[o]=arguments[o];return(t=e.call.apply(e,[this].concat(r))||this).renderable=void 0,t}return(0,m.Z)(t,e),t.prototype.toString=function(e){var t=this.options.sheet,n=!!t&&t.options.link?(0,a.Z)({},e,{allowEmpty:!0}):e;return O(this.key,this.style,n)},t}(A),$={onCreateRule:function(e,t,n){return n.parent&&"keyframes"===n.parent.type?new Y(e,t,n):null}},Z=function(){function e(e,t,n){this.type="font-face",this.at="@font-face",this.key=void 0,this.style=void 0,this.options=void 0,this.isProcessed=!1,this.renderable=void 0,this.key=e,this.style=t,this.options=n}return e.prototype.toString=function(e){if(Array.isArray(this.style)){for(var t="",n=0;n<this.style.length;n++)t+=O(this.at,this.style[n]),this.style[n+1]&&(t+="\n");return t}return O(this.at,this.style,e)},e}(),q=/@font-face/,G={onCreateRule:function(e,t,n){return q.test(e)?new Z(e,t,n):null}},K=function(){function e(e,t,n){this.type="viewport",this.at="@viewport",this.key=void 0,this.style=void 0,this.options=void 0,this.isProcessed=!1,this.renderable=void 0,this.key=e,this.style=t,this.options=n}return e.prototype.toString=function(e){return O(this.key,this.style,e)},e}(),Q={onCreateRule:function(e,t,n){return"@viewport"===e||"@-ms-viewport"===e?new K(e,t,n):null}},J=function(){function e(e,t,n){this.type="simple",this.key=void 0,this.value=void 0,this.options=void 0,this.isProcessed=!1,this.renderable=void 0,this.key=e,this.value=t,this.options=n}return e.prototype.toString=function(e){if(Array.isArray(this.value)){for(var t="",n=0;n<this.value.length;n++)t+=this.key+" "+this.value[n]+";",this.value[n+1]&&(t+="\n");return t}return this.key+" "+this.value+";"},e}(),ee={"@charset":!0,"@import":!0,"@namespace":!0},te={onCreateRule:function(e,t,n){return e in ee?new J(e,t,n):null}},ne=[j,z,W,$,G,Q,te],re={process:!0},oe={force:!0,process:!0},ie=function(){function e(e){this.map={},this.raw={},this.index=[],this.counter=0,this.options=void 0,this.classes=void 0,this.keyframes=void 0,this.options=e,this.classes=e.classes,this.keyframes=e.keyframes}var t=e.prototype;return t.add=function(e,t,n){var r=this.options,o=r.parent,i=r.sheet,u=r.jss,l=r.Renderer,c=r.generateId,s=r.scoped,f=(0,a.Z)({classes:this.classes,parent:o,sheet:i,jss:u,Renderer:l,generateId:c,scoped:s,name:e,keyframes:this.keyframes,selector:void 0},n),d=e;e in this.raw&&(d=e+"-d"+this.counter++),this.raw[d]=t,d in this.classes&&(f.selector="."+M(this.classes[d]));var p=x(d,t,f);if(!p)return null;this.register(p);var h=void 0===f.index?this.index.length:f.index;return this.index.splice(h,0,p),p},t.get=function(e){return this.map[e]},t.remove=function(e){this.unregister(e),delete this.raw[e.key],this.index.splice(this.index.indexOf(e),1)},t.indexOf=function(e){return this.index.indexOf(e)},t.process=function(){var e=this.options.jss.plugins;this.index.slice(0).forEach(e.onProcessRule,e)},t.register=function(e){this.map[e.key]=e,e instanceof N?(this.map[e.selector]=e,e.id&&(this.classes[e.key]=e.id)):e instanceof U&&this.keyframes&&(this.keyframes[e.name]=e.id)},t.unregister=function(e){delete this.map[e.key],e instanceof N?(delete this.map[e.selector],delete this.classes[e.key]):e instanceof U&&delete this.keyframes[e.name]},t.update=function(){var e,t,n;if("string"==typeof(arguments.length<=0?void 0:arguments[0])?(e=arguments.length<=0?void 0:arguments[0],t=arguments.length<=1?void 0:arguments[1],n=arguments.length<=2?void 0:arguments[2]):(t=arguments.length<=0?void 0:arguments[0],n=arguments.length<=1?void 0:arguments[1],e=null),e)this.updateOne(this.map[e],t,n);else for(var r=0;r<this.index.length;r++)this.updateOne(this.index[r],t,n)},t.updateOne=function(t,n,r){void 0===r&&(r=re);var o=this.options,i=o.jss.plugins,a=o.sheet;if(t.rules instanceof e)t.rules.update(n,r);else{var u=t,l=u.style;if(i.onUpdate(n,t,a,r),r.process&&l&&l!==u.style){for(var c in i.onProcessStyle(u.style,u,a),u.style){var s=u.style[c];s!==l[c]&&u.prop(c,s,oe)}for(var f in l){var d=u.style[f],p=l[f];null==d&&d!==p&&u.prop(f,null,oe)}}}},t.toString=function(e){for(var t="",n=this.options.sheet,r=!!n&&n.options.link,o=0;o<this.index.length;o++){var i=this.index[o].toString(e);(i||r)&&(t&&(t+="\n"),t+=i)}return t},e}(),ae=function(){function e(e,t){for(var n in this.options=void 0,this.deployed=void 0,this.attached=void 0,this.rules=void 0,this.renderer=void 0,this.classes=void 0,this.keyframes=void 0,this.queue=void 0,this.attached=!1,this.deployed=!1,this.classes={},this.keyframes={},this.options=(0,a.Z)({},t,{sheet:this,parent:this,classes:this.classes,keyframes:this.keyframes}),t.Renderer&&(this.renderer=new t.Renderer(this)),this.rules=new ie(this.options),e)this.rules.add(n,e[n]);this.rules.process()}var t=e.prototype;return t.attach=function(){return this.attached||(this.renderer&&this.renderer.attach(),this.attached=!0,this.deployed||this.deploy()),this},t.detach=function(){return this.attached?(this.renderer&&this.renderer.detach(),this.attached=!1,this):this},t.addRule=function(e,t,n){var r=this.queue;this.attached&&!r&&(this.queue=[]);var o=this.rules.add(e,t,n);return o?(this.options.jss.plugins.onProcessRule(o),this.attached?this.deployed?(r?r.push(o):(this.insertRule(o),this.queue&&(this.queue.forEach(this.insertRule,this),this.queue=void 0)),o):o:(this.deployed=!1,o)):null},t.insertRule=function(e){this.renderer&&this.renderer.insertRule(e)},t.addRules=function(e,t){var n=[];for(var r in e){var o=this.addRule(r,e[r],t);o&&n.push(o)}return n},t.getRule=function(e){return this.rules.get(e)},t.deleteRule=function(e){var t="object"==typeof e?e:this.rules.get(e);return!(!t||this.attached&&!t.renderable)&&(this.rules.remove(t),!(this.attached&&t.renderable&&this.renderer)||this.renderer.deleteRule(t.renderable))},t.indexOf=function(e){return this.rules.indexOf(e)},t.deploy=function(){return this.renderer&&this.renderer.deploy(),this.deployed=!0,this},t.update=function(){var e;return(e=this.rules).update.apply(e,arguments),this},t.updateOne=function(e,t,n){return this.rules.updateOne(e,t,n),this},t.toString=function(e){return this.rules.toString(e)},e}(),ue=function(){function e(){this.plugins={internal:[],external:[]},this.registry=void 0}var t=e.prototype;return t.onCreateRule=function(e,t,n){for(var r=0;r<this.registry.onCreateRule.length;r++){var o=this.registry.onCreateRule[r](e,t,n);if(o)return o}return null},t.onProcessRule=function(e){if(!e.isProcessed){for(var t=e.options.sheet,n=0;n<this.registry.onProcessRule.length;n++)this.registry.onProcessRule[n](e,t);e.style&&this.onProcessStyle(e.style,e,t),e.isProcessed=!0}},t.onProcessStyle=function(e,t,n){for(var r=0;r<this.registry.onProcessStyle.length;r++)t.style=this.registry.onProcessStyle[r](t.style,t,n)},t.onProcessSheet=function(e){for(var t=0;t<this.registry.onProcessSheet.length;t++)this.registry.onProcessSheet[t](e)},t.onUpdate=function(e,t,n,r){for(var o=0;o<this.registry.onUpdate.length;o++)this.registry.onUpdate[o](e,t,n,r)},t.onChangeValue=function(e,t,n){for(var r=e,o=0;o<this.registry.onChangeValue.length;o++)r=this.registry.onChangeValue[o](r,t,n);return r},t.use=function(e,t){void 0===t&&(t={queue:"external"});var n=this.plugins[t.queue];-1===n.indexOf(e)&&(n.push(e),this.registry=[].concat(this.plugins.external,this.plugins.internal).reduce((function(e,t){for(var n in t)n in e&&e[n].push(t[n]);return e}),{onCreateRule:[],onProcessRule:[],onProcessStyle:[],onProcessSheet:[],onChangeValue:[],onUpdate:[]}))},e}(),le=function(){function e(){this.registry=[]}var t=e.prototype;return t.add=function(e){var t=this.registry,n=e.options.index;if(-1===t.indexOf(e))if(0===t.length||n>=this.index)t.push(e);else for(var r=0;r<t.length;r++)if(t[r].options.index>n)return void t.splice(r,0,e)},t.reset=function(){this.registry=[]},t.remove=function(e){var t=this.registry.indexOf(e);this.registry.splice(t,1)},t.toString=function(e){for(var t=void 0===e?{}:e,n=t.attached,r=(0,l.Z)(t,["attached"]),o="",i=0;i<this.registry.length;i++){var a=this.registry[i];null!=n&&a.attached!==n||(o&&(o+="\n"),o+=a.toString(r))}return o},y(e,[{key:"index",get:function(){return 0===this.registry.length?0:this.registry[this.registry.length-1].options.index}}]),e}(),ce=new le,se="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window&&window.Math===Math?window:"undefined"!=typeof self&&self.Math===Math?self:Function("return this")(),fe="2f1acc6c3a606b082e5eef5e54414ffb";null==se[fe]&&(se[fe]=0);var de=se[fe]++,pe=function(e){void 0===e&&(e={});var t=0;return function(n,r){t+=1;var o="",i="";return r&&(r.options.classNamePrefix&&(i=r.options.classNamePrefix),null!=r.options.jss.id&&(o=String(r.options.jss.id))),e.minify?""+(i||"c")+de+o+t:i+n.key+"-"+de+(o?"-"+o:"")+"-"+t}},he=function(e){var t;return function(){return t||(t=e()),t}},ve=function(e,t){try{return e.attributeStyleMap?e.attributeStyleMap.get(t):e.style.getPropertyValue(t)}catch(e){return""}},ge=function(e,t,n){try{var r=n;if(Array.isArray(n)&&(r=E(n,!0),"!important"===n[n.length-1]))return e.style.setProperty(t,r,"important"),!0;e.attributeStyleMap?e.attributeStyleMap.set(t,r):e.style.setProperty(t,r)}catch(e){return!1}return!0},ye=function(e,t){try{e.attributeStyleMap?e.attributeStyleMap.delete(t):e.style.removeProperty(t)}catch(e){}},me=function(e,t){return e.selectorText=t,e.selectorText===t},be=he((function(){return document.querySelector("head")}));function we(e){var t=ce.registry;if(t.length>0){var n=function(e,t){for(var n=0;n<e.length;n++){var r=e[n];if(r.attached&&r.options.index>t.index&&r.options.insertionPoint===t.insertionPoint)return r}return null}(t,e);if(n&&n.renderer)return{parent:n.renderer.element.parentNode,node:n.renderer.element};if(n=function(e,t){for(var n=e.length-1;n>=0;n--){var r=e[n];if(r.attached&&r.options.insertionPoint===t.insertionPoint)return r}return null}(t,e),n&&n.renderer)return{parent:n.renderer.element.parentNode,node:n.renderer.element.nextSibling}}var r=e.insertionPoint;if(r&&"string"==typeof r){var o=function(e){for(var t=be(),n=0;n<t.childNodes.length;n++){var r=t.childNodes[n];if(8===r.nodeType&&r.nodeValue.trim()===e)return r}return null}(r);if(o)return{parent:o.parentNode,node:o.nextSibling}}return!1}var _e=he((function(){var e=document.querySelector('meta[property="csp-nonce"]');return e?e.getAttribute("content"):null})),xe=function(e,t,n){try{if("insertRule"in e)e.insertRule(t,n);else if("appendRule"in e){e.appendRule(t)}}catch(e){return!1}return e.cssRules[n]},Se=function(e,t){var n=e.cssRules.length;return void 0===t||t>n?n:t},Ee=function(){function e(e){this.getPropertyValue=ve,this.setProperty=ge,this.removeProperty=ye,this.setSelector=me,this.element=void 0,this.sheet=void 0,this.hasInsertedRules=!1,this.cssRules=[],e&&ce.add(e),this.sheet=e;var t=this.sheet?this.sheet.options:{},n=t.media,r=t.meta,o=t.element;this.element=o||function(){var e=document.createElement("style");return e.textContent="\n",e}(),this.element.setAttribute("data-jss",""),n&&this.element.setAttribute("media",n),r&&this.element.setAttribute("data-meta",r);var i=_e();i&&this.element.setAttribute("nonce",i)}var t=e.prototype;return t.attach=function(){if(!this.element.parentNode&&this.sheet){!function(e,t){var n=t.insertionPoint,r=we(t);if(!1!==r&&r.parent)r.parent.insertBefore(e,r.node);else if(n&&"number"==typeof n.nodeType){var o=n,i=o.parentNode;i&&i.insertBefore(e,o.nextSibling)}else be().appendChild(e)}(this.element,this.sheet.options);var e=Boolean(this.sheet&&this.sheet.deployed);this.hasInsertedRules&&e&&(this.hasInsertedRules=!1,this.deploy())}},t.detach=function(){if(this.sheet){var e=this.element.parentNode;e&&e.removeChild(this.element),this.sheet.options.link&&(this.cssRules=[],this.element.textContent="\n")}},t.deploy=function(){var e=this.sheet;e&&(e.options.link?this.insertRules(e.rules):this.element.textContent="\n"+e.toString()+"\n")},t.insertRules=function(e,t){for(var n=0;n<e.index.length;n++)this.insertRule(e.index[n],n,t)},t.insertRule=function(e,t,n){if(void 0===n&&(n=this.element.sheet),e.rules){var r=e,o=n;if("conditional"===e.type||"keyframes"===e.type){var i=Se(n,t);if(!1===(o=xe(n,r.toString({children:!1}),i)))return!1;this.refCssRule(e,i,o)}return this.insertRules(r.rules,o),o}var a=e.toString();if(!a)return!1;var u=Se(n,t),l=xe(n,a,u);return!1!==l&&(this.hasInsertedRules=!0,this.refCssRule(e,u,l),l)},t.refCssRule=function(e,t,n){e.renderable=n,e.options.parent instanceof ae&&(this.cssRules[t]=n)},t.deleteRule=function(e){var t=this.element.sheet,n=this.indexOf(e);return-1!==n&&(t.deleteRule(n),this.cssRules.splice(n,1),!0)},t.indexOf=function(e){return this.cssRules.indexOf(e)},t.replaceRule=function(e,t){var n=this.indexOf(e);return-1!==n&&(this.element.sheet.deleteRule(n),this.cssRules.splice(n,1),this.insertRule(t,n))},t.getRules=function(){return this.element.sheet.cssRules},e}(),ke=0,Oe=function(){function e(e){this.id=ke++,this.version="10.6.0",this.plugins=new ue,this.options={id:{minify:!1},createGenerateId:pe,Renderer:v?Ee:null,plugins:[]},this.generateId=pe({minify:!1});for(var t=0;t<ne.length;t++)this.plugins.use(ne[t],{queue:"internal"});this.setup(e)}var t=e.prototype;return t.setup=function(e){return void 0===e&&(e={}),e.createGenerateId&&(this.options.createGenerateId=e.createGenerateId),e.id&&(this.options.id=(0,a.Z)({},this.options.id,e.id)),(e.createGenerateId||e.id)&&(this.generateId=this.options.createGenerateId(this.options.id)),null!=e.insertionPoint&&(this.options.insertionPoint=e.insertionPoint),"Renderer"in e&&(this.options.Renderer=e.Renderer),e.plugins&&this.use.apply(this,e.plugins),this},t.createStyleSheet=function(e,t){void 0===t&&(t={});var n=t.index;"number"!=typeof n&&(n=0===ce.index?0:ce.index+1);var r=new ae(e,(0,a.Z)({},t,{jss:this,generateId:t.generateId||this.generateId,insertionPoint:this.options.insertionPoint,Renderer:this.options.Renderer,index:n}));return this.plugins.onProcessSheet(r),r},t.removeStyleSheet=function(e){return e.detach(),ce.remove(e),this},t.createRule=function(e,t,n){if(void 0===t&&(t={}),void 0===n&&(n={}),"object"==typeof e)return this.createRule(void 0,e,t);var r=(0,a.Z)({},n,{name:e,jss:this,Renderer:this.options.Renderer});r.generateId||(r.generateId=this.generateId),r.classes||(r.classes={}),r.keyframes||(r.keyframes={});var o=x(e,t,r);return o&&this.plugins.onProcessRule(o),o},t.use=function(){for(var e=this,t=arguments.length,n=new Array(t),r=0;r<t;r++)n[r]=arguments[r];return n.forEach((function(t){e.plugins.use(t)})),this},e}();function Ce(e){var t=null;for(var n in e){var r=e[n],o=typeof r;if("function"===o)t||(t={}),t[n]=r;else if("object"===o&&null!==r&&!Array.isArray(r)){var i=Ce(r);i&&(t||(t={}),t[n]=i)}}return t}var Pe="object"==typeof CSS&&null!=CSS&&"number"in CSS,Me=function(e){return new Oe(e)};Me();function Ae(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.baseClasses,n=e.newClasses;e.Component;if(!n)return t;var r=(0,a.Z)({},t);return Object.keys(n).forEach((function(e){n[e]&&(r[e]="".concat(t[e]," ").concat(n[e]))})),r}var Ne={set:function(e,t,n,r){var o=e.get(t);o||(o=new Map,e.set(t,o)),o.set(n,r)},get:function(e,t,n){var r=e.get(t);return r?r.get(n):void 0},delete:function(e,t,n){e.get(t).delete(n)}};const je=Ne;const Te=u.createContext(null);function De(){return u.useContext(Te)}const Re="function"==typeof Symbol&&Symbol.for?Symbol.for("mui.nested"):"__THEME_NESTED__";var Le=["checked","disabled","error","focused","focusVisible","required","expanded","selected"];var ze=Date.now(),Ie="fnValues"+ze,Be="fnStyle"+ ++ze;const Ue=function(){return{onCreateRule:function(e,t,n){if("function"!=typeof t)return null;var r=x(e,{},n);return r[Be]=t,r},onProcessStyle:function(e,t){if(Ie in t||Be in t)return e;var n={};for(var r in e){var o=e[r];"function"==typeof o&&(delete e[r],n[r]=o)}return t[Ie]=n,e},onUpdate:function(e,t,n,r){var o=t,i=o[Be];i&&(o.style=i(e)||{});var a=o[Ie];if(a)for(var u in a)o.prop(u,a[u](e),r)}}};var Fe="@global",Xe="@global ",He=function(){function e(e,t,n){for(var r in this.type="global",this.at=Fe,this.rules=void 0,this.options=void 0,this.key=void 0,this.isProcessed=!1,this.key=e,this.options=n,this.rules=new ie((0,a.Z)({},n,{parent:this})),t)this.rules.add(r,t[r]);this.rules.process()}var t=e.prototype;return t.getRule=function(e){return this.rules.get(e)},t.addRule=function(e,t,n){var r=this.rules.add(e,t,n);return r&&this.options.jss.plugins.onProcessRule(r),r},t.indexOf=function(e){return this.rules.indexOf(e)},t.toString=function(){return this.rules.toString()},e}(),Ve=function(){function e(e,t,n){this.type="global",this.at=Fe,this.options=void 0,this.rule=void 0,this.isProcessed=!1,this.key=void 0,this.key=e,this.options=n;var r=e.substr(Xe.length);this.rule=n.jss.createRule(r,t,(0,a.Z)({},n,{parent:this}))}return e.prototype.toString=function(e){return this.rule?this.rule.toString(e):""},e}(),We=/\s*,\s*/g;function Ye(e,t){for(var n=e.split(We),r="",o=0;o<n.length;o++)r+=t+" "+n[o].trim(),n[o+1]&&(r+=", ");return r}const $e=function(){return{onCreateRule:function(e,t,n){if(!e)return null;if(e===Fe)return new He(e,t,n);if("@"===e[0]&&e.substr(0,Xe.length)===Xe)return new Ve(e,t,n);var r=n.parent;return r&&("global"===r.type||r.options.parent&&"global"===r.options.parent.type)&&(n.scoped=!1),!1===n.scoped&&(n.selector=e),null},onProcessRule:function(e,t){"style"===e.type&&t&&(function(e,t){var n=e.options,r=e.style,o=r?r[Fe]:null;if(o){for(var i in o)t.addRule(i,o[i],(0,a.Z)({},n,{selector:Ye(i,e.selector)}));delete r[Fe]}}(e,t),function(e,t){var n=e.options,r=e.style;for(var o in r)if("@"===o[0]&&o.substr(0,Fe.length)===Fe){var i=Ye(o.substr(Fe.length),e.selector);t.addRule(i,r[o],(0,a.Z)({},n,{selector:i})),delete r[o]}}(e,t))}}};var Ze=/\s*,\s*/g,qe=/&/g,Ge=/\$([\w-]+)/g;const Ke=function(){function e(e,t){return function(n,r){var o=e.getRule(r)||t&&t.getRule(r);return o?(o=o).selector:r}}function t(e,t){for(var n=t.split(Ze),r=e.split(Ze),o="",i=0;i<n.length;i++)for(var a=n[i],u=0;u<r.length;u++){var l=r[u];o&&(o+=", "),o+=-1!==l.indexOf("&")?l.replace(qe,a):a+" "+l}return o}function n(e,t,n){if(n)return(0,a.Z)({},n,{index:n.index+1});var r=e.options.nestingLevel;r=void 0===r?1:r+1;var o=(0,a.Z)({},e.options,{nestingLevel:r,index:t.indexOf(e)+1});return delete o.name,o}return{onProcessStyle:function(r,o,i){if("style"!==o.type)return r;var u,l,c=o,s=c.options.parent;for(var f in r){var d=-1!==f.indexOf("&"),p="@"===f[0];if(d||p){if(u=n(c,s,u),d){var h=t(f,c.selector);l||(l=e(s,i)),h=h.replace(Ge,l),s.addRule(h,r[f],(0,a.Z)({},u,{selector:h}))}else p&&s.addRule(f,{},u).addRule(c.key,r[f],{selector:c.selector});delete r[f]}}return r}}};var Qe=/[A-Z]/g,Je=/^ms-/,et={};function tt(e){return"-"+e.toLowerCase()}const nt=function(e){if(et.hasOwnProperty(e))return et[e];var t=e.replace(Qe,tt);return et[e]=Je.test(t)?"-"+t:t};function rt(e){var t={};for(var n in e){t[0===n.indexOf("--")?n:nt(n)]=e[n]}return e.fallbacks&&(Array.isArray(e.fallbacks)?t.fallbacks=e.fallbacks.map(rt):t.fallbacks=rt(e.fallbacks)),t}const ot=function(){return{onProcessStyle:function(e){if(Array.isArray(e)){for(var t=0;t<e.length;t++)e[t]=rt(e[t]);return e}return rt(e)},onChangeValue:function(e,t,n){if(0===t.indexOf("--"))return e;var r=nt(t);return t===r?e:(n.prop(r,e),null)}}};var it=Pe&&CSS?CSS.px:"px",at=Pe&&CSS?CSS.ms:"ms",ut=Pe&&CSS?CSS.percent:"%";function lt(e){var t=/(-[a-z])/g,n=function(e){return e[1].toUpperCase()},r={};for(var o in e)r[o]=e[o],r[o.replace(t,n)]=e[o];return r}var ct=lt({"animation-delay":at,"animation-duration":at,"background-position":it,"background-position-x":it,"background-position-y":it,"background-size":it,border:it,"border-bottom":it,"border-bottom-left-radius":it,"border-bottom-right-radius":it,"border-bottom-width":it,"border-left":it,"border-left-width":it,"border-radius":it,"border-right":it,"border-right-width":it,"border-top":it,"border-top-left-radius":it,"border-top-right-radius":it,"border-top-width":it,"border-width":it,"border-block":it,"border-block-end":it,"border-block-end-width":it,"border-block-start":it,"border-block-start-width":it,"border-block-width":it,"border-inline":it,"border-inline-end":it,"border-inline-end-width":it,"border-inline-start":it,"border-inline-start-width":it,"border-inline-width":it,"border-start-start-radius":it,"border-start-end-radius":it,"border-end-start-radius":it,"border-end-end-radius":it,margin:it,"margin-bottom":it,"margin-left":it,"margin-right":it,"margin-top":it,"margin-block":it,"margin-block-end":it,"margin-block-start":it,"margin-inline":it,"margin-inline-end":it,"margin-inline-start":it,padding:it,"padding-bottom":it,"padding-left":it,"padding-right":it,"padding-top":it,"padding-block":it,"padding-block-end":it,"padding-block-start":it,"padding-inline":it,"padding-inline-end":it,"padding-inline-start":it,"mask-position-x":it,"mask-position-y":it,"mask-size":it,height:it,width:it,"min-height":it,"max-height":it,"min-width":it,"max-width":it,bottom:it,left:it,top:it,right:it,inset:it,"inset-block":it,"inset-block-end":it,"inset-block-start":it,"inset-inline":it,"inset-inline-end":it,"inset-inline-start":it,"box-shadow":it,"text-shadow":it,"column-gap":it,"column-rule":it,"column-rule-width":it,"column-width":it,"font-size":it,"font-size-delta":it,"letter-spacing":it,"text-decoration-thickness":it,"text-indent":it,"text-stroke":it,"text-stroke-width":it,"word-spacing":it,motion:it,"motion-offset":it,outline:it,"outline-offset":it,"outline-width":it,perspective:it,"perspective-origin-x":ut,"perspective-origin-y":ut,"transform-origin":ut,"transform-origin-x":ut,"transform-origin-y":ut,"transform-origin-z":ut,"transition-delay":at,"transition-duration":at,"vertical-align":it,"flex-basis":it,"shape-margin":it,size:it,gap:it,grid:it,"grid-gap":it,"row-gap":it,"grid-row-gap":it,"grid-column-gap":it,"grid-template-rows":it,"grid-template-columns":it,"grid-auto-rows":it,"grid-auto-columns":it,"box-shadow-x":it,"box-shadow-y":it,"box-shadow-blur":it,"box-shadow-spread":it,"font-line-height":it,"text-shadow-x":it,"text-shadow-y":it,"text-shadow-blur":it});function st(e,t,n){if(null==t)return t;if(Array.isArray(t))for(var r=0;r<t.length;r++)t[r]=st(e,t[r],n);else if("object"==typeof t)if("fallbacks"===e)for(var o in t)t[o]=st(o,t[o],n);else for(var i in t)t[i]=st(e+"-"+i,t[i],n);else if("number"==typeof t&&!1===isNaN(t)){var a=n[e]||ct[e];return!a||0===t&&a===it?t.toString():"function"==typeof a?a(t).toString():""+t+a}return t}const ft=function(e){void 0===e&&(e={});var t=lt(e);return{onProcessStyle:function(e,n){if("style"!==n.type)return e;for(var r in e)e[r]=st(r,e[r],t);return e},onChangeValue:function(e,n){return st(n,e,t)}}};function dt(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function pt(e,t){if(e){if("string"==typeof e)return dt(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?dt(e,t):void 0}}function ht(e){return function(e){if(Array.isArray(e))return dt(e)}(e)||function(e){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(e))return Array.from(e)}(e)||pt(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}var vt="",gt="",yt="",mt="",bt=v&&"ontouchstart"in document.documentElement;if(v){var wt={Moz:"-moz-",ms:"-ms-",O:"-o-",Webkit:"-webkit-"},_t=document.createElement("p").style;for(var xt in wt)if(xt+"Transform"in _t){vt=xt,gt=wt[xt];break}"Webkit"===vt&&"msHyphens"in _t&&(vt="ms",gt=wt.ms,mt="edge"),"Webkit"===vt&&"-apple-trailing-word"in _t&&(yt="apple")}var St=vt,Et=gt,kt=yt,Ot=mt,Ct=bt;var Pt={noPrefill:["appearance"],supportedProperty:function(e){return"appearance"===e&&("ms"===St?"-webkit-"+e:Et+e)}},Mt={noPrefill:["color-adjust"],supportedProperty:function(e){return"color-adjust"===e&&("Webkit"===St?Et+"print-"+e:e)}},At=/[-\s]+(.)?/g;function Nt(e,t){return t?t.toUpperCase():""}function jt(e){return e.replace(At,Nt)}function Tt(e){return jt("-"+e)}var Dt,Rt={noPrefill:["mask"],supportedProperty:function(e,t){if(!/^mask/.test(e))return!1;if("Webkit"===St){var n="mask-image";if(jt(n)in t)return e;if(St+Tt(n)in t)return Et+e}return e}},Lt={noPrefill:["text-orientation"],supportedProperty:function(e){return"text-orientation"===e&&("apple"!==kt||Ct?e:Et+e)}},zt={noPrefill:["transform"],supportedProperty:function(e,t,n){return"transform"===e&&(n.transform?e:Et+e)}},It={noPrefill:["transition"],supportedProperty:function(e,t,n){return"transition"===e&&(n.transition?e:Et+e)}},Bt={noPrefill:["writing-mode"],supportedProperty:function(e){return"writing-mode"===e&&("Webkit"===St||"ms"===St&&"edge"!==Ot?Et+e:e)}},Ut={noPrefill:["user-select"],supportedProperty:function(e){return"user-select"===e&&("Moz"===St||"ms"===St||"apple"===kt?Et+e:e)}},Ft={supportedProperty:function(e,t){return!!/^break-/.test(e)&&("Webkit"===St?"WebkitColumn"+Tt(e)in t&&Et+"column-"+e:"Moz"===St&&("page"+Tt(e)in t&&"page-"+e))}},Xt={supportedProperty:function(e,t){if(!/^(border|margin|padding)-inline/.test(e))return!1;if("Moz"===St)return e;var n=e.replace("-inline","");return St+Tt(n)in t&&Et+n}},Ht={supportedProperty:function(e,t){return jt(e)in t&&e}},Vt={supportedProperty:function(e,t){var n=Tt(e);return"-"===e[0]||"-"===e[0]&&"-"===e[1]?e:St+n in t?Et+e:"Webkit"!==St&&"Webkit"+n in t&&"-webkit-"+e}},Wt={supportedProperty:function(e){return"scroll-snap"===e.substring(0,11)&&("ms"===St?""+Et+e:e)}},Yt={supportedProperty:function(e){return"overscroll-behavior"===e&&("ms"===St?Et+"scroll-chaining":e)}},$t={"flex-grow":"flex-positive","flex-shrink":"flex-negative","flex-basis":"flex-preferred-size","justify-content":"flex-pack",order:"flex-order","align-items":"flex-align","align-content":"flex-line-pack"},Zt={supportedProperty:function(e,t){var n=$t[e];return!!n&&(St+Tt(n)in t&&Et+n)}},qt={flex:"box-flex","flex-grow":"box-flex","flex-direction":["box-orient","box-direction"],order:"box-ordinal-group","align-items":"box-align","flex-flow":["box-orient","box-direction"],"justify-content":"box-pack"},Gt=Object.keys(qt),Kt=function(e){return Et+e},Qt={supportedProperty:function(e,t,n){var r=n.multiple;if(Gt.indexOf(e)>-1){var o=qt[e];if(!Array.isArray(o))return St+Tt(o)in t&&Et+o;if(!r)return!1;for(var i=0;i<o.length;i++)if(!(St+Tt(o[0])in t))return!1;return o.map(Kt)}return!1}},Jt=[Pt,Mt,Rt,Lt,zt,It,Bt,Ut,Ft,Xt,Ht,Vt,Wt,Yt,Zt,Qt],en=Jt.filter((function(e){return e.supportedProperty})).map((function(e){return e.supportedProperty})),tn=Jt.filter((function(e){return e.noPrefill})).reduce((function(e,t){return e.push.apply(e,ht(t.noPrefill)),e}),[]),nn={};if(v){Dt=document.createElement("p");var rn=window.getComputedStyle(document.documentElement,"");for(var on in rn)isNaN(on)||(nn[rn[on]]=rn[on]);tn.forEach((function(e){return delete nn[e]}))}function an(e,t){if(void 0===t&&(t={}),!Dt)return e;if(null!=nn[e])return nn[e];"transition"!==e&&"transform"!==e||(t[e]=e in Dt.style);for(var n=0;n<en.length&&(nn[e]=en[n](e,Dt.style,t),!nn[e]);n++);try{Dt.style[e]=""}catch(e){return!1}return nn[e]}var un,ln={},cn={transition:1,"transition-property":1,"-webkit-transition":1,"-webkit-transition-property":1},sn=/(^\s*[\w-]+)|, (\s*[\w-]+)(?![^()]*\))/g;function fn(e,t,n){if("var"===t)return"var";if("all"===t)return"all";if("all"===n)return", all";var r=t?an(t):", "+an(n);return r||(t||n)}function dn(e,t){var n=t;if(!un||"content"===e)return t;if("string"!=typeof n||!isNaN(parseInt(n,10)))return n;var r=e+n;if(null!=ln[r])return ln[r];try{un.style[e]=n}catch(e){return ln[r]=!1,!1}if(cn[e])n=n.replace(sn,fn);else if(""===un.style[e]&&("-ms-flex"===(n=Et+n)&&(un.style[e]="-ms-flexbox"),un.style[e]=n,""===un.style[e]))return ln[r]=!1,!1;return un.style[e]="",ln[r]=n,ln[r]}v&&(un=document.createElement("p"));const pn=function(){function e(t){for(var n in t){var r=t[n];if("fallbacks"===n&&Array.isArray(r))t[n]=r.map(e);else{var o=!1,i=an(n);i&&i!==n&&(o=!0);var a=!1,u=dn(i,E(r));u&&u!==r&&(a=!0),(o||a)&&(o&&delete t[n],t[i||n]=u||r)}}return t}return{onProcessRule:function(e){if("keyframes"===e.type){var t=e;t.at=function(e){return"-"===e[1]||"ms"===St?e:"@"+Et+"keyframes"+e.substr(10)}(t.at)}},onProcessStyle:function(t,n){return"style"!==n.type?t:e(t)},onChangeValue:function(e,t){return dn(t,E(e))||e}}};const hn=function(){var e=function(e,t){return e.length===t.length?e>t?1:-1:e.length-t.length};return{onProcessStyle:function(t,n){if("style"!==n.type)return t;for(var r={},o=Object.keys(t).sort(e),i=0;i<o.length;i++)r[o[i]]=t[o[i]];return r}}};var vn=Me({plugins:[Ue(),$e(),Ke(),ot(),ft(),"undefined"==typeof window?null:pn(),hn()]}),gn=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.disableGlobal,n=void 0!==t&&t,r=e.productionPrefix,o=void 0===r?"jss":r,i=e.seed,a=void 0===i?"":i,u=""===a?"":"".concat(a,"-"),l=0,c=function(){return l+=1};return function(e,t){var r=t.options.name;if(r&&0===r.indexOf("Mui")&&!t.options.link&&!n){if(-1!==Le.indexOf(e.key))return"Mui-".concat(e.key);var i="".concat(u).concat(r,"-").concat(e.key);return t.options.theme[Re]&&""===a?"".concat(i,"-").concat(c()):i}return"".concat(u).concat(o).concat(c())}}(),yn={disableGeneration:!1,generateClassName:gn,jss:vn,sheetsCache:null,sheetsManager:new Map,sheetsRegistry:null},mn=u.createContext(yn);var bn=-1e9;function wn(){return bn+=1}function _n(e){return _n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},_n(e)}function xn(e){return e&&"object"===_n(e)&&e.constructor===Object}function Sn(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{clone:!0},r=n.clone?(0,a.Z)({},e):e;return xn(e)&&xn(t)&&Object.keys(t).forEach((function(o){"__proto__"!==o&&(xn(t[o])&&o in e?r[o]=Sn(e[o],t[o],n):r[o]=t[o])})),r}function En(e){var t="function"==typeof e;return{create:function(n,r){var o;try{o=t?e(n):e}catch(e){throw e}if(!r||!n.overrides||!n.overrides[r])return o;var i=n.overrides[r],u=(0,a.Z)({},o);return Object.keys(i).forEach((function(e){u[e]=Sn(u[e],i[e])})),u},options:{}}}const kn={};function On(e,t,n){var r=e.state;if(e.stylesOptions.disableGeneration)return t||{};r.cacheClasses||(r.cacheClasses={value:null,lastProp:null,lastJSS:{}});var o=!1;return r.classes!==r.cacheClasses.lastJSS&&(r.cacheClasses.lastJSS=r.classes,o=!0),t!==r.cacheClasses.lastProp&&(r.cacheClasses.lastProp=t,o=!0),o&&(r.cacheClasses.value=Ae({baseClasses:r.cacheClasses.lastJSS,newClasses:t,Component:n})),r.cacheClasses.value}function Cn(e,t){var n=e.state,r=e.theme,o=e.stylesOptions,i=e.stylesCreator,u=e.name;if(!o.disableGeneration){var l=je.get(o.sheetsManager,i,r);l||(l={refs:0,staticSheet:null,dynamicStyles:null},je.set(o.sheetsManager,i,r,l));var c=(0,a.Z)({},i.options,o,{theme:r,flip:"boolean"==typeof o.flip?o.flip:"rtl"===r.direction});c.generateId=c.serverGenerateClassName||c.generateClassName;var s=o.sheetsRegistry;if(0===l.refs){var f;o.sheetsCache&&(f=je.get(o.sheetsCache,i,r));var d=i.create(r,u);f||((f=o.jss.createStyleSheet(d,(0,a.Z)({link:!1},c))).attach(),o.sheetsCache&&je.set(o.sheetsCache,i,r,f)),s&&s.add(f),l.staticSheet=f,l.dynamicStyles=Ce(d)}if(l.dynamicStyles){var p=o.jss.createStyleSheet(l.dynamicStyles,(0,a.Z)({link:!0},c));p.update(t),p.attach(),n.dynamicSheet=p,n.classes=Ae({baseClasses:l.staticSheet.classes,newClasses:p.classes}),s&&s.add(p)}else n.classes=l.staticSheet.classes;l.refs+=1}}function Pn(e,t){var n=e.state;n.dynamicSheet&&n.dynamicSheet.update(t)}function Mn(e){var t=e.state,n=e.theme,r=e.stylesOptions,o=e.stylesCreator;if(!r.disableGeneration){var i=je.get(r.sheetsManager,o,n);i.refs-=1;var a=r.sheetsRegistry;0===i.refs&&(je.delete(r.sheetsManager,o,n),r.jss.removeStyleSheet(i.staticSheet),a&&a.remove(i.staticSheet)),t.dynamicSheet&&(r.jss.removeStyleSheet(t.dynamicSheet),a&&a.remove(t.dynamicSheet))}}function An(e,t){var n,r=u.useRef([]),o=u.useMemo((function(){return{}}),t);r.current!==o&&(r.current=o,n=e()),u.useEffect((function(){return function(){n&&n()}}),[o])}function Nn(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=t.name,r=t.classNamePrefix,o=t.Component,i=t.defaultTheme,l=void 0===i?kn:i,s=c(t,["name","classNamePrefix","Component","defaultTheme"]),f=En(e),d=n||r||"makeStyles";f.options={index:wn(),name:n,meta:d,classNamePrefix:d};var p=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=De()||l,r=(0,a.Z)({},u.useContext(mn),s),i=u.useRef(),c=u.useRef();An((function(){var o={name:n,state:{},stylesCreator:f,stylesOptions:r,theme:t};return Cn(o,e),c.current=!1,i.current=o,function(){Mn(o)}}),[t,f]),u.useEffect((function(){c.current&&Pn(i.current,e),c.current=!0}));var d=On(i.current,e.classes,o);return d};return p}function jn(e){var t=e.theme,n=e.name,r=e.props;if(!t||!t.props||!t.props[n])return r;var o,i=t.props[n];for(o in i)void 0===r[o]&&(r[o]=i[o]);return r}const Tn=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return function(n){var r=t.defaultTheme,o=t.withTheme,i=void 0!==o&&o,l=t.name,s=c(t,["defaultTheme","withTheme","name"]);var f=l,d=Nn(e,(0,a.Z)({defaultTheme:r,Component:n,name:l||n.displayName,classNamePrefix:f},s)),h=u.forwardRef((function(e,t){e.classes;var o,s=e.innerRef,f=c(e,["classes","innerRef"]),p=d((0,a.Z)({},n.defaultProps,e)),h=f;return("string"==typeof l||i)&&(o=De()||r,l&&(h=jn({theme:o,name:l,props:f})),i&&!h.theme&&(h.theme=o)),u.createElement(n,(0,a.Z)({ref:s||t,classes:p},h))}));return p()(h,n),h}};var Dn=["xs","sm","md","lg","xl"];function Rn(e){var t=e.values,n=void 0===t?{xs:0,sm:600,md:960,lg:1280,xl:1920}:t,r=e.unit,o=void 0===r?"px":r,i=e.step,u=void 0===i?5:i,l=c(e,["values","unit","step"]);function s(e){var t="number"==typeof n[e]?n[e]:e;return"@media (min-width:".concat(t).concat(o,")")}function f(e,t){var r=Dn.indexOf(t);return r===Dn.length-1?s(e):"@media (min-width:".concat("number"==typeof n[e]?n[e]:e).concat(o,") and ")+"(max-width:".concat((-1!==r&&"number"==typeof n[Dn[r+1]]?n[Dn[r+1]]:t)-u/100).concat(o,")")}return(0,a.Z)({keys:Dn,values:n,up:s,down:function(e){var t=Dn.indexOf(e)+1,r=n[Dn[t]];return t===Dn.length?s("xs"):"@media (max-width:".concat(("number"==typeof r&&t>0?r:e)-u/100).concat(o,")")},between:f,only:function(e){return f(e,e)},width:function(e){return n[e]}},l)}function Ln(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function zn(e,t,n){var r;return(0,a.Z)({gutters:function(){var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return(0,a.Z)({paddingLeft:t(2),paddingRight:t(2)},n,Ln({},e.up("sm"),(0,a.Z)({paddingLeft:t(3),paddingRight:t(3)},n[e.up("sm")])))},toolbar:(r={minHeight:56},Ln(r,"".concat(e.up("xs")," and (orientation: landscape)"),{minHeight:48}),Ln(r,e.up("sm"),{minHeight:64}),r)},n)}const In={black:"#000",white:"#fff"};const Bn={50:"#fafafa",100:"#f5f5f5",200:"#eeeeee",300:"#e0e0e0",400:"#bdbdbd",500:"#9e9e9e",600:"#757575",700:"#616161",800:"#424242",900:"#212121",A100:"#d5d5d5",A200:"#aaaaaa",A400:"#303030",A700:"#616161"};const Un={50:"#e8eaf6",100:"#c5cae9",200:"#9fa8da",300:"#7986cb",400:"#5c6bc0",500:"#3f51b5",600:"#3949ab",700:"#303f9f",800:"#283593",900:"#1a237e",A100:"#8c9eff",A200:"#536dfe",A400:"#3d5afe",A700:"#304ffe"};const Fn={50:"#fce4ec",100:"#f8bbd0",200:"#f48fb1",300:"#f06292",400:"#ec407a",500:"#e91e63",600:"#d81b60",700:"#c2185b",800:"#ad1457",900:"#880e4f",A100:"#ff80ab",A200:"#ff4081",A400:"#f50057",A700:"#c51162"};const Xn={50:"#ffebee",100:"#ffcdd2",200:"#ef9a9a",300:"#e57373",400:"#ef5350",500:"#f44336",600:"#e53935",700:"#d32f2f",800:"#c62828",900:"#b71c1c",A100:"#ff8a80",A200:"#ff5252",A400:"#ff1744",A700:"#d50000"};const Hn={50:"#fff3e0",100:"#ffe0b2",200:"#ffcc80",300:"#ffb74d",400:"#ffa726",500:"#ff9800",600:"#fb8c00",700:"#f57c00",800:"#ef6c00",900:"#e65100",A100:"#ffd180",A200:"#ffab40",A400:"#ff9100",A700:"#ff6d00"};const Vn={50:"#e3f2fd",100:"#bbdefb",200:"#90caf9",300:"#64b5f6",400:"#42a5f5",500:"#2196f3",600:"#1e88e5",700:"#1976d2",800:"#1565c0",900:"#0d47a1",A100:"#82b1ff",A200:"#448aff",A400:"#2979ff",A700:"#2962ff"};const Wn={50:"#e8f5e9",100:"#c8e6c9",200:"#a5d6a7",300:"#81c784",400:"#66bb6a",500:"#4caf50",600:"#43a047",700:"#388e3c",800:"#2e7d32",900:"#1b5e20",A100:"#b9f6ca",A200:"#69f0ae",A400:"#00e676",A700:"#00c853"};function Yn(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:1;return Math.min(Math.max(t,e),n)}function $n(e){if(e.type)return e;if("#"===e.charAt(0))return $n(function(e){e=e.substr(1);var t=new RegExp(".{1,".concat(e.length>=6?2:1,"}"),"g"),n=e.match(t);return n&&1===n[0].length&&(n=n.map((function(e){return e+e}))),n?"rgb".concat(4===n.length?"a":"","(").concat(n.map((function(e,t){return t<3?parseInt(e,16):Math.round(parseInt(e,16)/255*1e3)/1e3})).join(", "),")"):""}(e));var t=e.indexOf("("),n=e.substring(0,t);if(-1===["rgb","rgba","hsl","hsla"].indexOf(n))throw new Error(r(3,e));var o=e.substring(t+1,e.length-1).split(",");return{type:n,values:o=o.map((function(e){return parseFloat(e)}))}}function Zn(e){var t=e.type,n=e.values;return-1!==t.indexOf("rgb")?n=n.map((function(e,t){return t<3?parseInt(e,10):e})):-1!==t.indexOf("hsl")&&(n[1]="".concat(n[1],"%"),n[2]="".concat(n[2],"%")),"".concat(t,"(").concat(n.join(", "),")")}function qn(e){var t="hsl"===(e=$n(e)).type?$n(function(e){var t=(e=$n(e)).values,n=t[0],r=t[1]/100,o=t[2]/100,i=r*Math.min(o,1-o),a=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:(e+n/30)%12;return o-i*Math.max(Math.min(t-3,9-t,1),-1)},u="rgb",l=[Math.round(255*a(0)),Math.round(255*a(8)),Math.round(255*a(4))];return"hsla"===e.type&&(u+="a",l.push(t[3])),Zn({type:u,values:l})}(e)).values:e.values;return t=t.map((function(e){return(e/=255)<=.03928?e/12.92:Math.pow((e+.055)/1.055,2.4)})),Number((.2126*t[0]+.7152*t[1]+.0722*t[2]).toFixed(3))}function Gn(e,t){if(e=$n(e),t=Yn(t),-1!==e.type.indexOf("hsl"))e.values[2]*=1-t;else if(-1!==e.type.indexOf("rgb"))for(var n=0;n<3;n+=1)e.values[n]*=1-t;return Zn(e)}function Kn(e,t){if(e=$n(e),t=Yn(t),-1!==e.type.indexOf("hsl"))e.values[2]+=(100-e.values[2])*t;else if(-1!==e.type.indexOf("rgb"))for(var n=0;n<3;n+=1)e.values[n]+=(255-e.values[n])*t;return Zn(e)}var Qn={text:{primary:"rgba(0, 0, 0, 0.87)",secondary:"rgba(0, 0, 0, 0.54)",disabled:"rgba(0, 0, 0, 0.38)",hint:"rgba(0, 0, 0, 0.38)"},divider:"rgba(0, 0, 0, 0.12)",background:{paper:In.white,default:Bn[50]},action:{active:"rgba(0, 0, 0, 0.54)",hover:"rgba(0, 0, 0, 0.04)",hoverOpacity:.04,selected:"rgba(0, 0, 0, 0.08)",selectedOpacity:.08,disabled:"rgba(0, 0, 0, 0.26)",disabledBackground:"rgba(0, 0, 0, 0.12)",disabledOpacity:.38,focus:"rgba(0, 0, 0, 0.12)",focusOpacity:.12,activatedOpacity:.12}},Jn={text:{primary:In.white,secondary:"rgba(255, 255, 255, 0.7)",disabled:"rgba(255, 255, 255, 0.5)",hint:"rgba(255, 255, 255, 0.5)",icon:"rgba(255, 255, 255, 0.5)"},divider:"rgba(255, 255, 255, 0.12)",background:{paper:Bn[800],default:"#303030"},action:{active:In.white,hover:"rgba(255, 255, 255, 0.08)",hoverOpacity:.08,selected:"rgba(255, 255, 255, 0.16)",selectedOpacity:.16,disabled:"rgba(255, 255, 255, 0.3)",disabledBackground:"rgba(255, 255, 255, 0.12)",disabledOpacity:.38,focus:"rgba(255, 255, 255, 0.12)",focusOpacity:.12,activatedOpacity:.24}};function er(e,t,n,r){var o=r.light||r,i=r.dark||1.5*r;e[t]||(e.hasOwnProperty(n)?e[t]=e[n]:"light"===t?e.light=Kn(e.main,o):"dark"===t&&(e.dark=Gn(e.main,i)))}function tr(e){var t=e.primary,n=void 0===t?{light:Un[300],main:Un[500],dark:Un[700]}:t,o=e.secondary,i=void 0===o?{light:Fn.A200,main:Fn.A400,dark:Fn.A700}:o,u=e.error,l=void 0===u?{light:Xn[300],main:Xn[500],dark:Xn[700]}:u,s=e.warning,f=void 0===s?{light:Hn[300],main:Hn[500],dark:Hn[700]}:s,d=e.info,p=void 0===d?{light:Vn[300],main:Vn[500],dark:Vn[700]}:d,h=e.success,v=void 0===h?{light:Wn[300],main:Wn[500],dark:Wn[700]}:h,g=e.type,y=void 0===g?"light":g,m=e.contrastThreshold,b=void 0===m?3:m,w=e.tonalOffset,_=void 0===w?.2:w,x=c(e,["primary","secondary","error","warning","info","success","type","contrastThreshold","tonalOffset"]);function S(e){var t=function(e,t){var n=qn(e),r=qn(t);return(Math.max(n,r)+.05)/(Math.min(n,r)+.05)}(e,Jn.text.primary)>=b?Jn.text.primary:Qn.text.primary;return t}var E=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:500,n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:300,o=arguments.length>3&&void 0!==arguments[3]?arguments[3]:700;if(!(e=(0,a.Z)({},e)).main&&e[t]&&(e.main=e[t]),!e.main)throw new Error(r(4,t));if("string"!=typeof e.main)throw new Error(r(5,JSON.stringify(e.main)));return er(e,"light",n,_),er(e,"dark",o,_),e.contrastText||(e.contrastText=S(e.main)),e},k={dark:Jn,light:Qn};return Sn((0,a.Z)({common:In,type:y,primary:E(n),secondary:E(i,"A400","A200","A700"),error:E(l),warning:E(f),info:E(p),success:E(v),grey:Bn,contrastThreshold:b,getContrastText:S,augmentColor:E,tonalOffset:_},k[y]),x)}function nr(e){return Math.round(1e5*e)/1e5}var rr={textTransform:"uppercase"},or='"Roboto", "Helvetica", "Arial", sans-serif';function ir(e,t){var n="function"==typeof t?t(e):t,r=n.fontFamily,o=void 0===r?or:r,i=n.fontSize,u=void 0===i?14:i,l=n.fontWeightLight,s=void 0===l?300:l,f=n.fontWeightRegular,d=void 0===f?400:f,p=n.fontWeightMedium,h=void 0===p?500:p,v=n.fontWeightBold,g=void 0===v?700:v,y=n.htmlFontSize,m=void 0===y?16:y,b=n.allVariants,w=n.pxToRem,_=c(n,["fontFamily","fontSize","fontWeightLight","fontWeightRegular","fontWeightMedium","fontWeightBold","htmlFontSize","allVariants","pxToRem"]);var x=u/14,S=w||function(e){return"".concat(e/m*x,"rem")},E=function(e,t,n,r,i){return(0,a.Z)({fontFamily:o,fontWeight:e,fontSize:S(t),lineHeight:n},o===or?{letterSpacing:"".concat(nr(r/t),"em")}:{},i,b)},k={h1:E(s,96,1.167,-1.5),h2:E(s,60,1.2,-.5),h3:E(d,48,1.167,0),h4:E(d,34,1.235,.25),h5:E(d,24,1.334,0),h6:E(h,20,1.6,.15),subtitle1:E(d,16,1.75,.15),subtitle2:E(h,14,1.57,.1),body1:E(d,16,1.5,.15),body2:E(d,14,1.43,.15),button:E(h,14,1.75,.4,rr),caption:E(d,12,1.66,.4),overline:E(d,12,2.66,1,rr)};return Sn((0,a.Z)({htmlFontSize:m,pxToRem:S,round:nr,fontFamily:o,fontSize:u,fontWeightLight:s,fontWeightRegular:d,fontWeightMedium:h,fontWeightBold:g},k),_,{clone:!1})}function ar(){return["".concat(arguments.length<=0?void 0:arguments[0],"px ").concat(arguments.length<=1?void 0:arguments[1],"px ").concat(arguments.length<=2?void 0:arguments[2],"px ").concat(arguments.length<=3?void 0:arguments[3],"px rgba(0,0,0,").concat(.2,")"),"".concat(arguments.length<=4?void 0:arguments[4],"px ").concat(arguments.length<=5?void 0:arguments[5],"px ").concat(arguments.length<=6?void 0:arguments[6],"px ").concat(arguments.length<=7?void 0:arguments[7],"px rgba(0,0,0,").concat(.14,")"),"".concat(arguments.length<=8?void 0:arguments[8],"px ").concat(arguments.length<=9?void 0:arguments[9],"px ").concat(arguments.length<=10?void 0:arguments[10],"px ").concat(arguments.length<=11?void 0:arguments[11],"px rgba(0,0,0,").concat(.12,")")].join(",")}const ur=["none",ar(0,2,1,-1,0,1,1,0,0,1,3,0),ar(0,3,1,-2,0,2,2,0,0,1,5,0),ar(0,3,3,-2,0,3,4,0,0,1,8,0),ar(0,2,4,-1,0,4,5,0,0,1,10,0),ar(0,3,5,-1,0,5,8,0,0,1,14,0),ar(0,3,5,-1,0,6,10,0,0,1,18,0),ar(0,4,5,-2,0,7,10,1,0,2,16,1),ar(0,5,5,-3,0,8,10,1,0,3,14,2),ar(0,5,6,-3,0,9,12,1,0,3,16,2),ar(0,6,6,-3,0,10,14,1,0,4,18,3),ar(0,6,7,-4,0,11,15,1,0,4,20,3),ar(0,7,8,-4,0,12,17,2,0,5,22,4),ar(0,7,8,-4,0,13,19,2,0,5,24,4),ar(0,7,9,-4,0,14,21,2,0,5,26,4),ar(0,8,9,-5,0,15,22,2,0,6,28,5),ar(0,8,10,-5,0,16,24,2,0,6,30,5),ar(0,8,11,-5,0,17,26,2,0,6,32,5),ar(0,9,11,-5,0,18,28,2,0,7,34,6),ar(0,9,12,-6,0,19,29,2,0,7,36,6),ar(0,10,13,-6,0,20,31,3,0,8,38,7),ar(0,10,13,-6,0,21,33,3,0,8,40,7),ar(0,10,14,-6,0,22,35,3,0,8,42,7),ar(0,11,14,-7,0,23,36,3,0,9,44,8),ar(0,11,15,-7,0,24,38,3,0,9,46,8)];const lr={borderRadius:4};function cr(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(e)){var n=[],r=!0,o=!1,i=void 0;try{for(var a,u=e[Symbol.iterator]();!(r=(a=u.next()).done)&&(n.push(a.value),!t||n.length!==t);r=!0);}catch(e){o=!0,i=e}finally{try{r||null==u.return||u.return()}finally{if(o)throw i}}return n}}(e,t)||pt(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}var sr={xs:0,sm:600,md:960,lg:1280,xl:1920},fr={keys:["xs","sm","md","lg","xl"],up:function(e){return"@media (min-width:".concat(sr[e],"px)")}};const dr=function(e,t){return t?Sn(e,t,{clone:!1}):e};var pr={m:"margin",p:"padding"},hr={t:"Top",r:"Right",b:"Bottom",l:"Left",x:["Left","Right"],y:["Top","Bottom"]},vr={marginX:"mx",marginY:"my",paddingX:"px",paddingY:"py"},gr=function(e){var t={};return function(n){return void 0===t[n]&&(t[n]=e(n)),t[n]}}((function(e){if(e.length>2){if(!vr[e])return[e];e=vr[e]}var t=cr(e.split(""),2),n=t[0],r=t[1],o=pr[n],i=hr[r]||"";return Array.isArray(i)?i.map((function(e){return o+e})):[o+i]})),yr=["m","mt","mr","mb","ml","mx","my","p","pt","pr","pb","pl","px","py","margin","marginTop","marginRight","marginBottom","marginLeft","marginX","marginY","padding","paddingTop","paddingRight","paddingBottom","paddingLeft","paddingX","paddingY"];function mr(e){var t=e.spacing||8;return"number"==typeof t?function(e){return t*e}:Array.isArray(t)?function(e){return t[e]}:"function"==typeof t?t:function(){}}function br(e,t){return function(n){return e.reduce((function(e,r){return e[r]=function(e,t){if("string"==typeof t||null==t)return t;var n=e(Math.abs(t));return t>=0?n:"number"==typeof n?-n:"-".concat(n)}(t,n),e}),{})}}function wr(e){var t=mr(e.theme);return Object.keys(e).map((function(n){if(-1===yr.indexOf(n))return null;var r=br(gr(n),t),o=e[n];return function(e,t,n){if(Array.isArray(t)){var r=e.theme.breakpoints||fr;return t.reduce((function(e,o,i){return e[r.up(r.keys[i])]=n(t[i]),e}),{})}if("object"===_n(t)){var o=e.theme.breakpoints||fr;return Object.keys(t).reduce((function(e,r){return e[o.up(r)]=n(t[r]),e}),{})}return n(t)}(e,o,r)})).reduce(dr,{})}wr.propTypes={},wr.filterProps=yr;function _r(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:8;if(e.mui)return e;var t=mr({spacing:e}),n=function(){for(var e=arguments.length,n=new Array(e),r=0;r<e;r++)n[r]=arguments[r];return 0===n.length?t(1):1===n.length?t(n[0]):n.map((function(e){if("string"==typeof e)return e;var n=t(e);return"number"==typeof n?"".concat(n,"px"):n})).join(" ")};return Object.defineProperty(n,"unit",{get:function(){return e}}),n.mui=!0,n}var xr={easeInOut:"cubic-bezier(0.4, 0, 0.2, 1)",easeOut:"cubic-bezier(0.0, 0, 0.2, 1)",easeIn:"cubic-bezier(0.4, 0, 1, 1)",sharp:"cubic-bezier(0.4, 0, 0.6, 1)"},Sr={shortest:150,shorter:200,short:250,standard:300,complex:375,enteringScreen:225,leavingScreen:195};function Er(e){return"".concat(Math.round(e),"ms")}const kr={easing:xr,duration:Sr,create:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:["all"],t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=t.duration,r=void 0===n?Sr.standard:n,o=t.easing,i=void 0===o?xr.easeInOut:o,a=t.delay,u=void 0===a?0:a;c(t,["duration","easing","delay"]);return(Array.isArray(e)?e:[e]).map((function(e){return"".concat(e," ").concat("string"==typeof r?r:Er(r)," ").concat(i," ").concat("string"==typeof u?u:Er(u))})).join(",")},getAutoHeightDuration:function(e){if(!e)return 0;var t=e/36;return Math.round(10*(4+15*Math.pow(t,.25)+t/5))}};const Or={mobileStepper:1e3,speedDial:1050,appBar:1100,drawer:1200,modal:1300,snackbar:1400,tooltip:1500};const Cr=function(){for(var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.breakpoints,n=void 0===t?{}:t,r=e.mixins,o=void 0===r?{}:r,i=e.palette,a=void 0===i?{}:i,u=e.spacing,l=e.typography,s=void 0===l?{}:l,f=c(e,["breakpoints","mixins","palette","spacing","typography"]),d=tr(a),p=Rn(n),h=_r(u),v=Sn({breakpoints:p,direction:"ltr",mixins:zn(p,h,o),overrides:{},palette:d,props:{},shadows:ur,typography:ir(d,s),spacing:h,shape:lr,transitions:kr,zIndex:Or},f),g=arguments.length,y=new Array(g>1?g-1:0),m=1;m<g;m++)y[m-1]=arguments[m];return v=y.reduce((function(e,t){return Sn(e,t)}),v)};const Pr=Cr();const Mr=function(e,t){return Tn(e,(0,a.Z)({defaultTheme:Pr},t))};var Ar=u.forwardRef((function(e,t){var n=e.children,r=e.classes,i=e.className,l=e.color,s=void 0===l?"inherit":l,d=e.component,p=void 0===d?"svg":d,h=e.fontSize,v=void 0===h?"default":h,g=e.htmlColor,y=e.titleAccess,m=e.viewBox,b=void 0===m?"0 0 24 24":m,w=c(e,["children","classes","className","color","component","fontSize","htmlColor","titleAccess","viewBox"]);return u.createElement(p,(0,a.Z)({className:f(r.root,i,"inherit"!==s&&r["color".concat(o(s))],"default"!==v&&r["fontSize".concat(o(v))]),focusable:"false",viewBox:b,color:g,"aria-hidden":!y||void 0,role:y?"img":void 0,ref:t},w),n,y?u.createElement("title",null,y):null)}));Ar.muiName="SvgIcon";const Nr=Mr((function(e){return{root:{userSelect:"none",width:"1em",height:"1em",display:"inline-block",fill:"currentColor",flexShrink:0,fontSize:e.typography.pxToRem(24),transition:e.transitions.create("fill",{duration:e.transitions.duration.shorter})},colorPrimary:{color:e.palette.primary.main},colorSecondary:{color:e.palette.secondary.main},colorAction:{color:e.palette.action.active},colorError:{color:e.palette.error.main},colorDisabled:{color:e.palette.action.disabled},fontSizeInherit:{fontSize:"inherit"},fontSizeSmall:{fontSize:e.typography.pxToRem(20)},fontSizeLarge:{fontSize:e.typography.pxToRem(35)}}}),{name:"MuiSvgIcon"})(Ar);function jr(e,t){var n=function(t,n){return u.createElement(Nr,(0,a.Z)({ref:n},t),e)};return n.muiName=Nr.muiName,u.memo(u.forwardRef(n))}function Tr(e){var t,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:166;function r(){for(var r=arguments.length,o=new Array(r),i=0;i<r;i++)o[i]=arguments[i];var a=this,u=function(){e.apply(a,o)};clearTimeout(t),t=setTimeout(u,n)}return r.clear=function(){clearTimeout(t)},r}function Dr(e,t){return function(){return null}}function Rr(e,t){return u.isValidElement(e)&&-1!==t.indexOf(e.type.muiName)}function Lr(e){return e&&e.ownerDocument||document}function zr(e){return Lr(e).defaultView||window}function Ir(e){return function(){return null}}function Br(e,t){"function"==typeof e?e(t):e&&(e.current=t)}function Ur(e,t,n,r,o){return null}function Fr(e){var t=e.controlled,n=e.default,r=(e.name,e.state,u.useRef(void 0!==t).current),o=u.useState(n),i=o[0],a=o[1];return[r?t:i,u.useCallback((function(e){r||a(e)}),[])]}var Xr="undefined"!=typeof window?u.useLayoutEffect:u.useEffect;function Hr(e){var t=u.useRef(e);return Xr((function(){t.current=e})),u.useCallback((function(){return t.current.apply(void 0,arguments)}),[])}function Vr(e,t){return u.useMemo((function(){return null==e&&null==t?null:function(n){Br(e,n),Br(t,n)}}),[e,t])}function Wr(e){var t=u.useState(e),n=t[0],r=t[1],o=e||n;return u.useEffect((function(){null==n&&r("mui-".concat(Math.round(1e5*Math.random())))}),[n]),o}var Yr=n(935),$r=!0,Zr=!1,qr=null,Gr={text:!0,search:!0,url:!0,tel:!0,email:!0,password:!0,number:!0,date:!0,month:!0,week:!0,time:!0,datetime:!0,"datetime-local":!0};function Kr(e){e.metaKey||e.altKey||e.ctrlKey||($r=!0)}function Qr(){$r=!1}function Jr(){"hidden"===this.visibilityState&&Zr&&($r=!0)}function eo(e){var t,n,r,o=e.target;try{return o.matches(":focus-visible")}catch(e){}return $r||(n=(t=o).type,!("INPUT"!==(r=t.tagName)||!Gr[n]||t.readOnly)||"TEXTAREA"===r&&!t.readOnly||!!t.isContentEditable)}function to(){Zr=!0,window.clearTimeout(qr),qr=window.setTimeout((function(){Zr=!1}),100)}function no(){return{isFocusVisible:eo,onBlurVisible:to,ref:u.useCallback((function(e){var t,n=Yr.findDOMNode(e);null!=n&&((t=n.ownerDocument).addEventListener("keydown",Kr,!0),t.addEventListener("mousedown",Qr,!0),t.addEventListener("pointerdown",Qr,!0),t.addEventListener("touchstart",Qr,!0),t.addEventListener("visibilitychange",Jr,!0))}),[])}}},81:(e,t,n)=>{"use strict";var r=n(318),o=n(862);t.Z=void 0;var i=o(n(294)),a=(0,r(n(108)).default)(i.createElement("path",{d:"M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76 0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71 0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71 0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76 0 5-2.24 5-5s-2.24-5-5-5z"}),"Link");t.Z=a},108:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"default",{enumerable:!0,get:function(){return r.createSvgIcon}});var r=n(500)},184:(e,t)=>{var n;!function(){"use strict";var r={}.hasOwnProperty;function o(){for(var e=[],t=0;t<arguments.length;t++){var n=arguments[t];if(n){var i=typeof n;if("string"===i||"number"===i)e.push(n);else if(Array.isArray(n)){if(n.length){var a=o.apply(null,n);a&&e.push(a)}}else if("object"===i)if(n.toString===Object.prototype.toString)for(var u in n)r.call(n,u)&&n[u]&&e.push(u);else e.push(n.toString())}}return e.join(" ")}e.exports?(o.default=o,e.exports=o):void 0===(n=function(){return o}.apply(t,[]))||(e.exports=n)}()},300:(e,t,n)=>{"use strict";n.d(t,{Z:()=>u});var r=n(15),o=n.n(r),i=n(645),a=n.n(i)()(o());a.push([e.id,".active{background-color:#7fffd4}.line{stroke:#000;stroke-width:1px}.container-side{display:flex;flex-direction:column;justify-content:center;align-items:center}.fa{font-size:x-small}","",{version:3,sources:["webpack://./src/components/style.css"],names:[],mappings:"AAAA,QACI,wBAAA,CAGJ,MACI,WAAA,CACA,gBAAA,CAMJ,gBACI,YAAA,CACA,qBAAA,CACA,sBAAA,CACA,kBAAA,CAEJ,IACI,iBAAA",sourcesContent:[".active{\r\n    background-color: aquamarine;\r\n}\r\n\r\n.line{\r\n    stroke: black;\r\n    stroke-width: 1px;\r\n    /* stroke-dasharray: 3px; */\r\n}\r\n/* svg{\r\n    background-color: blue;\r\n} */\r\n.container-side{\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: center;\r\n    align-items: center;\r\n}\r\n.fa{\r\n    font-size: x-small;\r\n}"],sourceRoot:""}]);const u=a},64:(e,t,n)=>{"use strict";n.d(t,{Z:()=>u});var r=n(15),o=n.n(r),i=n(645),a=n.n(i)()(o());a.push([e.id,".drag-eleemnt{cursor:pointer;position:absolute;padding:2rem;background-color:#ccc1c1;box-shadow:0px 0px 8px 4px #b3b3b3}","",{version:3,sources:["webpack://./src/components/style.scss"],names:[],mappings:"AACA,cACI,cAAA,CACA,iBAAA,CACA,YAAA,CACA,wBAAA,CACA,kCAAA",sourcesContent:["\r\n.drag-eleemnt{\r\n    cursor: pointer;\r\n    position: absolute;\r\n    padding: 2rem;\r\n    background-color: #ccc1c1;\r\n    box-shadow: 0px 0px 8px 4px #b3b3b3;\r\n}"],sourceRoot:""}]);const u=a},618:(e,t,n)=>{"use strict";n.d(t,{Z:()=>u});var r=n(15),o=n.n(r),i=n(645),a=n.n(i)()(o());a.push([e.id,".dndflow{flex-direction:column;display:flex;height:100%;width:100%}.dndflow aside{border-right:1px solid #eee;padding:15px 10px;font-size:12px;background:#fcfcfc}.dndflow aside>*{margin-bottom:10px;cursor:grab}.dndflow aside .description{margin-bottom:10px}.dndflow .reactflow-wrapper{flex-grow:1;height:100%;width:80%;z-index:10000}@media screen and (min-width: 768px){.dndflow{flex-direction:row}.dndflow aside{width:20%;max-width:180px;z-index:10000}}.react-flow{position:static}","",{version:3,sources:["webpack://./src/dnd.css"],names:[],mappings:"AAAA,SACI,qBAAA,CACA,YAAA,CACA,WAAA,CACA,UAAA,CAGF,eACE,2BAAA,CACA,iBAAA,CACA,cAAA,CACA,kBAAA,CAIF,iBACE,kBAAA,CACA,WAAA,CAGF,4BACE,kBAAA,CAGF,4BACE,WAAA,CACA,WAAA,CACA,SAAA,CACA,aAAA,CAGF,qCACE,SACE,kBAAA,CAGF,eACE,SAAA,CACA,eAAA,CACA,aAAA,CAAA,CAGJ,YACE,eAAA",sourcesContent:[".dndflow {\r\n    flex-direction: column;\r\n    display: flex;\r\n    height: 100%;\r\n    width: 100%;\r\n  }\r\n  \r\n  .dndflow aside {\r\n    border-right: 1px solid #eee;\r\n    padding: 15px 10px;\r\n    font-size: 12px;\r\n    background: #fcfcfc;\r\n    \r\n  }\r\n  \r\n  .dndflow aside > * {\r\n    margin-bottom: 10px;\r\n    cursor: grab;\r\n  }\r\n  \r\n  .dndflow aside .description {\r\n    margin-bottom: 10px;\r\n  }\r\n  \r\n  .dndflow .reactflow-wrapper {\r\n    flex-grow: 1;\r\n    height: 100%;\r\n    width: 80%;\r\n    z-index: 10000;\r\n  }\r\n  \r\n  @media screen and (min-width: 768px) {\r\n    .dndflow {\r\n      flex-direction: row;\r\n    }\r\n  \r\n    .dndflow aside {\r\n      width: 20%;\r\n      max-width: 180px;\r\n      z-index: 10000;\r\n    }\r\n  }\r\n  .react-flow{\r\n    position: static;\r\n  }"],sourceRoot:""}]);const u=a},645:e=>{"use strict";e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n=e(t);return t[2]?"@media ".concat(t[2]," {").concat(n,"}"):n})).join("")},t.i=function(e,n,r){"string"==typeof e&&(e=[[null,e,""]]);var o={};if(r)for(var i=0;i<this.length;i++){var a=this[i][0];null!=a&&(o[a]=!0)}for(var u=0;u<e.length;u++){var l=[].concat(e[u]);r&&o[l[0]]||(n&&(l[2]?l[2]="".concat(n," and ").concat(l[2]):l[2]=n),t.push(l))}},t}},15:e=>{"use strict";function t(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(e)))return;var n=[],r=!0,o=!1,i=void 0;try{for(var a,u=e[Symbol.iterator]();!(r=(a=u.next()).done)&&(n.push(a.value),!t||n.length!==t);r=!0);}catch(e){o=!0,i=e}finally{try{r||null==u.return||u.return()}finally{if(o)throw i}}return n}(e,t)||function(e,t){if(!e)return;if("string"==typeof e)return n(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);"Object"===r&&e.constructor&&(r=e.constructor.name);if("Map"===r||"Set"===r)return Array.from(e);if("Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r))return n(e,t)}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function n(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}e.exports=function(e){var n=t(e,4),r=n[1],o=n[3];if("function"==typeof btoa){var i=btoa(unescape(encodeURIComponent(JSON.stringify(o)))),a="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(i),u="/*# ".concat(a," */"),l=o.sources.map((function(e){return"/*# sourceURL=".concat(o.sourceRoot||"").concat(e," */")}));return[r].concat(l).concat([u]).join("\n")}return[r].join("\n")}},679:(e,t,n)=>{"use strict";var r=n(296),o={childContextTypes:!0,contextType:!0,contextTypes:!0,defaultProps:!0,displayName:!0,getDefaultProps:!0,getDerivedStateFromError:!0,getDerivedStateFromProps:!0,mixins:!0,propTypes:!0,type:!0},i={name:!0,length:!0,prototype:!0,caller:!0,callee:!0,arguments:!0,arity:!0},a={$$typeof:!0,compare:!0,defaultProps:!0,displayName:!0,propTypes:!0,type:!0},u={};function l(e){return r.isMemo(e)?a:u[e.$$typeof]||o}u[r.ForwardRef]={$$typeof:!0,render:!0,defaultProps:!0,displayName:!0,propTypes:!0},u[r.Memo]=a;var c=Object.defineProperty,s=Object.getOwnPropertyNames,f=Object.getOwnPropertySymbols,d=Object.getOwnPropertyDescriptor,p=Object.getPrototypeOf,h=Object.prototype;e.exports=function e(t,n,r){if("string"!=typeof n){if(h){var o=p(n);o&&o!==h&&e(t,o,r)}var a=s(n);f&&(a=a.concat(f(n)));for(var u=l(t),v=l(n),g=0;g<a.length;++g){var y=a[g];if(!(i[y]||r&&r[y]||v&&v[y]||u&&u[y])){var m=d(n,y);try{c(t,y,m)}catch(e){}}}}return t}},103:(e,t)=>{"use strict";var n="function"==typeof Symbol&&Symbol.for,r=n?Symbol.for("react.element"):60103,o=n?Symbol.for("react.portal"):60106,i=n?Symbol.for("react.fragment"):60107,a=n?Symbol.for("react.strict_mode"):60108,u=n?Symbol.for("react.profiler"):60114,l=n?Symbol.for("react.provider"):60109,c=n?Symbol.for("react.context"):60110,s=n?Symbol.for("react.async_mode"):60111,f=n?Symbol.for("react.concurrent_mode"):60111,d=n?Symbol.for("react.forward_ref"):60112,p=n?Symbol.for("react.suspense"):60113,h=n?Symbol.for("react.suspense_list"):60120,v=n?Symbol.for("react.memo"):60115,g=n?Symbol.for("react.lazy"):60116,y=n?Symbol.for("react.block"):60121,m=n?Symbol.for("react.fundamental"):60117,b=n?Symbol.for("react.responder"):60118,w=n?Symbol.for("react.scope"):60119;function _(e){if("object"==typeof e&&null!==e){var t=e.$$typeof;switch(t){case r:switch(e=e.type){case s:case f:case i:case u:case a:case p:return e;default:switch(e=e&&e.$$typeof){case c:case d:case g:case v:case l:return e;default:return t}}case o:return t}}}function x(e){return _(e)===f}t.AsyncMode=s,t.ConcurrentMode=f,t.ContextConsumer=c,t.ContextProvider=l,t.Element=r,t.ForwardRef=d,t.Fragment=i,t.Lazy=g,t.Memo=v,t.Portal=o,t.Profiler=u,t.StrictMode=a,t.Suspense=p,t.isAsyncMode=function(e){return x(e)||_(e)===s},t.isConcurrentMode=x,t.isContextConsumer=function(e){return _(e)===c},t.isContextProvider=function(e){return _(e)===l},t.isElement=function(e){return"object"==typeof e&&null!==e&&e.$$typeof===r},t.isForwardRef=function(e){return _(e)===d},t.isFragment=function(e){return _(e)===i},t.isLazy=function(e){return _(e)===g},t.isMemo=function(e){return _(e)===v},t.isPortal=function(e){return _(e)===o},t.isProfiler=function(e){return _(e)===u},t.isStrictMode=function(e){return _(e)===a},t.isSuspense=function(e){return _(e)===p},t.isValidElementType=function(e){return"string"==typeof e||"function"==typeof e||e===i||e===f||e===u||e===a||e===p||e===h||"object"==typeof e&&null!==e&&(e.$$typeof===g||e.$$typeof===v||e.$$typeof===l||e.$$typeof===c||e.$$typeof===d||e.$$typeof===m||e.$$typeof===b||e.$$typeof===w||e.$$typeof===y)},t.typeOf=_},296:(e,t,n)=>{"use strict";e.exports=n(103)},826:e=>{e.exports=Array.isArray||function(e){return"[object Array]"==Object.prototype.toString.call(e)}},486:function(e,t,n){var r;e=n.nmd(e),function(){var o,i="Expected a function",a="__lodash_hash_undefined__",u="__lodash_placeholder__",l=16,c=32,s=64,f=128,d=256,p=1/0,h=9007199254740991,v=NaN,g=4294967295,y=[["ary",f],["bind",1],["bindKey",2],["curry",8],["curryRight",l],["flip",512],["partial",c],["partialRight",s],["rearg",d]],m="[object Arguments]",b="[object Array]",w="[object Boolean]",_="[object Date]",x="[object Error]",S="[object Function]",E="[object GeneratorFunction]",k="[object Map]",O="[object Number]",C="[object Object]",P="[object Promise]",M="[object RegExp]",A="[object Set]",N="[object String]",j="[object Symbol]",T="[object WeakMap]",D="[object ArrayBuffer]",R="[object DataView]",L="[object Float32Array]",z="[object Float64Array]",I="[object Int8Array]",B="[object Int16Array]",U="[object Int32Array]",F="[object Uint8Array]",X="[object Uint8ClampedArray]",H="[object Uint16Array]",V="[object Uint32Array]",W=/\b__p \+= '';/g,Y=/\b(__p \+=) '' \+/g,$=/(__e\(.*?\)|\b__t\)) \+\n'';/g,Z=/&(?:amp|lt|gt|quot|#39);/g,q=/[&<>"']/g,G=RegExp(Z.source),K=RegExp(q.source),Q=/<%-([\s\S]+?)%>/g,J=/<%([\s\S]+?)%>/g,ee=/<%=([\s\S]+?)%>/g,te=/\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,ne=/^\w*$/,re=/[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g,oe=/[\\^$.*+?()[\]{}|]/g,ie=RegExp(oe.source),ae=/^\s+/,ue=/\s/,le=/\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/,ce=/\{\n\/\* \[wrapped with (.+)\] \*/,se=/,? & /,fe=/[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g,de=/[()=,{}\[\]\/\s]/,pe=/\\(\\)?/g,he=/\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g,ve=/\w*$/,ge=/^[-+]0x[0-9a-f]+$/i,ye=/^0b[01]+$/i,me=/^\[object .+?Constructor\]$/,be=/^0o[0-7]+$/i,we=/^(?:0|[1-9]\d*)$/,_e=/[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g,xe=/($^)/,Se=/['\n\r\u2028\u2029\\]/g,Ee="\\u0300-\\u036f\\ufe20-\\ufe2f\\u20d0-\\u20ff",ke="\\u2700-\\u27bf",Oe="a-z\\xdf-\\xf6\\xf8-\\xff",Ce="A-Z\\xc0-\\xd6\\xd8-\\xde",Pe="\\ufe0e\\ufe0f",Me="\\xac\\xb1\\xd7\\xf7\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf\\u2000-\\u206f \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000",Ae="['’]",Ne="[\\ud800-\\udfff]",je="["+Me+"]",Te="["+Ee+"]",De="\\d+",Re="[\\u2700-\\u27bf]",Le="["+Oe+"]",ze="[^\\ud800-\\udfff"+Me+De+ke+Oe+Ce+"]",Ie="\\ud83c[\\udffb-\\udfff]",Be="[^\\ud800-\\udfff]",Ue="(?:\\ud83c[\\udde6-\\uddff]){2}",Fe="[\\ud800-\\udbff][\\udc00-\\udfff]",Xe="["+Ce+"]",He="(?:"+Le+"|"+ze+")",Ve="(?:"+Xe+"|"+ze+")",We="(?:['’](?:d|ll|m|re|s|t|ve))?",Ye="(?:['’](?:D|LL|M|RE|S|T|VE))?",$e="(?:"+Te+"|"+Ie+")"+"?",Ze="[\\ufe0e\\ufe0f]?",qe=Ze+$e+("(?:\\u200d(?:"+[Be,Ue,Fe].join("|")+")"+Ze+$e+")*"),Ge="(?:"+[Re,Ue,Fe].join("|")+")"+qe,Ke="(?:"+[Be+Te+"?",Te,Ue,Fe,Ne].join("|")+")",Qe=RegExp(Ae,"g"),Je=RegExp(Te,"g"),et=RegExp(Ie+"(?="+Ie+")|"+Ke+qe,"g"),tt=RegExp([Xe+"?"+Le+"+"+We+"(?="+[je,Xe,"$"].join("|")+")",Ve+"+"+Ye+"(?="+[je,Xe+He,"$"].join("|")+")",Xe+"?"+He+"+"+We,Xe+"+"+Ye,"\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])","\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])",De,Ge].join("|"),"g"),nt=RegExp("[\\u200d\\ud800-\\udfff"+Ee+Pe+"]"),rt=/[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/,ot=["Array","Buffer","DataView","Date","Error","Float32Array","Float64Array","Function","Int8Array","Int16Array","Int32Array","Map","Math","Object","Promise","RegExp","Set","String","Symbol","TypeError","Uint8Array","Uint8ClampedArray","Uint16Array","Uint32Array","WeakMap","_","clearTimeout","isFinite","parseInt","setTimeout"],it=-1,at={};at[L]=at[z]=at[I]=at[B]=at[U]=at[F]=at[X]=at[H]=at[V]=!0,at[m]=at[b]=at[D]=at[w]=at[R]=at[_]=at[x]=at[S]=at[k]=at[O]=at[C]=at[M]=at[A]=at[N]=at[T]=!1;var ut={};ut[m]=ut[b]=ut[D]=ut[R]=ut[w]=ut[_]=ut[L]=ut[z]=ut[I]=ut[B]=ut[U]=ut[k]=ut[O]=ut[C]=ut[M]=ut[A]=ut[N]=ut[j]=ut[F]=ut[X]=ut[H]=ut[V]=!0,ut[x]=ut[S]=ut[T]=!1;var lt={"\\":"\\","'":"'","\n":"n","\r":"r","\u2028":"u2028","\u2029":"u2029"},ct=parseFloat,st=parseInt,ft="object"==typeof n.g&&n.g&&n.g.Object===Object&&n.g,dt="object"==typeof self&&self&&self.Object===Object&&self,pt=ft||dt||Function("return this")(),ht=t&&!t.nodeType&&t,vt=ht&&e&&!e.nodeType&&e,gt=vt&&vt.exports===ht,yt=gt&&ft.process,mt=function(){try{var e=vt&&vt.require&&vt.require("util").types;return e||yt&&yt.binding&&yt.binding("util")}catch(e){}}(),bt=mt&&mt.isArrayBuffer,wt=mt&&mt.isDate,_t=mt&&mt.isMap,xt=mt&&mt.isRegExp,St=mt&&mt.isSet,Et=mt&&mt.isTypedArray;function kt(e,t,n){switch(n.length){case 0:return e.call(t);case 1:return e.call(t,n[0]);case 2:return e.call(t,n[0],n[1]);case 3:return e.call(t,n[0],n[1],n[2])}return e.apply(t,n)}function Ot(e,t,n,r){for(var o=-1,i=null==e?0:e.length;++o<i;){var a=e[o];t(r,a,n(a),e)}return r}function Ct(e,t){for(var n=-1,r=null==e?0:e.length;++n<r&&!1!==t(e[n],n,e););return e}function Pt(e,t){for(var n=null==e?0:e.length;n--&&!1!==t(e[n],n,e););return e}function Mt(e,t){for(var n=-1,r=null==e?0:e.length;++n<r;)if(!t(e[n],n,e))return!1;return!0}function At(e,t){for(var n=-1,r=null==e?0:e.length,o=0,i=[];++n<r;){var a=e[n];t(a,n,e)&&(i[o++]=a)}return i}function Nt(e,t){return!!(null==e?0:e.length)&&Ft(e,t,0)>-1}function jt(e,t,n){for(var r=-1,o=null==e?0:e.length;++r<o;)if(n(t,e[r]))return!0;return!1}function Tt(e,t){for(var n=-1,r=null==e?0:e.length,o=Array(r);++n<r;)o[n]=t(e[n],n,e);return o}function Dt(e,t){for(var n=-1,r=t.length,o=e.length;++n<r;)e[o+n]=t[n];return e}function Rt(e,t,n,r){var o=-1,i=null==e?0:e.length;for(r&&i&&(n=e[++o]);++o<i;)n=t(n,e[o],o,e);return n}function Lt(e,t,n,r){var o=null==e?0:e.length;for(r&&o&&(n=e[--o]);o--;)n=t(n,e[o],o,e);return n}function zt(e,t){for(var n=-1,r=null==e?0:e.length;++n<r;)if(t(e[n],n,e))return!0;return!1}var It=Wt("length");function Bt(e,t,n){var r;return n(e,(function(e,n,o){if(t(e,n,o))return r=n,!1})),r}function Ut(e,t,n,r){for(var o=e.length,i=n+(r?1:-1);r?i--:++i<o;)if(t(e[i],i,e))return i;return-1}function Ft(e,t,n){return t==t?function(e,t,n){var r=n-1,o=e.length;for(;++r<o;)if(e[r]===t)return r;return-1}(e,t,n):Ut(e,Ht,n)}function Xt(e,t,n,r){for(var o=n-1,i=e.length;++o<i;)if(r(e[o],t))return o;return-1}function Ht(e){return e!=e}function Vt(e,t){var n=null==e?0:e.length;return n?Zt(e,t)/n:v}function Wt(e){return function(t){return null==t?o:t[e]}}function Yt(e){return function(t){return null==e?o:e[t]}}function $t(e,t,n,r,o){return o(e,(function(e,o,i){n=r?(r=!1,e):t(n,e,o,i)})),n}function Zt(e,t){for(var n,r=-1,i=e.length;++r<i;){var a=t(e[r]);a!==o&&(n=n===o?a:n+a)}return n}function qt(e,t){for(var n=-1,r=Array(e);++n<e;)r[n]=t(n);return r}function Gt(e){return e?e.slice(0,vn(e)+1).replace(ae,""):e}function Kt(e){return function(t){return e(t)}}function Qt(e,t){return Tt(t,(function(t){return e[t]}))}function Jt(e,t){return e.has(t)}function en(e,t){for(var n=-1,r=e.length;++n<r&&Ft(t,e[n],0)>-1;);return n}function tn(e,t){for(var n=e.length;n--&&Ft(t,e[n],0)>-1;);return n}function nn(e,t){for(var n=e.length,r=0;n--;)e[n]===t&&++r;return r}var rn=Yt({À:"A",Á:"A",Â:"A",Ã:"A",Ä:"A",Å:"A",à:"a",á:"a",â:"a",ã:"a",ä:"a",å:"a",Ç:"C",ç:"c",Ð:"D",ð:"d",È:"E",É:"E",Ê:"E",Ë:"E",è:"e",é:"e",ê:"e",ë:"e",Ì:"I",Í:"I",Î:"I",Ï:"I",ì:"i",í:"i",î:"i",ï:"i",Ñ:"N",ñ:"n",Ò:"O",Ó:"O",Ô:"O",Õ:"O",Ö:"O",Ø:"O",ò:"o",ó:"o",ô:"o",õ:"o",ö:"o",ø:"o",Ù:"U",Ú:"U",Û:"U",Ü:"U",ù:"u",ú:"u",û:"u",ü:"u",Ý:"Y",ý:"y",ÿ:"y",Æ:"Ae",æ:"ae",Þ:"Th",þ:"th",ß:"ss",Ā:"A",Ă:"A",Ą:"A",ā:"a",ă:"a",ą:"a",Ć:"C",Ĉ:"C",Ċ:"C",Č:"C",ć:"c",ĉ:"c",ċ:"c",č:"c",Ď:"D",Đ:"D",ď:"d",đ:"d",Ē:"E",Ĕ:"E",Ė:"E",Ę:"E",Ě:"E",ē:"e",ĕ:"e",ė:"e",ę:"e",ě:"e",Ĝ:"G",Ğ:"G",Ġ:"G",Ģ:"G",ĝ:"g",ğ:"g",ġ:"g",ģ:"g",Ĥ:"H",Ħ:"H",ĥ:"h",ħ:"h",Ĩ:"I",Ī:"I",Ĭ:"I",Į:"I",İ:"I",ĩ:"i",ī:"i",ĭ:"i",į:"i",ı:"i",Ĵ:"J",ĵ:"j",Ķ:"K",ķ:"k",ĸ:"k",Ĺ:"L",Ļ:"L",Ľ:"L",Ŀ:"L",Ł:"L",ĺ:"l",ļ:"l",ľ:"l",ŀ:"l",ł:"l",Ń:"N",Ņ:"N",Ň:"N",Ŋ:"N",ń:"n",ņ:"n",ň:"n",ŋ:"n",Ō:"O",Ŏ:"O",Ő:"O",ō:"o",ŏ:"o",ő:"o",Ŕ:"R",Ŗ:"R",Ř:"R",ŕ:"r",ŗ:"r",ř:"r",Ś:"S",Ŝ:"S",Ş:"S",Š:"S",ś:"s",ŝ:"s",ş:"s",š:"s",Ţ:"T",Ť:"T",Ŧ:"T",ţ:"t",ť:"t",ŧ:"t",Ũ:"U",Ū:"U",Ŭ:"U",Ů:"U",Ű:"U",Ų:"U",ũ:"u",ū:"u",ŭ:"u",ů:"u",ű:"u",ų:"u",Ŵ:"W",ŵ:"w",Ŷ:"Y",ŷ:"y",Ÿ:"Y",Ź:"Z",Ż:"Z",Ž:"Z",ź:"z",ż:"z",ž:"z",Ĳ:"IJ",ĳ:"ij",Œ:"Oe",œ:"oe",ŉ:"'n",ſ:"s"}),on=Yt({"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#39;"});function an(e){return"\\"+lt[e]}function un(e){return nt.test(e)}function ln(e){var t=-1,n=Array(e.size);return e.forEach((function(e,r){n[++t]=[r,e]})),n}function cn(e,t){return function(n){return e(t(n))}}function sn(e,t){for(var n=-1,r=e.length,o=0,i=[];++n<r;){var a=e[n];a!==t&&a!==u||(e[n]=u,i[o++]=n)}return i}function fn(e){var t=-1,n=Array(e.size);return e.forEach((function(e){n[++t]=e})),n}function dn(e){var t=-1,n=Array(e.size);return e.forEach((function(e){n[++t]=[e,e]})),n}function pn(e){return un(e)?function(e){var t=et.lastIndex=0;for(;et.test(e);)++t;return t}(e):It(e)}function hn(e){return un(e)?function(e){return e.match(et)||[]}(e):function(e){return e.split("")}(e)}function vn(e){for(var t=e.length;t--&&ue.test(e.charAt(t)););return t}var gn=Yt({"&amp;":"&","&lt;":"<","&gt;":">","&quot;":'"',"&#39;":"'"});var yn=function e(t){var n,r=(t=null==t?pt:yn.defaults(pt.Object(),t,yn.pick(pt,ot))).Array,ue=t.Date,Ee=t.Error,ke=t.Function,Oe=t.Math,Ce=t.Object,Pe=t.RegExp,Me=t.String,Ae=t.TypeError,Ne=r.prototype,je=ke.prototype,Te=Ce.prototype,De=t["__core-js_shared__"],Re=je.toString,Le=Te.hasOwnProperty,ze=0,Ie=(n=/[^.]+$/.exec(De&&De.keys&&De.keys.IE_PROTO||""))?"Symbol(src)_1."+n:"",Be=Te.toString,Ue=Re.call(Ce),Fe=pt._,Xe=Pe("^"+Re.call(Le).replace(oe,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$"),He=gt?t.Buffer:o,Ve=t.Symbol,We=t.Uint8Array,Ye=He?He.allocUnsafe:o,$e=cn(Ce.getPrototypeOf,Ce),Ze=Ce.create,qe=Te.propertyIsEnumerable,Ge=Ne.splice,Ke=Ve?Ve.isConcatSpreadable:o,et=Ve?Ve.iterator:o,nt=Ve?Ve.toStringTag:o,lt=function(){try{var e=hi(Ce,"defineProperty");return e({},"",{}),e}catch(e){}}(),ft=t.clearTimeout!==pt.clearTimeout&&t.clearTimeout,dt=ue&&ue.now!==pt.Date.now&&ue.now,ht=t.setTimeout!==pt.setTimeout&&t.setTimeout,vt=Oe.ceil,yt=Oe.floor,mt=Ce.getOwnPropertySymbols,It=He?He.isBuffer:o,Yt=t.isFinite,mn=Ne.join,bn=cn(Ce.keys,Ce),wn=Oe.max,_n=Oe.min,xn=ue.now,Sn=t.parseInt,En=Oe.random,kn=Ne.reverse,On=hi(t,"DataView"),Cn=hi(t,"Map"),Pn=hi(t,"Promise"),Mn=hi(t,"Set"),An=hi(t,"WeakMap"),Nn=hi(Ce,"create"),jn=An&&new An,Tn={},Dn=Fi(On),Rn=Fi(Cn),Ln=Fi(Pn),zn=Fi(Mn),In=Fi(An),Bn=Ve?Ve.prototype:o,Un=Bn?Bn.valueOf:o,Fn=Bn?Bn.toString:o;function Xn(e){if(ou(e)&&!$a(e)&&!(e instanceof Yn)){if(e instanceof Wn)return e;if(Le.call(e,"__wrapped__"))return Xi(e)}return new Wn(e)}var Hn=function(){function e(){}return function(t){if(!ru(t))return{};if(Ze)return Ze(t);e.prototype=t;var n=new e;return e.prototype=o,n}}();function Vn(){}function Wn(e,t){this.__wrapped__=e,this.__actions__=[],this.__chain__=!!t,this.__index__=0,this.__values__=o}function Yn(e){this.__wrapped__=e,this.__actions__=[],this.__dir__=1,this.__filtered__=!1,this.__iteratees__=[],this.__takeCount__=g,this.__views__=[]}function $n(e){var t=-1,n=null==e?0:e.length;for(this.clear();++t<n;){var r=e[t];this.set(r[0],r[1])}}function Zn(e){var t=-1,n=null==e?0:e.length;for(this.clear();++t<n;){var r=e[t];this.set(r[0],r[1])}}function qn(e){var t=-1,n=null==e?0:e.length;for(this.clear();++t<n;){var r=e[t];this.set(r[0],r[1])}}function Gn(e){var t=-1,n=null==e?0:e.length;for(this.__data__=new qn;++t<n;)this.add(e[t])}function Kn(e){var t=this.__data__=new Zn(e);this.size=t.size}function Qn(e,t){var n=$a(e),r=!n&&Ya(e),o=!n&&!r&&Ka(e),i=!n&&!r&&!o&&du(e),a=n||r||o||i,u=a?qt(e.length,Me):[],l=u.length;for(var c in e)!t&&!Le.call(e,c)||a&&("length"==c||o&&("offset"==c||"parent"==c)||i&&("buffer"==c||"byteLength"==c||"byteOffset"==c)||_i(c,l))||u.push(c);return u}function Jn(e){var t=e.length;return t?e[Gr(0,t-1)]:o}function er(e,t){return Ii(jo(e),cr(t,0,e.length))}function tr(e){return Ii(jo(e))}function nr(e,t,n){(n!==o&&!Ha(e[t],n)||n===o&&!(t in e))&&ur(e,t,n)}function rr(e,t,n){var r=e[t];Le.call(e,t)&&Ha(r,n)&&(n!==o||t in e)||ur(e,t,n)}function or(e,t){for(var n=e.length;n--;)if(Ha(e[n][0],t))return n;return-1}function ir(e,t,n,r){return hr(e,(function(e,o,i){t(r,e,n(e),i)})),r}function ar(e,t){return e&&To(t,Du(t),e)}function ur(e,t,n){"__proto__"==t&&lt?lt(e,t,{configurable:!0,enumerable:!0,value:n,writable:!0}):e[t]=n}function lr(e,t){for(var n=-1,i=t.length,a=r(i),u=null==e;++n<i;)a[n]=u?o:Mu(e,t[n]);return a}function cr(e,t,n){return e==e&&(n!==o&&(e=e<=n?e:n),t!==o&&(e=e>=t?e:t)),e}function sr(e,t,n,r,i,a){var u,l=1&t,c=2&t,s=4&t;if(n&&(u=i?n(e,r,i,a):n(e)),u!==o)return u;if(!ru(e))return e;var f=$a(e);if(f){if(u=function(e){var t=e.length,n=new e.constructor(t);t&&"string"==typeof e[0]&&Le.call(e,"index")&&(n.index=e.index,n.input=e.input);return n}(e),!l)return jo(e,u)}else{var d=yi(e),p=d==S||d==E;if(Ka(e))return Oo(e,l);if(d==C||d==m||p&&!i){if(u=c||p?{}:bi(e),!l)return c?function(e,t){return To(e,gi(e),t)}(e,function(e,t){return e&&To(t,Ru(t),e)}(u,e)):function(e,t){return To(e,vi(e),t)}(e,ar(u,e))}else{if(!ut[d])return i?e:{};u=function(e,t,n){var r=e.constructor;switch(t){case D:return Co(e);case w:case _:return new r(+e);case R:return function(e,t){var n=t?Co(e.buffer):e.buffer;return new e.constructor(n,e.byteOffset,e.byteLength)}(e,n);case L:case z:case I:case B:case U:case F:case X:case H:case V:return Po(e,n);case k:case A:return new r;case O:case N:return new r(e);case M:return function(e){var t=new e.constructor(e.source,ve.exec(e));return t.lastIndex=e.lastIndex,t}(e);case j:return o=e,Un?Ce(Un.call(o)):{}}var o}(e,d,l)}}a||(a=new Kn);var h=a.get(e);if(h)return h;a.set(e,u),cu(e)?e.forEach((function(r){u.add(sr(r,t,n,r,e,a))})):iu(e)&&e.forEach((function(r,o){u.set(o,sr(r,t,n,o,e,a))}));var v=f?o:(s?c?ui:ai:c?Ru:Du)(e);return Ct(v||e,(function(r,o){v&&(r=e[o=r]),rr(u,o,sr(r,t,n,o,e,a))})),u}function fr(e,t,n){var r=n.length;if(null==e)return!r;for(e=Ce(e);r--;){var i=n[r],a=t[i],u=e[i];if(u===o&&!(i in e)||!a(u))return!1}return!0}function dr(e,t,n){if("function"!=typeof e)throw new Ae(i);return Di((function(){e.apply(o,n)}),t)}function pr(e,t,n,r){var o=-1,i=Nt,a=!0,u=e.length,l=[],c=t.length;if(!u)return l;n&&(t=Tt(t,Kt(n))),r?(i=jt,a=!1):t.length>=200&&(i=Jt,a=!1,t=new Gn(t));e:for(;++o<u;){var s=e[o],f=null==n?s:n(s);if(s=r||0!==s?s:0,a&&f==f){for(var d=c;d--;)if(t[d]===f)continue e;l.push(s)}else i(t,f,r)||l.push(s)}return l}Xn.templateSettings={escape:Q,evaluate:J,interpolate:ee,variable:"",imports:{_:Xn}},Xn.prototype=Vn.prototype,Xn.prototype.constructor=Xn,Wn.prototype=Hn(Vn.prototype),Wn.prototype.constructor=Wn,Yn.prototype=Hn(Vn.prototype),Yn.prototype.constructor=Yn,$n.prototype.clear=function(){this.__data__=Nn?Nn(null):{},this.size=0},$n.prototype.delete=function(e){var t=this.has(e)&&delete this.__data__[e];return this.size-=t?1:0,t},$n.prototype.get=function(e){var t=this.__data__;if(Nn){var n=t[e];return n===a?o:n}return Le.call(t,e)?t[e]:o},$n.prototype.has=function(e){var t=this.__data__;return Nn?t[e]!==o:Le.call(t,e)},$n.prototype.set=function(e,t){var n=this.__data__;return this.size+=this.has(e)?0:1,n[e]=Nn&&t===o?a:t,this},Zn.prototype.clear=function(){this.__data__=[],this.size=0},Zn.prototype.delete=function(e){var t=this.__data__,n=or(t,e);return!(n<0)&&(n==t.length-1?t.pop():Ge.call(t,n,1),--this.size,!0)},Zn.prototype.get=function(e){var t=this.__data__,n=or(t,e);return n<0?o:t[n][1]},Zn.prototype.has=function(e){return or(this.__data__,e)>-1},Zn.prototype.set=function(e,t){var n=this.__data__,r=or(n,e);return r<0?(++this.size,n.push([e,t])):n[r][1]=t,this},qn.prototype.clear=function(){this.size=0,this.__data__={hash:new $n,map:new(Cn||Zn),string:new $n}},qn.prototype.delete=function(e){var t=di(this,e).delete(e);return this.size-=t?1:0,t},qn.prototype.get=function(e){return di(this,e).get(e)},qn.prototype.has=function(e){return di(this,e).has(e)},qn.prototype.set=function(e,t){var n=di(this,e),r=n.size;return n.set(e,t),this.size+=n.size==r?0:1,this},Gn.prototype.add=Gn.prototype.push=function(e){return this.__data__.set(e,a),this},Gn.prototype.has=function(e){return this.__data__.has(e)},Kn.prototype.clear=function(){this.__data__=new Zn,this.size=0},Kn.prototype.delete=function(e){var t=this.__data__,n=t.delete(e);return this.size=t.size,n},Kn.prototype.get=function(e){return this.__data__.get(e)},Kn.prototype.has=function(e){return this.__data__.has(e)},Kn.prototype.set=function(e,t){var n=this.__data__;if(n instanceof Zn){var r=n.__data__;if(!Cn||r.length<199)return r.push([e,t]),this.size=++n.size,this;n=this.__data__=new qn(r)}return n.set(e,t),this.size=n.size,this};var hr=Lo(xr),vr=Lo(Sr,!0);function gr(e,t){var n=!0;return hr(e,(function(e,r,o){return n=!!t(e,r,o)})),n}function yr(e,t,n){for(var r=-1,i=e.length;++r<i;){var a=e[r],u=t(a);if(null!=u&&(l===o?u==u&&!fu(u):n(u,l)))var l=u,c=a}return c}function mr(e,t){var n=[];return hr(e,(function(e,r,o){t(e,r,o)&&n.push(e)})),n}function br(e,t,n,r,o){var i=-1,a=e.length;for(n||(n=wi),o||(o=[]);++i<a;){var u=e[i];t>0&&n(u)?t>1?br(u,t-1,n,r,o):Dt(o,u):r||(o[o.length]=u)}return o}var wr=zo(),_r=zo(!0);function xr(e,t){return e&&wr(e,t,Du)}function Sr(e,t){return e&&_r(e,t,Du)}function Er(e,t){return At(t,(function(t){return eu(e[t])}))}function kr(e,t){for(var n=0,r=(t=xo(t,e)).length;null!=e&&n<r;)e=e[Ui(t[n++])];return n&&n==r?e:o}function Or(e,t,n){var r=t(e);return $a(e)?r:Dt(r,n(e))}function Cr(e){return null==e?e===o?"[object Undefined]":"[object Null]":nt&&nt in Ce(e)?function(e){var t=Le.call(e,nt),n=e[nt];try{e[nt]=o;var r=!0}catch(e){}var i=Be.call(e);r&&(t?e[nt]=n:delete e[nt]);return i}(e):function(e){return Be.call(e)}(e)}function Pr(e,t){return e>t}function Mr(e,t){return null!=e&&Le.call(e,t)}function Ar(e,t){return null!=e&&t in Ce(e)}function Nr(e,t,n){for(var i=n?jt:Nt,a=e[0].length,u=e.length,l=u,c=r(u),s=1/0,f=[];l--;){var d=e[l];l&&t&&(d=Tt(d,Kt(t))),s=_n(d.length,s),c[l]=!n&&(t||a>=120&&d.length>=120)?new Gn(l&&d):o}d=e[0];var p=-1,h=c[0];e:for(;++p<a&&f.length<s;){var v=d[p],g=t?t(v):v;if(v=n||0!==v?v:0,!(h?Jt(h,g):i(f,g,n))){for(l=u;--l;){var y=c[l];if(!(y?Jt(y,g):i(e[l],g,n)))continue e}h&&h.push(g),f.push(v)}}return f}function jr(e,t,n){var r=null==(e=Ai(e,t=xo(t,e)))?e:e[Ui(Ji(t))];return null==r?o:kt(r,e,n)}function Tr(e){return ou(e)&&Cr(e)==m}function Dr(e,t,n,r,i){return e===t||(null==e||null==t||!ou(e)&&!ou(t)?e!=e&&t!=t:function(e,t,n,r,i,a){var u=$a(e),l=$a(t),c=u?b:yi(e),s=l?b:yi(t),f=(c=c==m?C:c)==C,d=(s=s==m?C:s)==C,p=c==s;if(p&&Ka(e)){if(!Ka(t))return!1;u=!0,f=!1}if(p&&!f)return a||(a=new Kn),u||du(e)?oi(e,t,n,r,i,a):function(e,t,n,r,o,i,a){switch(n){case R:if(e.byteLength!=t.byteLength||e.byteOffset!=t.byteOffset)return!1;e=e.buffer,t=t.buffer;case D:return!(e.byteLength!=t.byteLength||!i(new We(e),new We(t)));case w:case _:case O:return Ha(+e,+t);case x:return e.name==t.name&&e.message==t.message;case M:case N:return e==t+"";case k:var u=ln;case A:var l=1&r;if(u||(u=fn),e.size!=t.size&&!l)return!1;var c=a.get(e);if(c)return c==t;r|=2,a.set(e,t);var s=oi(u(e),u(t),r,o,i,a);return a.delete(e),s;case j:if(Un)return Un.call(e)==Un.call(t)}return!1}(e,t,c,n,r,i,a);if(!(1&n)){var h=f&&Le.call(e,"__wrapped__"),v=d&&Le.call(t,"__wrapped__");if(h||v){var g=h?e.value():e,y=v?t.value():t;return a||(a=new Kn),i(g,y,n,r,a)}}if(!p)return!1;return a||(a=new Kn),function(e,t,n,r,i,a){var u=1&n,l=ai(e),c=l.length,s=ai(t).length;if(c!=s&&!u)return!1;var f=c;for(;f--;){var d=l[f];if(!(u?d in t:Le.call(t,d)))return!1}var p=a.get(e),h=a.get(t);if(p&&h)return p==t&&h==e;var v=!0;a.set(e,t),a.set(t,e);var g=u;for(;++f<c;){var y=e[d=l[f]],m=t[d];if(r)var b=u?r(m,y,d,t,e,a):r(y,m,d,e,t,a);if(!(b===o?y===m||i(y,m,n,r,a):b)){v=!1;break}g||(g="constructor"==d)}if(v&&!g){var w=e.constructor,_=t.constructor;w==_||!("constructor"in e)||!("constructor"in t)||"function"==typeof w&&w instanceof w&&"function"==typeof _&&_ instanceof _||(v=!1)}return a.delete(e),a.delete(t),v}(e,t,n,r,i,a)}(e,t,n,r,Dr,i))}function Rr(e,t,n,r){var i=n.length,a=i,u=!r;if(null==e)return!a;for(e=Ce(e);i--;){var l=n[i];if(u&&l[2]?l[1]!==e[l[0]]:!(l[0]in e))return!1}for(;++i<a;){var c=(l=n[i])[0],s=e[c],f=l[1];if(u&&l[2]){if(s===o&&!(c in e))return!1}else{var d=new Kn;if(r)var p=r(s,f,c,e,t,d);if(!(p===o?Dr(f,s,3,r,d):p))return!1}}return!0}function Lr(e){return!(!ru(e)||(t=e,Ie&&Ie in t))&&(eu(e)?Xe:me).test(Fi(e));var t}function zr(e){return"function"==typeof e?e:null==e?al:"object"==typeof e?$a(e)?Hr(e[0],e[1]):Xr(e):vl(e)}function Ir(e){if(!Oi(e))return bn(e);var t=[];for(var n in Ce(e))Le.call(e,n)&&"constructor"!=n&&t.push(n);return t}function Br(e){if(!ru(e))return function(e){var t=[];if(null!=e)for(var n in Ce(e))t.push(n);return t}(e);var t=Oi(e),n=[];for(var r in e)("constructor"!=r||!t&&Le.call(e,r))&&n.push(r);return n}function Ur(e,t){return e<t}function Fr(e,t){var n=-1,o=qa(e)?r(e.length):[];return hr(e,(function(e,r,i){o[++n]=t(e,r,i)})),o}function Xr(e){var t=pi(e);return 1==t.length&&t[0][2]?Pi(t[0][0],t[0][1]):function(n){return n===e||Rr(n,e,t)}}function Hr(e,t){return Si(e)&&Ci(t)?Pi(Ui(e),t):function(n){var r=Mu(n,e);return r===o&&r===t?Au(n,e):Dr(t,r,3)}}function Vr(e,t,n,r,i){e!==t&&wr(t,(function(a,u){if(i||(i=new Kn),ru(a))!function(e,t,n,r,i,a,u){var l=ji(e,n),c=ji(t,n),s=u.get(c);if(s)return void nr(e,n,s);var f=a?a(l,c,n+"",e,t,u):o,d=f===o;if(d){var p=$a(c),h=!p&&Ka(c),v=!p&&!h&&du(c);f=c,p||h||v?$a(l)?f=l:Ga(l)?f=jo(l):h?(d=!1,f=Oo(c,!0)):v?(d=!1,f=Po(c,!0)):f=[]:uu(c)||Ya(c)?(f=l,Ya(l)?f=wu(l):ru(l)&&!eu(l)||(f=bi(c))):d=!1}d&&(u.set(c,f),i(f,c,r,a,u),u.delete(c));nr(e,n,f)}(e,t,u,n,Vr,r,i);else{var l=r?r(ji(e,u),a,u+"",e,t,i):o;l===o&&(l=a),nr(e,u,l)}}),Ru)}function Wr(e,t){var n=e.length;if(n)return _i(t+=t<0?n:0,n)?e[t]:o}function Yr(e,t,n){t=t.length?Tt(t,(function(e){return $a(e)?function(t){return kr(t,1===e.length?e[0]:e)}:e})):[al];var r=-1;t=Tt(t,Kt(fi()));var o=Fr(e,(function(e,n,o){var i=Tt(t,(function(t){return t(e)}));return{criteria:i,index:++r,value:e}}));return function(e,t){var n=e.length;for(e.sort(t);n--;)e[n]=e[n].value;return e}(o,(function(e,t){return function(e,t,n){var r=-1,o=e.criteria,i=t.criteria,a=o.length,u=n.length;for(;++r<a;){var l=Mo(o[r],i[r]);if(l)return r>=u?l:l*("desc"==n[r]?-1:1)}return e.index-t.index}(e,t,n)}))}function $r(e,t,n){for(var r=-1,o=t.length,i={};++r<o;){var a=t[r],u=kr(e,a);n(u,a)&&to(i,xo(a,e),u)}return i}function Zr(e,t,n,r){var o=r?Xt:Ft,i=-1,a=t.length,u=e;for(e===t&&(t=jo(t)),n&&(u=Tt(e,Kt(n)));++i<a;)for(var l=0,c=t[i],s=n?n(c):c;(l=o(u,s,l,r))>-1;)u!==e&&Ge.call(u,l,1),Ge.call(e,l,1);return e}function qr(e,t){for(var n=e?t.length:0,r=n-1;n--;){var o=t[n];if(n==r||o!==i){var i=o;_i(o)?Ge.call(e,o,1):ho(e,o)}}return e}function Gr(e,t){return e+yt(En()*(t-e+1))}function Kr(e,t){var n="";if(!e||t<1||t>h)return n;do{t%2&&(n+=e),(t=yt(t/2))&&(e+=e)}while(t);return n}function Qr(e,t){return Ri(Mi(e,t,al),e+"")}function Jr(e){return Jn(Hu(e))}function eo(e,t){var n=Hu(e);return Ii(n,cr(t,0,n.length))}function to(e,t,n,r){if(!ru(e))return e;for(var i=-1,a=(t=xo(t,e)).length,u=a-1,l=e;null!=l&&++i<a;){var c=Ui(t[i]),s=n;if("__proto__"===c||"constructor"===c||"prototype"===c)return e;if(i!=u){var f=l[c];(s=r?r(f,c,l):o)===o&&(s=ru(f)?f:_i(t[i+1])?[]:{})}rr(l,c,s),l=l[c]}return e}var no=jn?function(e,t){return jn.set(e,t),e}:al,ro=lt?function(e,t){return lt(e,"toString",{configurable:!0,enumerable:!1,value:rl(t),writable:!0})}:al;function oo(e){return Ii(Hu(e))}function io(e,t,n){var o=-1,i=e.length;t<0&&(t=-t>i?0:i+t),(n=n>i?i:n)<0&&(n+=i),i=t>n?0:n-t>>>0,t>>>=0;for(var a=r(i);++o<i;)a[o]=e[o+t];return a}function ao(e,t){var n;return hr(e,(function(e,r,o){return!(n=t(e,r,o))})),!!n}function uo(e,t,n){var r=0,o=null==e?r:e.length;if("number"==typeof t&&t==t&&o<=2147483647){for(;r<o;){var i=r+o>>>1,a=e[i];null!==a&&!fu(a)&&(n?a<=t:a<t)?r=i+1:o=i}return o}return lo(e,t,al,n)}function lo(e,t,n,r){var i=0,a=null==e?0:e.length;if(0===a)return 0;for(var u=(t=n(t))!=t,l=null===t,c=fu(t),s=t===o;i<a;){var f=yt((i+a)/2),d=n(e[f]),p=d!==o,h=null===d,v=d==d,g=fu(d);if(u)var y=r||v;else y=s?v&&(r||p):l?v&&p&&(r||!h):c?v&&p&&!h&&(r||!g):!h&&!g&&(r?d<=t:d<t);y?i=f+1:a=f}return _n(a,4294967294)}function co(e,t){for(var n=-1,r=e.length,o=0,i=[];++n<r;){var a=e[n],u=t?t(a):a;if(!n||!Ha(u,l)){var l=u;i[o++]=0===a?0:a}}return i}function so(e){return"number"==typeof e?e:fu(e)?v:+e}function fo(e){if("string"==typeof e)return e;if($a(e))return Tt(e,fo)+"";if(fu(e))return Fn?Fn.call(e):"";var t=e+"";return"0"==t&&1/e==-1/0?"-0":t}function po(e,t,n){var r=-1,o=Nt,i=e.length,a=!0,u=[],l=u;if(n)a=!1,o=jt;else if(i>=200){var c=t?null:Qo(e);if(c)return fn(c);a=!1,o=Jt,l=new Gn}else l=t?[]:u;e:for(;++r<i;){var s=e[r],f=t?t(s):s;if(s=n||0!==s?s:0,a&&f==f){for(var d=l.length;d--;)if(l[d]===f)continue e;t&&l.push(f),u.push(s)}else o(l,f,n)||(l!==u&&l.push(f),u.push(s))}return u}function ho(e,t){return null==(e=Ai(e,t=xo(t,e)))||delete e[Ui(Ji(t))]}function vo(e,t,n,r){return to(e,t,n(kr(e,t)),r)}function go(e,t,n,r){for(var o=e.length,i=r?o:-1;(r?i--:++i<o)&&t(e[i],i,e););return n?io(e,r?0:i,r?i+1:o):io(e,r?i+1:0,r?o:i)}function yo(e,t){var n=e;return n instanceof Yn&&(n=n.value()),Rt(t,(function(e,t){return t.func.apply(t.thisArg,Dt([e],t.args))}),n)}function mo(e,t,n){var o=e.length;if(o<2)return o?po(e[0]):[];for(var i=-1,a=r(o);++i<o;)for(var u=e[i],l=-1;++l<o;)l!=i&&(a[i]=pr(a[i]||u,e[l],t,n));return po(br(a,1),t,n)}function bo(e,t,n){for(var r=-1,i=e.length,a=t.length,u={};++r<i;){var l=r<a?t[r]:o;n(u,e[r],l)}return u}function wo(e){return Ga(e)?e:[]}function _o(e){return"function"==typeof e?e:al}function xo(e,t){return $a(e)?e:Si(e,t)?[e]:Bi(_u(e))}var So=Qr;function Eo(e,t,n){var r=e.length;return n=n===o?r:n,!t&&n>=r?e:io(e,t,n)}var ko=ft||function(e){return pt.clearTimeout(e)};function Oo(e,t){if(t)return e.slice();var n=e.length,r=Ye?Ye(n):new e.constructor(n);return e.copy(r),r}function Co(e){var t=new e.constructor(e.byteLength);return new We(t).set(new We(e)),t}function Po(e,t){var n=t?Co(e.buffer):e.buffer;return new e.constructor(n,e.byteOffset,e.length)}function Mo(e,t){if(e!==t){var n=e!==o,r=null===e,i=e==e,a=fu(e),u=t!==o,l=null===t,c=t==t,s=fu(t);if(!l&&!s&&!a&&e>t||a&&u&&c&&!l&&!s||r&&u&&c||!n&&c||!i)return 1;if(!r&&!a&&!s&&e<t||s&&n&&i&&!r&&!a||l&&n&&i||!u&&i||!c)return-1}return 0}function Ao(e,t,n,o){for(var i=-1,a=e.length,u=n.length,l=-1,c=t.length,s=wn(a-u,0),f=r(c+s),d=!o;++l<c;)f[l]=t[l];for(;++i<u;)(d||i<a)&&(f[n[i]]=e[i]);for(;s--;)f[l++]=e[i++];return f}function No(e,t,n,o){for(var i=-1,a=e.length,u=-1,l=n.length,c=-1,s=t.length,f=wn(a-l,0),d=r(f+s),p=!o;++i<f;)d[i]=e[i];for(var h=i;++c<s;)d[h+c]=t[c];for(;++u<l;)(p||i<a)&&(d[h+n[u]]=e[i++]);return d}function jo(e,t){var n=-1,o=e.length;for(t||(t=r(o));++n<o;)t[n]=e[n];return t}function To(e,t,n,r){var i=!n;n||(n={});for(var a=-1,u=t.length;++a<u;){var l=t[a],c=r?r(n[l],e[l],l,n,e):o;c===o&&(c=e[l]),i?ur(n,l,c):rr(n,l,c)}return n}function Do(e,t){return function(n,r){var o=$a(n)?Ot:ir,i=t?t():{};return o(n,e,fi(r,2),i)}}function Ro(e){return Qr((function(t,n){var r=-1,i=n.length,a=i>1?n[i-1]:o,u=i>2?n[2]:o;for(a=e.length>3&&"function"==typeof a?(i--,a):o,u&&xi(n[0],n[1],u)&&(a=i<3?o:a,i=1),t=Ce(t);++r<i;){var l=n[r];l&&e(t,l,r,a)}return t}))}function Lo(e,t){return function(n,r){if(null==n)return n;if(!qa(n))return e(n,r);for(var o=n.length,i=t?o:-1,a=Ce(n);(t?i--:++i<o)&&!1!==r(a[i],i,a););return n}}function zo(e){return function(t,n,r){for(var o=-1,i=Ce(t),a=r(t),u=a.length;u--;){var l=a[e?u:++o];if(!1===n(i[l],l,i))break}return t}}function Io(e){return function(t){var n=un(t=_u(t))?hn(t):o,r=n?n[0]:t.charAt(0),i=n?Eo(n,1).join(""):t.slice(1);return r[e]()+i}}function Bo(e){return function(t){return Rt(el(Yu(t).replace(Qe,"")),e,"")}}function Uo(e){return function(){var t=arguments;switch(t.length){case 0:return new e;case 1:return new e(t[0]);case 2:return new e(t[0],t[1]);case 3:return new e(t[0],t[1],t[2]);case 4:return new e(t[0],t[1],t[2],t[3]);case 5:return new e(t[0],t[1],t[2],t[3],t[4]);case 6:return new e(t[0],t[1],t[2],t[3],t[4],t[5]);case 7:return new e(t[0],t[1],t[2],t[3],t[4],t[5],t[6])}var n=Hn(e.prototype),r=e.apply(n,t);return ru(r)?r:n}}function Fo(e){return function(t,n,r){var i=Ce(t);if(!qa(t)){var a=fi(n,3);t=Du(t),n=function(e){return a(i[e],e,i)}}var u=e(t,n,r);return u>-1?i[a?t[u]:u]:o}}function Xo(e){return ii((function(t){var n=t.length,r=n,a=Wn.prototype.thru;for(e&&t.reverse();r--;){var u=t[r];if("function"!=typeof u)throw new Ae(i);if(a&&!l&&"wrapper"==ci(u))var l=new Wn([],!0)}for(r=l?r:n;++r<n;){var c=ci(u=t[r]),s="wrapper"==c?li(u):o;l=s&&Ei(s[0])&&424==s[1]&&!s[4].length&&1==s[9]?l[ci(s[0])].apply(l,s[3]):1==u.length&&Ei(u)?l[c]():l.thru(u)}return function(){var e=arguments,r=e[0];if(l&&1==e.length&&$a(r))return l.plant(r).value();for(var o=0,i=n?t[o].apply(this,e):r;++o<n;)i=t[o].call(this,i);return i}}))}function Ho(e,t,n,i,a,u,l,c,s,d){var p=t&f,h=1&t,v=2&t,g=24&t,y=512&t,m=v?o:Uo(e);return function o(){for(var f=arguments.length,b=r(f),w=f;w--;)b[w]=arguments[w];if(g)var _=si(o),x=nn(b,_);if(i&&(b=Ao(b,i,a,g)),u&&(b=No(b,u,l,g)),f-=x,g&&f<d){var S=sn(b,_);return Go(e,t,Ho,o.placeholder,n,b,S,c,s,d-f)}var E=h?n:this,k=v?E[e]:e;return f=b.length,c?b=Ni(b,c):y&&f>1&&b.reverse(),p&&s<f&&(b.length=s),this&&this!==pt&&this instanceof o&&(k=m||Uo(k)),k.apply(E,b)}}function Vo(e,t){return function(n,r){return function(e,t,n,r){return xr(e,(function(e,o,i){t(r,n(e),o,i)})),r}(n,e,t(r),{})}}function Wo(e,t){return function(n,r){var i;if(n===o&&r===o)return t;if(n!==o&&(i=n),r!==o){if(i===o)return r;"string"==typeof n||"string"==typeof r?(n=fo(n),r=fo(r)):(n=so(n),r=so(r)),i=e(n,r)}return i}}function Yo(e){return ii((function(t){return t=Tt(t,Kt(fi())),Qr((function(n){var r=this;return e(t,(function(e){return kt(e,r,n)}))}))}))}function $o(e,t){var n=(t=t===o?" ":fo(t)).length;if(n<2)return n?Kr(t,e):t;var r=Kr(t,vt(e/pn(t)));return un(t)?Eo(hn(r),0,e).join(""):r.slice(0,e)}function Zo(e){return function(t,n,i){return i&&"number"!=typeof i&&xi(t,n,i)&&(n=i=o),t=gu(t),n===o?(n=t,t=0):n=gu(n),function(e,t,n,o){for(var i=-1,a=wn(vt((t-e)/(n||1)),0),u=r(a);a--;)u[o?a:++i]=e,e+=n;return u}(t,n,i=i===o?t<n?1:-1:gu(i),e)}}function qo(e){return function(t,n){return"string"==typeof t&&"string"==typeof n||(t=bu(t),n=bu(n)),e(t,n)}}function Go(e,t,n,r,i,a,u,l,f,d){var p=8&t;t|=p?c:s,4&(t&=~(p?s:c))||(t&=-4);var h=[e,t,i,p?a:o,p?u:o,p?o:a,p?o:u,l,f,d],v=n.apply(o,h);return Ei(e)&&Ti(v,h),v.placeholder=r,Li(v,e,t)}function Ko(e){var t=Oe[e];return function(e,n){if(e=bu(e),(n=null==n?0:_n(yu(n),292))&&Yt(e)){var r=(_u(e)+"e").split("e");return+((r=(_u(t(r[0]+"e"+(+r[1]+n)))+"e").split("e"))[0]+"e"+(+r[1]-n))}return t(e)}}var Qo=Mn&&1/fn(new Mn([,-0]))[1]==p?function(e){return new Mn(e)}:fl;function Jo(e){return function(t){var n=yi(t);return n==k?ln(t):n==A?dn(t):function(e,t){return Tt(t,(function(t){return[t,e[t]]}))}(t,e(t))}}function ei(e,t,n,a,p,h,v,g){var y=2&t;if(!y&&"function"!=typeof e)throw new Ae(i);var m=a?a.length:0;if(m||(t&=-97,a=p=o),v=v===o?v:wn(yu(v),0),g=g===o?g:yu(g),m-=p?p.length:0,t&s){var b=a,w=p;a=p=o}var _=y?o:li(e),x=[e,t,n,a,p,b,w,h,v,g];if(_&&function(e,t){var n=e[1],r=t[1],o=n|r,i=o<131,a=r==f&&8==n||r==f&&n==d&&e[7].length<=t[8]||384==r&&t[7].length<=t[8]&&8==n;if(!i&&!a)return e;1&r&&(e[2]=t[2],o|=1&n?0:4);var l=t[3];if(l){var c=e[3];e[3]=c?Ao(c,l,t[4]):l,e[4]=c?sn(e[3],u):t[4]}(l=t[5])&&(c=e[5],e[5]=c?No(c,l,t[6]):l,e[6]=c?sn(e[5],u):t[6]);(l=t[7])&&(e[7]=l);r&f&&(e[8]=null==e[8]?t[8]:_n(e[8],t[8]));null==e[9]&&(e[9]=t[9]);e[0]=t[0],e[1]=o}(x,_),e=x[0],t=x[1],n=x[2],a=x[3],p=x[4],!(g=x[9]=x[9]===o?y?0:e.length:wn(x[9]-m,0))&&24&t&&(t&=-25),t&&1!=t)S=8==t||t==l?function(e,t,n){var i=Uo(e);return function a(){for(var u=arguments.length,l=r(u),c=u,s=si(a);c--;)l[c]=arguments[c];var f=u<3&&l[0]!==s&&l[u-1]!==s?[]:sn(l,s);return(u-=f.length)<n?Go(e,t,Ho,a.placeholder,o,l,f,o,o,n-u):kt(this&&this!==pt&&this instanceof a?i:e,this,l)}}(e,t,g):t!=c&&33!=t||p.length?Ho.apply(o,x):function(e,t,n,o){var i=1&t,a=Uo(e);return function t(){for(var u=-1,l=arguments.length,c=-1,s=o.length,f=r(s+l),d=this&&this!==pt&&this instanceof t?a:e;++c<s;)f[c]=o[c];for(;l--;)f[c++]=arguments[++u];return kt(d,i?n:this,f)}}(e,t,n,a);else var S=function(e,t,n){var r=1&t,o=Uo(e);return function t(){return(this&&this!==pt&&this instanceof t?o:e).apply(r?n:this,arguments)}}(e,t,n);return Li((_?no:Ti)(S,x),e,t)}function ti(e,t,n,r){return e===o||Ha(e,Te[n])&&!Le.call(r,n)?t:e}function ni(e,t,n,r,i,a){return ru(e)&&ru(t)&&(a.set(t,e),Vr(e,t,o,ni,a),a.delete(t)),e}function ri(e){return uu(e)?o:e}function oi(e,t,n,r,i,a){var u=1&n,l=e.length,c=t.length;if(l!=c&&!(u&&c>l))return!1;var s=a.get(e),f=a.get(t);if(s&&f)return s==t&&f==e;var d=-1,p=!0,h=2&n?new Gn:o;for(a.set(e,t),a.set(t,e);++d<l;){var v=e[d],g=t[d];if(r)var y=u?r(g,v,d,t,e,a):r(v,g,d,e,t,a);if(y!==o){if(y)continue;p=!1;break}if(h){if(!zt(t,(function(e,t){if(!Jt(h,t)&&(v===e||i(v,e,n,r,a)))return h.push(t)}))){p=!1;break}}else if(v!==g&&!i(v,g,n,r,a)){p=!1;break}}return a.delete(e),a.delete(t),p}function ii(e){return Ri(Mi(e,o,Zi),e+"")}function ai(e){return Or(e,Du,vi)}function ui(e){return Or(e,Ru,gi)}var li=jn?function(e){return jn.get(e)}:fl;function ci(e){for(var t=e.name+"",n=Tn[t],r=Le.call(Tn,t)?n.length:0;r--;){var o=n[r],i=o.func;if(null==i||i==e)return o.name}return t}function si(e){return(Le.call(Xn,"placeholder")?Xn:e).placeholder}function fi(){var e=Xn.iteratee||ul;return e=e===ul?zr:e,arguments.length?e(arguments[0],arguments[1]):e}function di(e,t){var n,r,o=e.__data__;return("string"==(r=typeof(n=t))||"number"==r||"symbol"==r||"boolean"==r?"__proto__"!==n:null===n)?o["string"==typeof t?"string":"hash"]:o.map}function pi(e){for(var t=Du(e),n=t.length;n--;){var r=t[n],o=e[r];t[n]=[r,o,Ci(o)]}return t}function hi(e,t){var n=function(e,t){return null==e?o:e[t]}(e,t);return Lr(n)?n:o}var vi=mt?function(e){return null==e?[]:(e=Ce(e),At(mt(e),(function(t){return qe.call(e,t)})))}:ml,gi=mt?function(e){for(var t=[];e;)Dt(t,vi(e)),e=$e(e);return t}:ml,yi=Cr;function mi(e,t,n){for(var r=-1,o=(t=xo(t,e)).length,i=!1;++r<o;){var a=Ui(t[r]);if(!(i=null!=e&&n(e,a)))break;e=e[a]}return i||++r!=o?i:!!(o=null==e?0:e.length)&&nu(o)&&_i(a,o)&&($a(e)||Ya(e))}function bi(e){return"function"!=typeof e.constructor||Oi(e)?{}:Hn($e(e))}function wi(e){return $a(e)||Ya(e)||!!(Ke&&e&&e[Ke])}function _i(e,t){var n=typeof e;return!!(t=null==t?h:t)&&("number"==n||"symbol"!=n&&we.test(e))&&e>-1&&e%1==0&&e<t}function xi(e,t,n){if(!ru(n))return!1;var r=typeof t;return!!("number"==r?qa(n)&&_i(t,n.length):"string"==r&&t in n)&&Ha(n[t],e)}function Si(e,t){if($a(e))return!1;var n=typeof e;return!("number"!=n&&"symbol"!=n&&"boolean"!=n&&null!=e&&!fu(e))||(ne.test(e)||!te.test(e)||null!=t&&e in Ce(t))}function Ei(e){var t=ci(e),n=Xn[t];if("function"!=typeof n||!(t in Yn.prototype))return!1;if(e===n)return!0;var r=li(n);return!!r&&e===r[0]}(On&&yi(new On(new ArrayBuffer(1)))!=R||Cn&&yi(new Cn)!=k||Pn&&yi(Pn.resolve())!=P||Mn&&yi(new Mn)!=A||An&&yi(new An)!=T)&&(yi=function(e){var t=Cr(e),n=t==C?e.constructor:o,r=n?Fi(n):"";if(r)switch(r){case Dn:return R;case Rn:return k;case Ln:return P;case zn:return A;case In:return T}return t});var ki=De?eu:bl;function Oi(e){var t=e&&e.constructor;return e===("function"==typeof t&&t.prototype||Te)}function Ci(e){return e==e&&!ru(e)}function Pi(e,t){return function(n){return null!=n&&(n[e]===t&&(t!==o||e in Ce(n)))}}function Mi(e,t,n){return t=wn(t===o?e.length-1:t,0),function(){for(var o=arguments,i=-1,a=wn(o.length-t,0),u=r(a);++i<a;)u[i]=o[t+i];i=-1;for(var l=r(t+1);++i<t;)l[i]=o[i];return l[t]=n(u),kt(e,this,l)}}function Ai(e,t){return t.length<2?e:kr(e,io(t,0,-1))}function Ni(e,t){for(var n=e.length,r=_n(t.length,n),i=jo(e);r--;){var a=t[r];e[r]=_i(a,n)?i[a]:o}return e}function ji(e,t){if(("constructor"!==t||"function"!=typeof e[t])&&"__proto__"!=t)return e[t]}var Ti=zi(no),Di=ht||function(e,t){return pt.setTimeout(e,t)},Ri=zi(ro);function Li(e,t,n){var r=t+"";return Ri(e,function(e,t){var n=t.length;if(!n)return e;var r=n-1;return t[r]=(n>1?"& ":"")+t[r],t=t.join(n>2?", ":" "),e.replace(le,"{\n/* [wrapped with "+t+"] */\n")}(r,function(e,t){return Ct(y,(function(n){var r="_."+n[0];t&n[1]&&!Nt(e,r)&&e.push(r)})),e.sort()}(function(e){var t=e.match(ce);return t?t[1].split(se):[]}(r),n)))}function zi(e){var t=0,n=0;return function(){var r=xn(),i=16-(r-n);if(n=r,i>0){if(++t>=800)return arguments[0]}else t=0;return e.apply(o,arguments)}}function Ii(e,t){var n=-1,r=e.length,i=r-1;for(t=t===o?r:t;++n<t;){var a=Gr(n,i),u=e[a];e[a]=e[n],e[n]=u}return e.length=t,e}var Bi=function(e){var t=za(e,(function(e){return 500===n.size&&n.clear(),e})),n=t.cache;return t}((function(e){var t=[];return 46===e.charCodeAt(0)&&t.push(""),e.replace(re,(function(e,n,r,o){t.push(r?o.replace(pe,"$1"):n||e)})),t}));function Ui(e){if("string"==typeof e||fu(e))return e;var t=e+"";return"0"==t&&1/e==-1/0?"-0":t}function Fi(e){if(null!=e){try{return Re.call(e)}catch(e){}try{return e+""}catch(e){}}return""}function Xi(e){if(e instanceof Yn)return e.clone();var t=new Wn(e.__wrapped__,e.__chain__);return t.__actions__=jo(e.__actions__),t.__index__=e.__index__,t.__values__=e.__values__,t}var Hi=Qr((function(e,t){return Ga(e)?pr(e,br(t,1,Ga,!0)):[]})),Vi=Qr((function(e,t){var n=Ji(t);return Ga(n)&&(n=o),Ga(e)?pr(e,br(t,1,Ga,!0),fi(n,2)):[]})),Wi=Qr((function(e,t){var n=Ji(t);return Ga(n)&&(n=o),Ga(e)?pr(e,br(t,1,Ga,!0),o,n):[]}));function Yi(e,t,n){var r=null==e?0:e.length;if(!r)return-1;var o=null==n?0:yu(n);return o<0&&(o=wn(r+o,0)),Ut(e,fi(t,3),o)}function $i(e,t,n){var r=null==e?0:e.length;if(!r)return-1;var i=r-1;return n!==o&&(i=yu(n),i=n<0?wn(r+i,0):_n(i,r-1)),Ut(e,fi(t,3),i,!0)}function Zi(e){return(null==e?0:e.length)?br(e,1):[]}function qi(e){return e&&e.length?e[0]:o}var Gi=Qr((function(e){var t=Tt(e,wo);return t.length&&t[0]===e[0]?Nr(t):[]})),Ki=Qr((function(e){var t=Ji(e),n=Tt(e,wo);return t===Ji(n)?t=o:n.pop(),n.length&&n[0]===e[0]?Nr(n,fi(t,2)):[]})),Qi=Qr((function(e){var t=Ji(e),n=Tt(e,wo);return(t="function"==typeof t?t:o)&&n.pop(),n.length&&n[0]===e[0]?Nr(n,o,t):[]}));function Ji(e){var t=null==e?0:e.length;return t?e[t-1]:o}var ea=Qr(ta);function ta(e,t){return e&&e.length&&t&&t.length?Zr(e,t):e}var na=ii((function(e,t){var n=null==e?0:e.length,r=lr(e,t);return qr(e,Tt(t,(function(e){return _i(e,n)?+e:e})).sort(Mo)),r}));function ra(e){return null==e?e:kn.call(e)}var oa=Qr((function(e){return po(br(e,1,Ga,!0))})),ia=Qr((function(e){var t=Ji(e);return Ga(t)&&(t=o),po(br(e,1,Ga,!0),fi(t,2))})),aa=Qr((function(e){var t=Ji(e);return t="function"==typeof t?t:o,po(br(e,1,Ga,!0),o,t)}));function ua(e){if(!e||!e.length)return[];var t=0;return e=At(e,(function(e){if(Ga(e))return t=wn(e.length,t),!0})),qt(t,(function(t){return Tt(e,Wt(t))}))}function la(e,t){if(!e||!e.length)return[];var n=ua(e);return null==t?n:Tt(n,(function(e){return kt(t,o,e)}))}var ca=Qr((function(e,t){return Ga(e)?pr(e,t):[]})),sa=Qr((function(e){return mo(At(e,Ga))})),fa=Qr((function(e){var t=Ji(e);return Ga(t)&&(t=o),mo(At(e,Ga),fi(t,2))})),da=Qr((function(e){var t=Ji(e);return t="function"==typeof t?t:o,mo(At(e,Ga),o,t)})),pa=Qr(ua);var ha=Qr((function(e){var t=e.length,n=t>1?e[t-1]:o;return n="function"==typeof n?(e.pop(),n):o,la(e,n)}));function va(e){var t=Xn(e);return t.__chain__=!0,t}function ga(e,t){return t(e)}var ya=ii((function(e){var t=e.length,n=t?e[0]:0,r=this.__wrapped__,i=function(t){return lr(t,e)};return!(t>1||this.__actions__.length)&&r instanceof Yn&&_i(n)?((r=r.slice(n,+n+(t?1:0))).__actions__.push({func:ga,args:[i],thisArg:o}),new Wn(r,this.__chain__).thru((function(e){return t&&!e.length&&e.push(o),e}))):this.thru(i)}));var ma=Do((function(e,t,n){Le.call(e,n)?++e[n]:ur(e,n,1)}));var ba=Fo(Yi),wa=Fo($i);function _a(e,t){return($a(e)?Ct:hr)(e,fi(t,3))}function xa(e,t){return($a(e)?Pt:vr)(e,fi(t,3))}var Sa=Do((function(e,t,n){Le.call(e,n)?e[n].push(t):ur(e,n,[t])}));var Ea=Qr((function(e,t,n){var o=-1,i="function"==typeof t,a=qa(e)?r(e.length):[];return hr(e,(function(e){a[++o]=i?kt(t,e,n):jr(e,t,n)})),a})),ka=Do((function(e,t,n){ur(e,n,t)}));function Oa(e,t){return($a(e)?Tt:Fr)(e,fi(t,3))}var Ca=Do((function(e,t,n){e[n?0:1].push(t)}),(function(){return[[],[]]}));var Pa=Qr((function(e,t){if(null==e)return[];var n=t.length;return n>1&&xi(e,t[0],t[1])?t=[]:n>2&&xi(t[0],t[1],t[2])&&(t=[t[0]]),Yr(e,br(t,1),[])})),Ma=dt||function(){return pt.Date.now()};function Aa(e,t,n){return t=n?o:t,t=e&&null==t?e.length:t,ei(e,f,o,o,o,o,t)}function Na(e,t){var n;if("function"!=typeof t)throw new Ae(i);return e=yu(e),function(){return--e>0&&(n=t.apply(this,arguments)),e<=1&&(t=o),n}}var ja=Qr((function(e,t,n){var r=1;if(n.length){var o=sn(n,si(ja));r|=c}return ei(e,r,t,n,o)})),Ta=Qr((function(e,t,n){var r=3;if(n.length){var o=sn(n,si(Ta));r|=c}return ei(t,r,e,n,o)}));function Da(e,t,n){var r,a,u,l,c,s,f=0,d=!1,p=!1,h=!0;if("function"!=typeof e)throw new Ae(i);function v(t){var n=r,i=a;return r=a=o,f=t,l=e.apply(i,n)}function g(e){return f=e,c=Di(m,t),d?v(e):l}function y(e){var n=e-s;return s===o||n>=t||n<0||p&&e-f>=u}function m(){var e=Ma();if(y(e))return b(e);c=Di(m,function(e){var n=t-(e-s);return p?_n(n,u-(e-f)):n}(e))}function b(e){return c=o,h&&r?v(e):(r=a=o,l)}function w(){var e=Ma(),n=y(e);if(r=arguments,a=this,s=e,n){if(c===o)return g(s);if(p)return ko(c),c=Di(m,t),v(s)}return c===o&&(c=Di(m,t)),l}return t=bu(t)||0,ru(n)&&(d=!!n.leading,u=(p="maxWait"in n)?wn(bu(n.maxWait)||0,t):u,h="trailing"in n?!!n.trailing:h),w.cancel=function(){c!==o&&ko(c),f=0,r=s=a=c=o},w.flush=function(){return c===o?l:b(Ma())},w}var Ra=Qr((function(e,t){return dr(e,1,t)})),La=Qr((function(e,t,n){return dr(e,bu(t)||0,n)}));function za(e,t){if("function"!=typeof e||null!=t&&"function"!=typeof t)throw new Ae(i);var n=function(){var r=arguments,o=t?t.apply(this,r):r[0],i=n.cache;if(i.has(o))return i.get(o);var a=e.apply(this,r);return n.cache=i.set(o,a)||i,a};return n.cache=new(za.Cache||qn),n}function Ia(e){if("function"!=typeof e)throw new Ae(i);return function(){var t=arguments;switch(t.length){case 0:return!e.call(this);case 1:return!e.call(this,t[0]);case 2:return!e.call(this,t[0],t[1]);case 3:return!e.call(this,t[0],t[1],t[2])}return!e.apply(this,t)}}za.Cache=qn;var Ba=So((function(e,t){var n=(t=1==t.length&&$a(t[0])?Tt(t[0],Kt(fi())):Tt(br(t,1),Kt(fi()))).length;return Qr((function(r){for(var o=-1,i=_n(r.length,n);++o<i;)r[o]=t[o].call(this,r[o]);return kt(e,this,r)}))})),Ua=Qr((function(e,t){var n=sn(t,si(Ua));return ei(e,c,o,t,n)})),Fa=Qr((function(e,t){var n=sn(t,si(Fa));return ei(e,s,o,t,n)})),Xa=ii((function(e,t){return ei(e,d,o,o,o,t)}));function Ha(e,t){return e===t||e!=e&&t!=t}var Va=qo(Pr),Wa=qo((function(e,t){return e>=t})),Ya=Tr(function(){return arguments}())?Tr:function(e){return ou(e)&&Le.call(e,"callee")&&!qe.call(e,"callee")},$a=r.isArray,Za=bt?Kt(bt):function(e){return ou(e)&&Cr(e)==D};function qa(e){return null!=e&&nu(e.length)&&!eu(e)}function Ga(e){return ou(e)&&qa(e)}var Ka=It||bl,Qa=wt?Kt(wt):function(e){return ou(e)&&Cr(e)==_};function Ja(e){if(!ou(e))return!1;var t=Cr(e);return t==x||"[object DOMException]"==t||"string"==typeof e.message&&"string"==typeof e.name&&!uu(e)}function eu(e){if(!ru(e))return!1;var t=Cr(e);return t==S||t==E||"[object AsyncFunction]"==t||"[object Proxy]"==t}function tu(e){return"number"==typeof e&&e==yu(e)}function nu(e){return"number"==typeof e&&e>-1&&e%1==0&&e<=h}function ru(e){var t=typeof e;return null!=e&&("object"==t||"function"==t)}function ou(e){return null!=e&&"object"==typeof e}var iu=_t?Kt(_t):function(e){return ou(e)&&yi(e)==k};function au(e){return"number"==typeof e||ou(e)&&Cr(e)==O}function uu(e){if(!ou(e)||Cr(e)!=C)return!1;var t=$e(e);if(null===t)return!0;var n=Le.call(t,"constructor")&&t.constructor;return"function"==typeof n&&n instanceof n&&Re.call(n)==Ue}var lu=xt?Kt(xt):function(e){return ou(e)&&Cr(e)==M};var cu=St?Kt(St):function(e){return ou(e)&&yi(e)==A};function su(e){return"string"==typeof e||!$a(e)&&ou(e)&&Cr(e)==N}function fu(e){return"symbol"==typeof e||ou(e)&&Cr(e)==j}var du=Et?Kt(Et):function(e){return ou(e)&&nu(e.length)&&!!at[Cr(e)]};var pu=qo(Ur),hu=qo((function(e,t){return e<=t}));function vu(e){if(!e)return[];if(qa(e))return su(e)?hn(e):jo(e);if(et&&e[et])return function(e){for(var t,n=[];!(t=e.next()).done;)n.push(t.value);return n}(e[et]());var t=yi(e);return(t==k?ln:t==A?fn:Hu)(e)}function gu(e){return e?(e=bu(e))===p||e===-1/0?17976931348623157e292*(e<0?-1:1):e==e?e:0:0===e?e:0}function yu(e){var t=gu(e),n=t%1;return t==t?n?t-n:t:0}function mu(e){return e?cr(yu(e),0,g):0}function bu(e){if("number"==typeof e)return e;if(fu(e))return v;if(ru(e)){var t="function"==typeof e.valueOf?e.valueOf():e;e=ru(t)?t+"":t}if("string"!=typeof e)return 0===e?e:+e;e=Gt(e);var n=ye.test(e);return n||be.test(e)?st(e.slice(2),n?2:8):ge.test(e)?v:+e}function wu(e){return To(e,Ru(e))}function _u(e){return null==e?"":fo(e)}var xu=Ro((function(e,t){if(Oi(t)||qa(t))To(t,Du(t),e);else for(var n in t)Le.call(t,n)&&rr(e,n,t[n])})),Su=Ro((function(e,t){To(t,Ru(t),e)})),Eu=Ro((function(e,t,n,r){To(t,Ru(t),e,r)})),ku=Ro((function(e,t,n,r){To(t,Du(t),e,r)})),Ou=ii(lr);var Cu=Qr((function(e,t){e=Ce(e);var n=-1,r=t.length,i=r>2?t[2]:o;for(i&&xi(t[0],t[1],i)&&(r=1);++n<r;)for(var a=t[n],u=Ru(a),l=-1,c=u.length;++l<c;){var s=u[l],f=e[s];(f===o||Ha(f,Te[s])&&!Le.call(e,s))&&(e[s]=a[s])}return e})),Pu=Qr((function(e){return e.push(o,ni),kt(zu,o,e)}));function Mu(e,t,n){var r=null==e?o:kr(e,t);return r===o?n:r}function Au(e,t){return null!=e&&mi(e,t,Ar)}var Nu=Vo((function(e,t,n){null!=t&&"function"!=typeof t.toString&&(t=Be.call(t)),e[t]=n}),rl(al)),ju=Vo((function(e,t,n){null!=t&&"function"!=typeof t.toString&&(t=Be.call(t)),Le.call(e,t)?e[t].push(n):e[t]=[n]}),fi),Tu=Qr(jr);function Du(e){return qa(e)?Qn(e):Ir(e)}function Ru(e){return qa(e)?Qn(e,!0):Br(e)}var Lu=Ro((function(e,t,n){Vr(e,t,n)})),zu=Ro((function(e,t,n,r){Vr(e,t,n,r)})),Iu=ii((function(e,t){var n={};if(null==e)return n;var r=!1;t=Tt(t,(function(t){return t=xo(t,e),r||(r=t.length>1),t})),To(e,ui(e),n),r&&(n=sr(n,7,ri));for(var o=t.length;o--;)ho(n,t[o]);return n}));var Bu=ii((function(e,t){return null==e?{}:function(e,t){return $r(e,t,(function(t,n){return Au(e,n)}))}(e,t)}));function Uu(e,t){if(null==e)return{};var n=Tt(ui(e),(function(e){return[e]}));return t=fi(t),$r(e,n,(function(e,n){return t(e,n[0])}))}var Fu=Jo(Du),Xu=Jo(Ru);function Hu(e){return null==e?[]:Qt(e,Du(e))}var Vu=Bo((function(e,t,n){return t=t.toLowerCase(),e+(n?Wu(t):t)}));function Wu(e){return Ju(_u(e).toLowerCase())}function Yu(e){return(e=_u(e))&&e.replace(_e,rn).replace(Je,"")}var $u=Bo((function(e,t,n){return e+(n?"-":"")+t.toLowerCase()})),Zu=Bo((function(e,t,n){return e+(n?" ":"")+t.toLowerCase()})),qu=Io("toLowerCase");var Gu=Bo((function(e,t,n){return e+(n?"_":"")+t.toLowerCase()}));var Ku=Bo((function(e,t,n){return e+(n?" ":"")+Ju(t)}));var Qu=Bo((function(e,t,n){return e+(n?" ":"")+t.toUpperCase()})),Ju=Io("toUpperCase");function el(e,t,n){return e=_u(e),(t=n?o:t)===o?function(e){return rt.test(e)}(e)?function(e){return e.match(tt)||[]}(e):function(e){return e.match(fe)||[]}(e):e.match(t)||[]}var tl=Qr((function(e,t){try{return kt(e,o,t)}catch(e){return Ja(e)?e:new Ee(e)}})),nl=ii((function(e,t){return Ct(t,(function(t){t=Ui(t),ur(e,t,ja(e[t],e))})),e}));function rl(e){return function(){return e}}var ol=Xo(),il=Xo(!0);function al(e){return e}function ul(e){return zr("function"==typeof e?e:sr(e,1))}var ll=Qr((function(e,t){return function(n){return jr(n,e,t)}})),cl=Qr((function(e,t){return function(n){return jr(e,n,t)}}));function sl(e,t,n){var r=Du(t),o=Er(t,r);null!=n||ru(t)&&(o.length||!r.length)||(n=t,t=e,e=this,o=Er(t,Du(t)));var i=!(ru(n)&&"chain"in n&&!n.chain),a=eu(e);return Ct(o,(function(n){var r=t[n];e[n]=r,a&&(e.prototype[n]=function(){var t=this.__chain__;if(i||t){var n=e(this.__wrapped__),o=n.__actions__=jo(this.__actions__);return o.push({func:r,args:arguments,thisArg:e}),n.__chain__=t,n}return r.apply(e,Dt([this.value()],arguments))})})),e}function fl(){}var dl=Yo(Tt),pl=Yo(Mt),hl=Yo(zt);function vl(e){return Si(e)?Wt(Ui(e)):function(e){return function(t){return kr(t,e)}}(e)}var gl=Zo(),yl=Zo(!0);function ml(){return[]}function bl(){return!1}var wl=Wo((function(e,t){return e+t}),0),_l=Ko("ceil"),xl=Wo((function(e,t){return e/t}),1),Sl=Ko("floor");var El,kl=Wo((function(e,t){return e*t}),1),Ol=Ko("round"),Cl=Wo((function(e,t){return e-t}),0);return Xn.after=function(e,t){if("function"!=typeof t)throw new Ae(i);return e=yu(e),function(){if(--e<1)return t.apply(this,arguments)}},Xn.ary=Aa,Xn.assign=xu,Xn.assignIn=Su,Xn.assignInWith=Eu,Xn.assignWith=ku,Xn.at=Ou,Xn.before=Na,Xn.bind=ja,Xn.bindAll=nl,Xn.bindKey=Ta,Xn.castArray=function(){if(!arguments.length)return[];var e=arguments[0];return $a(e)?e:[e]},Xn.chain=va,Xn.chunk=function(e,t,n){t=(n?xi(e,t,n):t===o)?1:wn(yu(t),0);var i=null==e?0:e.length;if(!i||t<1)return[];for(var a=0,u=0,l=r(vt(i/t));a<i;)l[u++]=io(e,a,a+=t);return l},Xn.compact=function(e){for(var t=-1,n=null==e?0:e.length,r=0,o=[];++t<n;){var i=e[t];i&&(o[r++]=i)}return o},Xn.concat=function(){var e=arguments.length;if(!e)return[];for(var t=r(e-1),n=arguments[0],o=e;o--;)t[o-1]=arguments[o];return Dt($a(n)?jo(n):[n],br(t,1))},Xn.cond=function(e){var t=null==e?0:e.length,n=fi();return e=t?Tt(e,(function(e){if("function"!=typeof e[1])throw new Ae(i);return[n(e[0]),e[1]]})):[],Qr((function(n){for(var r=-1;++r<t;){var o=e[r];if(kt(o[0],this,n))return kt(o[1],this,n)}}))},Xn.conforms=function(e){return function(e){var t=Du(e);return function(n){return fr(n,e,t)}}(sr(e,1))},Xn.constant=rl,Xn.countBy=ma,Xn.create=function(e,t){var n=Hn(e);return null==t?n:ar(n,t)},Xn.curry=function e(t,n,r){var i=ei(t,8,o,o,o,o,o,n=r?o:n);return i.placeholder=e.placeholder,i},Xn.curryRight=function e(t,n,r){var i=ei(t,l,o,o,o,o,o,n=r?o:n);return i.placeholder=e.placeholder,i},Xn.debounce=Da,Xn.defaults=Cu,Xn.defaultsDeep=Pu,Xn.defer=Ra,Xn.delay=La,Xn.difference=Hi,Xn.differenceBy=Vi,Xn.differenceWith=Wi,Xn.drop=function(e,t,n){var r=null==e?0:e.length;return r?io(e,(t=n||t===o?1:yu(t))<0?0:t,r):[]},Xn.dropRight=function(e,t,n){var r=null==e?0:e.length;return r?io(e,0,(t=r-(t=n||t===o?1:yu(t)))<0?0:t):[]},Xn.dropRightWhile=function(e,t){return e&&e.length?go(e,fi(t,3),!0,!0):[]},Xn.dropWhile=function(e,t){return e&&e.length?go(e,fi(t,3),!0):[]},Xn.fill=function(e,t,n,r){var i=null==e?0:e.length;return i?(n&&"number"!=typeof n&&xi(e,t,n)&&(n=0,r=i),function(e,t,n,r){var i=e.length;for((n=yu(n))<0&&(n=-n>i?0:i+n),(r=r===o||r>i?i:yu(r))<0&&(r+=i),r=n>r?0:mu(r);n<r;)e[n++]=t;return e}(e,t,n,r)):[]},Xn.filter=function(e,t){return($a(e)?At:mr)(e,fi(t,3))},Xn.flatMap=function(e,t){return br(Oa(e,t),1)},Xn.flatMapDeep=function(e,t){return br(Oa(e,t),p)},Xn.flatMapDepth=function(e,t,n){return n=n===o?1:yu(n),br(Oa(e,t),n)},Xn.flatten=Zi,Xn.flattenDeep=function(e){return(null==e?0:e.length)?br(e,p):[]},Xn.flattenDepth=function(e,t){return(null==e?0:e.length)?br(e,t=t===o?1:yu(t)):[]},Xn.flip=function(e){return ei(e,512)},Xn.flow=ol,Xn.flowRight=il,Xn.fromPairs=function(e){for(var t=-1,n=null==e?0:e.length,r={};++t<n;){var o=e[t];r[o[0]]=o[1]}return r},Xn.functions=function(e){return null==e?[]:Er(e,Du(e))},Xn.functionsIn=function(e){return null==e?[]:Er(e,Ru(e))},Xn.groupBy=Sa,Xn.initial=function(e){return(null==e?0:e.length)?io(e,0,-1):[]},Xn.intersection=Gi,Xn.intersectionBy=Ki,Xn.intersectionWith=Qi,Xn.invert=Nu,Xn.invertBy=ju,Xn.invokeMap=Ea,Xn.iteratee=ul,Xn.keyBy=ka,Xn.keys=Du,Xn.keysIn=Ru,Xn.map=Oa,Xn.mapKeys=function(e,t){var n={};return t=fi(t,3),xr(e,(function(e,r,o){ur(n,t(e,r,o),e)})),n},Xn.mapValues=function(e,t){var n={};return t=fi(t,3),xr(e,(function(e,r,o){ur(n,r,t(e,r,o))})),n},Xn.matches=function(e){return Xr(sr(e,1))},Xn.matchesProperty=function(e,t){return Hr(e,sr(t,1))},Xn.memoize=za,Xn.merge=Lu,Xn.mergeWith=zu,Xn.method=ll,Xn.methodOf=cl,Xn.mixin=sl,Xn.negate=Ia,Xn.nthArg=function(e){return e=yu(e),Qr((function(t){return Wr(t,e)}))},Xn.omit=Iu,Xn.omitBy=function(e,t){return Uu(e,Ia(fi(t)))},Xn.once=function(e){return Na(2,e)},Xn.orderBy=function(e,t,n,r){return null==e?[]:($a(t)||(t=null==t?[]:[t]),$a(n=r?o:n)||(n=null==n?[]:[n]),Yr(e,t,n))},Xn.over=dl,Xn.overArgs=Ba,Xn.overEvery=pl,Xn.overSome=hl,Xn.partial=Ua,Xn.partialRight=Fa,Xn.partition=Ca,Xn.pick=Bu,Xn.pickBy=Uu,Xn.property=vl,Xn.propertyOf=function(e){return function(t){return null==e?o:kr(e,t)}},Xn.pull=ea,Xn.pullAll=ta,Xn.pullAllBy=function(e,t,n){return e&&e.length&&t&&t.length?Zr(e,t,fi(n,2)):e},Xn.pullAllWith=function(e,t,n){return e&&e.length&&t&&t.length?Zr(e,t,o,n):e},Xn.pullAt=na,Xn.range=gl,Xn.rangeRight=yl,Xn.rearg=Xa,Xn.reject=function(e,t){return($a(e)?At:mr)(e,Ia(fi(t,3)))},Xn.remove=function(e,t){var n=[];if(!e||!e.length)return n;var r=-1,o=[],i=e.length;for(t=fi(t,3);++r<i;){var a=e[r];t(a,r,e)&&(n.push(a),o.push(r))}return qr(e,o),n},Xn.rest=function(e,t){if("function"!=typeof e)throw new Ae(i);return Qr(e,t=t===o?t:yu(t))},Xn.reverse=ra,Xn.sampleSize=function(e,t,n){return t=(n?xi(e,t,n):t===o)?1:yu(t),($a(e)?er:eo)(e,t)},Xn.set=function(e,t,n){return null==e?e:to(e,t,n)},Xn.setWith=function(e,t,n,r){return r="function"==typeof r?r:o,null==e?e:to(e,t,n,r)},Xn.shuffle=function(e){return($a(e)?tr:oo)(e)},Xn.slice=function(e,t,n){var r=null==e?0:e.length;return r?(n&&"number"!=typeof n&&xi(e,t,n)?(t=0,n=r):(t=null==t?0:yu(t),n=n===o?r:yu(n)),io(e,t,n)):[]},Xn.sortBy=Pa,Xn.sortedUniq=function(e){return e&&e.length?co(e):[]},Xn.sortedUniqBy=function(e,t){return e&&e.length?co(e,fi(t,2)):[]},Xn.split=function(e,t,n){return n&&"number"!=typeof n&&xi(e,t,n)&&(t=n=o),(n=n===o?g:n>>>0)?(e=_u(e))&&("string"==typeof t||null!=t&&!lu(t))&&!(t=fo(t))&&un(e)?Eo(hn(e),0,n):e.split(t,n):[]},Xn.spread=function(e,t){if("function"!=typeof e)throw new Ae(i);return t=null==t?0:wn(yu(t),0),Qr((function(n){var r=n[t],o=Eo(n,0,t);return r&&Dt(o,r),kt(e,this,o)}))},Xn.tail=function(e){var t=null==e?0:e.length;return t?io(e,1,t):[]},Xn.take=function(e,t,n){return e&&e.length?io(e,0,(t=n||t===o?1:yu(t))<0?0:t):[]},Xn.takeRight=function(e,t,n){var r=null==e?0:e.length;return r?io(e,(t=r-(t=n||t===o?1:yu(t)))<0?0:t,r):[]},Xn.takeRightWhile=function(e,t){return e&&e.length?go(e,fi(t,3),!1,!0):[]},Xn.takeWhile=function(e,t){return e&&e.length?go(e,fi(t,3)):[]},Xn.tap=function(e,t){return t(e),e},Xn.throttle=function(e,t,n){var r=!0,o=!0;if("function"!=typeof e)throw new Ae(i);return ru(n)&&(r="leading"in n?!!n.leading:r,o="trailing"in n?!!n.trailing:o),Da(e,t,{leading:r,maxWait:t,trailing:o})},Xn.thru=ga,Xn.toArray=vu,Xn.toPairs=Fu,Xn.toPairsIn=Xu,Xn.toPath=function(e){return $a(e)?Tt(e,Ui):fu(e)?[e]:jo(Bi(_u(e)))},Xn.toPlainObject=wu,Xn.transform=function(e,t,n){var r=$a(e),o=r||Ka(e)||du(e);if(t=fi(t,4),null==n){var i=e&&e.constructor;n=o?r?new i:[]:ru(e)&&eu(i)?Hn($e(e)):{}}return(o?Ct:xr)(e,(function(e,r,o){return t(n,e,r,o)})),n},Xn.unary=function(e){return Aa(e,1)},Xn.union=oa,Xn.unionBy=ia,Xn.unionWith=aa,Xn.uniq=function(e){return e&&e.length?po(e):[]},Xn.uniqBy=function(e,t){return e&&e.length?po(e,fi(t,2)):[]},Xn.uniqWith=function(e,t){return t="function"==typeof t?t:o,e&&e.length?po(e,o,t):[]},Xn.unset=function(e,t){return null==e||ho(e,t)},Xn.unzip=ua,Xn.unzipWith=la,Xn.update=function(e,t,n){return null==e?e:vo(e,t,_o(n))},Xn.updateWith=function(e,t,n,r){return r="function"==typeof r?r:o,null==e?e:vo(e,t,_o(n),r)},Xn.values=Hu,Xn.valuesIn=function(e){return null==e?[]:Qt(e,Ru(e))},Xn.without=ca,Xn.words=el,Xn.wrap=function(e,t){return Ua(_o(t),e)},Xn.xor=sa,Xn.xorBy=fa,Xn.xorWith=da,Xn.zip=pa,Xn.zipObject=function(e,t){return bo(e||[],t||[],rr)},Xn.zipObjectDeep=function(e,t){return bo(e||[],t||[],to)},Xn.zipWith=ha,Xn.entries=Fu,Xn.entriesIn=Xu,Xn.extend=Su,Xn.extendWith=Eu,sl(Xn,Xn),Xn.add=wl,Xn.attempt=tl,Xn.camelCase=Vu,Xn.capitalize=Wu,Xn.ceil=_l,Xn.clamp=function(e,t,n){return n===o&&(n=t,t=o),n!==o&&(n=(n=bu(n))==n?n:0),t!==o&&(t=(t=bu(t))==t?t:0),cr(bu(e),t,n)},Xn.clone=function(e){return sr(e,4)},Xn.cloneDeep=function(e){return sr(e,5)},Xn.cloneDeepWith=function(e,t){return sr(e,5,t="function"==typeof t?t:o)},Xn.cloneWith=function(e,t){return sr(e,4,t="function"==typeof t?t:o)},Xn.conformsTo=function(e,t){return null==t||fr(e,t,Du(t))},Xn.deburr=Yu,Xn.defaultTo=function(e,t){return null==e||e!=e?t:e},Xn.divide=xl,Xn.endsWith=function(e,t,n){e=_u(e),t=fo(t);var r=e.length,i=n=n===o?r:cr(yu(n),0,r);return(n-=t.length)>=0&&e.slice(n,i)==t},Xn.eq=Ha,Xn.escape=function(e){return(e=_u(e))&&K.test(e)?e.replace(q,on):e},Xn.escapeRegExp=function(e){return(e=_u(e))&&ie.test(e)?e.replace(oe,"\\$&"):e},Xn.every=function(e,t,n){var r=$a(e)?Mt:gr;return n&&xi(e,t,n)&&(t=o),r(e,fi(t,3))},Xn.find=ba,Xn.findIndex=Yi,Xn.findKey=function(e,t){return Bt(e,fi(t,3),xr)},Xn.findLast=wa,Xn.findLastIndex=$i,Xn.findLastKey=function(e,t){return Bt(e,fi(t,3),Sr)},Xn.floor=Sl,Xn.forEach=_a,Xn.forEachRight=xa,Xn.forIn=function(e,t){return null==e?e:wr(e,fi(t,3),Ru)},Xn.forInRight=function(e,t){return null==e?e:_r(e,fi(t,3),Ru)},Xn.forOwn=function(e,t){return e&&xr(e,fi(t,3))},Xn.forOwnRight=function(e,t){return e&&Sr(e,fi(t,3))},Xn.get=Mu,Xn.gt=Va,Xn.gte=Wa,Xn.has=function(e,t){return null!=e&&mi(e,t,Mr)},Xn.hasIn=Au,Xn.head=qi,Xn.identity=al,Xn.includes=function(e,t,n,r){e=qa(e)?e:Hu(e),n=n&&!r?yu(n):0;var o=e.length;return n<0&&(n=wn(o+n,0)),su(e)?n<=o&&e.indexOf(t,n)>-1:!!o&&Ft(e,t,n)>-1},Xn.indexOf=function(e,t,n){var r=null==e?0:e.length;if(!r)return-1;var o=null==n?0:yu(n);return o<0&&(o=wn(r+o,0)),Ft(e,t,o)},Xn.inRange=function(e,t,n){return t=gu(t),n===o?(n=t,t=0):n=gu(n),function(e,t,n){return e>=_n(t,n)&&e<wn(t,n)}(e=bu(e),t,n)},Xn.invoke=Tu,Xn.isArguments=Ya,Xn.isArray=$a,Xn.isArrayBuffer=Za,Xn.isArrayLike=qa,Xn.isArrayLikeObject=Ga,Xn.isBoolean=function(e){return!0===e||!1===e||ou(e)&&Cr(e)==w},Xn.isBuffer=Ka,Xn.isDate=Qa,Xn.isElement=function(e){return ou(e)&&1===e.nodeType&&!uu(e)},Xn.isEmpty=function(e){if(null==e)return!0;if(qa(e)&&($a(e)||"string"==typeof e||"function"==typeof e.splice||Ka(e)||du(e)||Ya(e)))return!e.length;var t=yi(e);if(t==k||t==A)return!e.size;if(Oi(e))return!Ir(e).length;for(var n in e)if(Le.call(e,n))return!1;return!0},Xn.isEqual=function(e,t){return Dr(e,t)},Xn.isEqualWith=function(e,t,n){var r=(n="function"==typeof n?n:o)?n(e,t):o;return r===o?Dr(e,t,o,n):!!r},Xn.isError=Ja,Xn.isFinite=function(e){return"number"==typeof e&&Yt(e)},Xn.isFunction=eu,Xn.isInteger=tu,Xn.isLength=nu,Xn.isMap=iu,Xn.isMatch=function(e,t){return e===t||Rr(e,t,pi(t))},Xn.isMatchWith=function(e,t,n){return n="function"==typeof n?n:o,Rr(e,t,pi(t),n)},Xn.isNaN=function(e){return au(e)&&e!=+e},Xn.isNative=function(e){if(ki(e))throw new Ee("Unsupported core-js use. Try https://npms.io/search?q=ponyfill.");return Lr(e)},Xn.isNil=function(e){return null==e},Xn.isNull=function(e){return null===e},Xn.isNumber=au,Xn.isObject=ru,Xn.isObjectLike=ou,Xn.isPlainObject=uu,Xn.isRegExp=lu,Xn.isSafeInteger=function(e){return tu(e)&&e>=-9007199254740991&&e<=h},Xn.isSet=cu,Xn.isString=su,Xn.isSymbol=fu,Xn.isTypedArray=du,Xn.isUndefined=function(e){return e===o},Xn.isWeakMap=function(e){return ou(e)&&yi(e)==T},Xn.isWeakSet=function(e){return ou(e)&&"[object WeakSet]"==Cr(e)},Xn.join=function(e,t){return null==e?"":mn.call(e,t)},Xn.kebabCase=$u,Xn.last=Ji,Xn.lastIndexOf=function(e,t,n){var r=null==e?0:e.length;if(!r)return-1;var i=r;return n!==o&&(i=(i=yu(n))<0?wn(r+i,0):_n(i,r-1)),t==t?function(e,t,n){for(var r=n+1;r--;)if(e[r]===t)return r;return r}(e,t,i):Ut(e,Ht,i,!0)},Xn.lowerCase=Zu,Xn.lowerFirst=qu,Xn.lt=pu,Xn.lte=hu,Xn.max=function(e){return e&&e.length?yr(e,al,Pr):o},Xn.maxBy=function(e,t){return e&&e.length?yr(e,fi(t,2),Pr):o},Xn.mean=function(e){return Vt(e,al)},Xn.meanBy=function(e,t){return Vt(e,fi(t,2))},Xn.min=function(e){return e&&e.length?yr(e,al,Ur):o},Xn.minBy=function(e,t){return e&&e.length?yr(e,fi(t,2),Ur):o},Xn.stubArray=ml,Xn.stubFalse=bl,Xn.stubObject=function(){return{}},Xn.stubString=function(){return""},Xn.stubTrue=function(){return!0},Xn.multiply=kl,Xn.nth=function(e,t){return e&&e.length?Wr(e,yu(t)):o},Xn.noConflict=function(){return pt._===this&&(pt._=Fe),this},Xn.noop=fl,Xn.now=Ma,Xn.pad=function(e,t,n){e=_u(e);var r=(t=yu(t))?pn(e):0;if(!t||r>=t)return e;var o=(t-r)/2;return $o(yt(o),n)+e+$o(vt(o),n)},Xn.padEnd=function(e,t,n){e=_u(e);var r=(t=yu(t))?pn(e):0;return t&&r<t?e+$o(t-r,n):e},Xn.padStart=function(e,t,n){e=_u(e);var r=(t=yu(t))?pn(e):0;return t&&r<t?$o(t-r,n)+e:e},Xn.parseInt=function(e,t,n){return n||null==t?t=0:t&&(t=+t),Sn(_u(e).replace(ae,""),t||0)},Xn.random=function(e,t,n){if(n&&"boolean"!=typeof n&&xi(e,t,n)&&(t=n=o),n===o&&("boolean"==typeof t?(n=t,t=o):"boolean"==typeof e&&(n=e,e=o)),e===o&&t===o?(e=0,t=1):(e=gu(e),t===o?(t=e,e=0):t=gu(t)),e>t){var r=e;e=t,t=r}if(n||e%1||t%1){var i=En();return _n(e+i*(t-e+ct("1e-"+((i+"").length-1))),t)}return Gr(e,t)},Xn.reduce=function(e,t,n){var r=$a(e)?Rt:$t,o=arguments.length<3;return r(e,fi(t,4),n,o,hr)},Xn.reduceRight=function(e,t,n){var r=$a(e)?Lt:$t,o=arguments.length<3;return r(e,fi(t,4),n,o,vr)},Xn.repeat=function(e,t,n){return t=(n?xi(e,t,n):t===o)?1:yu(t),Kr(_u(e),t)},Xn.replace=function(){var e=arguments,t=_u(e[0]);return e.length<3?t:t.replace(e[1],e[2])},Xn.result=function(e,t,n){var r=-1,i=(t=xo(t,e)).length;for(i||(i=1,e=o);++r<i;){var a=null==e?o:e[Ui(t[r])];a===o&&(r=i,a=n),e=eu(a)?a.call(e):a}return e},Xn.round=Ol,Xn.runInContext=e,Xn.sample=function(e){return($a(e)?Jn:Jr)(e)},Xn.size=function(e){if(null==e)return 0;if(qa(e))return su(e)?pn(e):e.length;var t=yi(e);return t==k||t==A?e.size:Ir(e).length},Xn.snakeCase=Gu,Xn.some=function(e,t,n){var r=$a(e)?zt:ao;return n&&xi(e,t,n)&&(t=o),r(e,fi(t,3))},Xn.sortedIndex=function(e,t){return uo(e,t)},Xn.sortedIndexBy=function(e,t,n){return lo(e,t,fi(n,2))},Xn.sortedIndexOf=function(e,t){var n=null==e?0:e.length;if(n){var r=uo(e,t);if(r<n&&Ha(e[r],t))return r}return-1},Xn.sortedLastIndex=function(e,t){return uo(e,t,!0)},Xn.sortedLastIndexBy=function(e,t,n){return lo(e,t,fi(n,2),!0)},Xn.sortedLastIndexOf=function(e,t){if(null==e?0:e.length){var n=uo(e,t,!0)-1;if(Ha(e[n],t))return n}return-1},Xn.startCase=Ku,Xn.startsWith=function(e,t,n){return e=_u(e),n=null==n?0:cr(yu(n),0,e.length),t=fo(t),e.slice(n,n+t.length)==t},Xn.subtract=Cl,Xn.sum=function(e){return e&&e.length?Zt(e,al):0},Xn.sumBy=function(e,t){return e&&e.length?Zt(e,fi(t,2)):0},Xn.template=function(e,t,n){var r=Xn.templateSettings;n&&xi(e,t,n)&&(t=o),e=_u(e),t=Eu({},t,r,ti);var i,a,u=Eu({},t.imports,r.imports,ti),l=Du(u),c=Qt(u,l),s=0,f=t.interpolate||xe,d="__p += '",p=Pe((t.escape||xe).source+"|"+f.source+"|"+(f===ee?he:xe).source+"|"+(t.evaluate||xe).source+"|$","g"),h="//# sourceURL="+(Le.call(t,"sourceURL")?(t.sourceURL+"").replace(/\s/g," "):"lodash.templateSources["+ ++it+"]")+"\n";e.replace(p,(function(t,n,r,o,u,l){return r||(r=o),d+=e.slice(s,l).replace(Se,an),n&&(i=!0,d+="' +\n__e("+n+") +\n'"),u&&(a=!0,d+="';\n"+u+";\n__p += '"),r&&(d+="' +\n((__t = ("+r+")) == null ? '' : __t) +\n'"),s=l+t.length,t})),d+="';\n";var v=Le.call(t,"variable")&&t.variable;if(v){if(de.test(v))throw new Ee("Invalid `variable` option passed into `_.template`")}else d="with (obj) {\n"+d+"\n}\n";d=(a?d.replace(W,""):d).replace(Y,"$1").replace($,"$1;"),d="function("+(v||"obj")+") {\n"+(v?"":"obj || (obj = {});\n")+"var __t, __p = ''"+(i?", __e = _.escape":"")+(a?", __j = Array.prototype.join;\nfunction print() { __p += __j.call(arguments, '') }\n":";\n")+d+"return __p\n}";var g=tl((function(){return ke(l,h+"return "+d).apply(o,c)}));if(g.source=d,Ja(g))throw g;return g},Xn.times=function(e,t){if((e=yu(e))<1||e>h)return[];var n=g,r=_n(e,g);t=fi(t),e-=g;for(var o=qt(r,t);++n<e;)t(n);return o},Xn.toFinite=gu,Xn.toInteger=yu,Xn.toLength=mu,Xn.toLower=function(e){return _u(e).toLowerCase()},Xn.toNumber=bu,Xn.toSafeInteger=function(e){return e?cr(yu(e),-9007199254740991,h):0===e?e:0},Xn.toString=_u,Xn.toUpper=function(e){return _u(e).toUpperCase()},Xn.trim=function(e,t,n){if((e=_u(e))&&(n||t===o))return Gt(e);if(!e||!(t=fo(t)))return e;var r=hn(e),i=hn(t);return Eo(r,en(r,i),tn(r,i)+1).join("")},Xn.trimEnd=function(e,t,n){if((e=_u(e))&&(n||t===o))return e.slice(0,vn(e)+1);if(!e||!(t=fo(t)))return e;var r=hn(e);return Eo(r,0,tn(r,hn(t))+1).join("")},Xn.trimStart=function(e,t,n){if((e=_u(e))&&(n||t===o))return e.replace(ae,"");if(!e||!(t=fo(t)))return e;var r=hn(e);return Eo(r,en(r,hn(t))).join("")},Xn.truncate=function(e,t){var n=30,r="...";if(ru(t)){var i="separator"in t?t.separator:i;n="length"in t?yu(t.length):n,r="omission"in t?fo(t.omission):r}var a=(e=_u(e)).length;if(un(e)){var u=hn(e);a=u.length}if(n>=a)return e;var l=n-pn(r);if(l<1)return r;var c=u?Eo(u,0,l).join(""):e.slice(0,l);if(i===o)return c+r;if(u&&(l+=c.length-l),lu(i)){if(e.slice(l).search(i)){var s,f=c;for(i.global||(i=Pe(i.source,_u(ve.exec(i))+"g")),i.lastIndex=0;s=i.exec(f);)var d=s.index;c=c.slice(0,d===o?l:d)}}else if(e.indexOf(fo(i),l)!=l){var p=c.lastIndexOf(i);p>-1&&(c=c.slice(0,p))}return c+r},Xn.unescape=function(e){return(e=_u(e))&&G.test(e)?e.replace(Z,gn):e},Xn.uniqueId=function(e){var t=++ze;return _u(e)+t},Xn.upperCase=Qu,Xn.upperFirst=Ju,Xn.each=_a,Xn.eachRight=xa,Xn.first=qi,sl(Xn,(El={},xr(Xn,(function(e,t){Le.call(Xn.prototype,t)||(El[t]=e)})),El),{chain:!1}),Xn.VERSION="4.17.21",Ct(["bind","bindKey","curry","curryRight","partial","partialRight"],(function(e){Xn[e].placeholder=Xn})),Ct(["drop","take"],(function(e,t){Yn.prototype[e]=function(n){n=n===o?1:wn(yu(n),0);var r=this.__filtered__&&!t?new Yn(this):this.clone();return r.__filtered__?r.__takeCount__=_n(n,r.__takeCount__):r.__views__.push({size:_n(n,g),type:e+(r.__dir__<0?"Right":"")}),r},Yn.prototype[e+"Right"]=function(t){return this.reverse()[e](t).reverse()}})),Ct(["filter","map","takeWhile"],(function(e,t){var n=t+1,r=1==n||3==n;Yn.prototype[e]=function(e){var t=this.clone();return t.__iteratees__.push({iteratee:fi(e,3),type:n}),t.__filtered__=t.__filtered__||r,t}})),Ct(["head","last"],(function(e,t){var n="take"+(t?"Right":"");Yn.prototype[e]=function(){return this[n](1).value()[0]}})),Ct(["initial","tail"],(function(e,t){var n="drop"+(t?"":"Right");Yn.prototype[e]=function(){return this.__filtered__?new Yn(this):this[n](1)}})),Yn.prototype.compact=function(){return this.filter(al)},Yn.prototype.find=function(e){return this.filter(e).head()},Yn.prototype.findLast=function(e){return this.reverse().find(e)},Yn.prototype.invokeMap=Qr((function(e,t){return"function"==typeof e?new Yn(this):this.map((function(n){return jr(n,e,t)}))})),Yn.prototype.reject=function(e){return this.filter(Ia(fi(e)))},Yn.prototype.slice=function(e,t){e=yu(e);var n=this;return n.__filtered__&&(e>0||t<0)?new Yn(n):(e<0?n=n.takeRight(-e):e&&(n=n.drop(e)),t!==o&&(n=(t=yu(t))<0?n.dropRight(-t):n.take(t-e)),n)},Yn.prototype.takeRightWhile=function(e){return this.reverse().takeWhile(e).reverse()},Yn.prototype.toArray=function(){return this.take(g)},xr(Yn.prototype,(function(e,t){var n=/^(?:filter|find|map|reject)|While$/.test(t),r=/^(?:head|last)$/.test(t),i=Xn[r?"take"+("last"==t?"Right":""):t],a=r||/^find/.test(t);i&&(Xn.prototype[t]=function(){var t=this.__wrapped__,u=r?[1]:arguments,l=t instanceof Yn,c=u[0],s=l||$a(t),f=function(e){var t=i.apply(Xn,Dt([e],u));return r&&d?t[0]:t};s&&n&&"function"==typeof c&&1!=c.length&&(l=s=!1);var d=this.__chain__,p=!!this.__actions__.length,h=a&&!d,v=l&&!p;if(!a&&s){t=v?t:new Yn(this);var g=e.apply(t,u);return g.__actions__.push({func:ga,args:[f],thisArg:o}),new Wn(g,d)}return h&&v?e.apply(this,u):(g=this.thru(f),h?r?g.value()[0]:g.value():g)})})),Ct(["pop","push","shift","sort","splice","unshift"],(function(e){var t=Ne[e],n=/^(?:push|sort|unshift)$/.test(e)?"tap":"thru",r=/^(?:pop|shift)$/.test(e);Xn.prototype[e]=function(){var e=arguments;if(r&&!this.__chain__){var o=this.value();return t.apply($a(o)?o:[],e)}return this[n]((function(n){return t.apply($a(n)?n:[],e)}))}})),xr(Yn.prototype,(function(e,t){var n=Xn[t];if(n){var r=n.name+"";Le.call(Tn,r)||(Tn[r]=[]),Tn[r].push({name:t,func:n})}})),Tn[Ho(o,2).name]=[{name:"wrapper",func:o}],Yn.prototype.clone=function(){var e=new Yn(this.__wrapped__);return e.__actions__=jo(this.__actions__),e.__dir__=this.__dir__,e.__filtered__=this.__filtered__,e.__iteratees__=jo(this.__iteratees__),e.__takeCount__=this.__takeCount__,e.__views__=jo(this.__views__),e},Yn.prototype.reverse=function(){if(this.__filtered__){var e=new Yn(this);e.__dir__=-1,e.__filtered__=!0}else(e=this.clone()).__dir__*=-1;return e},Yn.prototype.value=function(){var e=this.__wrapped__.value(),t=this.__dir__,n=$a(e),r=t<0,o=n?e.length:0,i=function(e,t,n){var r=-1,o=n.length;for(;++r<o;){var i=n[r],a=i.size;switch(i.type){case"drop":e+=a;break;case"dropRight":t-=a;break;case"take":t=_n(t,e+a);break;case"takeRight":e=wn(e,t-a)}}return{start:e,end:t}}(0,o,this.__views__),a=i.start,u=i.end,l=u-a,c=r?u:a-1,s=this.__iteratees__,f=s.length,d=0,p=_n(l,this.__takeCount__);if(!n||!r&&o==l&&p==l)return yo(e,this.__actions__);var h=[];e:for(;l--&&d<p;){for(var v=-1,g=e[c+=t];++v<f;){var y=s[v],m=y.iteratee,b=y.type,w=m(g);if(2==b)g=w;else if(!w){if(1==b)continue e;break e}}h[d++]=g}return h},Xn.prototype.at=ya,Xn.prototype.chain=function(){return va(this)},Xn.prototype.commit=function(){return new Wn(this.value(),this.__chain__)},Xn.prototype.next=function(){this.__values__===o&&(this.__values__=vu(this.value()));var e=this.__index__>=this.__values__.length;return{done:e,value:e?o:this.__values__[this.__index__++]}},Xn.prototype.plant=function(e){for(var t,n=this;n instanceof Vn;){var r=Xi(n);r.__index__=0,r.__values__=o,t?i.__wrapped__=r:t=r;var i=r;n=n.__wrapped__}return i.__wrapped__=e,t},Xn.prototype.reverse=function(){var e=this.__wrapped__;if(e instanceof Yn){var t=e;return this.__actions__.length&&(t=new Yn(this)),(t=t.reverse()).__actions__.push({func:ga,args:[ra],thisArg:o}),new Wn(t,this.__chain__)}return this.thru(ra)},Xn.prototype.toJSON=Xn.prototype.valueOf=Xn.prototype.value=function(){return yo(this.__wrapped__,this.__actions__)},Xn.prototype.first=Xn.prototype.head,et&&(Xn.prototype[et]=function(){return this}),Xn}();pt._=yn,(r=function(){return yn}.call(t,n,t,e))===o||(e.exports=r)}.call(this)},418:e=>{"use strict";var t=Object.getOwnPropertySymbols,n=Object.prototype.hasOwnProperty,r=Object.prototype.propertyIsEnumerable;function o(e){if(null==e)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(e)}e.exports=function(){try{if(!Object.assign)return!1;var e=new String("abc");if(e[5]="de","5"===Object.getOwnPropertyNames(e)[0])return!1;for(var t={},n=0;n<10;n++)t["_"+String.fromCharCode(n)]=n;if("0123456789"!==Object.getOwnPropertyNames(t).map((function(e){return t[e]})).join(""))return!1;var r={};return"abcdefghijklmnopqrst".split("").forEach((function(e){r[e]=e})),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},r)).join("")}catch(e){return!1}}()?Object.assign:function(e,i){for(var a,u,l=o(e),c=1;c<arguments.length;c++){for(var s in a=Object(arguments[c]))n.call(a,s)&&(l[s]=a[s]);if(t){u=t(a);for(var f=0;f<u.length;f++)r.call(a,u[f])&&(l[u[f]]=a[u[f]])}}return l}},779:(e,t,n)=>{var r=n(826);e.exports=p,e.exports.parse=i,e.exports.compile=function(e,t){return u(i(e,t),t)},e.exports.tokensToFunction=u,e.exports.tokensToRegExp=d;var o=new RegExp(["(\\\\.)","([\\/.])?(?:(?:\\:(\\w+)(?:\\(((?:\\\\.|[^\\\\()])+)\\))?|\\(((?:\\\\.|[^\\\\()])+)\\))([+*?])?|(\\*))"].join("|"),"g");function i(e,t){for(var n,r=[],i=0,a=0,u="",s=t&&t.delimiter||"/";null!=(n=o.exec(e));){var f=n[0],d=n[1],p=n.index;if(u+=e.slice(a,p),a=p+f.length,d)u+=d[1];else{var h=e[a],v=n[2],g=n[3],y=n[4],m=n[5],b=n[6],w=n[7];u&&(r.push(u),u="");var _=null!=v&&null!=h&&h!==v,x="+"===b||"*"===b,S="?"===b||"*"===b,E=n[2]||s,k=y||m;r.push({name:g||i++,prefix:v||"",delimiter:E,optional:S,repeat:x,partial:_,asterisk:!!w,pattern:k?c(k):w?".*":"[^"+l(E)+"]+?"})}}return a<e.length&&(u+=e.substr(a)),u&&r.push(u),r}function a(e){return encodeURI(e).replace(/[\/?#]/g,(function(e){return"%"+e.charCodeAt(0).toString(16).toUpperCase()}))}function u(e,t){for(var n=new Array(e.length),o=0;o<e.length;o++)"object"==typeof e[o]&&(n[o]=new RegExp("^(?:"+e[o].pattern+")$",f(t)));return function(t,o){for(var i="",u=t||{},l=(o||{}).pretty?a:encodeURIComponent,c=0;c<e.length;c++){var s=e[c];if("string"!=typeof s){var f,d=u[s.name];if(null==d){if(s.optional){s.partial&&(i+=s.prefix);continue}throw new TypeError('Expected "'+s.name+'" to be defined')}if(r(d)){if(!s.repeat)throw new TypeError('Expected "'+s.name+'" to not repeat, but received `'+JSON.stringify(d)+"`");if(0===d.length){if(s.optional)continue;throw new TypeError('Expected "'+s.name+'" to not be empty')}for(var p=0;p<d.length;p++){if(f=l(d[p]),!n[c].test(f))throw new TypeError('Expected all "'+s.name+'" to match "'+s.pattern+'", but received `'+JSON.stringify(f)+"`");i+=(0===p?s.prefix:s.delimiter)+f}}else{if(f=s.asterisk?encodeURI(d).replace(/[?#]/g,(function(e){return"%"+e.charCodeAt(0).toString(16).toUpperCase()})):l(d),!n[c].test(f))throw new TypeError('Expected "'+s.name+'" to match "'+s.pattern+'", but received "'+f+'"');i+=s.prefix+f}}else i+=s}return i}}function l(e){return e.replace(/([.+*?=^!:${}()[\]|\/\\])/g,"\\$1")}function c(e){return e.replace(/([=!:$\/()])/g,"\\$1")}function s(e,t){return e.keys=t,e}function f(e){return e&&e.sensitive?"":"i"}function d(e,t,n){r(t)||(n=t||n,t=[]);for(var o=(n=n||{}).strict,i=!1!==n.end,a="",u=0;u<e.length;u++){var c=e[u];if("string"==typeof c)a+=l(c);else{var d=l(c.prefix),p="(?:"+c.pattern+")";t.push(c),c.repeat&&(p+="(?:"+d+p+")*"),a+=p=c.optional?c.partial?d+"("+p+")?":"(?:"+d+"("+p+"))?":d+"("+p+")"}}var h=l(n.delimiter||"/"),v=a.slice(-h.length)===h;return o||(a=(v?a.slice(0,-h.length):a)+"(?:"+h+"(?=$))?"),a+=i?"$":o&&v?"":"(?="+h+"|$)",s(new RegExp("^"+a,f(n)),t)}function p(e,t,n){return r(t)||(n=t||n,t=[]),n=n||{},e instanceof RegExp?function(e,t){var n=e.source.match(/\((?!\?)/g);if(n)for(var r=0;r<n.length;r++)t.push({name:r,prefix:null,delimiter:null,optional:!1,repeat:!1,partial:!1,asterisk:!1,pattern:null});return s(e,t)}(e,t):r(e)?function(e,t,n){for(var r=[],o=0;o<e.length;o++)r.push(p(e[o],t,n).source);return s(new RegExp("(?:"+r.join("|")+")",f(n)),t)}(e,t,n):function(e,t,n){return d(i(e,n),t,n)}(e,t,n)}},703:(e,t,n)=>{"use strict";var r=n(414);function o(){}function i(){}i.resetWarningCache=o,e.exports=function(){function e(e,t,n,o,i,a){if(a!==r){var u=new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types");throw u.name="Invariant Violation",u}}function t(){return e}e.isRequired=e;var n={array:e,bool:e,func:e,number:e,object:e,string:e,symbol:e,any:e,arrayOf:t,element:e,elementType:e,instanceOf:t,node:e,objectOf:t,oneOf:t,oneOfType:t,shape:t,exact:t,checkPropTypes:i,resetWarningCache:o};return n.PropTypes=n,n}},697:(e,t,n)=>{e.exports=n(703)()},414:e=>{"use strict";e.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},448:(e,t,n)=>{"use strict";var r=n(294),o=n(418),i=n(840);function a(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}if(!r)throw Error(a(227));var u=new Set,l={};function c(e,t){s(e,t),s(e+"Capture",t)}function s(e,t){for(l[e]=t,e=0;e<t.length;e++)u.add(t[e])}var f=!("undefined"==typeof window||void 0===window.document||void 0===window.document.createElement),d=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,p=Object.prototype.hasOwnProperty,h={},v={};function g(e,t,n,r,o,i,a){this.acceptsBooleans=2===t||3===t||4===t,this.attributeName=r,this.attributeNamespace=o,this.mustUseProperty=n,this.propertyName=e,this.type=t,this.sanitizeURL=i,this.removeEmptyString=a}var y={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach((function(e){y[e]=new g(e,0,!1,e,null,!1,!1)})),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach((function(e){var t=e[0];y[t]=new g(t,1,!1,e[1],null,!1,!1)})),["contentEditable","draggable","spellCheck","value"].forEach((function(e){y[e]=new g(e,2,!1,e.toLowerCase(),null,!1,!1)})),["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach((function(e){y[e]=new g(e,2,!1,e,null,!1,!1)})),"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach((function(e){y[e]=new g(e,3,!1,e.toLowerCase(),null,!1,!1)})),["checked","multiple","muted","selected"].forEach((function(e){y[e]=new g(e,3,!0,e,null,!1,!1)})),["capture","download"].forEach((function(e){y[e]=new g(e,4,!1,e,null,!1,!1)})),["cols","rows","size","span"].forEach((function(e){y[e]=new g(e,6,!1,e,null,!1,!1)})),["rowSpan","start"].forEach((function(e){y[e]=new g(e,5,!1,e.toLowerCase(),null,!1,!1)}));var m=/[\-:]([a-z])/g;function b(e){return e[1].toUpperCase()}function w(e,t,n,r){var o=y.hasOwnProperty(t)?y[t]:null;(null!==o?0===o.type:!r&&(2<t.length&&("o"===t[0]||"O"===t[0])&&("n"===t[1]||"N"===t[1])))||(function(e,t,n,r){if(null==t||function(e,t,n,r){if(null!==n&&0===n.type)return!1;switch(typeof t){case"function":case"symbol":return!0;case"boolean":return!r&&(null!==n?!n.acceptsBooleans:"data-"!==(e=e.toLowerCase().slice(0,5))&&"aria-"!==e);default:return!1}}(e,t,n,r))return!0;if(r)return!1;if(null!==n)switch(n.type){case 3:return!t;case 4:return!1===t;case 5:return isNaN(t);case 6:return isNaN(t)||1>t}return!1}(t,n,o,r)&&(n=null),r||null===o?function(e){return!!p.call(v,e)||!p.call(h,e)&&(d.test(e)?v[e]=!0:(h[e]=!0,!1))}(t)&&(null===n?e.removeAttribute(t):e.setAttribute(t,""+n)):o.mustUseProperty?e[o.propertyName]=null===n?3!==o.type&&"":n:(t=o.attributeName,r=o.attributeNamespace,null===n?e.removeAttribute(t):(n=3===(o=o.type)||4===o&&!0===n?"":""+n,r?e.setAttributeNS(r,t,n):e.setAttribute(t,n))))}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach((function(e){var t=e.replace(m,b);y[t]=new g(t,1,!1,e,null,!1,!1)})),"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach((function(e){var t=e.replace(m,b);y[t]=new g(t,1,!1,e,"http://www.w3.org/1999/xlink",!1,!1)})),["xml:base","xml:lang","xml:space"].forEach((function(e){var t=e.replace(m,b);y[t]=new g(t,1,!1,e,"http://www.w3.org/XML/1998/namespace",!1,!1)})),["tabIndex","crossOrigin"].forEach((function(e){y[e]=new g(e,1,!1,e.toLowerCase(),null,!1,!1)})),y.xlinkHref=new g("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0,!1),["src","href","action","formAction"].forEach((function(e){y[e]=new g(e,1,!1,e.toLowerCase(),null,!0,!0)}));var _=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,x=60103,S=60106,E=60107,k=60108,O=60114,C=60109,P=60110,M=60112,A=60113,N=60120,j=60115,T=60116,D=60121,R=60128,L=60129,z=60130,I=60131;if("function"==typeof Symbol&&Symbol.for){var B=Symbol.for;x=B("react.element"),S=B("react.portal"),E=B("react.fragment"),k=B("react.strict_mode"),O=B("react.profiler"),C=B("react.provider"),P=B("react.context"),M=B("react.forward_ref"),A=B("react.suspense"),N=B("react.suspense_list"),j=B("react.memo"),T=B("react.lazy"),D=B("react.block"),B("react.scope"),R=B("react.opaque.id"),L=B("react.debug_trace_mode"),z=B("react.offscreen"),I=B("react.legacy_hidden")}var U,F="function"==typeof Symbol&&Symbol.iterator;function X(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=F&&e[F]||e["@@iterator"])?e:null}function H(e){if(void 0===U)try{throw Error()}catch(e){var t=e.stack.trim().match(/\n( *(at )?)/);U=t&&t[1]||""}return"\n"+U+e}var V=!1;function W(e,t){if(!e||V)return"";V=!0;var n=Error.prepareStackTrace;Error.prepareStackTrace=void 0;try{if(t)if(t=function(){throw Error()},Object.defineProperty(t.prototype,"props",{set:function(){throw Error()}}),"object"==typeof Reflect&&Reflect.construct){try{Reflect.construct(t,[])}catch(e){var r=e}Reflect.construct(e,[],t)}else{try{t.call()}catch(e){r=e}e.call(t.prototype)}else{try{throw Error()}catch(e){r=e}e()}}catch(e){if(e&&r&&"string"==typeof e.stack){for(var o=e.stack.split("\n"),i=r.stack.split("\n"),a=o.length-1,u=i.length-1;1<=a&&0<=u&&o[a]!==i[u];)u--;for(;1<=a&&0<=u;a--,u--)if(o[a]!==i[u]){if(1!==a||1!==u)do{if(a--,0>--u||o[a]!==i[u])return"\n"+o[a].replace(" at new "," at ")}while(1<=a&&0<=u);break}}}finally{V=!1,Error.prepareStackTrace=n}return(e=e?e.displayName||e.name:"")?H(e):""}function Y(e){switch(e.tag){case 5:return H(e.type);case 16:return H("Lazy");case 13:return H("Suspense");case 19:return H("SuspenseList");case 0:case 2:case 15:return e=W(e.type,!1);case 11:return e=W(e.type.render,!1);case 22:return e=W(e.type._render,!1);case 1:return e=W(e.type,!0);default:return""}}function $(e){if(null==e)return null;if("function"==typeof e)return e.displayName||e.name||null;if("string"==typeof e)return e;switch(e){case E:return"Fragment";case S:return"Portal";case O:return"Profiler";case k:return"StrictMode";case A:return"Suspense";case N:return"SuspenseList"}if("object"==typeof e)switch(e.$$typeof){case P:return(e.displayName||"Context")+".Consumer";case C:return(e._context.displayName||"Context")+".Provider";case M:var t=e.render;return t=t.displayName||t.name||"",e.displayName||(""!==t?"ForwardRef("+t+")":"ForwardRef");case j:return $(e.type);case D:return $(e._render);case T:t=e._payload,e=e._init;try{return $(e(t))}catch(e){}}return null}function Z(e){switch(typeof e){case"boolean":case"number":case"object":case"string":case"undefined":return e;default:return""}}function q(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function G(e){e._valueTracker||(e._valueTracker=function(e){var t=q(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),r=""+e[t];if(!e.hasOwnProperty(t)&&void 0!==n&&"function"==typeof n.get&&"function"==typeof n.set){var o=n.get,i=n.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return o.call(this)},set:function(e){r=""+e,i.call(this,e)}}),Object.defineProperty(e,t,{enumerable:n.enumerable}),{getValue:function(){return r},setValue:function(e){r=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}}(e))}function K(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var n=t.getValue(),r="";return e&&(r=q(e)?e.checked?"true":"false":e.value),(e=r)!==n&&(t.setValue(e),!0)}function Q(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}function J(e,t){var n=t.checked;return o({},t,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=n?n:e._wrapperState.initialChecked})}function ee(e,t){var n=null==t.defaultValue?"":t.defaultValue,r=null!=t.checked?t.checked:t.defaultChecked;n=Z(null!=t.value?t.value:n),e._wrapperState={initialChecked:r,initialValue:n,controlled:"checkbox"===t.type||"radio"===t.type?null!=t.checked:null!=t.value}}function te(e,t){null!=(t=t.checked)&&w(e,"checked",t,!1)}function ne(e,t){te(e,t);var n=Z(t.value),r=t.type;if(null!=n)"number"===r?(0===n&&""===e.value||e.value!=n)&&(e.value=""+n):e.value!==""+n&&(e.value=""+n);else if("submit"===r||"reset"===r)return void e.removeAttribute("value");t.hasOwnProperty("value")?oe(e,t.type,n):t.hasOwnProperty("defaultValue")&&oe(e,t.type,Z(t.defaultValue)),null==t.checked&&null!=t.defaultChecked&&(e.defaultChecked=!!t.defaultChecked)}function re(e,t,n){if(t.hasOwnProperty("value")||t.hasOwnProperty("defaultValue")){var r=t.type;if(!("submit"!==r&&"reset"!==r||void 0!==t.value&&null!==t.value))return;t=""+e._wrapperState.initialValue,n||t===e.value||(e.value=t),e.defaultValue=t}""!==(n=e.name)&&(e.name=""),e.defaultChecked=!!e._wrapperState.initialChecked,""!==n&&(e.name=n)}function oe(e,t,n){"number"===t&&Q(e.ownerDocument)===e||(null==n?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+n&&(e.defaultValue=""+n))}function ie(e,t){return e=o({children:void 0},t),(t=function(e){var t="";return r.Children.forEach(e,(function(e){null!=e&&(t+=e)})),t}(t.children))&&(e.children=t),e}function ae(e,t,n,r){if(e=e.options,t){t={};for(var o=0;o<n.length;o++)t["$"+n[o]]=!0;for(n=0;n<e.length;n++)o=t.hasOwnProperty("$"+e[n].value),e[n].selected!==o&&(e[n].selected=o),o&&r&&(e[n].defaultSelected=!0)}else{for(n=""+Z(n),t=null,o=0;o<e.length;o++){if(e[o].value===n)return e[o].selected=!0,void(r&&(e[o].defaultSelected=!0));null!==t||e[o].disabled||(t=e[o])}null!==t&&(t.selected=!0)}}function ue(e,t){if(null!=t.dangerouslySetInnerHTML)throw Error(a(91));return o({},t,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function le(e,t){var n=t.value;if(null==n){if(n=t.children,t=t.defaultValue,null!=n){if(null!=t)throw Error(a(92));if(Array.isArray(n)){if(!(1>=n.length))throw Error(a(93));n=n[0]}t=n}null==t&&(t=""),n=t}e._wrapperState={initialValue:Z(n)}}function ce(e,t){var n=Z(t.value),r=Z(t.defaultValue);null!=n&&((n=""+n)!==e.value&&(e.value=n),null==t.defaultValue&&e.defaultValue!==n&&(e.defaultValue=n)),null!=r&&(e.defaultValue=""+r)}function se(e){var t=e.textContent;t===e._wrapperState.initialValue&&""!==t&&null!==t&&(e.value=t)}var fe="http://www.w3.org/1999/xhtml",de="http://www.w3.org/2000/svg";function pe(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function he(e,t){return null==e||"http://www.w3.org/1999/xhtml"===e?pe(t):"http://www.w3.org/2000/svg"===e&&"foreignObject"===t?"http://www.w3.org/1999/xhtml":e}var ve,ge,ye=(ge=function(e,t){if(e.namespaceURI!==de||"innerHTML"in e)e.innerHTML=t;else{for((ve=ve||document.createElement("div")).innerHTML="<svg>"+t.valueOf().toString()+"</svg>",t=ve.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;t.firstChild;)e.appendChild(t.firstChild)}},"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(e,t,n,r){MSApp.execUnsafeLocalFunction((function(){return ge(e,t)}))}:ge);function me(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&3===n.nodeType)return void(n.nodeValue=t)}e.textContent=t}var be={animationIterationCount:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},we=["Webkit","ms","Moz","O"];function _e(e,t,n){return null==t||"boolean"==typeof t||""===t?"":n||"number"!=typeof t||0===t||be.hasOwnProperty(e)&&be[e]?(""+t).trim():t+"px"}function xe(e,t){for(var n in e=e.style,t)if(t.hasOwnProperty(n)){var r=0===n.indexOf("--"),o=_e(n,t[n],r);"float"===n&&(n="cssFloat"),r?e.setProperty(n,o):e[n]=o}}Object.keys(be).forEach((function(e){we.forEach((function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),be[t]=be[e]}))}));var Se=o({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function Ee(e,t){if(t){if(Se[e]&&(null!=t.children||null!=t.dangerouslySetInnerHTML))throw Error(a(137,e));if(null!=t.dangerouslySetInnerHTML){if(null!=t.children)throw Error(a(60));if("object"!=typeof t.dangerouslySetInnerHTML||!("__html"in t.dangerouslySetInnerHTML))throw Error(a(61))}if(null!=t.style&&"object"!=typeof t.style)throw Error(a(62))}}function ke(e,t){if(-1===e.indexOf("-"))return"string"==typeof t.is;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}function Oe(e){return(e=e.target||e.srcElement||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}var Ce=null,Pe=null,Me=null;function Ae(e){if(e=ro(e)){if("function"!=typeof Ce)throw Error(a(280));var t=e.stateNode;t&&(t=io(t),Ce(e.stateNode,e.type,t))}}function Ne(e){Pe?Me?Me.push(e):Me=[e]:Pe=e}function je(){if(Pe){var e=Pe,t=Me;if(Me=Pe=null,Ae(e),t)for(e=0;e<t.length;e++)Ae(t[e])}}function Te(e,t){return e(t)}function De(e,t,n,r,o){return e(t,n,r,o)}function Re(){}var Le=Te,ze=!1,Ie=!1;function Be(){null===Pe&&null===Me||(Re(),je())}function Ue(e,t){var n=e.stateNode;if(null===n)return null;var r=io(n);if(null===r)return null;n=r[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":case"onMouseEnter":(r=!r.disabled)||(r=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!r;break e;default:e=!1}if(e)return null;if(n&&"function"!=typeof n)throw Error(a(231,t,typeof n));return n}var Fe=!1;if(f)try{var Xe={};Object.defineProperty(Xe,"passive",{get:function(){Fe=!0}}),window.addEventListener("test",Xe,Xe),window.removeEventListener("test",Xe,Xe)}catch(ge){Fe=!1}function He(e,t,n,r,o,i,a,u,l){var c=Array.prototype.slice.call(arguments,3);try{t.apply(n,c)}catch(e){this.onError(e)}}var Ve=!1,We=null,Ye=!1,$e=null,Ze={onError:function(e){Ve=!0,We=e}};function qe(e,t,n,r,o,i,a,u,l){Ve=!1,We=null,He.apply(Ze,arguments)}function Ge(e){var t=e,n=e;if(e.alternate)for(;t.return;)t=t.return;else{e=t;do{0!=(1026&(t=e).flags)&&(n=t.return),e=t.return}while(e)}return 3===t.tag?n:null}function Ke(e){if(13===e.tag){var t=e.memoizedState;if(null===t&&(null!==(e=e.alternate)&&(t=e.memoizedState)),null!==t)return t.dehydrated}return null}function Qe(e){if(Ge(e)!==e)throw Error(a(188))}function Je(e){if(e=function(e){var t=e.alternate;if(!t){if(null===(t=Ge(e)))throw Error(a(188));return t!==e?null:e}for(var n=e,r=t;;){var o=n.return;if(null===o)break;var i=o.alternate;if(null===i){if(null!==(r=o.return)){n=r;continue}break}if(o.child===i.child){for(i=o.child;i;){if(i===n)return Qe(o),e;if(i===r)return Qe(o),t;i=i.sibling}throw Error(a(188))}if(n.return!==r.return)n=o,r=i;else{for(var u=!1,l=o.child;l;){if(l===n){u=!0,n=o,r=i;break}if(l===r){u=!0,r=o,n=i;break}l=l.sibling}if(!u){for(l=i.child;l;){if(l===n){u=!0,n=i,r=o;break}if(l===r){u=!0,r=i,n=o;break}l=l.sibling}if(!u)throw Error(a(189))}}if(n.alternate!==r)throw Error(a(190))}if(3!==n.tag)throw Error(a(188));return n.stateNode.current===n?e:t}(e),!e)return null;for(var t=e;;){if(5===t.tag||6===t.tag)return t;if(t.child)t.child.return=t,t=t.child;else{if(t===e)break;for(;!t.sibling;){if(!t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}}return null}function et(e,t){for(var n=e.alternate;null!==t;){if(t===e||t===n)return!0;t=t.return}return!1}var tt,nt,rt,ot,it=!1,at=[],ut=null,lt=null,ct=null,st=new Map,ft=new Map,dt=[],pt="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset submit".split(" ");function ht(e,t,n,r,o){return{blockedOn:e,domEventName:t,eventSystemFlags:16|n,nativeEvent:o,targetContainers:[r]}}function vt(e,t){switch(e){case"focusin":case"focusout":ut=null;break;case"dragenter":case"dragleave":lt=null;break;case"mouseover":case"mouseout":ct=null;break;case"pointerover":case"pointerout":st.delete(t.pointerId);break;case"gotpointercapture":case"lostpointercapture":ft.delete(t.pointerId)}}function gt(e,t,n,r,o,i){return null===e||e.nativeEvent!==i?(e=ht(t,n,r,o,i),null!==t&&(null!==(t=ro(t))&&nt(t)),e):(e.eventSystemFlags|=r,t=e.targetContainers,null!==o&&-1===t.indexOf(o)&&t.push(o),e)}function yt(e){var t=no(e.target);if(null!==t){var n=Ge(t);if(null!==n)if(13===(t=n.tag)){if(null!==(t=Ke(n)))return e.blockedOn=t,void ot(e.lanePriority,(function(){i.unstable_runWithPriority(e.priority,(function(){rt(n)}))}))}else if(3===t&&n.stateNode.hydrate)return void(e.blockedOn=3===n.tag?n.stateNode.containerInfo:null)}e.blockedOn=null}function mt(e){if(null!==e.blockedOn)return!1;for(var t=e.targetContainers;0<t.length;){var n=Jt(e.domEventName,e.eventSystemFlags,t[0],e.nativeEvent);if(null!==n)return null!==(t=ro(n))&&nt(t),e.blockedOn=n,!1;t.shift()}return!0}function bt(e,t,n){mt(e)&&n.delete(t)}function wt(){for(it=!1;0<at.length;){var e=at[0];if(null!==e.blockedOn){null!==(e=ro(e.blockedOn))&&tt(e);break}for(var t=e.targetContainers;0<t.length;){var n=Jt(e.domEventName,e.eventSystemFlags,t[0],e.nativeEvent);if(null!==n){e.blockedOn=n;break}t.shift()}null===e.blockedOn&&at.shift()}null!==ut&&mt(ut)&&(ut=null),null!==lt&&mt(lt)&&(lt=null),null!==ct&&mt(ct)&&(ct=null),st.forEach(bt),ft.forEach(bt)}function _t(e,t){e.blockedOn===t&&(e.blockedOn=null,it||(it=!0,i.unstable_scheduleCallback(i.unstable_NormalPriority,wt)))}function xt(e){function t(t){return _t(t,e)}if(0<at.length){_t(at[0],e);for(var n=1;n<at.length;n++){var r=at[n];r.blockedOn===e&&(r.blockedOn=null)}}for(null!==ut&&_t(ut,e),null!==lt&&_t(lt,e),null!==ct&&_t(ct,e),st.forEach(t),ft.forEach(t),n=0;n<dt.length;n++)(r=dt[n]).blockedOn===e&&(r.blockedOn=null);for(;0<dt.length&&null===(n=dt[0]).blockedOn;)yt(n),null===n.blockedOn&&dt.shift()}function St(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n}var Et={animationend:St("Animation","AnimationEnd"),animationiteration:St("Animation","AnimationIteration"),animationstart:St("Animation","AnimationStart"),transitionend:St("Transition","TransitionEnd")},kt={},Ot={};function Ct(e){if(kt[e])return kt[e];if(!Et[e])return e;var t,n=Et[e];for(t in n)if(n.hasOwnProperty(t)&&t in Ot)return kt[e]=n[t];return e}f&&(Ot=document.createElement("div").style,"AnimationEvent"in window||(delete Et.animationend.animation,delete Et.animationiteration.animation,delete Et.animationstart.animation),"TransitionEvent"in window||delete Et.transitionend.transition);var Pt=Ct("animationend"),Mt=Ct("animationiteration"),At=Ct("animationstart"),Nt=Ct("transitionend"),jt=new Map,Tt=new Map,Dt=["abort","abort",Pt,"animationEnd",Mt,"animationIteration",At,"animationStart","canplay","canPlay","canplaythrough","canPlayThrough","durationchange","durationChange","emptied","emptied","encrypted","encrypted","ended","ended","error","error","gotpointercapture","gotPointerCapture","load","load","loadeddata","loadedData","loadedmetadata","loadedMetadata","loadstart","loadStart","lostpointercapture","lostPointerCapture","playing","playing","progress","progress","seeking","seeking","stalled","stalled","suspend","suspend","timeupdate","timeUpdate",Nt,"transitionEnd","waiting","waiting"];function Rt(e,t){for(var n=0;n<e.length;n+=2){var r=e[n],o=e[n+1];o="on"+(o[0].toUpperCase()+o.slice(1)),Tt.set(r,t),jt.set(r,o),c(o,[r])}}(0,i.unstable_now)();var Lt=8;function zt(e){if(0!=(1&e))return Lt=15,1;if(0!=(2&e))return Lt=14,2;if(0!=(4&e))return Lt=13,4;var t=24&e;return 0!==t?(Lt=12,t):0!=(32&e)?(Lt=11,32):0!==(t=192&e)?(Lt=10,t):0!=(256&e)?(Lt=9,256):0!==(t=3584&e)?(Lt=8,t):0!=(4096&e)?(Lt=7,4096):0!==(t=4186112&e)?(Lt=6,t):0!==(t=62914560&e)?(Lt=5,t):67108864&e?(Lt=4,67108864):0!=(134217728&e)?(Lt=3,134217728):0!==(t=805306368&e)?(Lt=2,t):0!=(1073741824&e)?(Lt=1,1073741824):(Lt=8,e)}function It(e,t){var n=e.pendingLanes;if(0===n)return Lt=0;var r=0,o=0,i=e.expiredLanes,a=e.suspendedLanes,u=e.pingedLanes;if(0!==i)r=i,o=Lt=15;else if(0!==(i=134217727&n)){var l=i&~a;0!==l?(r=zt(l),o=Lt):0!==(u&=i)&&(r=zt(u),o=Lt)}else 0!==(i=n&~a)?(r=zt(i),o=Lt):0!==u&&(r=zt(u),o=Lt);if(0===r)return 0;if(r=n&((0>(r=31-Vt(r))?0:1<<r)<<1)-1,0!==t&&t!==r&&0==(t&a)){if(zt(t),o<=Lt)return t;Lt=o}if(0!==(t=e.entangledLanes))for(e=e.entanglements,t&=r;0<t;)o=1<<(n=31-Vt(t)),r|=e[n],t&=~o;return r}function Bt(e){return 0!==(e=-1073741825&e.pendingLanes)?e:1073741824&e?1073741824:0}function Ut(e,t){switch(e){case 15:return 1;case 14:return 2;case 12:return 0===(e=Ft(24&~t))?Ut(10,t):e;case 10:return 0===(e=Ft(192&~t))?Ut(8,t):e;case 8:return 0===(e=Ft(3584&~t))&&(0===(e=Ft(4186112&~t))&&(e=512)),e;case 2:return 0===(t=Ft(805306368&~t))&&(t=268435456),t}throw Error(a(358,e))}function Ft(e){return e&-e}function Xt(e){for(var t=[],n=0;31>n;n++)t.push(e);return t}function Ht(e,t,n){e.pendingLanes|=t;var r=t-1;e.suspendedLanes&=r,e.pingedLanes&=r,(e=e.eventTimes)[t=31-Vt(t)]=n}var Vt=Math.clz32?Math.clz32:function(e){return 0===e?32:31-(Wt(e)/Yt|0)|0},Wt=Math.log,Yt=Math.LN2;var $t=i.unstable_UserBlockingPriority,Zt=i.unstable_runWithPriority,qt=!0;function Gt(e,t,n,r){ze||Re();var o=Qt,i=ze;ze=!0;try{De(o,e,t,n,r)}finally{(ze=i)||Be()}}function Kt(e,t,n,r){Zt($t,Qt.bind(null,e,t,n,r))}function Qt(e,t,n,r){var o;if(qt)if((o=0==(4&t))&&0<at.length&&-1<pt.indexOf(e))e=ht(null,e,t,n,r),at.push(e);else{var i=Jt(e,t,n,r);if(null===i)o&&vt(e,r);else{if(o){if(-1<pt.indexOf(e))return e=ht(i,e,t,n,r),void at.push(e);if(function(e,t,n,r,o){switch(t){case"focusin":return ut=gt(ut,e,t,n,r,o),!0;case"dragenter":return lt=gt(lt,e,t,n,r,o),!0;case"mouseover":return ct=gt(ct,e,t,n,r,o),!0;case"pointerover":var i=o.pointerId;return st.set(i,gt(st.get(i)||null,e,t,n,r,o)),!0;case"gotpointercapture":return i=o.pointerId,ft.set(i,gt(ft.get(i)||null,e,t,n,r,o)),!0}return!1}(i,e,t,n,r))return;vt(e,r)}Rr(e,t,r,null,n)}}}function Jt(e,t,n,r){var o=Oe(r);if(null!==(o=no(o))){var i=Ge(o);if(null===i)o=null;else{var a=i.tag;if(13===a){if(null!==(o=Ke(i)))return o;o=null}else if(3===a){if(i.stateNode.hydrate)return 3===i.tag?i.stateNode.containerInfo:null;o=null}else i!==o&&(o=null)}}return Rr(e,t,r,o,n),null}var en=null,tn=null,nn=null;function rn(){if(nn)return nn;var e,t,n=tn,r=n.length,o="value"in en?en.value:en.textContent,i=o.length;for(e=0;e<r&&n[e]===o[e];e++);var a=r-e;for(t=1;t<=a&&n[r-t]===o[i-t];t++);return nn=o.slice(e,1<t?1-t:void 0)}function on(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,10===e&&(e=13),32<=e||13===e?e:0}function an(){return!0}function un(){return!1}function ln(e){function t(t,n,r,o,i){for(var a in this._reactName=t,this._targetInst=r,this.type=n,this.nativeEvent=o,this.target=i,this.currentTarget=null,e)e.hasOwnProperty(a)&&(t=e[a],this[a]=t?t(o):o[a]);return this.isDefaultPrevented=(null!=o.defaultPrevented?o.defaultPrevented:!1===o.returnValue)?an:un,this.isPropagationStopped=un,this}return o(t.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=an)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=an)},persist:function(){},isPersistent:an}),t}var cn,sn,fn,dn={eventPhase:0,bubbles:0,cancelable:0,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:0,isTrusted:0},pn=ln(dn),hn=o({},dn,{view:0,detail:0}),vn=ln(hn),gn=o({},hn,{screenX:0,screenY:0,clientX:0,clientY:0,pageX:0,pageY:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,getModifierState:Pn,button:0,buttons:0,relatedTarget:function(e){return void 0===e.relatedTarget?e.fromElement===e.srcElement?e.toElement:e.fromElement:e.relatedTarget},movementX:function(e){return"movementX"in e?e.movementX:(e!==fn&&(fn&&"mousemove"===e.type?(cn=e.screenX-fn.screenX,sn=e.screenY-fn.screenY):sn=cn=0,fn=e),cn)},movementY:function(e){return"movementY"in e?e.movementY:sn}}),yn=ln(gn),mn=ln(o({},gn,{dataTransfer:0})),bn=ln(o({},hn,{relatedTarget:0})),wn=ln(o({},dn,{animationName:0,elapsedTime:0,pseudoElement:0})),_n=o({},dn,{clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}}),xn=ln(_n),Sn=ln(o({},dn,{data:0})),En={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},kn={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},On={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function Cn(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=On[e])&&!!t[e]}function Pn(){return Cn}var Mn=o({},hn,{key:function(e){if(e.key){var t=En[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?13===(e=on(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?kn[e.keyCode]||"Unidentified":""},code:0,location:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,repeat:0,locale:0,getModifierState:Pn,charCode:function(e){return"keypress"===e.type?on(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?on(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}}),An=ln(Mn),Nn=ln(o({},gn,{pointerId:0,width:0,height:0,pressure:0,tangentialPressure:0,tiltX:0,tiltY:0,twist:0,pointerType:0,isPrimary:0})),jn=ln(o({},hn,{touches:0,targetTouches:0,changedTouches:0,altKey:0,metaKey:0,ctrlKey:0,shiftKey:0,getModifierState:Pn})),Tn=ln(o({},dn,{propertyName:0,elapsedTime:0,pseudoElement:0})),Dn=o({},gn,{deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:0,deltaMode:0}),Rn=ln(Dn),Ln=[9,13,27,32],zn=f&&"CompositionEvent"in window,In=null;f&&"documentMode"in document&&(In=document.documentMode);var Bn=f&&"TextEvent"in window&&!In,Un=f&&(!zn||In&&8<In&&11>=In),Fn=String.fromCharCode(32),Xn=!1;function Hn(e,t){switch(e){case"keyup":return-1!==Ln.indexOf(t.keyCode);case"keydown":return 229!==t.keyCode;case"keypress":case"mousedown":case"focusout":return!0;default:return!1}}function Vn(e){return"object"==typeof(e=e.detail)&&"data"in e?e.data:null}var Wn=!1;var Yn={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function $n(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!Yn[e.type]:"textarea"===t}function Zn(e,t,n,r){Ne(r),0<(t=zr(t,"onChange")).length&&(n=new pn("onChange","change",null,n,r),e.push({event:n,listeners:t}))}var qn=null,Gn=null;function Kn(e){Mr(e,0)}function Qn(e){if(K(oo(e)))return e}function Jn(e,t){if("change"===e)return t}var er=!1;if(f){var tr;if(f){var nr="oninput"in document;if(!nr){var rr=document.createElement("div");rr.setAttribute("oninput","return;"),nr="function"==typeof rr.oninput}tr=nr}else tr=!1;er=tr&&(!document.documentMode||9<document.documentMode)}function or(){qn&&(qn.detachEvent("onpropertychange",ir),Gn=qn=null)}function ir(e){if("value"===e.propertyName&&Qn(Gn)){var t=[];if(Zn(t,Gn,e,Oe(e)),e=Kn,ze)e(t);else{ze=!0;try{Te(e,t)}finally{ze=!1,Be()}}}}function ar(e,t,n){"focusin"===e?(or(),Gn=n,(qn=t).attachEvent("onpropertychange",ir)):"focusout"===e&&or()}function ur(e){if("selectionchange"===e||"keyup"===e||"keydown"===e)return Qn(Gn)}function lr(e,t){if("click"===e)return Qn(t)}function cr(e,t){if("input"===e||"change"===e)return Qn(t)}var sr="function"==typeof Object.is?Object.is:function(e,t){return e===t&&(0!==e||1/e==1/t)||e!=e&&t!=t},fr=Object.prototype.hasOwnProperty;function dr(e,t){if(sr(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(r=0;r<n.length;r++)if(!fr.call(t,n[r])||!sr(e[n[r]],t[n[r]]))return!1;return!0}function pr(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function hr(e,t){var n,r=pr(e);for(e=0;r;){if(3===r.nodeType){if(n=e+r.textContent.length,e<=t&&n>=t)return{node:r,offset:t-e};e=n}e:{for(;r;){if(r.nextSibling){r=r.nextSibling;break e}r=r.parentNode}r=void 0}r=pr(r)}}function vr(e,t){return!(!e||!t)&&(e===t||(!e||3!==e.nodeType)&&(t&&3===t.nodeType?vr(e,t.parentNode):"contains"in e?e.contains(t):!!e.compareDocumentPosition&&!!(16&e.compareDocumentPosition(t))))}function gr(){for(var e=window,t=Q();t instanceof e.HTMLIFrameElement;){try{var n="string"==typeof t.contentWindow.location.href}catch(e){n=!1}if(!n)break;t=Q((e=t.contentWindow).document)}return t}function yr(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&("text"===e.type||"search"===e.type||"tel"===e.type||"url"===e.type||"password"===e.type)||"textarea"===t||"true"===e.contentEditable)}var mr=f&&"documentMode"in document&&11>=document.documentMode,br=null,wr=null,_r=null,xr=!1;function Sr(e,t,n){var r=n.window===n?n.document:9===n.nodeType?n:n.ownerDocument;xr||null==br||br!==Q(r)||("selectionStart"in(r=br)&&yr(r)?r={start:r.selectionStart,end:r.selectionEnd}:r={anchorNode:(r=(r.ownerDocument&&r.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:r.anchorOffset,focusNode:r.focusNode,focusOffset:r.focusOffset},_r&&dr(_r,r)||(_r=r,0<(r=zr(wr,"onSelect")).length&&(t=new pn("onSelect","select",null,t,n),e.push({event:t,listeners:r}),t.target=br)))}Rt("cancel cancel click click close close contextmenu contextMenu copy copy cut cut auxclick auxClick dblclick doubleClick dragend dragEnd dragstart dragStart drop drop focusin focus focusout blur input input invalid invalid keydown keyDown keypress keyPress keyup keyUp mousedown mouseDown mouseup mouseUp paste paste pause pause play play pointercancel pointerCancel pointerdown pointerDown pointerup pointerUp ratechange rateChange reset reset seeked seeked submit submit touchcancel touchCancel touchend touchEnd touchstart touchStart volumechange volumeChange".split(" "),0),Rt("drag drag dragenter dragEnter dragexit dragExit dragleave dragLeave dragover dragOver mousemove mouseMove mouseout mouseOut mouseover mouseOver pointermove pointerMove pointerout pointerOut pointerover pointerOver scroll scroll toggle toggle touchmove touchMove wheel wheel".split(" "),1),Rt(Dt,2);for(var Er="change selectionchange textInput compositionstart compositionend compositionupdate".split(" "),kr=0;kr<Er.length;kr++)Tt.set(Er[kr],0);s("onMouseEnter",["mouseout","mouseover"]),s("onMouseLeave",["mouseout","mouseover"]),s("onPointerEnter",["pointerout","pointerover"]),s("onPointerLeave",["pointerout","pointerover"]),c("onChange","change click focusin focusout input keydown keyup selectionchange".split(" ")),c("onSelect","focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" ")),c("onBeforeInput",["compositionend","keypress","textInput","paste"]),c("onCompositionEnd","compositionend focusout keydown keypress keyup mousedown".split(" ")),c("onCompositionStart","compositionstart focusout keydown keypress keyup mousedown".split(" ")),c("onCompositionUpdate","compositionupdate focusout keydown keypress keyup mousedown".split(" "));var Or="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),Cr=new Set("cancel close invalid load scroll toggle".split(" ").concat(Or));function Pr(e,t,n){var r=e.type||"unknown-event";e.currentTarget=n,function(e,t,n,r,o,i,u,l,c){if(qe.apply(this,arguments),Ve){if(!Ve)throw Error(a(198));var s=We;Ve=!1,We=null,Ye||(Ye=!0,$e=s)}}(r,t,void 0,e),e.currentTarget=null}function Mr(e,t){t=0!=(4&t);for(var n=0;n<e.length;n++){var r=e[n],o=r.event;r=r.listeners;e:{var i=void 0;if(t)for(var a=r.length-1;0<=a;a--){var u=r[a],l=u.instance,c=u.currentTarget;if(u=u.listener,l!==i&&o.isPropagationStopped())break e;Pr(o,u,c),i=l}else for(a=0;a<r.length;a++){if(l=(u=r[a]).instance,c=u.currentTarget,u=u.listener,l!==i&&o.isPropagationStopped())break e;Pr(o,u,c),i=l}}}if(Ye)throw e=$e,Ye=!1,$e=null,e}function Ar(e,t){var n=ao(t),r=e+"__bubble";n.has(r)||(Dr(t,e,2,!1),n.add(r))}var Nr="_reactListening"+Math.random().toString(36).slice(2);function jr(e){e[Nr]||(e[Nr]=!0,u.forEach((function(t){Cr.has(t)||Tr(t,!1,e,null),Tr(t,!0,e,null)})))}function Tr(e,t,n,r){var o=4<arguments.length&&void 0!==arguments[4]?arguments[4]:0,i=n;if("selectionchange"===e&&9!==n.nodeType&&(i=n.ownerDocument),null!==r&&!t&&Cr.has(e)){if("scroll"!==e)return;o|=2,i=r}var a=ao(i),u=e+"__"+(t?"capture":"bubble");a.has(u)||(t&&(o|=4),Dr(i,e,o,t),a.add(u))}function Dr(e,t,n,r){var o=Tt.get(t);switch(void 0===o?2:o){case 0:o=Gt;break;case 1:o=Kt;break;default:o=Qt}n=o.bind(null,t,n,e),o=void 0,!Fe||"touchstart"!==t&&"touchmove"!==t&&"wheel"!==t||(o=!0),r?void 0!==o?e.addEventListener(t,n,{capture:!0,passive:o}):e.addEventListener(t,n,!0):void 0!==o?e.addEventListener(t,n,{passive:o}):e.addEventListener(t,n,!1)}function Rr(e,t,n,r,o){var i=r;if(0==(1&t)&&0==(2&t)&&null!==r)e:for(;;){if(null===r)return;var a=r.tag;if(3===a||4===a){var u=r.stateNode.containerInfo;if(u===o||8===u.nodeType&&u.parentNode===o)break;if(4===a)for(a=r.return;null!==a;){var l=a.tag;if((3===l||4===l)&&((l=a.stateNode.containerInfo)===o||8===l.nodeType&&l.parentNode===o))return;a=a.return}for(;null!==u;){if(null===(a=no(u)))return;if(5===(l=a.tag)||6===l){r=i=a;continue e}u=u.parentNode}}r=r.return}!function(e,t,n){if(Ie)return e(t,n);Ie=!0;try{Le(e,t,n)}finally{Ie=!1,Be()}}((function(){var r=i,o=Oe(n),a=[];e:{var u=jt.get(e);if(void 0!==u){var l=pn,c=e;switch(e){case"keypress":if(0===on(n))break e;case"keydown":case"keyup":l=An;break;case"focusin":c="focus",l=bn;break;case"focusout":c="blur",l=bn;break;case"beforeblur":case"afterblur":l=bn;break;case"click":if(2===n.button)break e;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":l=yn;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":l=mn;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":l=jn;break;case Pt:case Mt:case At:l=wn;break;case Nt:l=Tn;break;case"scroll":l=vn;break;case"wheel":l=Rn;break;case"copy":case"cut":case"paste":l=xn;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":l=Nn}var s=0!=(4&t),f=!s&&"scroll"===e,d=s?null!==u?u+"Capture":null:u;s=[];for(var p,h=r;null!==h;){var v=(p=h).stateNode;if(5===p.tag&&null!==v&&(p=v,null!==d&&(null!=(v=Ue(h,d))&&s.push(Lr(h,v,p)))),f)break;h=h.return}0<s.length&&(u=new l(u,c,null,n,o),a.push({event:u,listeners:s}))}}if(0==(7&t)){if(l="mouseout"===e||"pointerout"===e,(!(u="mouseover"===e||"pointerover"===e)||0!=(16&t)||!(c=n.relatedTarget||n.fromElement)||!no(c)&&!c[eo])&&(l||u)&&(u=o.window===o?o:(u=o.ownerDocument)?u.defaultView||u.parentWindow:window,l?(l=r,null!==(c=(c=n.relatedTarget||n.toElement)?no(c):null)&&(c!==(f=Ge(c))||5!==c.tag&&6!==c.tag)&&(c=null)):(l=null,c=r),l!==c)){if(s=yn,v="onMouseLeave",d="onMouseEnter",h="mouse","pointerout"!==e&&"pointerover"!==e||(s=Nn,v="onPointerLeave",d="onPointerEnter",h="pointer"),f=null==l?u:oo(l),p=null==c?u:oo(c),(u=new s(v,h+"leave",l,n,o)).target=f,u.relatedTarget=p,v=null,no(o)===r&&((s=new s(d,h+"enter",c,n,o)).target=p,s.relatedTarget=f,v=s),f=v,l&&c)e:{for(d=c,h=0,p=s=l;p;p=Ir(p))h++;for(p=0,v=d;v;v=Ir(v))p++;for(;0<h-p;)s=Ir(s),h--;for(;0<p-h;)d=Ir(d),p--;for(;h--;){if(s===d||null!==d&&s===d.alternate)break e;s=Ir(s),d=Ir(d)}s=null}else s=null;null!==l&&Br(a,u,l,s,!1),null!==c&&null!==f&&Br(a,f,c,s,!0)}if("select"===(l=(u=r?oo(r):window).nodeName&&u.nodeName.toLowerCase())||"input"===l&&"file"===u.type)var g=Jn;else if($n(u))if(er)g=cr;else{g=ur;var y=ar}else(l=u.nodeName)&&"input"===l.toLowerCase()&&("checkbox"===u.type||"radio"===u.type)&&(g=lr);switch(g&&(g=g(e,r))?Zn(a,g,n,o):(y&&y(e,u,r),"focusout"===e&&(y=u._wrapperState)&&y.controlled&&"number"===u.type&&oe(u,"number",u.value)),y=r?oo(r):window,e){case"focusin":($n(y)||"true"===y.contentEditable)&&(br=y,wr=r,_r=null);break;case"focusout":_r=wr=br=null;break;case"mousedown":xr=!0;break;case"contextmenu":case"mouseup":case"dragend":xr=!1,Sr(a,n,o);break;case"selectionchange":if(mr)break;case"keydown":case"keyup":Sr(a,n,o)}var m;if(zn)e:{switch(e){case"compositionstart":var b="onCompositionStart";break e;case"compositionend":b="onCompositionEnd";break e;case"compositionupdate":b="onCompositionUpdate";break e}b=void 0}else Wn?Hn(e,n)&&(b="onCompositionEnd"):"keydown"===e&&229===n.keyCode&&(b="onCompositionStart");b&&(Un&&"ko"!==n.locale&&(Wn||"onCompositionStart"!==b?"onCompositionEnd"===b&&Wn&&(m=rn()):(tn="value"in(en=o)?en.value:en.textContent,Wn=!0)),0<(y=zr(r,b)).length&&(b=new Sn(b,e,null,n,o),a.push({event:b,listeners:y}),m?b.data=m:null!==(m=Vn(n))&&(b.data=m))),(m=Bn?function(e,t){switch(e){case"compositionend":return Vn(t);case"keypress":return 32!==t.which?null:(Xn=!0,Fn);case"textInput":return(e=t.data)===Fn&&Xn?null:e;default:return null}}(e,n):function(e,t){if(Wn)return"compositionend"===e||!zn&&Hn(e,t)?(e=rn(),nn=tn=en=null,Wn=!1,e):null;switch(e){default:return null;case"keypress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return Un&&"ko"!==t.locale?null:t.data}}(e,n))&&(0<(r=zr(r,"onBeforeInput")).length&&(o=new Sn("onBeforeInput","beforeinput",null,n,o),a.push({event:o,listeners:r}),o.data=m))}Mr(a,t)}))}function Lr(e,t,n){return{instance:e,listener:t,currentTarget:n}}function zr(e,t){for(var n=t+"Capture",r=[];null!==e;){var o=e,i=o.stateNode;5===o.tag&&null!==i&&(o=i,null!=(i=Ue(e,n))&&r.unshift(Lr(e,i,o)),null!=(i=Ue(e,t))&&r.push(Lr(e,i,o))),e=e.return}return r}function Ir(e){if(null===e)return null;do{e=e.return}while(e&&5!==e.tag);return e||null}function Br(e,t,n,r,o){for(var i=t._reactName,a=[];null!==n&&n!==r;){var u=n,l=u.alternate,c=u.stateNode;if(null!==l&&l===r)break;5===u.tag&&null!==c&&(u=c,o?null!=(l=Ue(n,i))&&a.unshift(Lr(n,l,u)):o||null!=(l=Ue(n,i))&&a.push(Lr(n,l,u))),n=n.return}0!==a.length&&e.push({event:t,listeners:a})}function Ur(){}var Fr=null,Xr=null;function Hr(e,t){switch(e){case"button":case"input":case"select":case"textarea":return!!t.autoFocus}return!1}function Vr(e,t){return"textarea"===e||"option"===e||"noscript"===e||"string"==typeof t.children||"number"==typeof t.children||"object"==typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&null!=t.dangerouslySetInnerHTML.__html}var Wr="function"==typeof setTimeout?setTimeout:void 0,Yr="function"==typeof clearTimeout?clearTimeout:void 0;function $r(e){1===e.nodeType?e.textContent="":9===e.nodeType&&(null!=(e=e.body)&&(e.textContent=""))}function Zr(e){for(;null!=e;e=e.nextSibling){var t=e.nodeType;if(1===t||3===t)break}return e}function qr(e){e=e.previousSibling;for(var t=0;e;){if(8===e.nodeType){var n=e.data;if("$"===n||"$!"===n||"$?"===n){if(0===t)return e;t--}else"/$"===n&&t++}e=e.previousSibling}return null}var Gr=0;var Kr=Math.random().toString(36).slice(2),Qr="__reactFiber$"+Kr,Jr="__reactProps$"+Kr,eo="__reactContainer$"+Kr,to="__reactEvents$"+Kr;function no(e){var t=e[Qr];if(t)return t;for(var n=e.parentNode;n;){if(t=n[eo]||n[Qr]){if(n=t.alternate,null!==t.child||null!==n&&null!==n.child)for(e=qr(e);null!==e;){if(n=e[Qr])return n;e=qr(e)}return t}n=(e=n).parentNode}return null}function ro(e){return!(e=e[Qr]||e[eo])||5!==e.tag&&6!==e.tag&&13!==e.tag&&3!==e.tag?null:e}function oo(e){if(5===e.tag||6===e.tag)return e.stateNode;throw Error(a(33))}function io(e){return e[Jr]||null}function ao(e){var t=e[to];return void 0===t&&(t=e[to]=new Set),t}var uo=[],lo=-1;function co(e){return{current:e}}function so(e){0>lo||(e.current=uo[lo],uo[lo]=null,lo--)}function fo(e,t){lo++,uo[lo]=e.current,e.current=t}var po={},ho=co(po),vo=co(!1),go=po;function yo(e,t){var n=e.type.contextTypes;if(!n)return po;var r=e.stateNode;if(r&&r.__reactInternalMemoizedUnmaskedChildContext===t)return r.__reactInternalMemoizedMaskedChildContext;var o,i={};for(o in n)i[o]=t[o];return r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=i),i}function mo(e){return null!=(e=e.childContextTypes)}function bo(){so(vo),so(ho)}function wo(e,t,n){if(ho.current!==po)throw Error(a(168));fo(ho,t),fo(vo,n)}function _o(e,t,n){var r=e.stateNode;if(e=t.childContextTypes,"function"!=typeof r.getChildContext)return n;for(var i in r=r.getChildContext())if(!(i in e))throw Error(a(108,$(t)||"Unknown",i));return o({},n,r)}function xo(e){return e=(e=e.stateNode)&&e.__reactInternalMemoizedMergedChildContext||po,go=ho.current,fo(ho,e),fo(vo,vo.current),!0}function So(e,t,n){var r=e.stateNode;if(!r)throw Error(a(169));n?(e=_o(e,t,go),r.__reactInternalMemoizedMergedChildContext=e,so(vo),so(ho),fo(ho,e)):so(vo),fo(vo,n)}var Eo=null,ko=null,Oo=i.unstable_runWithPriority,Co=i.unstable_scheduleCallback,Po=i.unstable_cancelCallback,Mo=i.unstable_shouldYield,Ao=i.unstable_requestPaint,No=i.unstable_now,jo=i.unstable_getCurrentPriorityLevel,To=i.unstable_ImmediatePriority,Do=i.unstable_UserBlockingPriority,Ro=i.unstable_NormalPriority,Lo=i.unstable_LowPriority,zo=i.unstable_IdlePriority,Io={},Bo=void 0!==Ao?Ao:function(){},Uo=null,Fo=null,Xo=!1,Ho=No(),Vo=1e4>Ho?No:function(){return No()-Ho};function Wo(){switch(jo()){case To:return 99;case Do:return 98;case Ro:return 97;case Lo:return 96;case zo:return 95;default:throw Error(a(332))}}function Yo(e){switch(e){case 99:return To;case 98:return Do;case 97:return Ro;case 96:return Lo;case 95:return zo;default:throw Error(a(332))}}function $o(e,t){return e=Yo(e),Oo(e,t)}function Zo(e,t,n){return e=Yo(e),Co(e,t,n)}function qo(){if(null!==Fo){var e=Fo;Fo=null,Po(e)}Go()}function Go(){if(!Xo&&null!==Uo){Xo=!0;var e=0;try{var t=Uo;$o(99,(function(){for(;e<t.length;e++){var n=t[e];do{n=n(!0)}while(null!==n)}})),Uo=null}catch(t){throw null!==Uo&&(Uo=Uo.slice(e+1)),Co(To,qo),t}finally{Xo=!1}}}var Ko=_.ReactCurrentBatchConfig;function Qo(e,t){if(e&&e.defaultProps){for(var n in t=o({},t),e=e.defaultProps)void 0===t[n]&&(t[n]=e[n]);return t}return t}var Jo=co(null),ei=null,ti=null,ni=null;function ri(){ni=ti=ei=null}function oi(e){var t=Jo.current;so(Jo),e.type._context._currentValue=t}function ii(e,t){for(;null!==e;){var n=e.alternate;if((e.childLanes&t)===t){if(null===n||(n.childLanes&t)===t)break;n.childLanes|=t}else e.childLanes|=t,null!==n&&(n.childLanes|=t);e=e.return}}function ai(e,t){ei=e,ni=ti=null,null!==(e=e.dependencies)&&null!==e.firstContext&&(0!=(e.lanes&t)&&(za=!0),e.firstContext=null)}function ui(e,t){if(ni!==e&&!1!==t&&0!==t)if("number"==typeof t&&1073741823!==t||(ni=e,t=1073741823),t={context:e,observedBits:t,next:null},null===ti){if(null===ei)throw Error(a(308));ti=t,ei.dependencies={lanes:0,firstContext:t,responders:null}}else ti=ti.next=t;return e._currentValue}var li=!1;function ci(e){e.updateQueue={baseState:e.memoizedState,firstBaseUpdate:null,lastBaseUpdate:null,shared:{pending:null},effects:null}}function si(e,t){e=e.updateQueue,t.updateQueue===e&&(t.updateQueue={baseState:e.baseState,firstBaseUpdate:e.firstBaseUpdate,lastBaseUpdate:e.lastBaseUpdate,shared:e.shared,effects:e.effects})}function fi(e,t){return{eventTime:e,lane:t,tag:0,payload:null,callback:null,next:null}}function di(e,t){if(null!==(e=e.updateQueue)){var n=(e=e.shared).pending;null===n?t.next=t:(t.next=n.next,n.next=t),e.pending=t}}function pi(e,t){var n=e.updateQueue,r=e.alternate;if(null!==r&&n===(r=r.updateQueue)){var o=null,i=null;if(null!==(n=n.firstBaseUpdate)){do{var a={eventTime:n.eventTime,lane:n.lane,tag:n.tag,payload:n.payload,callback:n.callback,next:null};null===i?o=i=a:i=i.next=a,n=n.next}while(null!==n);null===i?o=i=t:i=i.next=t}else o=i=t;return n={baseState:r.baseState,firstBaseUpdate:o,lastBaseUpdate:i,shared:r.shared,effects:r.effects},void(e.updateQueue=n)}null===(e=n.lastBaseUpdate)?n.firstBaseUpdate=t:e.next=t,n.lastBaseUpdate=t}function hi(e,t,n,r){var i=e.updateQueue;li=!1;var a=i.firstBaseUpdate,u=i.lastBaseUpdate,l=i.shared.pending;if(null!==l){i.shared.pending=null;var c=l,s=c.next;c.next=null,null===u?a=s:u.next=s,u=c;var f=e.alternate;if(null!==f){var d=(f=f.updateQueue).lastBaseUpdate;d!==u&&(null===d?f.firstBaseUpdate=s:d.next=s,f.lastBaseUpdate=c)}}if(null!==a){for(d=i.baseState,u=0,f=s=c=null;;){l=a.lane;var p=a.eventTime;if((r&l)===l){null!==f&&(f=f.next={eventTime:p,lane:0,tag:a.tag,payload:a.payload,callback:a.callback,next:null});e:{var h=e,v=a;switch(l=t,p=n,v.tag){case 1:if("function"==typeof(h=v.payload)){d=h.call(p,d,l);break e}d=h;break e;case 3:h.flags=-4097&h.flags|64;case 0:if(null==(l="function"==typeof(h=v.payload)?h.call(p,d,l):h))break e;d=o({},d,l);break e;case 2:li=!0}}null!==a.callback&&(e.flags|=32,null===(l=i.effects)?i.effects=[a]:l.push(a))}else p={eventTime:p,lane:l,tag:a.tag,payload:a.payload,callback:a.callback,next:null},null===f?(s=f=p,c=d):f=f.next=p,u|=l;if(null===(a=a.next)){if(null===(l=i.shared.pending))break;a=l.next,l.next=null,i.lastBaseUpdate=l,i.shared.pending=null}}null===f&&(c=d),i.baseState=c,i.firstBaseUpdate=s,i.lastBaseUpdate=f,Uu|=u,e.lanes=u,e.memoizedState=d}}function vi(e,t,n){if(e=t.effects,t.effects=null,null!==e)for(t=0;t<e.length;t++){var r=e[t],o=r.callback;if(null!==o){if(r.callback=null,r=n,"function"!=typeof o)throw Error(a(191,o));o.call(r)}}}var gi=(new r.Component).refs;function yi(e,t,n,r){n=null==(n=n(r,t=e.memoizedState))?t:o({},t,n),e.memoizedState=n,0===e.lanes&&(e.updateQueue.baseState=n)}var mi={isMounted:function(e){return!!(e=e._reactInternals)&&Ge(e)===e},enqueueSetState:function(e,t,n){e=e._reactInternals;var r=fl(),o=dl(e),i=fi(r,o);i.payload=t,null!=n&&(i.callback=n),di(e,i),pl(e,o,r)},enqueueReplaceState:function(e,t,n){e=e._reactInternals;var r=fl(),o=dl(e),i=fi(r,o);i.tag=1,i.payload=t,null!=n&&(i.callback=n),di(e,i),pl(e,o,r)},enqueueForceUpdate:function(e,t){e=e._reactInternals;var n=fl(),r=dl(e),o=fi(n,r);o.tag=2,null!=t&&(o.callback=t),di(e,o),pl(e,r,n)}};function bi(e,t,n,r,o,i,a){return"function"==typeof(e=e.stateNode).shouldComponentUpdate?e.shouldComponentUpdate(r,i,a):!t.prototype||!t.prototype.isPureReactComponent||(!dr(n,r)||!dr(o,i))}function wi(e,t,n){var r=!1,o=po,i=t.contextType;return"object"==typeof i&&null!==i?i=ui(i):(o=mo(t)?go:ho.current,i=(r=null!=(r=t.contextTypes))?yo(e,o):po),t=new t(n,i),e.memoizedState=null!==t.state&&void 0!==t.state?t.state:null,t.updater=mi,e.stateNode=t,t._reactInternals=e,r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=o,e.__reactInternalMemoizedMaskedChildContext=i),t}function _i(e,t,n,r){e=t.state,"function"==typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(n,r),"function"==typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(n,r),t.state!==e&&mi.enqueueReplaceState(t,t.state,null)}function xi(e,t,n,r){var o=e.stateNode;o.props=n,o.state=e.memoizedState,o.refs=gi,ci(e);var i=t.contextType;"object"==typeof i&&null!==i?o.context=ui(i):(i=mo(t)?go:ho.current,o.context=yo(e,i)),hi(e,n,o,r),o.state=e.memoizedState,"function"==typeof(i=t.getDerivedStateFromProps)&&(yi(e,t,i,n),o.state=e.memoizedState),"function"==typeof t.getDerivedStateFromProps||"function"==typeof o.getSnapshotBeforeUpdate||"function"!=typeof o.UNSAFE_componentWillMount&&"function"!=typeof o.componentWillMount||(t=o.state,"function"==typeof o.componentWillMount&&o.componentWillMount(),"function"==typeof o.UNSAFE_componentWillMount&&o.UNSAFE_componentWillMount(),t!==o.state&&mi.enqueueReplaceState(o,o.state,null),hi(e,n,o,r),o.state=e.memoizedState),"function"==typeof o.componentDidMount&&(e.flags|=4)}var Si=Array.isArray;function Ei(e,t,n){if(null!==(e=n.ref)&&"function"!=typeof e&&"object"!=typeof e){if(n._owner){if(n=n._owner){if(1!==n.tag)throw Error(a(309));var r=n.stateNode}if(!r)throw Error(a(147,e));var o=""+e;return null!==t&&null!==t.ref&&"function"==typeof t.ref&&t.ref._stringRef===o?t.ref:(t=function(e){var t=r.refs;t===gi&&(t=r.refs={}),null===e?delete t[o]:t[o]=e},t._stringRef=o,t)}if("string"!=typeof e)throw Error(a(284));if(!n._owner)throw Error(a(290,e))}return e}function ki(e,t){if("textarea"!==e.type)throw Error(a(31,"[object Object]"===Object.prototype.toString.call(t)?"object with keys {"+Object.keys(t).join(", ")+"}":t))}function Oi(e){function t(t,n){if(e){var r=t.lastEffect;null!==r?(r.nextEffect=n,t.lastEffect=n):t.firstEffect=t.lastEffect=n,n.nextEffect=null,n.flags=8}}function n(n,r){if(!e)return null;for(;null!==r;)t(n,r),r=r.sibling;return null}function r(e,t){for(e=new Map;null!==t;)null!==t.key?e.set(t.key,t):e.set(t.index,t),t=t.sibling;return e}function o(e,t){return(e=Wl(e,t)).index=0,e.sibling=null,e}function i(t,n,r){return t.index=r,e?null!==(r=t.alternate)?(r=r.index)<n?(t.flags=2,n):r:(t.flags=2,n):n}function u(t){return e&&null===t.alternate&&(t.flags=2),t}function l(e,t,n,r){return null===t||6!==t.tag?((t=ql(n,e.mode,r)).return=e,t):((t=o(t,n)).return=e,t)}function c(e,t,n,r){return null!==t&&t.elementType===n.type?((r=o(t,n.props)).ref=Ei(e,t,n),r.return=e,r):((r=Yl(n.type,n.key,n.props,null,e.mode,r)).ref=Ei(e,t,n),r.return=e,r)}function s(e,t,n,r){return null===t||4!==t.tag||t.stateNode.containerInfo!==n.containerInfo||t.stateNode.implementation!==n.implementation?((t=Gl(n,e.mode,r)).return=e,t):((t=o(t,n.children||[])).return=e,t)}function f(e,t,n,r,i){return null===t||7!==t.tag?((t=$l(n,e.mode,r,i)).return=e,t):((t=o(t,n)).return=e,t)}function d(e,t,n){if("string"==typeof t||"number"==typeof t)return(t=ql(""+t,e.mode,n)).return=e,t;if("object"==typeof t&&null!==t){switch(t.$$typeof){case x:return(n=Yl(t.type,t.key,t.props,null,e.mode,n)).ref=Ei(e,null,t),n.return=e,n;case S:return(t=Gl(t,e.mode,n)).return=e,t}if(Si(t)||X(t))return(t=$l(t,e.mode,n,null)).return=e,t;ki(e,t)}return null}function p(e,t,n,r){var o=null!==t?t.key:null;if("string"==typeof n||"number"==typeof n)return null!==o?null:l(e,t,""+n,r);if("object"==typeof n&&null!==n){switch(n.$$typeof){case x:return n.key===o?n.type===E?f(e,t,n.props.children,r,o):c(e,t,n,r):null;case S:return n.key===o?s(e,t,n,r):null}if(Si(n)||X(n))return null!==o?null:f(e,t,n,r,null);ki(e,n)}return null}function h(e,t,n,r,o){if("string"==typeof r||"number"==typeof r)return l(t,e=e.get(n)||null,""+r,o);if("object"==typeof r&&null!==r){switch(r.$$typeof){case x:return e=e.get(null===r.key?n:r.key)||null,r.type===E?f(t,e,r.props.children,o,r.key):c(t,e,r,o);case S:return s(t,e=e.get(null===r.key?n:r.key)||null,r,o)}if(Si(r)||X(r))return f(t,e=e.get(n)||null,r,o,null);ki(t,r)}return null}function v(o,a,u,l){for(var c=null,s=null,f=a,v=a=0,g=null;null!==f&&v<u.length;v++){f.index>v?(g=f,f=null):g=f.sibling;var y=p(o,f,u[v],l);if(null===y){null===f&&(f=g);break}e&&f&&null===y.alternate&&t(o,f),a=i(y,a,v),null===s?c=y:s.sibling=y,s=y,f=g}if(v===u.length)return n(o,f),c;if(null===f){for(;v<u.length;v++)null!==(f=d(o,u[v],l))&&(a=i(f,a,v),null===s?c=f:s.sibling=f,s=f);return c}for(f=r(o,f);v<u.length;v++)null!==(g=h(f,o,v,u[v],l))&&(e&&null!==g.alternate&&f.delete(null===g.key?v:g.key),a=i(g,a,v),null===s?c=g:s.sibling=g,s=g);return e&&f.forEach((function(e){return t(o,e)})),c}function g(o,u,l,c){var s=X(l);if("function"!=typeof s)throw Error(a(150));if(null==(l=s.call(l)))throw Error(a(151));for(var f=s=null,v=u,g=u=0,y=null,m=l.next();null!==v&&!m.done;g++,m=l.next()){v.index>g?(y=v,v=null):y=v.sibling;var b=p(o,v,m.value,c);if(null===b){null===v&&(v=y);break}e&&v&&null===b.alternate&&t(o,v),u=i(b,u,g),null===f?s=b:f.sibling=b,f=b,v=y}if(m.done)return n(o,v),s;if(null===v){for(;!m.done;g++,m=l.next())null!==(m=d(o,m.value,c))&&(u=i(m,u,g),null===f?s=m:f.sibling=m,f=m);return s}for(v=r(o,v);!m.done;g++,m=l.next())null!==(m=h(v,o,g,m.value,c))&&(e&&null!==m.alternate&&v.delete(null===m.key?g:m.key),u=i(m,u,g),null===f?s=m:f.sibling=m,f=m);return e&&v.forEach((function(e){return t(o,e)})),s}return function(e,r,i,l){var c="object"==typeof i&&null!==i&&i.type===E&&null===i.key;c&&(i=i.props.children);var s="object"==typeof i&&null!==i;if(s)switch(i.$$typeof){case x:e:{for(s=i.key,c=r;null!==c;){if(c.key===s){if(7===c.tag){if(i.type===E){n(e,c.sibling),(r=o(c,i.props.children)).return=e,e=r;break e}}else if(c.elementType===i.type){n(e,c.sibling),(r=o(c,i.props)).ref=Ei(e,c,i),r.return=e,e=r;break e}n(e,c);break}t(e,c),c=c.sibling}i.type===E?((r=$l(i.props.children,e.mode,l,i.key)).return=e,e=r):((l=Yl(i.type,i.key,i.props,null,e.mode,l)).ref=Ei(e,r,i),l.return=e,e=l)}return u(e);case S:e:{for(c=i.key;null!==r;){if(r.key===c){if(4===r.tag&&r.stateNode.containerInfo===i.containerInfo&&r.stateNode.implementation===i.implementation){n(e,r.sibling),(r=o(r,i.children||[])).return=e,e=r;break e}n(e,r);break}t(e,r),r=r.sibling}(r=Gl(i,e.mode,l)).return=e,e=r}return u(e)}if("string"==typeof i||"number"==typeof i)return i=""+i,null!==r&&6===r.tag?(n(e,r.sibling),(r=o(r,i)).return=e,e=r):(n(e,r),(r=ql(i,e.mode,l)).return=e,e=r),u(e);if(Si(i))return v(e,r,i,l);if(X(i))return g(e,r,i,l);if(s&&ki(e,i),void 0===i&&!c)switch(e.tag){case 1:case 22:case 0:case 11:case 15:throw Error(a(152,$(e.type)||"Component"))}return n(e,r)}}var Ci=Oi(!0),Pi=Oi(!1),Mi={},Ai=co(Mi),Ni=co(Mi),ji=co(Mi);function Ti(e){if(e===Mi)throw Error(a(174));return e}function Di(e,t){switch(fo(ji,t),fo(Ni,e),fo(Ai,Mi),e=t.nodeType){case 9:case 11:t=(t=t.documentElement)?t.namespaceURI:he(null,"");break;default:t=he(t=(e=8===e?t.parentNode:t).namespaceURI||null,e=e.tagName)}so(Ai),fo(Ai,t)}function Ri(){so(Ai),so(Ni),so(ji)}function Li(e){Ti(ji.current);var t=Ti(Ai.current),n=he(t,e.type);t!==n&&(fo(Ni,e),fo(Ai,n))}function zi(e){Ni.current===e&&(so(Ai),so(Ni))}var Ii=co(0);function Bi(e){for(var t=e;null!==t;){if(13===t.tag){var n=t.memoizedState;if(null!==n&&(null===(n=n.dehydrated)||"$?"===n.data||"$!"===n.data))return t}else if(19===t.tag&&void 0!==t.memoizedProps.revealOrder){if(0!=(64&t.flags))return t}else if(null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}return null}var Ui=null,Fi=null,Xi=!1;function Hi(e,t){var n=Hl(5,null,null,0);n.elementType="DELETED",n.type="DELETED",n.stateNode=t,n.return=e,n.flags=8,null!==e.lastEffect?(e.lastEffect.nextEffect=n,e.lastEffect=n):e.firstEffect=e.lastEffect=n}function Vi(e,t){switch(e.tag){case 5:var n=e.type;return null!==(t=1!==t.nodeType||n.toLowerCase()!==t.nodeName.toLowerCase()?null:t)&&(e.stateNode=t,!0);case 6:return null!==(t=""===e.pendingProps||3!==t.nodeType?null:t)&&(e.stateNode=t,!0);default:return!1}}function Wi(e){if(Xi){var t=Fi;if(t){var n=t;if(!Vi(e,t)){if(!(t=Zr(n.nextSibling))||!Vi(e,t))return e.flags=-1025&e.flags|2,Xi=!1,void(Ui=e);Hi(Ui,n)}Ui=e,Fi=Zr(t.firstChild)}else e.flags=-1025&e.flags|2,Xi=!1,Ui=e}}function Yi(e){for(e=e.return;null!==e&&5!==e.tag&&3!==e.tag&&13!==e.tag;)e=e.return;Ui=e}function $i(e){if(e!==Ui)return!1;if(!Xi)return Yi(e),Xi=!0,!1;var t=e.type;if(5!==e.tag||"head"!==t&&"body"!==t&&!Vr(t,e.memoizedProps))for(t=Fi;t;)Hi(e,t),t=Zr(t.nextSibling);if(Yi(e),13===e.tag){if(!(e=null!==(e=e.memoizedState)?e.dehydrated:null))throw Error(a(317));e:{for(e=e.nextSibling,t=0;e;){if(8===e.nodeType){var n=e.data;if("/$"===n){if(0===t){Fi=Zr(e.nextSibling);break e}t--}else"$"!==n&&"$!"!==n&&"$?"!==n||t++}e=e.nextSibling}Fi=null}}else Fi=Ui?Zr(e.stateNode.nextSibling):null;return!0}function Zi(){Fi=Ui=null,Xi=!1}var qi=[];function Gi(){for(var e=0;e<qi.length;e++)qi[e]._workInProgressVersionPrimary=null;qi.length=0}var Ki=_.ReactCurrentDispatcher,Qi=_.ReactCurrentBatchConfig,Ji=0,ea=null,ta=null,na=null,ra=!1,oa=!1;function ia(){throw Error(a(321))}function aa(e,t){if(null===t)return!1;for(var n=0;n<t.length&&n<e.length;n++)if(!sr(e[n],t[n]))return!1;return!0}function ua(e,t,n,r,o,i){if(Ji=i,ea=t,t.memoizedState=null,t.updateQueue=null,t.lanes=0,Ki.current=null===e||null===e.memoizedState?Ta:Da,e=n(r,o),oa){i=0;do{if(oa=!1,!(25>i))throw Error(a(301));i+=1,na=ta=null,t.updateQueue=null,Ki.current=Ra,e=n(r,o)}while(oa)}if(Ki.current=ja,t=null!==ta&&null!==ta.next,Ji=0,na=ta=ea=null,ra=!1,t)throw Error(a(300));return e}function la(){var e={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};return null===na?ea.memoizedState=na=e:na=na.next=e,na}function ca(){if(null===ta){var e=ea.alternate;e=null!==e?e.memoizedState:null}else e=ta.next;var t=null===na?ea.memoizedState:na.next;if(null!==t)na=t,ta=e;else{if(null===e)throw Error(a(310));e={memoizedState:(ta=e).memoizedState,baseState:ta.baseState,baseQueue:ta.baseQueue,queue:ta.queue,next:null},null===na?ea.memoizedState=na=e:na=na.next=e}return na}function sa(e,t){return"function"==typeof t?t(e):t}function fa(e){var t=ca(),n=t.queue;if(null===n)throw Error(a(311));n.lastRenderedReducer=e;var r=ta,o=r.baseQueue,i=n.pending;if(null!==i){if(null!==o){var u=o.next;o.next=i.next,i.next=u}r.baseQueue=o=i,n.pending=null}if(null!==o){o=o.next,r=r.baseState;var l=u=i=null,c=o;do{var s=c.lane;if((Ji&s)===s)null!==l&&(l=l.next={lane:0,action:c.action,eagerReducer:c.eagerReducer,eagerState:c.eagerState,next:null}),r=c.eagerReducer===e?c.eagerState:e(r,c.action);else{var f={lane:s,action:c.action,eagerReducer:c.eagerReducer,eagerState:c.eagerState,next:null};null===l?(u=l=f,i=r):l=l.next=f,ea.lanes|=s,Uu|=s}c=c.next}while(null!==c&&c!==o);null===l?i=r:l.next=u,sr(r,t.memoizedState)||(za=!0),t.memoizedState=r,t.baseState=i,t.baseQueue=l,n.lastRenderedState=r}return[t.memoizedState,n.dispatch]}function da(e){var t=ca(),n=t.queue;if(null===n)throw Error(a(311));n.lastRenderedReducer=e;var r=n.dispatch,o=n.pending,i=t.memoizedState;if(null!==o){n.pending=null;var u=o=o.next;do{i=e(i,u.action),u=u.next}while(u!==o);sr(i,t.memoizedState)||(za=!0),t.memoizedState=i,null===t.baseQueue&&(t.baseState=i),n.lastRenderedState=i}return[i,r]}function pa(e,t,n){var r=t._getVersion;r=r(t._source);var o=t._workInProgressVersionPrimary;if(null!==o?e=o===r:(e=e.mutableReadLanes,(e=(Ji&e)===e)&&(t._workInProgressVersionPrimary=r,qi.push(t))),e)return n(t._source);throw qi.push(t),Error(a(350))}function ha(e,t,n,r){var o=ju;if(null===o)throw Error(a(349));var i=t._getVersion,u=i(t._source),l=Ki.current,c=l.useState((function(){return pa(o,t,n)})),s=c[1],f=c[0];c=na;var d=e.memoizedState,p=d.refs,h=p.getSnapshot,v=d.source;d=d.subscribe;var g=ea;return e.memoizedState={refs:p,source:t,subscribe:r},l.useEffect((function(){p.getSnapshot=n,p.setSnapshot=s;var e=i(t._source);if(!sr(u,e)){e=n(t._source),sr(f,e)||(s(e),e=dl(g),o.mutableReadLanes|=e&o.pendingLanes),e=o.mutableReadLanes,o.entangledLanes|=e;for(var r=o.entanglements,a=e;0<a;){var l=31-Vt(a),c=1<<l;r[l]|=e,a&=~c}}}),[n,t,r]),l.useEffect((function(){return r(t._source,(function(){var e=p.getSnapshot,n=p.setSnapshot;try{n(e(t._source));var r=dl(g);o.mutableReadLanes|=r&o.pendingLanes}catch(e){n((function(){throw e}))}}))}),[t,r]),sr(h,n)&&sr(v,t)&&sr(d,r)||((e={pending:null,dispatch:null,lastRenderedReducer:sa,lastRenderedState:f}).dispatch=s=Na.bind(null,ea,e),c.queue=e,c.baseQueue=null,f=pa(o,t,n),c.memoizedState=c.baseState=f),f}function va(e,t,n){return ha(ca(),e,t,n)}function ga(e){var t=la();return"function"==typeof e&&(e=e()),t.memoizedState=t.baseState=e,e=(e=t.queue={pending:null,dispatch:null,lastRenderedReducer:sa,lastRenderedState:e}).dispatch=Na.bind(null,ea,e),[t.memoizedState,e]}function ya(e,t,n,r){return e={tag:e,create:t,destroy:n,deps:r,next:null},null===(t=ea.updateQueue)?(t={lastEffect:null},ea.updateQueue=t,t.lastEffect=e.next=e):null===(n=t.lastEffect)?t.lastEffect=e.next=e:(r=n.next,n.next=e,e.next=r,t.lastEffect=e),e}function ma(e){return e={current:e},la().memoizedState=e}function ba(){return ca().memoizedState}function wa(e,t,n,r){var o=la();ea.flags|=e,o.memoizedState=ya(1|t,n,void 0,void 0===r?null:r)}function _a(e,t,n,r){var o=ca();r=void 0===r?null:r;var i=void 0;if(null!==ta){var a=ta.memoizedState;if(i=a.destroy,null!==r&&aa(r,a.deps))return void ya(t,n,i,r)}ea.flags|=e,o.memoizedState=ya(1|t,n,i,r)}function xa(e,t){return wa(516,4,e,t)}function Sa(e,t){return _a(516,4,e,t)}function Ea(e,t){return _a(4,2,e,t)}function ka(e,t){return"function"==typeof t?(e=e(),t(e),function(){t(null)}):null!=t?(e=e(),t.current=e,function(){t.current=null}):void 0}function Oa(e,t,n){return n=null!=n?n.concat([e]):null,_a(4,2,ka.bind(null,t,e),n)}function Ca(){}function Pa(e,t){var n=ca();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&aa(t,r[1])?r[0]:(n.memoizedState=[e,t],e)}function Ma(e,t){var n=ca();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&aa(t,r[1])?r[0]:(e=e(),n.memoizedState=[e,t],e)}function Aa(e,t){var n=Wo();$o(98>n?98:n,(function(){e(!0)})),$o(97<n?97:n,(function(){var n=Qi.transition;Qi.transition=1;try{e(!1),t()}finally{Qi.transition=n}}))}function Na(e,t,n){var r=fl(),o=dl(e),i={lane:o,action:n,eagerReducer:null,eagerState:null,next:null},a=t.pending;if(null===a?i.next=i:(i.next=a.next,a.next=i),t.pending=i,a=e.alternate,e===ea||null!==a&&a===ea)oa=ra=!0;else{if(0===e.lanes&&(null===a||0===a.lanes)&&null!==(a=t.lastRenderedReducer))try{var u=t.lastRenderedState,l=a(u,n);if(i.eagerReducer=a,i.eagerState=l,sr(l,u))return}catch(e){}pl(e,o,r)}}var ja={readContext:ui,useCallback:ia,useContext:ia,useEffect:ia,useImperativeHandle:ia,useLayoutEffect:ia,useMemo:ia,useReducer:ia,useRef:ia,useState:ia,useDebugValue:ia,useDeferredValue:ia,useTransition:ia,useMutableSource:ia,useOpaqueIdentifier:ia,unstable_isNewReconciler:!1},Ta={readContext:ui,useCallback:function(e,t){return la().memoizedState=[e,void 0===t?null:t],e},useContext:ui,useEffect:xa,useImperativeHandle:function(e,t,n){return n=null!=n?n.concat([e]):null,wa(4,2,ka.bind(null,t,e),n)},useLayoutEffect:function(e,t){return wa(4,2,e,t)},useMemo:function(e,t){var n=la();return t=void 0===t?null:t,e=e(),n.memoizedState=[e,t],e},useReducer:function(e,t,n){var r=la();return t=void 0!==n?n(t):t,r.memoizedState=r.baseState=t,e=(e=r.queue={pending:null,dispatch:null,lastRenderedReducer:e,lastRenderedState:t}).dispatch=Na.bind(null,ea,e),[r.memoizedState,e]},useRef:ma,useState:ga,useDebugValue:Ca,useDeferredValue:function(e){var t=ga(e),n=t[0],r=t[1];return xa((function(){var t=Qi.transition;Qi.transition=1;try{r(e)}finally{Qi.transition=t}}),[e]),n},useTransition:function(){var e=ga(!1),t=e[0];return ma(e=Aa.bind(null,e[1])),[e,t]},useMutableSource:function(e,t,n){var r=la();return r.memoizedState={refs:{getSnapshot:t,setSnapshot:null},source:e,subscribe:n},ha(r,e,t,n)},useOpaqueIdentifier:function(){if(Xi){var e=!1,t=function(e){return{$$typeof:R,toString:e,valueOf:e}}((function(){throw e||(e=!0,n("r:"+(Gr++).toString(36))),Error(a(355))})),n=ga(t)[1];return 0==(2&ea.mode)&&(ea.flags|=516,ya(5,(function(){n("r:"+(Gr++).toString(36))}),void 0,null)),t}return ga(t="r:"+(Gr++).toString(36)),t},unstable_isNewReconciler:!1},Da={readContext:ui,useCallback:Pa,useContext:ui,useEffect:Sa,useImperativeHandle:Oa,useLayoutEffect:Ea,useMemo:Ma,useReducer:fa,useRef:ba,useState:function(){return fa(sa)},useDebugValue:Ca,useDeferredValue:function(e){var t=fa(sa),n=t[0],r=t[1];return Sa((function(){var t=Qi.transition;Qi.transition=1;try{r(e)}finally{Qi.transition=t}}),[e]),n},useTransition:function(){var e=fa(sa)[0];return[ba().current,e]},useMutableSource:va,useOpaqueIdentifier:function(){return fa(sa)[0]},unstable_isNewReconciler:!1},Ra={readContext:ui,useCallback:Pa,useContext:ui,useEffect:Sa,useImperativeHandle:Oa,useLayoutEffect:Ea,useMemo:Ma,useReducer:da,useRef:ba,useState:function(){return da(sa)},useDebugValue:Ca,useDeferredValue:function(e){var t=da(sa),n=t[0],r=t[1];return Sa((function(){var t=Qi.transition;Qi.transition=1;try{r(e)}finally{Qi.transition=t}}),[e]),n},useTransition:function(){var e=da(sa)[0];return[ba().current,e]},useMutableSource:va,useOpaqueIdentifier:function(){return da(sa)[0]},unstable_isNewReconciler:!1},La=_.ReactCurrentOwner,za=!1;function Ia(e,t,n,r){t.child=null===e?Pi(t,null,n,r):Ci(t,e.child,n,r)}function Ba(e,t,n,r,o){n=n.render;var i=t.ref;return ai(t,o),r=ua(e,t,n,r,i,o),null===e||za?(t.flags|=1,Ia(e,t,r,o),t.child):(t.updateQueue=e.updateQueue,t.flags&=-517,e.lanes&=~o,iu(e,t,o))}function Ua(e,t,n,r,o,i){if(null===e){var a=n.type;return"function"!=typeof a||Vl(a)||void 0!==a.defaultProps||null!==n.compare||void 0!==n.defaultProps?((e=Yl(n.type,null,r,t,t.mode,i)).ref=t.ref,e.return=t,t.child=e):(t.tag=15,t.type=a,Fa(e,t,a,r,o,i))}return a=e.child,0==(o&i)&&(o=a.memoizedProps,(n=null!==(n=n.compare)?n:dr)(o,r)&&e.ref===t.ref)?iu(e,t,i):(t.flags|=1,(e=Wl(a,r)).ref=t.ref,e.return=t,t.child=e)}function Fa(e,t,n,r,o,i){if(null!==e&&dr(e.memoizedProps,r)&&e.ref===t.ref){if(za=!1,0==(i&o))return t.lanes=e.lanes,iu(e,t,i);0!=(16384&e.flags)&&(za=!0)}return Va(e,t,n,r,i)}function Xa(e,t,n){var r=t.pendingProps,o=r.children,i=null!==e?e.memoizedState:null;if("hidden"===r.mode||"unstable-defer-without-hiding"===r.mode)if(0==(4&t.mode))t.memoizedState={baseLanes:0},_l(t,n);else{if(0==(1073741824&n))return e=null!==i?i.baseLanes|n:n,t.lanes=t.childLanes=1073741824,t.memoizedState={baseLanes:e},_l(t,e),null;t.memoizedState={baseLanes:0},_l(t,null!==i?i.baseLanes:n)}else null!==i?(r=i.baseLanes|n,t.memoizedState=null):r=n,_l(t,r);return Ia(e,t,o,n),t.child}function Ha(e,t){var n=t.ref;(null===e&&null!==n||null!==e&&e.ref!==n)&&(t.flags|=128)}function Va(e,t,n,r,o){var i=mo(n)?go:ho.current;return i=yo(t,i),ai(t,o),n=ua(e,t,n,r,i,o),null===e||za?(t.flags|=1,Ia(e,t,n,o),t.child):(t.updateQueue=e.updateQueue,t.flags&=-517,e.lanes&=~o,iu(e,t,o))}function Wa(e,t,n,r,o){if(mo(n)){var i=!0;xo(t)}else i=!1;if(ai(t,o),null===t.stateNode)null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),wi(t,n,r),xi(t,n,r,o),r=!0;else if(null===e){var a=t.stateNode,u=t.memoizedProps;a.props=u;var l=a.context,c=n.contextType;"object"==typeof c&&null!==c?c=ui(c):c=yo(t,c=mo(n)?go:ho.current);var s=n.getDerivedStateFromProps,f="function"==typeof s||"function"==typeof a.getSnapshotBeforeUpdate;f||"function"!=typeof a.UNSAFE_componentWillReceiveProps&&"function"!=typeof a.componentWillReceiveProps||(u!==r||l!==c)&&_i(t,a,r,c),li=!1;var d=t.memoizedState;a.state=d,hi(t,r,a,o),l=t.memoizedState,u!==r||d!==l||vo.current||li?("function"==typeof s&&(yi(t,n,s,r),l=t.memoizedState),(u=li||bi(t,n,u,r,d,l,c))?(f||"function"!=typeof a.UNSAFE_componentWillMount&&"function"!=typeof a.componentWillMount||("function"==typeof a.componentWillMount&&a.componentWillMount(),"function"==typeof a.UNSAFE_componentWillMount&&a.UNSAFE_componentWillMount()),"function"==typeof a.componentDidMount&&(t.flags|=4)):("function"==typeof a.componentDidMount&&(t.flags|=4),t.memoizedProps=r,t.memoizedState=l),a.props=r,a.state=l,a.context=c,r=u):("function"==typeof a.componentDidMount&&(t.flags|=4),r=!1)}else{a=t.stateNode,si(e,t),u=t.memoizedProps,c=t.type===t.elementType?u:Qo(t.type,u),a.props=c,f=t.pendingProps,d=a.context,"object"==typeof(l=n.contextType)&&null!==l?l=ui(l):l=yo(t,l=mo(n)?go:ho.current);var p=n.getDerivedStateFromProps;(s="function"==typeof p||"function"==typeof a.getSnapshotBeforeUpdate)||"function"!=typeof a.UNSAFE_componentWillReceiveProps&&"function"!=typeof a.componentWillReceiveProps||(u!==f||d!==l)&&_i(t,a,r,l),li=!1,d=t.memoizedState,a.state=d,hi(t,r,a,o);var h=t.memoizedState;u!==f||d!==h||vo.current||li?("function"==typeof p&&(yi(t,n,p,r),h=t.memoizedState),(c=li||bi(t,n,c,r,d,h,l))?(s||"function"!=typeof a.UNSAFE_componentWillUpdate&&"function"!=typeof a.componentWillUpdate||("function"==typeof a.componentWillUpdate&&a.componentWillUpdate(r,h,l),"function"==typeof a.UNSAFE_componentWillUpdate&&a.UNSAFE_componentWillUpdate(r,h,l)),"function"==typeof a.componentDidUpdate&&(t.flags|=4),"function"==typeof a.getSnapshotBeforeUpdate&&(t.flags|=256)):("function"!=typeof a.componentDidUpdate||u===e.memoizedProps&&d===e.memoizedState||(t.flags|=4),"function"!=typeof a.getSnapshotBeforeUpdate||u===e.memoizedProps&&d===e.memoizedState||(t.flags|=256),t.memoizedProps=r,t.memoizedState=h),a.props=r,a.state=h,a.context=l,r=c):("function"!=typeof a.componentDidUpdate||u===e.memoizedProps&&d===e.memoizedState||(t.flags|=4),"function"!=typeof a.getSnapshotBeforeUpdate||u===e.memoizedProps&&d===e.memoizedState||(t.flags|=256),r=!1)}return Ya(e,t,n,r,i,o)}function Ya(e,t,n,r,o,i){Ha(e,t);var a=0!=(64&t.flags);if(!r&&!a)return o&&So(t,n,!1),iu(e,t,i);r=t.stateNode,La.current=t;var u=a&&"function"!=typeof n.getDerivedStateFromError?null:r.render();return t.flags|=1,null!==e&&a?(t.child=Ci(t,e.child,null,i),t.child=Ci(t,null,u,i)):Ia(e,t,u,i),t.memoizedState=r.state,o&&So(t,n,!0),t.child}function $a(e){var t=e.stateNode;t.pendingContext?wo(0,t.pendingContext,t.pendingContext!==t.context):t.context&&wo(0,t.context,!1),Di(e,t.containerInfo)}var Za,qa,Ga,Ka={dehydrated:null,retryLane:0};function Qa(e,t,n){var r,o=t.pendingProps,i=Ii.current,a=!1;return(r=0!=(64&t.flags))||(r=(null===e||null!==e.memoizedState)&&0!=(2&i)),r?(a=!0,t.flags&=-65):null!==e&&null===e.memoizedState||void 0===o.fallback||!0===o.unstable_avoidThisFallback||(i|=1),fo(Ii,1&i),null===e?(void 0!==o.fallback&&Wi(t),e=o.children,i=o.fallback,a?(e=Ja(t,e,i,n),t.child.memoizedState={baseLanes:n},t.memoizedState=Ka,e):"number"==typeof o.unstable_expectedLoadTime?(e=Ja(t,e,i,n),t.child.memoizedState={baseLanes:n},t.memoizedState=Ka,t.lanes=33554432,e):((n=Zl({mode:"visible",children:e},t.mode,n,null)).return=t,t.child=n)):(e.memoizedState,a?(o=tu(e,t,o.children,o.fallback,n),a=t.child,i=e.child.memoizedState,a.memoizedState=null===i?{baseLanes:n}:{baseLanes:i.baseLanes|n},a.childLanes=e.childLanes&~n,t.memoizedState=Ka,o):(n=eu(e,t,o.children,n),t.memoizedState=null,n))}function Ja(e,t,n,r){var o=e.mode,i=e.child;return t={mode:"hidden",children:t},0==(2&o)&&null!==i?(i.childLanes=0,i.pendingProps=t):i=Zl(t,o,0,null),n=$l(n,o,r,null),i.return=e,n.return=e,i.sibling=n,e.child=i,n}function eu(e,t,n,r){var o=e.child;return e=o.sibling,n=Wl(o,{mode:"visible",children:n}),0==(2&t.mode)&&(n.lanes=r),n.return=t,n.sibling=null,null!==e&&(e.nextEffect=null,e.flags=8,t.firstEffect=t.lastEffect=e),t.child=n}function tu(e,t,n,r,o){var i=t.mode,a=e.child;e=a.sibling;var u={mode:"hidden",children:n};return 0==(2&i)&&t.child!==a?((n=t.child).childLanes=0,n.pendingProps=u,null!==(a=n.lastEffect)?(t.firstEffect=n.firstEffect,t.lastEffect=a,a.nextEffect=null):t.firstEffect=t.lastEffect=null):n=Wl(a,u),null!==e?r=Wl(e,r):(r=$l(r,i,o,null)).flags|=2,r.return=t,n.return=t,n.sibling=r,t.child=n,r}function nu(e,t){e.lanes|=t;var n=e.alternate;null!==n&&(n.lanes|=t),ii(e.return,t)}function ru(e,t,n,r,o,i){var a=e.memoizedState;null===a?e.memoizedState={isBackwards:t,rendering:null,renderingStartTime:0,last:r,tail:n,tailMode:o,lastEffect:i}:(a.isBackwards=t,a.rendering=null,a.renderingStartTime=0,a.last=r,a.tail=n,a.tailMode=o,a.lastEffect=i)}function ou(e,t,n){var r=t.pendingProps,o=r.revealOrder,i=r.tail;if(Ia(e,t,r.children,n),0!=(2&(r=Ii.current)))r=1&r|2,t.flags|=64;else{if(null!==e&&0!=(64&e.flags))e:for(e=t.child;null!==e;){if(13===e.tag)null!==e.memoizedState&&nu(e,n);else if(19===e.tag)nu(e,n);else if(null!==e.child){e.child.return=e,e=e.child;continue}if(e===t)break e;for(;null===e.sibling;){if(null===e.return||e.return===t)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}r&=1}if(fo(Ii,r),0==(2&t.mode))t.memoizedState=null;else switch(o){case"forwards":for(n=t.child,o=null;null!==n;)null!==(e=n.alternate)&&null===Bi(e)&&(o=n),n=n.sibling;null===(n=o)?(o=t.child,t.child=null):(o=n.sibling,n.sibling=null),ru(t,!1,o,n,i,t.lastEffect);break;case"backwards":for(n=null,o=t.child,t.child=null;null!==o;){if(null!==(e=o.alternate)&&null===Bi(e)){t.child=o;break}e=o.sibling,o.sibling=n,n=o,o=e}ru(t,!0,n,null,i,t.lastEffect);break;case"together":ru(t,!1,null,null,void 0,t.lastEffect);break;default:t.memoizedState=null}return t.child}function iu(e,t,n){if(null!==e&&(t.dependencies=e.dependencies),Uu|=t.lanes,0!=(n&t.childLanes)){if(null!==e&&t.child!==e.child)throw Error(a(153));if(null!==t.child){for(n=Wl(e=t.child,e.pendingProps),t.child=n,n.return=t;null!==e.sibling;)e=e.sibling,(n=n.sibling=Wl(e,e.pendingProps)).return=t;n.sibling=null}return t.child}return null}function au(e,t){if(!Xi)switch(e.tailMode){case"hidden":t=e.tail;for(var n=null;null!==t;)null!==t.alternate&&(n=t),t=t.sibling;null===n?e.tail=null:n.sibling=null;break;case"collapsed":n=e.tail;for(var r=null;null!==n;)null!==n.alternate&&(r=n),n=n.sibling;null===r?t||null===e.tail?e.tail=null:e.tail.sibling=null:r.sibling=null}}function uu(e,t,n){var r=t.pendingProps;switch(t.tag){case 2:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return null;case 1:case 17:return mo(t.type)&&bo(),null;case 3:return Ri(),so(vo),so(ho),Gi(),(r=t.stateNode).pendingContext&&(r.context=r.pendingContext,r.pendingContext=null),null!==e&&null!==e.child||($i(t)?t.flags|=4:r.hydrate||(t.flags|=256)),null;case 5:zi(t);var i=Ti(ji.current);if(n=t.type,null!==e&&null!=t.stateNode)qa(e,t,n,r),e.ref!==t.ref&&(t.flags|=128);else{if(!r){if(null===t.stateNode)throw Error(a(166));return null}if(e=Ti(Ai.current),$i(t)){r=t.stateNode,n=t.type;var u=t.memoizedProps;switch(r[Qr]=t,r[Jr]=u,n){case"dialog":Ar("cancel",r),Ar("close",r);break;case"iframe":case"object":case"embed":Ar("load",r);break;case"video":case"audio":for(e=0;e<Or.length;e++)Ar(Or[e],r);break;case"source":Ar("error",r);break;case"img":case"image":case"link":Ar("error",r),Ar("load",r);break;case"details":Ar("toggle",r);break;case"input":ee(r,u),Ar("invalid",r);break;case"select":r._wrapperState={wasMultiple:!!u.multiple},Ar("invalid",r);break;case"textarea":le(r,u),Ar("invalid",r)}for(var c in Ee(n,u),e=null,u)u.hasOwnProperty(c)&&(i=u[c],"children"===c?"string"==typeof i?r.textContent!==i&&(e=["children",i]):"number"==typeof i&&r.textContent!==""+i&&(e=["children",""+i]):l.hasOwnProperty(c)&&null!=i&&"onScroll"===c&&Ar("scroll",r));switch(n){case"input":G(r),re(r,u,!0);break;case"textarea":G(r),se(r);break;case"select":case"option":break;default:"function"==typeof u.onClick&&(r.onclick=Ur)}r=e,t.updateQueue=r,null!==r&&(t.flags|=4)}else{switch(c=9===i.nodeType?i:i.ownerDocument,e===fe&&(e=pe(n)),e===fe?"script"===n?((e=c.createElement("div")).innerHTML="<script><\/script>",e=e.removeChild(e.firstChild)):"string"==typeof r.is?e=c.createElement(n,{is:r.is}):(e=c.createElement(n),"select"===n&&(c=e,r.multiple?c.multiple=!0:r.size&&(c.size=r.size))):e=c.createElementNS(e,n),e[Qr]=t,e[Jr]=r,Za(e,t),t.stateNode=e,c=ke(n,r),n){case"dialog":Ar("cancel",e),Ar("close",e),i=r;break;case"iframe":case"object":case"embed":Ar("load",e),i=r;break;case"video":case"audio":for(i=0;i<Or.length;i++)Ar(Or[i],e);i=r;break;case"source":Ar("error",e),i=r;break;case"img":case"image":case"link":Ar("error",e),Ar("load",e),i=r;break;case"details":Ar("toggle",e),i=r;break;case"input":ee(e,r),i=J(e,r),Ar("invalid",e);break;case"option":i=ie(e,r);break;case"select":e._wrapperState={wasMultiple:!!r.multiple},i=o({},r,{value:void 0}),Ar("invalid",e);break;case"textarea":le(e,r),i=ue(e,r),Ar("invalid",e);break;default:i=r}Ee(n,i);var s=i;for(u in s)if(s.hasOwnProperty(u)){var f=s[u];"style"===u?xe(e,f):"dangerouslySetInnerHTML"===u?null!=(f=f?f.__html:void 0)&&ye(e,f):"children"===u?"string"==typeof f?("textarea"!==n||""!==f)&&me(e,f):"number"==typeof f&&me(e,""+f):"suppressContentEditableWarning"!==u&&"suppressHydrationWarning"!==u&&"autoFocus"!==u&&(l.hasOwnProperty(u)?null!=f&&"onScroll"===u&&Ar("scroll",e):null!=f&&w(e,u,f,c))}switch(n){case"input":G(e),re(e,r,!1);break;case"textarea":G(e),se(e);break;case"option":null!=r.value&&e.setAttribute("value",""+Z(r.value));break;case"select":e.multiple=!!r.multiple,null!=(u=r.value)?ae(e,!!r.multiple,u,!1):null!=r.defaultValue&&ae(e,!!r.multiple,r.defaultValue,!0);break;default:"function"==typeof i.onClick&&(e.onclick=Ur)}Hr(n,r)&&(t.flags|=4)}null!==t.ref&&(t.flags|=128)}return null;case 6:if(e&&null!=t.stateNode)Ga(0,t,e.memoizedProps,r);else{if("string"!=typeof r&&null===t.stateNode)throw Error(a(166));n=Ti(ji.current),Ti(Ai.current),$i(t)?(r=t.stateNode,n=t.memoizedProps,r[Qr]=t,r.nodeValue!==n&&(t.flags|=4)):((r=(9===n.nodeType?n:n.ownerDocument).createTextNode(r))[Qr]=t,t.stateNode=r)}return null;case 13:return so(Ii),r=t.memoizedState,0!=(64&t.flags)?(t.lanes=n,t):(r=null!==r,n=!1,null===e?void 0!==t.memoizedProps.fallback&&$i(t):n=null!==e.memoizedState,r&&!n&&0!=(2&t.mode)&&(null===e&&!0!==t.memoizedProps.unstable_avoidThisFallback||0!=(1&Ii.current)?0===zu&&(zu=3):(0!==zu&&3!==zu||(zu=4),null===ju||0==(134217727&Uu)&&0==(134217727&Fu)||yl(ju,Du))),(r||n)&&(t.flags|=4),null);case 4:return Ri(),null===e&&jr(t.stateNode.containerInfo),null;case 10:return oi(t),null;case 19:if(so(Ii),null===(r=t.memoizedState))return null;if(u=0!=(64&t.flags),null===(c=r.rendering))if(u)au(r,!1);else{if(0!==zu||null!==e&&0!=(64&e.flags))for(e=t.child;null!==e;){if(null!==(c=Bi(e))){for(t.flags|=64,au(r,!1),null!==(u=c.updateQueue)&&(t.updateQueue=u,t.flags|=4),null===r.lastEffect&&(t.firstEffect=null),t.lastEffect=r.lastEffect,r=n,n=t.child;null!==n;)e=r,(u=n).flags&=2,u.nextEffect=null,u.firstEffect=null,u.lastEffect=null,null===(c=u.alternate)?(u.childLanes=0,u.lanes=e,u.child=null,u.memoizedProps=null,u.memoizedState=null,u.updateQueue=null,u.dependencies=null,u.stateNode=null):(u.childLanes=c.childLanes,u.lanes=c.lanes,u.child=c.child,u.memoizedProps=c.memoizedProps,u.memoizedState=c.memoizedState,u.updateQueue=c.updateQueue,u.type=c.type,e=c.dependencies,u.dependencies=null===e?null:{lanes:e.lanes,firstContext:e.firstContext}),n=n.sibling;return fo(Ii,1&Ii.current|2),t.child}e=e.sibling}null!==r.tail&&Vo()>Wu&&(t.flags|=64,u=!0,au(r,!1),t.lanes=33554432)}else{if(!u)if(null!==(e=Bi(c))){if(t.flags|=64,u=!0,null!==(n=e.updateQueue)&&(t.updateQueue=n,t.flags|=4),au(r,!0),null===r.tail&&"hidden"===r.tailMode&&!c.alternate&&!Xi)return null!==(t=t.lastEffect=r.lastEffect)&&(t.nextEffect=null),null}else 2*Vo()-r.renderingStartTime>Wu&&1073741824!==n&&(t.flags|=64,u=!0,au(r,!1),t.lanes=33554432);r.isBackwards?(c.sibling=t.child,t.child=c):(null!==(n=r.last)?n.sibling=c:t.child=c,r.last=c)}return null!==r.tail?(n=r.tail,r.rendering=n,r.tail=n.sibling,r.lastEffect=t.lastEffect,r.renderingStartTime=Vo(),n.sibling=null,t=Ii.current,fo(Ii,u?1&t|2:1&t),n):null;case 23:case 24:return xl(),null!==e&&null!==e.memoizedState!=(null!==t.memoizedState)&&"unstable-defer-without-hiding"!==r.mode&&(t.flags|=4),null}throw Error(a(156,t.tag))}function lu(e){switch(e.tag){case 1:mo(e.type)&&bo();var t=e.flags;return 4096&t?(e.flags=-4097&t|64,e):null;case 3:if(Ri(),so(vo),so(ho),Gi(),0!=(64&(t=e.flags)))throw Error(a(285));return e.flags=-4097&t|64,e;case 5:return zi(e),null;case 13:return so(Ii),4096&(t=e.flags)?(e.flags=-4097&t|64,e):null;case 19:return so(Ii),null;case 4:return Ri(),null;case 10:return oi(e),null;case 23:case 24:return xl(),null;default:return null}}function cu(e,t){try{var n="",r=t;do{n+=Y(r),r=r.return}while(r);var o=n}catch(e){o="\nError generating stack: "+e.message+"\n"+e.stack}return{value:e,source:t,stack:o}}Za=function(e,t){for(var n=t.child;null!==n;){if(5===n.tag||6===n.tag)e.appendChild(n.stateNode);else if(4!==n.tag&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===t)break;for(;null===n.sibling;){if(null===n.return||n.return===t)return;n=n.return}n.sibling.return=n.return,n=n.sibling}},qa=function(e,t,n,r){var i=e.memoizedProps;if(i!==r){e=t.stateNode,Ti(Ai.current);var a,u=null;switch(n){case"input":i=J(e,i),r=J(e,r),u=[];break;case"option":i=ie(e,i),r=ie(e,r),u=[];break;case"select":i=o({},i,{value:void 0}),r=o({},r,{value:void 0}),u=[];break;case"textarea":i=ue(e,i),r=ue(e,r),u=[];break;default:"function"!=typeof i.onClick&&"function"==typeof r.onClick&&(e.onclick=Ur)}for(f in Ee(n,r),n=null,i)if(!r.hasOwnProperty(f)&&i.hasOwnProperty(f)&&null!=i[f])if("style"===f){var c=i[f];for(a in c)c.hasOwnProperty(a)&&(n||(n={}),n[a]="")}else"dangerouslySetInnerHTML"!==f&&"children"!==f&&"suppressContentEditableWarning"!==f&&"suppressHydrationWarning"!==f&&"autoFocus"!==f&&(l.hasOwnProperty(f)?u||(u=[]):(u=u||[]).push(f,null));for(f in r){var s=r[f];if(c=null!=i?i[f]:void 0,r.hasOwnProperty(f)&&s!==c&&(null!=s||null!=c))if("style"===f)if(c){for(a in c)!c.hasOwnProperty(a)||s&&s.hasOwnProperty(a)||(n||(n={}),n[a]="");for(a in s)s.hasOwnProperty(a)&&c[a]!==s[a]&&(n||(n={}),n[a]=s[a])}else n||(u||(u=[]),u.push(f,n)),n=s;else"dangerouslySetInnerHTML"===f?(s=s?s.__html:void 0,c=c?c.__html:void 0,null!=s&&c!==s&&(u=u||[]).push(f,s)):"children"===f?"string"!=typeof s&&"number"!=typeof s||(u=u||[]).push(f,""+s):"suppressContentEditableWarning"!==f&&"suppressHydrationWarning"!==f&&(l.hasOwnProperty(f)?(null!=s&&"onScroll"===f&&Ar("scroll",e),u||c===s||(u=[])):"object"==typeof s&&null!==s&&s.$$typeof===R?s.toString():(u=u||[]).push(f,s))}n&&(u=u||[]).push("style",n);var f=u;(t.updateQueue=f)&&(t.flags|=4)}},Ga=function(e,t,n,r){n!==r&&(t.flags|=4)};var su="function"==typeof WeakMap?WeakMap:Map;function fu(e,t,n){(n=fi(-1,n)).tag=3,n.payload={element:null};var r=t.value;return n.callback=function(){qu||(qu=!0,Gu=r)},n}function du(e,t,n){(n=fi(-1,n)).tag=3;var r=e.type.getDerivedStateFromError;if("function"==typeof r){var o=t.value;n.payload=function(){return r(o)}}var i=e.stateNode;return null!==i&&"function"==typeof i.componentDidCatch&&(n.callback=function(){"function"!=typeof r&&(null===Ku?Ku=new Set([this]):Ku.add(this));var e=t.stack;this.componentDidCatch(t.value,{componentStack:null!==e?e:""})}),n}var pu="function"==typeof WeakSet?WeakSet:Set;function hu(e){var t=e.ref;if(null!==t)if("function"==typeof t)try{t(null)}catch(t){Bl(e,t)}else t.current=null}function vu(e,t){switch(t.tag){case 0:case 11:case 15:case 22:case 5:case 6:case 4:case 17:return;case 1:if(256&t.flags&&null!==e){var n=e.memoizedProps,r=e.memoizedState;t=(e=t.stateNode).getSnapshotBeforeUpdate(t.elementType===t.type?n:Qo(t.type,n),r),e.__reactInternalSnapshotBeforeUpdate=t}return;case 3:return void(256&t.flags&&$r(t.stateNode.containerInfo))}throw Error(a(163))}function gu(e,t,n){switch(n.tag){case 0:case 11:case 15:case 22:if(null!==(t=null!==(t=n.updateQueue)?t.lastEffect:null)){e=t=t.next;do{if(3==(3&e.tag)){var r=e.create;e.destroy=r()}e=e.next}while(e!==t)}if(null!==(t=null!==(t=n.updateQueue)?t.lastEffect:null)){e=t=t.next;do{var o=e;r=o.next,0!=(4&(o=o.tag))&&0!=(1&o)&&(Ll(n,e),Rl(n,e)),e=r}while(e!==t)}return;case 1:return e=n.stateNode,4&n.flags&&(null===t?e.componentDidMount():(r=n.elementType===n.type?t.memoizedProps:Qo(n.type,t.memoizedProps),e.componentDidUpdate(r,t.memoizedState,e.__reactInternalSnapshotBeforeUpdate))),void(null!==(t=n.updateQueue)&&vi(n,t,e));case 3:if(null!==(t=n.updateQueue)){if(e=null,null!==n.child)switch(n.child.tag){case 5:case 1:e=n.child.stateNode}vi(n,t,e)}return;case 5:return e=n.stateNode,void(null===t&&4&n.flags&&Hr(n.type,n.memoizedProps)&&e.focus());case 6:case 4:case 12:case 19:case 17:case 20:case 21:case 23:case 24:return;case 13:return void(null===n.memoizedState&&(n=n.alternate,null!==n&&(n=n.memoizedState,null!==n&&(n=n.dehydrated,null!==n&&xt(n)))))}throw Error(a(163))}function yu(e,t){for(var n=e;;){if(5===n.tag){var r=n.stateNode;if(t)"function"==typeof(r=r.style).setProperty?r.setProperty("display","none","important"):r.display="none";else{r=n.stateNode;var o=n.memoizedProps.style;o=null!=o&&o.hasOwnProperty("display")?o.display:null,r.style.display=_e("display",o)}}else if(6===n.tag)n.stateNode.nodeValue=t?"":n.memoizedProps;else if((23!==n.tag&&24!==n.tag||null===n.memoizedState||n===e)&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===e)break;for(;null===n.sibling;){if(null===n.return||n.return===e)return;n=n.return}n.sibling.return=n.return,n=n.sibling}}function mu(e,t){if(ko&&"function"==typeof ko.onCommitFiberUnmount)try{ko.onCommitFiberUnmount(Eo,t)}catch(e){}switch(t.tag){case 0:case 11:case 14:case 15:case 22:if(null!==(e=t.updateQueue)&&null!==(e=e.lastEffect)){var n=e=e.next;do{var r=n,o=r.destroy;if(r=r.tag,void 0!==o)if(0!=(4&r))Ll(t,n);else{r=t;try{o()}catch(e){Bl(r,e)}}n=n.next}while(n!==e)}break;case 1:if(hu(t),"function"==typeof(e=t.stateNode).componentWillUnmount)try{e.props=t.memoizedProps,e.state=t.memoizedState,e.componentWillUnmount()}catch(e){Bl(t,e)}break;case 5:hu(t);break;case 4:Eu(e,t)}}function bu(e){e.alternate=null,e.child=null,e.dependencies=null,e.firstEffect=null,e.lastEffect=null,e.memoizedProps=null,e.memoizedState=null,e.pendingProps=null,e.return=null,e.updateQueue=null}function wu(e){return 5===e.tag||3===e.tag||4===e.tag}function _u(e){e:{for(var t=e.return;null!==t;){if(wu(t))break e;t=t.return}throw Error(a(160))}var n=t;switch(t=n.stateNode,n.tag){case 5:var r=!1;break;case 3:case 4:t=t.containerInfo,r=!0;break;default:throw Error(a(161))}16&n.flags&&(me(t,""),n.flags&=-17);e:t:for(n=e;;){for(;null===n.sibling;){if(null===n.return||wu(n.return)){n=null;break e}n=n.return}for(n.sibling.return=n.return,n=n.sibling;5!==n.tag&&6!==n.tag&&18!==n.tag;){if(2&n.flags)continue t;if(null===n.child||4===n.tag)continue t;n.child.return=n,n=n.child}if(!(2&n.flags)){n=n.stateNode;break e}}r?xu(e,n,t):Su(e,n,t)}function xu(e,t,n){var r=e.tag,o=5===r||6===r;if(o)e=o?e.stateNode:e.stateNode.instance,t?8===n.nodeType?n.parentNode.insertBefore(e,t):n.insertBefore(e,t):(8===n.nodeType?(t=n.parentNode).insertBefore(e,n):(t=n).appendChild(e),null!=(n=n._reactRootContainer)||null!==t.onclick||(t.onclick=Ur));else if(4!==r&&null!==(e=e.child))for(xu(e,t,n),e=e.sibling;null!==e;)xu(e,t,n),e=e.sibling}function Su(e,t,n){var r=e.tag,o=5===r||6===r;if(o)e=o?e.stateNode:e.stateNode.instance,t?n.insertBefore(e,t):n.appendChild(e);else if(4!==r&&null!==(e=e.child))for(Su(e,t,n),e=e.sibling;null!==e;)Su(e,t,n),e=e.sibling}function Eu(e,t){for(var n,r,o=t,i=!1;;){if(!i){i=o.return;e:for(;;){if(null===i)throw Error(a(160));switch(n=i.stateNode,i.tag){case 5:r=!1;break e;case 3:case 4:n=n.containerInfo,r=!0;break e}i=i.return}i=!0}if(5===o.tag||6===o.tag){e:for(var u=e,l=o,c=l;;)if(mu(u,c),null!==c.child&&4!==c.tag)c.child.return=c,c=c.child;else{if(c===l)break e;for(;null===c.sibling;){if(null===c.return||c.return===l)break e;c=c.return}c.sibling.return=c.return,c=c.sibling}r?(u=n,l=o.stateNode,8===u.nodeType?u.parentNode.removeChild(l):u.removeChild(l)):n.removeChild(o.stateNode)}else if(4===o.tag){if(null!==o.child){n=o.stateNode.containerInfo,r=!0,o.child.return=o,o=o.child;continue}}else if(mu(e,o),null!==o.child){o.child.return=o,o=o.child;continue}if(o===t)break;for(;null===o.sibling;){if(null===o.return||o.return===t)return;4===(o=o.return).tag&&(i=!1)}o.sibling.return=o.return,o=o.sibling}}function ku(e,t){switch(t.tag){case 0:case 11:case 14:case 15:case 22:var n=t.updateQueue;if(null!==(n=null!==n?n.lastEffect:null)){var r=n=n.next;do{3==(3&r.tag)&&(e=r.destroy,r.destroy=void 0,void 0!==e&&e()),r=r.next}while(r!==n)}return;case 1:case 12:case 17:return;case 5:if(null!=(n=t.stateNode)){r=t.memoizedProps;var o=null!==e?e.memoizedProps:r;e=t.type;var i=t.updateQueue;if(t.updateQueue=null,null!==i){for(n[Jr]=r,"input"===e&&"radio"===r.type&&null!=r.name&&te(n,r),ke(e,o),t=ke(e,r),o=0;o<i.length;o+=2){var u=i[o],l=i[o+1];"style"===u?xe(n,l):"dangerouslySetInnerHTML"===u?ye(n,l):"children"===u?me(n,l):w(n,u,l,t)}switch(e){case"input":ne(n,r);break;case"textarea":ce(n,r);break;case"select":e=n._wrapperState.wasMultiple,n._wrapperState.wasMultiple=!!r.multiple,null!=(i=r.value)?ae(n,!!r.multiple,i,!1):e!==!!r.multiple&&(null!=r.defaultValue?ae(n,!!r.multiple,r.defaultValue,!0):ae(n,!!r.multiple,r.multiple?[]:"",!1))}}}return;case 6:if(null===t.stateNode)throw Error(a(162));return void(t.stateNode.nodeValue=t.memoizedProps);case 3:return void((n=t.stateNode).hydrate&&(n.hydrate=!1,xt(n.containerInfo)));case 13:return null!==t.memoizedState&&(Vu=Vo(),yu(t.child,!0)),void Ou(t);case 19:return void Ou(t);case 23:case 24:return void yu(t,null!==t.memoizedState)}throw Error(a(163))}function Ou(e){var t=e.updateQueue;if(null!==t){e.updateQueue=null;var n=e.stateNode;null===n&&(n=e.stateNode=new pu),t.forEach((function(t){var r=Fl.bind(null,e,t);n.has(t)||(n.add(t),t.then(r,r))}))}}function Cu(e,t){return null!==e&&(null===(e=e.memoizedState)||null!==e.dehydrated)&&(null!==(t=t.memoizedState)&&null===t.dehydrated)}var Pu=Math.ceil,Mu=_.ReactCurrentDispatcher,Au=_.ReactCurrentOwner,Nu=0,ju=null,Tu=null,Du=0,Ru=0,Lu=co(0),zu=0,Iu=null,Bu=0,Uu=0,Fu=0,Xu=0,Hu=null,Vu=0,Wu=1/0;function Yu(){Wu=Vo()+500}var $u,Zu=null,qu=!1,Gu=null,Ku=null,Qu=!1,Ju=null,el=90,tl=[],nl=[],rl=null,ol=0,il=null,al=-1,ul=0,ll=0,cl=null,sl=!1;function fl(){return 0!=(48&Nu)?Vo():-1!==al?al:al=Vo()}function dl(e){if(0==(2&(e=e.mode)))return 1;if(0==(4&e))return 99===Wo()?1:2;if(0===ul&&(ul=Bu),0!==Ko.transition){0!==ll&&(ll=null!==Hu?Hu.pendingLanes:0),e=ul;var t=4186112&~ll;return 0===(t&=-t)&&(0===(t=(e=4186112&~e)&-e)&&(t=8192)),t}return e=Wo(),0!=(4&Nu)&&98===e?e=Ut(12,ul):e=Ut(e=function(e){switch(e){case 99:return 15;case 98:return 10;case 97:case 96:return 8;case 95:return 2;default:return 0}}(e),ul),e}function pl(e,t,n){if(50<ol)throw ol=0,il=null,Error(a(185));if(null===(e=hl(e,t)))return null;Ht(e,t,n),e===ju&&(Fu|=t,4===zu&&yl(e,Du));var r=Wo();1===t?0!=(8&Nu)&&0==(48&Nu)?ml(e):(vl(e,n),0===Nu&&(Yu(),qo())):(0==(4&Nu)||98!==r&&99!==r||(null===rl?rl=new Set([e]):rl.add(e)),vl(e,n)),Hu=e}function hl(e,t){e.lanes|=t;var n=e.alternate;for(null!==n&&(n.lanes|=t),n=e,e=e.return;null!==e;)e.childLanes|=t,null!==(n=e.alternate)&&(n.childLanes|=t),n=e,e=e.return;return 3===n.tag?n.stateNode:null}function vl(e,t){for(var n=e.callbackNode,r=e.suspendedLanes,o=e.pingedLanes,i=e.expirationTimes,u=e.pendingLanes;0<u;){var l=31-Vt(u),c=1<<l,s=i[l];if(-1===s){if(0==(c&r)||0!=(c&o)){s=t,zt(c);var f=Lt;i[l]=10<=f?s+250:6<=f?s+5e3:-1}}else s<=t&&(e.expiredLanes|=c);u&=~c}if(r=It(e,e===ju?Du:0),t=Lt,0===r)null!==n&&(n!==Io&&Po(n),e.callbackNode=null,e.callbackPriority=0);else{if(null!==n){if(e.callbackPriority===t)return;n!==Io&&Po(n)}15===t?(n=ml.bind(null,e),null===Uo?(Uo=[n],Fo=Co(To,Go)):Uo.push(n),n=Io):14===t?n=Zo(99,ml.bind(null,e)):(n=function(e){switch(e){case 15:case 14:return 99;case 13:case 12:case 11:case 10:return 98;case 9:case 8:case 7:case 6:case 4:case 5:return 97;case 3:case 2:case 1:return 95;case 0:return 90;default:throw Error(a(358,e))}}(t),n=Zo(n,gl.bind(null,e))),e.callbackPriority=t,e.callbackNode=n}}function gl(e){if(al=-1,ll=ul=0,0!=(48&Nu))throw Error(a(327));var t=e.callbackNode;if(Dl()&&e.callbackNode!==t)return null;var n=It(e,e===ju?Du:0);if(0===n)return null;var r=n,o=Nu;Nu|=16;var i=kl();for(ju===e&&Du===r||(Yu(),Sl(e,r));;)try{Pl();break}catch(t){El(e,t)}if(ri(),Mu.current=i,Nu=o,null!==Tu?r=0:(ju=null,Du=0,r=zu),0!=(Bu&Fu))Sl(e,0);else if(0!==r){if(2===r&&(Nu|=64,e.hydrate&&(e.hydrate=!1,$r(e.containerInfo)),0!==(n=Bt(e))&&(r=Ol(e,n))),1===r)throw t=Iu,Sl(e,0),yl(e,n),vl(e,Vo()),t;switch(e.finishedWork=e.current.alternate,e.finishedLanes=n,r){case 0:case 1:throw Error(a(345));case 2:case 5:Nl(e);break;case 3:if(yl(e,n),(62914560&n)===n&&10<(r=Vu+500-Vo())){if(0!==It(e,0))break;if(((o=e.suspendedLanes)&n)!==n){fl(),e.pingedLanes|=e.suspendedLanes&o;break}e.timeoutHandle=Wr(Nl.bind(null,e),r);break}Nl(e);break;case 4:if(yl(e,n),(4186112&n)===n)break;for(r=e.eventTimes,o=-1;0<n;){var u=31-Vt(n);i=1<<u,(u=r[u])>o&&(o=u),n&=~i}if(n=o,10<(n=(120>(n=Vo()-n)?120:480>n?480:1080>n?1080:1920>n?1920:3e3>n?3e3:4320>n?4320:1960*Pu(n/1960))-n)){e.timeoutHandle=Wr(Nl.bind(null,e),n);break}Nl(e);break;default:throw Error(a(329))}}return vl(e,Vo()),e.callbackNode===t?gl.bind(null,e):null}function yl(e,t){for(t&=~Xu,t&=~Fu,e.suspendedLanes|=t,e.pingedLanes&=~t,e=e.expirationTimes;0<t;){var n=31-Vt(t),r=1<<n;e[n]=-1,t&=~r}}function ml(e){if(0!=(48&Nu))throw Error(a(327));if(Dl(),e===ju&&0!=(e.expiredLanes&Du)){var t=Du,n=Ol(e,t);0!=(Bu&Fu)&&(n=Ol(e,t=It(e,t)))}else n=Ol(e,t=It(e,0));if(0!==e.tag&&2===n&&(Nu|=64,e.hydrate&&(e.hydrate=!1,$r(e.containerInfo)),0!==(t=Bt(e))&&(n=Ol(e,t))),1===n)throw n=Iu,Sl(e,0),yl(e,t),vl(e,Vo()),n;return e.finishedWork=e.current.alternate,e.finishedLanes=t,Nl(e),vl(e,Vo()),null}function bl(e,t){var n=Nu;Nu|=1;try{return e(t)}finally{0===(Nu=n)&&(Yu(),qo())}}function wl(e,t){var n=Nu;Nu&=-2,Nu|=8;try{return e(t)}finally{0===(Nu=n)&&(Yu(),qo())}}function _l(e,t){fo(Lu,Ru),Ru|=t,Bu|=t}function xl(){Ru=Lu.current,so(Lu)}function Sl(e,t){e.finishedWork=null,e.finishedLanes=0;var n=e.timeoutHandle;if(-1!==n&&(e.timeoutHandle=-1,Yr(n)),null!==Tu)for(n=Tu.return;null!==n;){var r=n;switch(r.tag){case 1:null!=(r=r.type.childContextTypes)&&bo();break;case 3:Ri(),so(vo),so(ho),Gi();break;case 5:zi(r);break;case 4:Ri();break;case 13:case 19:so(Ii);break;case 10:oi(r);break;case 23:case 24:xl()}n=n.return}ju=e,Tu=Wl(e.current,null),Du=Ru=Bu=t,zu=0,Iu=null,Xu=Fu=Uu=0}function El(e,t){for(;;){var n=Tu;try{if(ri(),Ki.current=ja,ra){for(var r=ea.memoizedState;null!==r;){var o=r.queue;null!==o&&(o.pending=null),r=r.next}ra=!1}if(Ji=0,na=ta=ea=null,oa=!1,Au.current=null,null===n||null===n.return){zu=1,Iu=t,Tu=null;break}e:{var i=e,a=n.return,u=n,l=t;if(t=Du,u.flags|=2048,u.firstEffect=u.lastEffect=null,null!==l&&"object"==typeof l&&"function"==typeof l.then){var c=l;if(0==(2&u.mode)){var s=u.alternate;s?(u.updateQueue=s.updateQueue,u.memoizedState=s.memoizedState,u.lanes=s.lanes):(u.updateQueue=null,u.memoizedState=null)}var f=0!=(1&Ii.current),d=a;do{var p;if(p=13===d.tag){var h=d.memoizedState;if(null!==h)p=null!==h.dehydrated;else{var v=d.memoizedProps;p=void 0!==v.fallback&&(!0!==v.unstable_avoidThisFallback||!f)}}if(p){var g=d.updateQueue;if(null===g){var y=new Set;y.add(c),d.updateQueue=y}else g.add(c);if(0==(2&d.mode)){if(d.flags|=64,u.flags|=16384,u.flags&=-2981,1===u.tag)if(null===u.alternate)u.tag=17;else{var m=fi(-1,1);m.tag=2,di(u,m)}u.lanes|=1;break e}l=void 0,u=t;var b=i.pingCache;if(null===b?(b=i.pingCache=new su,l=new Set,b.set(c,l)):void 0===(l=b.get(c))&&(l=new Set,b.set(c,l)),!l.has(u)){l.add(u);var w=Ul.bind(null,i,c,u);c.then(w,w)}d.flags|=4096,d.lanes=t;break e}d=d.return}while(null!==d);l=Error(($(u.type)||"A React component")+" suspended while rendering, but no fallback UI was specified.\n\nAdd a <Suspense fallback=...> component higher in the tree to provide a loading indicator or placeholder to display.")}5!==zu&&(zu=2),l=cu(l,u),d=a;do{switch(d.tag){case 3:i=l,d.flags|=4096,t&=-t,d.lanes|=t,pi(d,fu(0,i,t));break e;case 1:i=l;var _=d.type,x=d.stateNode;if(0==(64&d.flags)&&("function"==typeof _.getDerivedStateFromError||null!==x&&"function"==typeof x.componentDidCatch&&(null===Ku||!Ku.has(x)))){d.flags|=4096,t&=-t,d.lanes|=t,pi(d,du(d,i,t));break e}}d=d.return}while(null!==d)}Al(n)}catch(e){t=e,Tu===n&&null!==n&&(Tu=n=n.return);continue}break}}function kl(){var e=Mu.current;return Mu.current=ja,null===e?ja:e}function Ol(e,t){var n=Nu;Nu|=16;var r=kl();for(ju===e&&Du===t||Sl(e,t);;)try{Cl();break}catch(t){El(e,t)}if(ri(),Nu=n,Mu.current=r,null!==Tu)throw Error(a(261));return ju=null,Du=0,zu}function Cl(){for(;null!==Tu;)Ml(Tu)}function Pl(){for(;null!==Tu&&!Mo();)Ml(Tu)}function Ml(e){var t=$u(e.alternate,e,Ru);e.memoizedProps=e.pendingProps,null===t?Al(e):Tu=t,Au.current=null}function Al(e){var t=e;do{var n=t.alternate;if(e=t.return,0==(2048&t.flags)){if(null!==(n=uu(n,t,Ru)))return void(Tu=n);if(24!==(n=t).tag&&23!==n.tag||null===n.memoizedState||0!=(1073741824&Ru)||0==(4&n.mode)){for(var r=0,o=n.child;null!==o;)r|=o.lanes|o.childLanes,o=o.sibling;n.childLanes=r}null!==e&&0==(2048&e.flags)&&(null===e.firstEffect&&(e.firstEffect=t.firstEffect),null!==t.lastEffect&&(null!==e.lastEffect&&(e.lastEffect.nextEffect=t.firstEffect),e.lastEffect=t.lastEffect),1<t.flags&&(null!==e.lastEffect?e.lastEffect.nextEffect=t:e.firstEffect=t,e.lastEffect=t))}else{if(null!==(n=lu(t)))return n.flags&=2047,void(Tu=n);null!==e&&(e.firstEffect=e.lastEffect=null,e.flags|=2048)}if(null!==(t=t.sibling))return void(Tu=t);Tu=t=e}while(null!==t);0===zu&&(zu=5)}function Nl(e){var t=Wo();return $o(99,jl.bind(null,e,t)),null}function jl(e,t){do{Dl()}while(null!==Ju);if(0!=(48&Nu))throw Error(a(327));var n=e.finishedWork;if(null===n)return null;if(e.finishedWork=null,e.finishedLanes=0,n===e.current)throw Error(a(177));e.callbackNode=null;var r=n.lanes|n.childLanes,o=r,i=e.pendingLanes&~o;e.pendingLanes=o,e.suspendedLanes=0,e.pingedLanes=0,e.expiredLanes&=o,e.mutableReadLanes&=o,e.entangledLanes&=o,o=e.entanglements;for(var u=e.eventTimes,l=e.expirationTimes;0<i;){var c=31-Vt(i),s=1<<c;o[c]=0,u[c]=-1,l[c]=-1,i&=~s}if(null!==rl&&0==(24&r)&&rl.has(e)&&rl.delete(e),e===ju&&(Tu=ju=null,Du=0),1<n.flags?null!==n.lastEffect?(n.lastEffect.nextEffect=n,r=n.firstEffect):r=n:r=n.firstEffect,null!==r){if(o=Nu,Nu|=32,Au.current=null,Fr=qt,yr(u=gr())){if("selectionStart"in u)l={start:u.selectionStart,end:u.selectionEnd};else e:if(l=(l=u.ownerDocument)&&l.defaultView||window,(s=l.getSelection&&l.getSelection())&&0!==s.rangeCount){l=s.anchorNode,i=s.anchorOffset,c=s.focusNode,s=s.focusOffset;try{l.nodeType,c.nodeType}catch(e){l=null;break e}var f=0,d=-1,p=-1,h=0,v=0,g=u,y=null;t:for(;;){for(var m;g!==l||0!==i&&3!==g.nodeType||(d=f+i),g!==c||0!==s&&3!==g.nodeType||(p=f+s),3===g.nodeType&&(f+=g.nodeValue.length),null!==(m=g.firstChild);)y=g,g=m;for(;;){if(g===u)break t;if(y===l&&++h===i&&(d=f),y===c&&++v===s&&(p=f),null!==(m=g.nextSibling))break;y=(g=y).parentNode}g=m}l=-1===d||-1===p?null:{start:d,end:p}}else l=null;l=l||{start:0,end:0}}else l=null;Xr={focusedElem:u,selectionRange:l},qt=!1,cl=null,sl=!1,Zu=r;do{try{Tl()}catch(e){if(null===Zu)throw Error(a(330));Bl(Zu,e),Zu=Zu.nextEffect}}while(null!==Zu);cl=null,Zu=r;do{try{for(u=e;null!==Zu;){var b=Zu.flags;if(16&b&&me(Zu.stateNode,""),128&b){var w=Zu.alternate;if(null!==w){var _=w.ref;null!==_&&("function"==typeof _?_(null):_.current=null)}}switch(1038&b){case 2:_u(Zu),Zu.flags&=-3;break;case 6:_u(Zu),Zu.flags&=-3,ku(Zu.alternate,Zu);break;case 1024:Zu.flags&=-1025;break;case 1028:Zu.flags&=-1025,ku(Zu.alternate,Zu);break;case 4:ku(Zu.alternate,Zu);break;case 8:Eu(u,l=Zu);var x=l.alternate;bu(l),null!==x&&bu(x)}Zu=Zu.nextEffect}}catch(e){if(null===Zu)throw Error(a(330));Bl(Zu,e),Zu=Zu.nextEffect}}while(null!==Zu);if(_=Xr,w=gr(),b=_.focusedElem,u=_.selectionRange,w!==b&&b&&b.ownerDocument&&vr(b.ownerDocument.documentElement,b)){null!==u&&yr(b)&&(w=u.start,void 0===(_=u.end)&&(_=w),"selectionStart"in b?(b.selectionStart=w,b.selectionEnd=Math.min(_,b.value.length)):(_=(w=b.ownerDocument||document)&&w.defaultView||window).getSelection&&(_=_.getSelection(),l=b.textContent.length,x=Math.min(u.start,l),u=void 0===u.end?x:Math.min(u.end,l),!_.extend&&x>u&&(l=u,u=x,x=l),l=hr(b,x),i=hr(b,u),l&&i&&(1!==_.rangeCount||_.anchorNode!==l.node||_.anchorOffset!==l.offset||_.focusNode!==i.node||_.focusOffset!==i.offset)&&((w=w.createRange()).setStart(l.node,l.offset),_.removeAllRanges(),x>u?(_.addRange(w),_.extend(i.node,i.offset)):(w.setEnd(i.node,i.offset),_.addRange(w))))),w=[];for(_=b;_=_.parentNode;)1===_.nodeType&&w.push({element:_,left:_.scrollLeft,top:_.scrollTop});for("function"==typeof b.focus&&b.focus(),b=0;b<w.length;b++)(_=w[b]).element.scrollLeft=_.left,_.element.scrollTop=_.top}qt=!!Fr,Xr=Fr=null,e.current=n,Zu=r;do{try{for(b=e;null!==Zu;){var S=Zu.flags;if(36&S&&gu(b,Zu.alternate,Zu),128&S){w=void 0;var E=Zu.ref;if(null!==E){var k=Zu.stateNode;Zu.tag,w=k,"function"==typeof E?E(w):E.current=w}}Zu=Zu.nextEffect}}catch(e){if(null===Zu)throw Error(a(330));Bl(Zu,e),Zu=Zu.nextEffect}}while(null!==Zu);Zu=null,Bo(),Nu=o}else e.current=n;if(Qu)Qu=!1,Ju=e,el=t;else for(Zu=r;null!==Zu;)t=Zu.nextEffect,Zu.nextEffect=null,8&Zu.flags&&((S=Zu).sibling=null,S.stateNode=null),Zu=t;if(0===(r=e.pendingLanes)&&(Ku=null),1===r?e===il?ol++:(ol=0,il=e):ol=0,n=n.stateNode,ko&&"function"==typeof ko.onCommitFiberRoot)try{ko.onCommitFiberRoot(Eo,n,void 0,64==(64&n.current.flags))}catch(e){}if(vl(e,Vo()),qu)throw qu=!1,e=Gu,Gu=null,e;return 0!=(8&Nu)||qo(),null}function Tl(){for(;null!==Zu;){var e=Zu.alternate;sl||null===cl||(0!=(8&Zu.flags)?et(Zu,cl)&&(sl=!0):13===Zu.tag&&Cu(e,Zu)&&et(Zu,cl)&&(sl=!0));var t=Zu.flags;0!=(256&t)&&vu(e,Zu),0==(512&t)||Qu||(Qu=!0,Zo(97,(function(){return Dl(),null}))),Zu=Zu.nextEffect}}function Dl(){if(90!==el){var e=97<el?97:el;return el=90,$o(e,zl)}return!1}function Rl(e,t){tl.push(t,e),Qu||(Qu=!0,Zo(97,(function(){return Dl(),null})))}function Ll(e,t){nl.push(t,e),Qu||(Qu=!0,Zo(97,(function(){return Dl(),null})))}function zl(){if(null===Ju)return!1;var e=Ju;if(Ju=null,0!=(48&Nu))throw Error(a(331));var t=Nu;Nu|=32;var n=nl;nl=[];for(var r=0;r<n.length;r+=2){var o=n[r],i=n[r+1],u=o.destroy;if(o.destroy=void 0,"function"==typeof u)try{u()}catch(e){if(null===i)throw Error(a(330));Bl(i,e)}}for(n=tl,tl=[],r=0;r<n.length;r+=2){o=n[r],i=n[r+1];try{var l=o.create;o.destroy=l()}catch(e){if(null===i)throw Error(a(330));Bl(i,e)}}for(l=e.current.firstEffect;null!==l;)e=l.nextEffect,l.nextEffect=null,8&l.flags&&(l.sibling=null,l.stateNode=null),l=e;return Nu=t,qo(),!0}function Il(e,t,n){di(e,t=fu(0,t=cu(n,t),1)),t=fl(),null!==(e=hl(e,1))&&(Ht(e,1,t),vl(e,t))}function Bl(e,t){if(3===e.tag)Il(e,e,t);else for(var n=e.return;null!==n;){if(3===n.tag){Il(n,e,t);break}if(1===n.tag){var r=n.stateNode;if("function"==typeof n.type.getDerivedStateFromError||"function"==typeof r.componentDidCatch&&(null===Ku||!Ku.has(r))){var o=du(n,e=cu(t,e),1);if(di(n,o),o=fl(),null!==(n=hl(n,1)))Ht(n,1,o),vl(n,o);else if("function"==typeof r.componentDidCatch&&(null===Ku||!Ku.has(r)))try{r.componentDidCatch(t,e)}catch(e){}break}}n=n.return}}function Ul(e,t,n){var r=e.pingCache;null!==r&&r.delete(t),t=fl(),e.pingedLanes|=e.suspendedLanes&n,ju===e&&(Du&n)===n&&(4===zu||3===zu&&(62914560&Du)===Du&&500>Vo()-Vu?Sl(e,0):Xu|=n),vl(e,t)}function Fl(e,t){var n=e.stateNode;null!==n&&n.delete(t),0===(t=0)&&(0==(2&(t=e.mode))?t=1:0==(4&t)?t=99===Wo()?1:2:(0===ul&&(ul=Bu),0===(t=Ft(62914560&~ul))&&(t=4194304))),n=fl(),null!==(e=hl(e,t))&&(Ht(e,t,n),vl(e,n))}function Xl(e,t,n,r){this.tag=e,this.key=n,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=t,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.flags=0,this.lastEffect=this.firstEffect=this.nextEffect=null,this.childLanes=this.lanes=0,this.alternate=null}function Hl(e,t,n,r){return new Xl(e,t,n,r)}function Vl(e){return!(!(e=e.prototype)||!e.isReactComponent)}function Wl(e,t){var n=e.alternate;return null===n?((n=Hl(e.tag,t,e.key,e.mode)).elementType=e.elementType,n.type=e.type,n.stateNode=e.stateNode,n.alternate=e,e.alternate=n):(n.pendingProps=t,n.type=e.type,n.flags=0,n.nextEffect=null,n.firstEffect=null,n.lastEffect=null),n.childLanes=e.childLanes,n.lanes=e.lanes,n.child=e.child,n.memoizedProps=e.memoizedProps,n.memoizedState=e.memoizedState,n.updateQueue=e.updateQueue,t=e.dependencies,n.dependencies=null===t?null:{lanes:t.lanes,firstContext:t.firstContext},n.sibling=e.sibling,n.index=e.index,n.ref=e.ref,n}function Yl(e,t,n,r,o,i){var u=2;if(r=e,"function"==typeof e)Vl(e)&&(u=1);else if("string"==typeof e)u=5;else e:switch(e){case E:return $l(n.children,o,i,t);case L:u=8,o|=16;break;case k:u=8,o|=1;break;case O:return(e=Hl(12,n,t,8|o)).elementType=O,e.type=O,e.lanes=i,e;case A:return(e=Hl(13,n,t,o)).type=A,e.elementType=A,e.lanes=i,e;case N:return(e=Hl(19,n,t,o)).elementType=N,e.lanes=i,e;case z:return Zl(n,o,i,t);case I:return(e=Hl(24,n,t,o)).elementType=I,e.lanes=i,e;default:if("object"==typeof e&&null!==e)switch(e.$$typeof){case C:u=10;break e;case P:u=9;break e;case M:u=11;break e;case j:u=14;break e;case T:u=16,r=null;break e;case D:u=22;break e}throw Error(a(130,null==e?e:typeof e,""))}return(t=Hl(u,n,t,o)).elementType=e,t.type=r,t.lanes=i,t}function $l(e,t,n,r){return(e=Hl(7,e,r,t)).lanes=n,e}function Zl(e,t,n,r){return(e=Hl(23,e,r,t)).elementType=z,e.lanes=n,e}function ql(e,t,n){return(e=Hl(6,e,null,t)).lanes=n,e}function Gl(e,t,n){return(t=Hl(4,null!==e.children?e.children:[],e.key,t)).lanes=n,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}function Kl(e,t,n){this.tag=t,this.containerInfo=e,this.finishedWork=this.pingCache=this.current=this.pendingChildren=null,this.timeoutHandle=-1,this.pendingContext=this.context=null,this.hydrate=n,this.callbackNode=null,this.callbackPriority=0,this.eventTimes=Xt(0),this.expirationTimes=Xt(-1),this.entangledLanes=this.finishedLanes=this.mutableReadLanes=this.expiredLanes=this.pingedLanes=this.suspendedLanes=this.pendingLanes=0,this.entanglements=Xt(0),this.mutableSourceEagerHydrationData=null}function Ql(e,t,n){var r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:S,key:null==r?null:""+r,children:e,containerInfo:t,implementation:n}}function Jl(e,t,n,r){var o=t.current,i=fl(),u=dl(o);e:if(n){t:{if(Ge(n=n._reactInternals)!==n||1!==n.tag)throw Error(a(170));var l=n;do{switch(l.tag){case 3:l=l.stateNode.context;break t;case 1:if(mo(l.type)){l=l.stateNode.__reactInternalMemoizedMergedChildContext;break t}}l=l.return}while(null!==l);throw Error(a(171))}if(1===n.tag){var c=n.type;if(mo(c)){n=_o(n,c,l);break e}}n=l}else n=po;return null===t.context?t.context=n:t.pendingContext=n,(t=fi(i,u)).payload={element:e},null!==(r=void 0===r?null:r)&&(t.callback=r),di(o,t),pl(o,u,i),u}function ec(e){return(e=e.current).child?(e.child.tag,e.child.stateNode):null}function tc(e,t){if(null!==(e=e.memoizedState)&&null!==e.dehydrated){var n=e.retryLane;e.retryLane=0!==n&&n<t?n:t}}function nc(e,t){tc(e,t),(e=e.alternate)&&tc(e,t)}function rc(e,t,n){var r=null!=n&&null!=n.hydrationOptions&&n.hydrationOptions.mutableSources||null;if(n=new Kl(e,t,null!=n&&!0===n.hydrate),t=Hl(3,null,null,2===t?7:1===t?3:0),n.current=t,t.stateNode=n,ci(t),e[eo]=n.current,jr(8===e.nodeType?e.parentNode:e),r)for(e=0;e<r.length;e++){var o=(t=r[e])._getVersion;o=o(t._source),null==n.mutableSourceEagerHydrationData?n.mutableSourceEagerHydrationData=[t,o]:n.mutableSourceEagerHydrationData.push(t,o)}this._internalRoot=n}function oc(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType&&(8!==e.nodeType||" react-mount-point-unstable "!==e.nodeValue))}function ic(e,t,n,r,o){var i=n._reactRootContainer;if(i){var a=i._internalRoot;if("function"==typeof o){var u=o;o=function(){var e=ec(a);u.call(e)}}Jl(t,a,e,o)}else{if(i=n._reactRootContainer=function(e,t){if(t||(t=!(!(t=e?9===e.nodeType?e.documentElement:e.firstChild:null)||1!==t.nodeType||!t.hasAttribute("data-reactroot"))),!t)for(var n;n=e.lastChild;)e.removeChild(n);return new rc(e,0,t?{hydrate:!0}:void 0)}(n,r),a=i._internalRoot,"function"==typeof o){var l=o;o=function(){var e=ec(a);l.call(e)}}wl((function(){Jl(t,a,e,o)}))}return ec(a)}function ac(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;if(!oc(t))throw Error(a(200));return Ql(e,t,null,n)}$u=function(e,t,n){var r=t.lanes;if(null!==e)if(e.memoizedProps!==t.pendingProps||vo.current)za=!0;else{if(0==(n&r)){switch(za=!1,t.tag){case 3:$a(t),Zi();break;case 5:Li(t);break;case 1:mo(t.type)&&xo(t);break;case 4:Di(t,t.stateNode.containerInfo);break;case 10:r=t.memoizedProps.value;var o=t.type._context;fo(Jo,o._currentValue),o._currentValue=r;break;case 13:if(null!==t.memoizedState)return 0!=(n&t.child.childLanes)?Qa(e,t,n):(fo(Ii,1&Ii.current),null!==(t=iu(e,t,n))?t.sibling:null);fo(Ii,1&Ii.current);break;case 19:if(r=0!=(n&t.childLanes),0!=(64&e.flags)){if(r)return ou(e,t,n);t.flags|=64}if(null!==(o=t.memoizedState)&&(o.rendering=null,o.tail=null,o.lastEffect=null),fo(Ii,Ii.current),r)break;return null;case 23:case 24:return t.lanes=0,Xa(e,t,n)}return iu(e,t,n)}za=0!=(16384&e.flags)}else za=!1;switch(t.lanes=0,t.tag){case 2:if(r=t.type,null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),e=t.pendingProps,o=yo(t,ho.current),ai(t,n),o=ua(null,t,r,e,o,n),t.flags|=1,"object"==typeof o&&null!==o&&"function"==typeof o.render&&void 0===o.$$typeof){if(t.tag=1,t.memoizedState=null,t.updateQueue=null,mo(r)){var i=!0;xo(t)}else i=!1;t.memoizedState=null!==o.state&&void 0!==o.state?o.state:null,ci(t);var u=r.getDerivedStateFromProps;"function"==typeof u&&yi(t,r,u,e),o.updater=mi,t.stateNode=o,o._reactInternals=t,xi(t,r,e,n),t=Ya(null,t,r,!0,i,n)}else t.tag=0,Ia(null,t,o,n),t=t.child;return t;case 16:o=t.elementType;e:{switch(null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),e=t.pendingProps,o=(i=o._init)(o._payload),t.type=o,i=t.tag=function(e){if("function"==typeof e)return Vl(e)?1:0;if(null!=e){if((e=e.$$typeof)===M)return 11;if(e===j)return 14}return 2}(o),e=Qo(o,e),i){case 0:t=Va(null,t,o,e,n);break e;case 1:t=Wa(null,t,o,e,n);break e;case 11:t=Ba(null,t,o,e,n);break e;case 14:t=Ua(null,t,o,Qo(o.type,e),r,n);break e}throw Error(a(306,o,""))}return t;case 0:return r=t.type,o=t.pendingProps,Va(e,t,r,o=t.elementType===r?o:Qo(r,o),n);case 1:return r=t.type,o=t.pendingProps,Wa(e,t,r,o=t.elementType===r?o:Qo(r,o),n);case 3:if($a(t),r=t.updateQueue,null===e||null===r)throw Error(a(282));if(r=t.pendingProps,o=null!==(o=t.memoizedState)?o.element:null,si(e,t),hi(t,r,null,n),(r=t.memoizedState.element)===o)Zi(),t=iu(e,t,n);else{if((i=(o=t.stateNode).hydrate)&&(Fi=Zr(t.stateNode.containerInfo.firstChild),Ui=t,i=Xi=!0),i){if(null!=(e=o.mutableSourceEagerHydrationData))for(o=0;o<e.length;o+=2)(i=e[o])._workInProgressVersionPrimary=e[o+1],qi.push(i);for(n=Pi(t,null,r,n),t.child=n;n;)n.flags=-3&n.flags|1024,n=n.sibling}else Ia(e,t,r,n),Zi();t=t.child}return t;case 5:return Li(t),null===e&&Wi(t),r=t.type,o=t.pendingProps,i=null!==e?e.memoizedProps:null,u=o.children,Vr(r,o)?u=null:null!==i&&Vr(r,i)&&(t.flags|=16),Ha(e,t),Ia(e,t,u,n),t.child;case 6:return null===e&&Wi(t),null;case 13:return Qa(e,t,n);case 4:return Di(t,t.stateNode.containerInfo),r=t.pendingProps,null===e?t.child=Ci(t,null,r,n):Ia(e,t,r,n),t.child;case 11:return r=t.type,o=t.pendingProps,Ba(e,t,r,o=t.elementType===r?o:Qo(r,o),n);case 7:return Ia(e,t,t.pendingProps,n),t.child;case 8:case 12:return Ia(e,t,t.pendingProps.children,n),t.child;case 10:e:{r=t.type._context,o=t.pendingProps,u=t.memoizedProps,i=o.value;var l=t.type._context;if(fo(Jo,l._currentValue),l._currentValue=i,null!==u)if(l=u.value,0===(i=sr(l,i)?0:0|("function"==typeof r._calculateChangedBits?r._calculateChangedBits(l,i):1073741823))){if(u.children===o.children&&!vo.current){t=iu(e,t,n);break e}}else for(null!==(l=t.child)&&(l.return=t);null!==l;){var c=l.dependencies;if(null!==c){u=l.child;for(var s=c.firstContext;null!==s;){if(s.context===r&&0!=(s.observedBits&i)){1===l.tag&&((s=fi(-1,n&-n)).tag=2,di(l,s)),l.lanes|=n,null!==(s=l.alternate)&&(s.lanes|=n),ii(l.return,n),c.lanes|=n;break}s=s.next}}else u=10===l.tag&&l.type===t.type?null:l.child;if(null!==u)u.return=l;else for(u=l;null!==u;){if(u===t){u=null;break}if(null!==(l=u.sibling)){l.return=u.return,u=l;break}u=u.return}l=u}Ia(e,t,o.children,n),t=t.child}return t;case 9:return o=t.type,r=(i=t.pendingProps).children,ai(t,n),r=r(o=ui(o,i.unstable_observedBits)),t.flags|=1,Ia(e,t,r,n),t.child;case 14:return i=Qo(o=t.type,t.pendingProps),Ua(e,t,o,i=Qo(o.type,i),r,n);case 15:return Fa(e,t,t.type,t.pendingProps,r,n);case 17:return r=t.type,o=t.pendingProps,o=t.elementType===r?o:Qo(r,o),null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),t.tag=1,mo(r)?(e=!0,xo(t)):e=!1,ai(t,n),wi(t,r,o),xi(t,r,o,n),Ya(null,t,r,!0,e,n);case 19:return ou(e,t,n);case 23:case 24:return Xa(e,t,n)}throw Error(a(156,t.tag))},rc.prototype.render=function(e){Jl(e,this._internalRoot,null,null)},rc.prototype.unmount=function(){var e=this._internalRoot,t=e.containerInfo;Jl(null,e,null,(function(){t[eo]=null}))},tt=function(e){13===e.tag&&(pl(e,4,fl()),nc(e,4))},nt=function(e){13===e.tag&&(pl(e,67108864,fl()),nc(e,67108864))},rt=function(e){if(13===e.tag){var t=fl(),n=dl(e);pl(e,n,t),nc(e,n)}},ot=function(e,t){return t()},Ce=function(e,t,n){switch(t){case"input":if(ne(e,n),t=n.name,"radio"===n.type&&null!=t){for(n=e;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll("input[name="+JSON.stringify(""+t)+'][type="radio"]'),t=0;t<n.length;t++){var r=n[t];if(r!==e&&r.form===e.form){var o=io(r);if(!o)throw Error(a(90));K(r),ne(r,o)}}}break;case"textarea":ce(e,n);break;case"select":null!=(t=n.value)&&ae(e,!!n.multiple,t,!1)}},Te=bl,De=function(e,t,n,r,o){var i=Nu;Nu|=4;try{return $o(98,e.bind(null,t,n,r,o))}finally{0===(Nu=i)&&(Yu(),qo())}},Re=function(){0==(49&Nu)&&(function(){if(null!==rl){var e=rl;rl=null,e.forEach((function(e){e.expiredLanes|=24&e.pendingLanes,vl(e,Vo())}))}qo()}(),Dl())},Le=function(e,t){var n=Nu;Nu|=2;try{return e(t)}finally{0===(Nu=n)&&(Yu(),qo())}};var uc={Events:[ro,oo,io,Ne,je,Dl,{current:!1}]},lc={findFiberByHostInstance:no,bundleType:0,version:"17.0.2",rendererPackageName:"react-dom"},cc={bundleType:lc.bundleType,version:lc.version,rendererPackageName:lc.rendererPackageName,rendererConfig:lc.rendererConfig,overrideHookState:null,overrideHookStateDeletePath:null,overrideHookStateRenamePath:null,overrideProps:null,overridePropsDeletePath:null,overridePropsRenamePath:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:_.ReactCurrentDispatcher,findHostInstanceByFiber:function(e){return null===(e=Je(e))?null:e.stateNode},findFiberByHostInstance:lc.findFiberByHostInstance||function(){return null},findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null};if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__){var sc=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(!sc.isDisabled&&sc.supportsFiber)try{Eo=sc.inject(cc),ko=sc}catch(ge){}}t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=uc,t.createPortal=ac,t.findDOMNode=function(e){if(null==e)return null;if(1===e.nodeType)return e;var t=e._reactInternals;if(void 0===t){if("function"==typeof e.render)throw Error(a(188));throw Error(a(268,Object.keys(e)))}return e=null===(e=Je(t))?null:e.stateNode},t.flushSync=function(e,t){var n=Nu;if(0!=(48&n))return e(t);Nu|=1;try{if(e)return $o(99,e.bind(null,t))}finally{Nu=n,qo()}},t.hydrate=function(e,t,n){if(!oc(t))throw Error(a(200));return ic(null,e,t,!0,n)},t.render=function(e,t,n){if(!oc(t))throw Error(a(200));return ic(null,e,t,!1,n)},t.unmountComponentAtNode=function(e){if(!oc(e))throw Error(a(40));return!!e._reactRootContainer&&(wl((function(){ic(null,null,e,!1,(function(){e._reactRootContainer=null,e[eo]=null}))})),!0)},t.unstable_batchedUpdates=bl,t.unstable_createPortal=function(e,t){return ac(e,t,2<arguments.length&&void 0!==arguments[2]?arguments[2]:null)},t.unstable_renderSubtreeIntoContainer=function(e,t,n,r){if(!oc(n))throw Error(a(200));if(null==e||void 0===e._reactInternals)throw Error(a(38));return ic(e,t,n,!1,r)},t.version="17.0.2"},935:(e,t,n)=>{"use strict";!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){}}(),e.exports=n(448)},668:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"DraggableCore",{enumerable:!0,get:function(){return s.default}}),t.default=void 0;var r=function(e){if(e&&e.__esModule)return e;if(null===e||"object"!==h(e)&&"function"!=typeof e)return{default:e};var t=p();if(t&&t.has(e))return t.get(e);var n={},r=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var o in e)if(Object.prototype.hasOwnProperty.call(e,o)){var i=r?Object.getOwnPropertyDescriptor(e,o):null;i&&(i.get||i.set)?Object.defineProperty(n,o,i):n[o]=e[o]}n.default=e,t&&t.set(e,n);return n}(n(294)),o=d(n(697)),i=d(n(935)),a=d(n(184)),u=n(825),l=n(849),c=n(280),s=d(n(783)),f=d(n(904));function d(e){return e&&e.__esModule?e:{default:e}}function p(){if("function"!=typeof WeakMap)return null;var e=new WeakMap;return p=function(){return e},e}function h(e){return h="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},h(e)}function v(){return v=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},v.apply(this,arguments)}function g(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}function y(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(e)))return;var n=[],r=!0,o=!1,i=void 0;try{for(var a,u=e[Symbol.iterator]();!(r=(a=u.next()).done)&&(n.push(a.value),!t||n.length!==t);r=!0);}catch(e){o=!0,i=e}finally{try{r||null==u.return||u.return()}finally{if(o)throw i}}return n}(e,t)||function(e,t){if(!e)return;if("string"==typeof e)return m(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return m(e,t)}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function m(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function b(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function w(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?b(Object(n),!0).forEach((function(t){P(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):b(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function _(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function x(e,t,n){return t&&_(e.prototype,t),n&&_(e,n),e}function S(e,t){return S=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e},S(e,t)}function E(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=C(e);if(t){var o=C(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return k(this,n)}}function k(e,t){return!t||"object"!==h(t)&&"function"!=typeof t?O(e):t}function O(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function C(e){return C=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)},C(e)}function P(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var M=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&S(e,t)}(n,e);var t=E(n);function n(e){var r;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,n),P(O(r=t.call(this,e)),"onDragStart",(function(e,t){if((0,f.default)("Draggable: onDragStart: %j",t),!1===r.props.onStart(e,(0,l.createDraggableData)(O(r),t)))return!1;r.setState({dragging:!0,dragged:!0})})),P(O(r),"onDrag",(function(e,t){if(!r.state.dragging)return!1;(0,f.default)("Draggable: onDrag: %j",t);var n=(0,l.createDraggableData)(O(r),t),o={x:n.x,y:n.y};if(r.props.bounds){var i=o.x,a=o.y;o.x+=r.state.slackX,o.y+=r.state.slackY;var u=y((0,l.getBoundPosition)(O(r),o.x,o.y),2),c=u[0],s=u[1];o.x=c,o.y=s,o.slackX=r.state.slackX+(i-o.x),o.slackY=r.state.slackY+(a-o.y),n.x=o.x,n.y=o.y,n.deltaX=o.x-r.state.x,n.deltaY=o.y-r.state.y}if(!1===r.props.onDrag(e,n))return!1;r.setState(o)})),P(O(r),"onDragStop",(function(e,t){if(!r.state.dragging)return!1;if(!1===r.props.onStop(e,(0,l.createDraggableData)(O(r),t)))return!1;(0,f.default)("Draggable: onDragStop: %j",t);var n={dragging:!1,slackX:0,slackY:0};if(Boolean(r.props.position)){var o=r.props.position,i=o.x,a=o.y;n.x=i,n.y=a}r.setState(n)})),r.state={dragging:!1,dragged:!1,x:e.position?e.position.x:e.defaultPosition.x,y:e.position?e.position.y:e.defaultPosition.y,prevPropsPosition:w({},e.position),slackX:0,slackY:0,isElementSVG:!1},e.position&&!e.onDrag&&e.onStop,r}return x(n,null,[{key:"getDerivedStateFromProps",value:function(e,t){var n=e.position,r=t.prevPropsPosition;return!n||r&&n.x===r.x&&n.y===r.y?null:((0,f.default)("Draggable: getDerivedStateFromProps %j",{position:n,prevPropsPosition:r}),{x:n.x,y:n.y,prevPropsPosition:w({},n)})}}]),x(n,[{key:"componentDidMount",value:function(){void 0!==window.SVGElement&&this.findDOMNode()instanceof window.SVGElement&&this.setState({isElementSVG:!0})}},{key:"componentWillUnmount",value:function(){this.setState({dragging:!1})}},{key:"findDOMNode",value:function(){return this.props.nodeRef?this.props.nodeRef.current:i.default.findDOMNode(this)}},{key:"render",value:function(){var e,t=this.props,n=(t.axis,t.bounds,t.children),o=t.defaultPosition,i=t.defaultClassName,c=t.defaultClassNameDragging,f=t.defaultClassNameDragged,d=t.position,p=t.positionOffset,h=(t.scale,g(t,["axis","bounds","children","defaultPosition","defaultClassName","defaultClassNameDragging","defaultClassNameDragged","position","positionOffset","scale"])),y={},m=null,b=!Boolean(d)||this.state.dragging,_=d||o,x={x:(0,l.canDragX)(this)&&b?this.state.x:_.x,y:(0,l.canDragY)(this)&&b?this.state.y:_.y};this.state.isElementSVG?m=(0,u.createSVGTransform)(x,p):y=(0,u.createCSSTransform)(x,p);var S=(0,a.default)(n.props.className||"",i,(P(e={},c,this.state.dragging),P(e,f,this.state.dragged),e));return r.createElement(s.default,v({},h,{onStart:this.onDragStart,onDrag:this.onDrag,onStop:this.onDragStop}),r.cloneElement(r.Children.only(n),{className:S,style:w(w({},n.props.style),y),transform:m}))}}]),n}(r.Component);t.default=M,P(M,"displayName","Draggable"),P(M,"propTypes",w(w({},s.default.propTypes),{},{axis:o.default.oneOf(["both","x","y","none"]),bounds:o.default.oneOfType([o.default.shape({left:o.default.number,right:o.default.number,top:o.default.number,bottom:o.default.number}),o.default.string,o.default.oneOf([!1])]),defaultClassName:o.default.string,defaultClassNameDragging:o.default.string,defaultClassNameDragged:o.default.string,defaultPosition:o.default.shape({x:o.default.number,y:o.default.number}),positionOffset:o.default.shape({x:o.default.oneOfType([o.default.number,o.default.string]),y:o.default.oneOfType([o.default.number,o.default.string])}),position:o.default.shape({x:o.default.number,y:o.default.number}),className:c.dontSetMe,style:c.dontSetMe,transform:c.dontSetMe})),P(M,"defaultProps",w(w({},s.default.defaultProps),{},{axis:"both",bounds:!1,defaultClassName:"react-draggable",defaultClassNameDragging:"react-draggable-dragging",defaultClassNameDragged:"react-draggable-dragged",defaultPosition:{x:0,y:0},position:null,scale:1}))},783:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r=function(e){if(e&&e.__esModule)return e;if(null===e||"object"!==d(e)&&"function"!=typeof e)return{default:e};var t=f();if(t&&t.has(e))return t.get(e);var n={},r=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var o in e)if(Object.prototype.hasOwnProperty.call(e,o)){var i=r?Object.getOwnPropertyDescriptor(e,o):null;i&&(i.get||i.set)?Object.defineProperty(n,o,i):n[o]=e[o]}n.default=e,t&&t.set(e,n);return n}(n(294)),o=s(n(697)),i=s(n(935)),a=n(825),u=n(849),l=n(280),c=s(n(904));function s(e){return e&&e.__esModule?e:{default:e}}function f(){if("function"!=typeof WeakMap)return null;var e=new WeakMap;return f=function(){return e},e}function d(e){return d="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},d(e)}function p(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(e)))return;var n=[],r=!0,o=!1,i=void 0;try{for(var a,u=e[Symbol.iterator]();!(r=(a=u.next()).done)&&(n.push(a.value),!t||n.length!==t);r=!0);}catch(e){o=!0,i=e}finally{try{r||null==u.return||u.return()}finally{if(o)throw i}}return n}(e,t)||function(e,t){if(!e)return;if("string"==typeof e)return h(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return h(e,t)}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function h(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function v(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function g(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function y(e,t){return y=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e},y(e,t)}function m(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=_(e);if(t){var o=_(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return b(this,n)}}function b(e,t){return!t||"object"!==d(t)&&"function"!=typeof t?w(e):t}function w(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function _(e){return _=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)},_(e)}function x(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var S={start:"touchstart",move:"touchmove",stop:"touchend"},E={start:"mousedown",move:"mousemove",stop:"mouseup"},k=E,O=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&y(e,t)}(s,e);var t,n,o,l=m(s);function s(){var e;v(this,s);for(var t=arguments.length,n=new Array(t),r=0;r<t;r++)n[r]=arguments[r];return x(w(e=l.call.apply(l,[this].concat(n))),"state",{dragging:!1,lastX:NaN,lastY:NaN,touchIdentifier:null}),x(w(e),"mounted",!1),x(w(e),"handleDragStart",(function(t){if(e.props.onMouseDown(t),!e.props.allowAnyClick&&"number"==typeof t.button&&0!==t.button)return!1;var n=e.findDOMNode();if(!n||!n.ownerDocument||!n.ownerDocument.body)throw new Error("<DraggableCore> not mounted on DragStart!");var r=n.ownerDocument;if(!(e.props.disabled||!(t.target instanceof r.defaultView.Node)||e.props.handle&&!(0,a.matchesSelectorAndParentsTo)(t.target,e.props.handle,n)||e.props.cancel&&(0,a.matchesSelectorAndParentsTo)(t.target,e.props.cancel,n))){"touchstart"===t.type&&t.preventDefault();var o=(0,a.getTouchIdentifier)(t);e.setState({touchIdentifier:o});var i=(0,u.getControlPosition)(t,o,w(e));if(null!=i){var l=i.x,s=i.y,f=(0,u.createCoreData)(w(e),l,s);(0,c.default)("DraggableCore: handleDragStart: %j",f),(0,c.default)("calling",e.props.onStart),!1!==e.props.onStart(t,f)&&!1!==e.mounted&&(e.props.enableUserSelectHack&&(0,a.addUserSelectStyles)(r),e.setState({dragging:!0,lastX:l,lastY:s}),(0,a.addEvent)(r,k.move,e.handleDrag),(0,a.addEvent)(r,k.stop,e.handleDragStop))}}})),x(w(e),"handleDrag",(function(t){var n=(0,u.getControlPosition)(t,e.state.touchIdentifier,w(e));if(null!=n){var r=n.x,o=n.y;if(Array.isArray(e.props.grid)){var i=r-e.state.lastX,a=o-e.state.lastY,l=p((0,u.snapToGrid)(e.props.grid,i,a),2);if(i=l[0],a=l[1],!i&&!a)return;r=e.state.lastX+i,o=e.state.lastY+a}var s=(0,u.createCoreData)(w(e),r,o);if((0,c.default)("DraggableCore: handleDrag: %j",s),!1!==e.props.onDrag(t,s)&&!1!==e.mounted)e.setState({lastX:r,lastY:o});else try{e.handleDragStop(new MouseEvent("mouseup"))}catch(t){var f=document.createEvent("MouseEvents");f.initMouseEvent("mouseup",!0,!0,window,0,0,0,0,0,!1,!1,!1,!1,0,null),e.handleDragStop(f)}}})),x(w(e),"handleDragStop",(function(t){if(e.state.dragging){var n=(0,u.getControlPosition)(t,e.state.touchIdentifier,w(e));if(null!=n){var r=n.x,o=n.y,i=(0,u.createCoreData)(w(e),r,o);if(!1===e.props.onStop(t,i)||!1===e.mounted)return!1;var l=e.findDOMNode();l&&e.props.enableUserSelectHack&&(0,a.removeUserSelectStyles)(l.ownerDocument),(0,c.default)("DraggableCore: handleDragStop: %j",i),e.setState({dragging:!1,lastX:NaN,lastY:NaN}),l&&((0,c.default)("DraggableCore: Removing handlers"),(0,a.removeEvent)(l.ownerDocument,k.move,e.handleDrag),(0,a.removeEvent)(l.ownerDocument,k.stop,e.handleDragStop))}}})),x(w(e),"onMouseDown",(function(t){return k=E,e.handleDragStart(t)})),x(w(e),"onMouseUp",(function(t){return k=E,e.handleDragStop(t)})),x(w(e),"onTouchStart",(function(t){return k=S,e.handleDragStart(t)})),x(w(e),"onTouchEnd",(function(t){return k=S,e.handleDragStop(t)})),e}return t=s,(n=[{key:"componentDidMount",value:function(){this.mounted=!0;var e=this.findDOMNode();e&&(0,a.addEvent)(e,S.start,this.onTouchStart,{passive:!1})}},{key:"componentWillUnmount",value:function(){this.mounted=!1;var e=this.findDOMNode();if(e){var t=e.ownerDocument;(0,a.removeEvent)(t,E.move,this.handleDrag),(0,a.removeEvent)(t,S.move,this.handleDrag),(0,a.removeEvent)(t,E.stop,this.handleDragStop),(0,a.removeEvent)(t,S.stop,this.handleDragStop),(0,a.removeEvent)(e,S.start,this.onTouchStart,{passive:!1}),this.props.enableUserSelectHack&&(0,a.removeUserSelectStyles)(t)}}},{key:"findDOMNode",value:function(){return this.props.nodeRef?this.props.nodeRef.current:i.default.findDOMNode(this)}},{key:"render",value:function(){return r.cloneElement(r.Children.only(this.props.children),{onMouseDown:this.onMouseDown,onMouseUp:this.onMouseUp,onTouchEnd:this.onTouchEnd})}}])&&g(t.prototype,n),o&&g(t,o),s}(r.Component);t.default=O,x(O,"displayName","DraggableCore"),x(O,"propTypes",{allowAnyClick:o.default.bool,disabled:o.default.bool,enableUserSelectHack:o.default.bool,offsetParent:function(e,t){if(e[t]&&1!==e[t].nodeType)throw new Error("Draggable's offsetParent must be a DOM Node.")},grid:o.default.arrayOf(o.default.number),handle:o.default.string,cancel:o.default.string,nodeRef:o.default.object,onStart:o.default.func,onDrag:o.default.func,onStop:o.default.func,onMouseDown:o.default.func,scale:o.default.number,className:l.dontSetMe,style:l.dontSetMe,transform:l.dontSetMe}),x(O,"defaultProps",{allowAnyClick:!1,cancel:null,disabled:!1,enableUserSelectHack:!0,offsetParent:null,handle:null,grid:null,transform:null,onStart:function(){},onDrag:function(){},onStop:function(){},onMouseDown:function(){},scale:1})},193:(e,t,n)=>{"use strict";var r=n(668),o=r.default,i=r.DraggableCore;e.exports=o,e.exports.default=o,e.exports.DraggableCore=i},825:(e,t,n)=>{"use strict";function r(e){return r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},r(e)}Object.defineProperty(t,"__esModule",{value:!0}),t.matchesSelector=f,t.matchesSelectorAndParentsTo=function(e,t,n){var r=e;do{if(f(r,t))return!0;if(r===n)return!1;r=r.parentNode}while(r);return!1},t.addEvent=function(e,t,n,r){if(!e)return;var o=l({capture:!0},r);e.addEventListener?e.addEventListener(t,n,o):e.attachEvent?e.attachEvent("on"+t,n):e["on"+t]=n},t.removeEvent=function(e,t,n,r){if(!e)return;var o=l({capture:!0},r);e.removeEventListener?e.removeEventListener(t,n,o):e.detachEvent?e.detachEvent("on"+t,n):e["on"+t]=null},t.outerHeight=function(e){var t=e.clientHeight,n=e.ownerDocument.defaultView.getComputedStyle(e);return t+=(0,o.int)(n.borderTopWidth),t+=(0,o.int)(n.borderBottomWidth)},t.outerWidth=function(e){var t=e.clientWidth,n=e.ownerDocument.defaultView.getComputedStyle(e);return t+=(0,o.int)(n.borderLeftWidth),t+=(0,o.int)(n.borderRightWidth)},t.innerHeight=function(e){var t=e.clientHeight,n=e.ownerDocument.defaultView.getComputedStyle(e);return t-=(0,o.int)(n.paddingTop),t-=(0,o.int)(n.paddingBottom)},t.innerWidth=function(e){var t=e.clientWidth,n=e.ownerDocument.defaultView.getComputedStyle(e);return t-=(0,o.int)(n.paddingLeft),t-=(0,o.int)(n.paddingRight)},t.offsetXYFromParent=function(e,t,n){var r=t===t.ownerDocument.body?{left:0,top:0}:t.getBoundingClientRect(),o=(e.clientX+t.scrollLeft-r.left)/n,i=(e.clientY+t.scrollTop-r.top)/n;return{x:o,y:i}},t.createCSSTransform=function(e,t){var n=d(e,t,"px");return c({},(0,i.browserPrefixToKey)("transform",i.default),n)},t.createSVGTransform=function(e,t){return d(e,t,"")},t.getTranslation=d,t.getTouch=function(e,t){return e.targetTouches&&(0,o.findInArray)(e.targetTouches,(function(e){return t===e.identifier}))||e.changedTouches&&(0,o.findInArray)(e.changedTouches,(function(e){return t===e.identifier}))},t.getTouchIdentifier=function(e){if(e.targetTouches&&e.targetTouches[0])return e.targetTouches[0].identifier;if(e.changedTouches&&e.changedTouches[0])return e.changedTouches[0].identifier},t.addUserSelectStyles=function(e){if(!e)return;var t=e.getElementById("react-draggable-style-el");t||((t=e.createElement("style")).type="text/css",t.id="react-draggable-style-el",t.innerHTML=".react-draggable-transparent-selection *::-moz-selection {all: inherit;}\n",t.innerHTML+=".react-draggable-transparent-selection *::selection {all: inherit;}\n",e.getElementsByTagName("head")[0].appendChild(t));e.body&&p(e.body,"react-draggable-transparent-selection")},t.removeUserSelectStyles=function(e){if(!e)return;try{if(e.body&&h(e.body,"react-draggable-transparent-selection"),e.selection)e.selection.empty();else{var t=(e.defaultView||window).getSelection();t&&"Caret"!==t.type&&t.removeAllRanges()}}catch(e){}},t.addClassName=p,t.removeClassName=h;var o=n(280),i=function(e){if(e&&e.__esModule)return e;if(null===e||"object"!==r(e)&&"function"!=typeof e)return{default:e};var t=a();if(t&&t.has(e))return t.get(e);var n={},o=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var i in e)if(Object.prototype.hasOwnProperty.call(e,i)){var u=o?Object.getOwnPropertyDescriptor(e,i):null;u&&(u.get||u.set)?Object.defineProperty(n,i,u):n[i]=e[i]}n.default=e,t&&t.set(e,n);return n}(n(650));function a(){if("function"!=typeof WeakMap)return null;var e=new WeakMap;return a=function(){return e},e}function u(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?u(Object(n),!0).forEach((function(t){c(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):u(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var s="";function f(e,t){return s||(s=(0,o.findInArray)(["matches","webkitMatchesSelector","mozMatchesSelector","msMatchesSelector","oMatchesSelector"],(function(t){return(0,o.isFunction)(e[t])}))),!!(0,o.isFunction)(e[s])&&e[s](t)}function d(e,t,n){var r=e.x,o=e.y,i="translate(".concat(r).concat(n,",").concat(o).concat(n,")");if(t){var a="".concat("string"==typeof t.x?t.x:t.x+n),u="".concat("string"==typeof t.y?t.y:t.y+n);i="translate(".concat(a,", ").concat(u,")")+i}return i}function p(e,t){e.classList?e.classList.add(t):e.className.match(new RegExp("(?:^|\\s)".concat(t,"(?!\\S)")))||(e.className+=" ".concat(t))}function h(e,t){e.classList?e.classList.remove(t):e.className=e.className.replace(new RegExp("(?:^|\\s)".concat(t,"(?!\\S)"),"g"),"")}},650:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.getPrefix=r,t.browserPrefixToKey=o,t.browserPrefixToStyle=function(e,t){return t?"-".concat(t.toLowerCase(),"-").concat(e):e},t.default=void 0;var n=["Moz","Webkit","O","ms"];function r(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"transform";if("undefined"==typeof window||void 0===window.document)return"";var t=window.document.documentElement.style;if(e in t)return"";for(var r=0;r<n.length;r++)if(o(e,n[r])in t)return n[r];return""}function o(e,t){return t?"".concat(t).concat(function(e){for(var t="",n=!0,r=0;r<e.length;r++)n?(t+=e[r].toUpperCase(),n=!1):"-"===e[r]?n=!0:t+=e[r];return t}(e)):e}var i=r();t.default=i},904:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(){void 0}},849:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.getBoundPosition=function(e,t,n){if(!e.props.bounds)return[t,n];var a=e.props.bounds;a="string"==typeof a?a:function(e){return{left:e.left,top:e.top,right:e.right,bottom:e.bottom}}(a);var u=i(e);if("string"==typeof a){var l,c=u.ownerDocument,s=c.defaultView;if(!((l="parent"===a?u.parentNode:c.querySelector(a))instanceof s.HTMLElement))throw new Error('Bounds selector "'+a+'" could not find an element.');var f=s.getComputedStyle(u),d=s.getComputedStyle(l);a={left:-u.offsetLeft+(0,r.int)(d.paddingLeft)+(0,r.int)(f.marginLeft),top:-u.offsetTop+(0,r.int)(d.paddingTop)+(0,r.int)(f.marginTop),right:(0,o.innerWidth)(l)-(0,o.outerWidth)(u)-u.offsetLeft+(0,r.int)(d.paddingRight)-(0,r.int)(f.marginRight),bottom:(0,o.innerHeight)(l)-(0,o.outerHeight)(u)-u.offsetTop+(0,r.int)(d.paddingBottom)-(0,r.int)(f.marginBottom)}}(0,r.isNum)(a.right)&&(t=Math.min(t,a.right));(0,r.isNum)(a.bottom)&&(n=Math.min(n,a.bottom));(0,r.isNum)(a.left)&&(t=Math.max(t,a.left));(0,r.isNum)(a.top)&&(n=Math.max(n,a.top));return[t,n]},t.snapToGrid=function(e,t,n){var r=Math.round(t/e[0])*e[0],o=Math.round(n/e[1])*e[1];return[r,o]},t.canDragX=function(e){return"both"===e.props.axis||"x"===e.props.axis},t.canDragY=function(e){return"both"===e.props.axis||"y"===e.props.axis},t.getControlPosition=function(e,t,n){var r="number"==typeof t?(0,o.getTouch)(e,t):null;if("number"==typeof t&&!r)return null;var a=i(n),u=n.props.offsetParent||a.offsetParent||a.ownerDocument.body;return(0,o.offsetXYFromParent)(r||e,u,n.props.scale)},t.createCoreData=function(e,t,n){var o=e.state,a=!(0,r.isNum)(o.lastX),u=i(e);return a?{node:u,deltaX:0,deltaY:0,lastX:t,lastY:n,x:t,y:n}:{node:u,deltaX:t-o.lastX,deltaY:n-o.lastY,lastX:o.lastX,lastY:o.lastY,x:t,y:n}},t.createDraggableData=function(e,t){var n=e.props.scale;return{node:t.node,x:e.state.x+t.deltaX/n,y:e.state.y+t.deltaY/n,deltaX:t.deltaX/n,deltaY:t.deltaY/n,lastX:e.state.x,lastY:e.state.y}};var r=n(280),o=n(825);function i(e){var t=e.findDOMNode();if(!t)throw new Error("<DraggableCore>: Unmounted during event!");return t}},280:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.findInArray=function(e,t){for(var n=0,r=e.length;n<r;n++)if(t.apply(t,[e[n],n,e]))return e[n]},t.isFunction=function(e){return"function"==typeof e||"[object Function]"===Object.prototype.toString.call(e)},t.isNum=function(e){return"number"==typeof e&&!isNaN(e)},t.int=function(e){return parseInt(e,10)},t.dontSetMe=function(e,t,n){if(e[t])return new Error("Invalid prop ".concat(t," passed to ").concat(n," - do not set this, set it on the child."))}},86:(e,t)=>{"use strict";var n="function"==typeof Symbol&&Symbol.for,r=n?Symbol.for("react.element"):60103,o=n?Symbol.for("react.portal"):60106,i=n?Symbol.for("react.fragment"):60107,a=n?Symbol.for("react.strict_mode"):60108,u=n?Symbol.for("react.profiler"):60114,l=n?Symbol.for("react.provider"):60109,c=n?Symbol.for("react.context"):60110,s=n?Symbol.for("react.async_mode"):60111,f=n?Symbol.for("react.concurrent_mode"):60111,d=n?Symbol.for("react.forward_ref"):60112,p=n?Symbol.for("react.suspense"):60113,h=n?Symbol.for("react.suspense_list"):60120,v=n?Symbol.for("react.memo"):60115,g=n?Symbol.for("react.lazy"):60116,y=n?Symbol.for("react.block"):60121,m=n?Symbol.for("react.fundamental"):60117,b=n?Symbol.for("react.responder"):60118,w=n?Symbol.for("react.scope"):60119;function _(e){if("object"==typeof e&&null!==e){var t=e.$$typeof;switch(t){case r:switch(e=e.type){case s:case f:case i:case u:case a:case p:return e;default:switch(e=e&&e.$$typeof){case c:case d:case g:case v:case l:return e;default:return t}}case o:return t}}}function x(e){return _(e)===f}},663:(e,t,n)=>{"use strict";n(86)},420:function(e,t,n){var r;r=function(e,t,n){return function(){"use strict";var r={"./src/Xarrow/utils/buzzier.js":function(e,t,n){n.r(t),n.d(t,{bzFunction:function(){return r},buzzierMinSols:function(){return o}});var r=function(e,t,n,r){return function(o){return Math.pow(1-o,3)*e+3*Math.pow(1-o,2)*o*t+3*(1-o)*Math.pow(o,2)*n+Math.pow(o,3)*r}},o=function(e,t,n,o){var i=r(e,t,n,o),a=-6*e+12*t-6*n,u=Math.pow(-6*e+12*t-6*n,2)-4*(3*t-3*e)*(-3*e+9*t-9*n+3*o),l=2*(-3*e+9*t-9*n+3*o);return[i((a+Math.sqrt(u))/l),i((a-Math.sqrt(u))/l)]}},"./src/Xarrow/Xarrow.tsx":function(e,t,n){var r=this&&this.__assign||function(){return r=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e},r.apply(this,arguments)},o=this&&this.__createBinding||(Object.create?function(e,t,n,r){void 0===r&&(r=n),Object.defineProperty(e,r,{enumerable:!0,get:function(){return t[n]}})}:function(e,t,n,r){void 0===r&&(r=n),e[r]=t[n]}),i=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),a=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)"default"!==n&&Object.prototype.hasOwnProperty.call(e,n)&&o(t,e,n);return i(t,e),t},u=this&&this.__spreadArray||function(e,t){for(var n=0,r=t.length,o=e.length;n<r;n++,o++)e[o]=t[n];return e},l=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var c=a(n("react")),s=l(n("./src/Xarrow/useXarrowProps.ts")),f=n("./src/Xwrapper.tsx"),d=l(n("./src/Xarrow/propTypes.ts")),p=n("./src/Xarrow/utils/GetPosition.tsx"),h=(console.log,function(e){var t,n=c.useRef({svgRef:c.useRef(null),lineRef:c.useRef(null),headRef:c.useRef(null),tailRef:c.useRef(null),lineDrawAnimRef:c.useRef(null),lineDashAnimRef:c.useRef(null),headOpacityAnimRef:c.useRef(null)}),o=n.current,i=o.svgRef,a=o.lineRef,l=o.headRef,d=(o.tailRef,o.lineDrawAnimRef),h=o.lineDashAnimRef,v=o.headOpacityAnimRef;c.useContext(f.XarrowContext);var g=s.default(e,n.current),y=g[0],m=y.labels,b=y.lineColor,w=y.headColor,_=y.tailColor,x=y.strokeWidth,S=y.showHead,E=y.showTail,k=y.dashness,O=y.headShape,C=y.tailShape,P=y.showXarrow,M=y.animateDrawing,A=y.zIndex,N=y.passProps,j=y.arrowBodyProps,T=y.arrowHeadProps,D=y.arrowTailProps,R=y.SVGcanvasProps,L=y.divContainerProps,z=y.divContainerStyle,I=y.SVGcanvasStyle,B=y._debug,U=y.shouldUpdatePosition;M=e.animateDrawing;var F=c.useState(!M),X=F[0],H=F[1],V=c.useState({})[1],W=function(){return V({})},Y=c.useState({cx0:0,cy0:0,cw:0,ch:0,x1:0,y1:0,x2:0,y2:0,dx:0,dy:0,absDx:0,absDy:0,cpx1:0,cpy1:0,cpx2:0,cpy2:0,headOrient:0,tailOrient:0,arrowHeadOffset:{x:0,y:0},arrowTailOffset:{x:0,y:0},headOffset:0,excRight:0,excLeft:0,excUp:0,excDown:0,startPoints:[],endPoints:[],mainDivPos:{x:0,y:0},xSign:1,ySign:1,lineLength:0,fHeadSize:1,fTailSize:1,arrowPath:"",labelStartPos:{x:0,y:0},labelMiddlePos:{x:0,y:0},labelEndPos:{x:0,y:0}}),$=Y[0],Z=Y[1];c.useLayoutEffect((function(){if(U.current){var e=p.getPosition(g,n);Z(e),U.current=!1}}));var q=$.x2-$.arrowHeadOffset.x,G=$.y2-$.arrowHeadOffset.y,K=$.x1-$.arrowTailOffset.x,Q=$.y1-$.arrowTailOffset.y,J=k.strokeLen+k.nonStrokeLen,ee=1;k.animation<0&&(k.animation*=-1,ee=-1);var te,ne,re,oe,ie=0;return M&&0==X?("boolean"==typeof M&&(M=1),ne=M+"s",te=$.lineLength,oe=$.lineLength,re=1,M<0&&(oe=(t=[ie,oe])[0],ie=t[1],ne=-1*M+"s")):(te=k.strokeLen+" "+k.nonStrokeLen,ne=1/k.animation+"s",oe=J*ee,re="indefinite",ie=0),c.useLayoutEffect((function(){a.current&&Z((function(e){var t,n;return r(r({},e),{lineLength:null!==(n=null===(t=a.current)||void 0===t?void 0:t.getTotalLength())&&void 0!==n?n:0})}))}),[a.current]),c.useEffect((function(){var e=function(){window.addEventListener("resize",W);var e=function(){var e,t;H(!0),null===(e=v.current)||void 0===e||e.beginElement(),null===(t=h.current)||void 0===t||t.beginElement()},t=function(){return l.current.style.opacity="0"};return d.current&&l.current&&(d.current.addEventListener("endEvent",e),d.current.addEventListener("beginEvent",t)),function(){window.removeEventListener("resize",W),d.current&&(d.current.removeEventListener("endEvent",e),l.current&&d.current.removeEventListener("beginEvent",t))}}();return function(){H(!1),e()}}),[P]),c.default.createElement("div",r({},L,{style:r({position:"absolute",zIndex:A},z)}),P?c.default.createElement(c.default.Fragment,null,c.default.createElement("svg",r({ref:i,width:$.cw,height:$.ch,style:r({position:"absolute",left:$.cx0,top:$.cy0,pointerEvents:"none",border:B?"1px dashed yellow":null},I),overflow:"auto"},R),c.default.createElement("path",r({ref:a,d:$.arrowPath,stroke:b,strokeDasharray:te,strokeWidth:x,fill:"transparent",pointerEvents:"visibleStroke"},N,j),c.default.createElement(c.default.Fragment,null,X?c.default.createElement(c.default.Fragment,null,k.animation?c.default.createElement("animate",{ref:h,attributeName:"stroke-dashoffset",values:J*ee+";0",dur:1/k.animation+"s",repeatCount:"indefinite"}):null):c.default.createElement(c.default.Fragment,null,M?c.default.createElement("animate",{ref:d,id:"svgEndAnimate",attributeName:"stroke-dashoffset",values:oe+";"+ie,dur:ne,repeatCount:re}):null))),E?c.default.createElement("g",r({fill:_,pointerEvents:"auto",transform:"translate("+K+","+Q+") rotate("+$.tailOrient+") scale("+$.fTailSize+")"},N,D),C.svgElem):null,S?c.default.createElement("g",r({ref:l,fill:w,pointerEvents:"auto",transform:"translate("+q+","+G+") rotate("+$.headOrient+") scale("+$.fHeadSize+")",opacity:M&&!X?0:1},N,T),c.default.createElement("animate",{ref:v,dur:"0.4",attributeName:"opacity",from:"0",to:"1",begin:"indefinite",repeatCount:"0",fill:"freeze"}),O.svgElem):null,B?c.default.createElement(c.default.Fragment,null,c.default.createElement("circle",{r:"5",cx:$.cpx1,cy:$.cpy1,fill:"green"}),c.default.createElement("circle",{r:"5",cx:$.cpx2,cy:$.cpy2,fill:"blue"}),c.default.createElement("rect",{x:$.excLeft,y:$.excUp,width:$.absDx,height:$.absDy,fill:"none",stroke:"pink",strokeWidth:"2px"})):null),m.start?c.default.createElement("div",{style:{transform:$.dx<0?"translate(-100% , -50%)":"translate(-0% , -50%)",width:"max-content",position:"absolute",left:$.cx0+$.labelStartPos.x,top:$.cy0+$.labelStartPos.y-x-5}},m.start):null,m.middle?c.default.createElement("div",{style:{display:"table",width:"max-content",transform:"translate(-50% , -50%)",position:"absolute",left:$.cx0+$.labelMiddlePos.x,top:$.cy0+$.labelMiddlePos.y}},m.middle):null,m.end?c.default.createElement("div",{style:{transform:$.dx>0?"translate(-100% , -50%)":"translate(-0% , -50%)",width:"max-content",position:"absolute",left:$.cx0+$.labelEndPos.x,top:$.cy0+$.labelEndPos.y+x+5}},m.end):null,B?c.default.createElement(c.default.Fragment,null,u(u([],$.startPoints),$.endPoints).map((function(e,t){return c.default.createElement("div",{key:t,style:{background:"gray",opacity:.5,borderRadius:"50%",transform:"translate(-50%, -50%)",height:5,width:5,position:"absolute",left:e.x-$.mainDivPos.x,top:e.y-$.mainDivPos.y}})}))):null):null)});h.propTypes=d.default,t.default=h},"./src/Xarrow/anchors.ts":function(e,t,n){e=n.nmd(e),Object.defineProperty(t,"__esModule",{value:!0}),t.calcAnchors=void 0,t.calcAnchors=function(e,t){return e.map((function(e){var n,r,o=(n=t.right-t.x,r=t.bottom-t.y,{middle:{x:.5*n,y:.5*r},left:{x:0,y:.5*r},right:{x:n,y:.5*r},top:{x:.5*n,y:0},bottom:{x:.5*n,y:r}})[e.position],i=o.x,a=o.y;return{x:t.x+i+e.offset.x,y:t.y+a+e.offset.y,anchor:e}}))},n.c[n.s]},"./src/Xarrow/propTypes.ts":function(e,t,n){var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var o=r(n("prop-types")),i=n("./src/constants.tsx"),a=o.default.oneOf(i.cAnchorEdge),u=o.default.exact({position:a.isRequired,offset:o.default.exact({x:o.default.number,y:o.default.number}).isRequired}),l=o.default.oneOfType([a,u]),c=o.default.oneOfType([l,o.default.arrayOf(l)]),s=o.default.oneOfType([o.default.string,o.default.exact({current:o.default.any})]),f=o.default.oneOfType([o.default.element,o.default.string]),d=o.default.exact({start:f,middle:f,end:f}),p=o.default.oneOf(Object.keys(i.arrowShapes)),h=o.default.any,v=o.default.oneOfType([p,o.default.exact({svgElem:h,offsetForward:o.default.number}).isRequired]),g={start:s.isRequired,end:s.isRequired,startAnchor:c,endAnchor:c,labels:o.default.oneOfType([f,d]),color:o.default.string,lineColor:o.default.string,showHead:o.default.bool,headColor:o.default.string,headSize:o.default.number,tailSize:o.default.number,tailColor:o.default.string,strokeWidth:o.default.number,showTail:o.default.bool,path:o.default.oneOf(i.cPaths),showXarrow:o.default.bool,curveness:o.default.number,gridBreak:o.default.string,dashness:o.default.oneOfType([o.default.bool,o.default.object]),headShape:v,tailShape:v,animateDrawing:o.default.oneOfType([o.default.bool,o.default.number]),zIndex:o.default.number,passProps:o.default.object,arrowBodyProps:o.default.object,arrowHeadProps:o.default.object,arrowTailProps:o.default.object,SVGcanvasProps:o.default.object,divContainerProps:o.default.object,_extendSVGcanvas:o.default.number,_debug:o.default.bool,_cpx1Offset:o.default.number,_cpy1Offset:o.default.number,_cpx2Offset:o.default.number,_cpy2Offset:o.default.number};t.default=g},"./src/Xarrow/useXarrowProps.ts":function(e,t,n){var r=this&&this.__assign||function(){return r=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e},r.apply(this,arguments)},o=this&&this.__createBinding||(Object.create?function(e,t,n,r){void 0===r&&(r=n),Object.defineProperty(e,r,{enumerable:!0,get:function(){return t[n]}})}:function(e,t,n,r){void 0===r&&(r=n),e[r]=t[n]}),i=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),a=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)"default"!==n&&Object.prototype.hasOwnProperty.call(e,n)&&o(t,e,n);return i(t,e),t},u=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var l=a(n("react")),c=n("./src/Xarrow/utils/index.ts"),s=u(n("lodash")),f=n("./src/constants.tsx"),d=function(e){var t=(Array.isArray(e)?e:[e]).map((function(e){return"string"==typeof e?{position:e}:e}));0==(t=t.filter((function(e){return f.cAnchorEdge.includes(e.position)}))).length&&(t=[{position:"auto"}]);var n=t.filter((function(e){return"auto"===e.position}));n.length>0&&(t=t.filter((function(e){return"auto"!==e.position}))).push.apply(t,n.flatMap((function(e){return["left","right","top","bottom"].map((function(t){return r(r({},e),{position:t})}))})));var o=t.map((function(e){if("object"==typeof e){var t=e;return t.position||(t.position="auto"),t.offset||(t.offset={x:0,y:0}),t.offset.y||(t.offset.y=0),t.offset.x||(t.offset.x=0),t=t}return e}));return o},p=function(e){return"string"==typeof e&&(e=e in f.arrowShapes?f.arrowShapes[e]:f.arrowShapes.arrow1),void 0===(null==(e=e)?void 0:e.offsetForward)&&(e.offsetForward=.25),void 0===(null==e?void 0:e.svgElem)&&(e.svgElem="path"),e},h=function(e,t){return t&&(t.current=!0),e},v=function(e){return e},g=function(e,t,n){return h(e,n)},y=function(e,t,n){return h(Number(e),n)},m={start:function(e){return c.getElementByPropGiven(e)},end:function(e){return c.getElementByPropGiven(e)},startAnchor:function(e,t,n){return h(d(e),n)},endAnchor:function(e,t,n){return h(d(e),n)},labels:function(e){return function(e){var t={start:null,middle:null,end:null};if(e)if("string"==typeof e||l.default.isValidElement(e))t.middle=e;else for(var n in e)t[n]=e[n];return t}(e)},color:v,lineColor:function(e,t){return e||t.color},headColor:function(e,t){return e||t.color},tailColor:function(e,t){return e||t.color},strokeWidth:y,showHead:g,headSize:y,showTail:g,tailSize:y,path:g,curveness:y,gridBreak:function(e,t,n){return h((r=e,(o=c.xStr2absRelative(r))||(o={relative:.5,abs:0}),o),n);var r,o},dashness:function(e,t){return r=t,i=0,a=0,"object"==typeof(n=e)?(i=n.strokeLen||2*r.strokeWidth,a=n.strokeLen?n.nonStrokeLen:r.strokeWidth,o=n.animation?n.animation:null):"boolean"==typeof n&&n&&(i=2*r.strokeWidth,a=r.strokeWidth,o=null),{strokeLen:i,nonStrokeLen:a,animation:o,animDirection:1};var n,r,o,i,a},headShape:function(e){return p(e)},tailShape:function(e){return p(e)},showXarrow:v,animateDrawing:v,zIndex:function(e){return Number(e)},passProps:v,arrowBodyProps:g,arrowHeadProps:g,arrowTailProps:g,SVGcanvasProps:g,divContainerProps:g,divContainerStyle:g,SVGcanvasStyle:g,_extendSVGcanvas:g,_debug:g,_cpx1Offset:g,_cpy1Offset:g,_cpx2Offset:g,_cpy2Offset:g},b={};for(var w in m)b[w]=[w];for(var _=0,x=["lineColor","headColor","tailColor"];_<x.length;_++)b[w=x[_]].push("color");var S={start:null,end:null,startAnchor:"auto",endAnchor:"auto",labels:null,color:"CornflowerBlue",lineColor:null,headColor:null,tailColor:null,strokeWidth:4,showHead:!0,headSize:6,showTail:!1,tailSize:6,path:"smooth",curveness:.8,gridBreak:"50%",dashness:!1,headShape:"arrow1",tailShape:"arrow1",showXarrow:!0,animateDrawing:!1,zIndex:0,passProps:{},arrowBodyProps:{},arrowHeadProps:{},arrowTailProps:{},SVGcanvasProps:{},divContainerProps:{},divContainerStyle:{},SVGcanvasStyle:{},_extendSVGcanvas:0,_debug:!1,_cpx1Offset:0,_cpy1Offset:0,_cpx2Offset:0,_cpy2Offset:0},E={};E=function(e,t){for(var n,r=0,o=Object.entries(e);r<o.length;r++){var i=o[r],a=i[0],u=i[1];t[a]=null===(n=null==m?void 0:m[a])||void 0===n?void 0:n.call(m,u,t)}return t}(S,E);var k={startPos:{x:0,y:0,right:0,bottom:0},endPos:{x:0,y:0,right:0,bottom:0}};function O(e){var t,n,r=l.useRef();return t=e,n=r.current,s.default.isEqual(t,n)||(r.current=e),r.current}function C(e,t){l.useLayoutEffect(e,t.map(O))}t.default=function(e,t){var n=l.useState(E),o=n[0],i=n[1],a=l.useRef(!1);o.shouldUpdatePosition=a;var u=r(r({},S),e),s=function(t){l.useLayoutEffect((function(){var e;o[t]=null===(e=null==m?void 0:m[t])||void 0===e?void 0:e.call(m,u[t],o,a),i(r({},o))}),b[t].map((function(t){return e[t]})))};for(var f in S)s(f);var d=l.useState(k),p=d[0],h=d[1],v=c.getElemPos(o.start);C((function(){p.startPos=v,a.current=!0,h(r({},p))}),[v]);var g=c.getElemPos(o.end);return C((function(){p.endPos=g,a.current=!0,h(r({},p))}),[g]),l.useLayoutEffect((function(){a.current=!0,h(r({},p))}),[o.headShape.svgElem,o.tailShape.svgElem]),[o,p]}},"./src/Xarrow/utils/GetPosition.tsx":function(e,t,n){var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.getPosition=void 0;var o=n("./src/Xarrow/anchors.ts"),i=n("./src/Xarrow/utils/index.ts"),a=r(n("lodash")),u=n("./src/constants.tsx"),l=n("./src/Xarrow/utils/buzzier.js");t.getPosition=function(e,t){var n,r,c,s,f=e[0],d=e[1],p=f.startAnchor,h=f.endAnchor,v=f.strokeWidth,g=f.showHead,y=f.headSize,m=f.showTail,b=f.tailSize,w=f.path,_=f.curveness,x=f.gridBreak,S=f.headShape,E=f.tailShape,k=f._extendSVGcanvas,O=f._cpx1Offset,C=f._cpy1Offset,P=f._cpx2Offset,M=f._cpy2Offset,A=d.startPos,N=d.endPos,j=t.current,T=j.svgRef,D=j.lineRef,R=0,L=0,z=o.calcAnchors(p,A),I=o.calcAnchors(h,N),B=i.getShortestLine(z,I),U=B.chosenStart,F=B.chosenEnd,X=U.anchor.position,H=F.anchor.position,V=a.default.pick(U,["x","y"]),W=a.default.pick(F,["x","y"]),Y=i.getSvgPos(T),$=Math.min(V.x,W.x)-Y.x,Z=Math.min(V.y,W.y)-Y.y,q=W.x-V.x,G=W.y-V.y,K=Math.abs(W.x-V.x),Q=Math.abs(W.y-V.y),J=q>0?1:-1,ee=G>0?1:-1,te=[S.offsetForward,E.offsetForward],ne=te[0],re=te[1],oe=y*v,ie=b*v,ae=0,ue=0,le=0,ce=0,se=oe*ne,fe=ie*re,de=Number(_);u.cPaths.includes(w)||(w="smooth"),"straight"===w&&(de=0,w="smooth");var pe=v+v*(y>b?y:b)/2,he=pe,ve=pe,ge=pe,ye=pe;ve+=Number(k),he+=Number(k),ge+=Number(k),ye+=Number(k);var me=0,be=K,we=0,_e=Q;if(q<0&&(me=(n=[be,me])[0],be=n[1]),G<0&&(we=(r=[_e,we])[0],_e=r[1]),0===de){var xe=Math.atan(Q/K);g&&(be-=oe*(1-ne)*J*Math.cos(xe),_e-=oe*(1-ne)*ee*Math.sin(xe),xe*=ee,J<0&&(xe=(Math.PI-xe*J)*J),ae=Math.cos(xe)*se-Math.sin(xe)*oe/2,ue=Math.cos(xe)*oe/2+Math.sin(xe)*se,R=180*xe/Math.PI);var Se=Math.atan(Q/K);m&&(me+=ie*(1-re)*J*Math.cos(Se),we+=ie*(1-re)*ee*Math.sin(Se),Se*=-ee,J>0&&(Se=(Math.PI-Se*J)*J),le=Math.cos(Se)*fe-Math.sin(Se)*ie/2,ce=Math.cos(Se)*ie/2+Math.sin(Se)*fe,L=180*Se/Math.PI)}else"middle"===H&&(H=K>Q?J?"left":"right":ee?"top":"bottom"),g&&(["left","right"].includes(H)?(ae+=se*J,be-=oe*(1-ne)*J,ue+=oe*J/2,"left"===H?(R=0,J<0&&(R+=180)):(R=180,J>0&&(R+=180))):["top","bottom"].includes(H)&&(ae+=oe*-ee/2,_e-=oe*ee-(ue+=se*ee),"top"===H?(R=270,ee>0&&(R+=180)):(R=90,ee<0&&(R+=180))));m&&0!==de&&(["left","right"].includes(X)?(me+=ie*J+(le+=fe*-J),ce+=-ie*J/2,"left"===X?(L=180,J<0&&(L+=180)):(L=0,J>0&&(L+=180))):["top","bottom"].includes(X)&&(we+=ie*ee+(ce+=fe*-ee),le+=ie*ee/2,"top"===X?(L=90,ee>0&&(L+=180)):(L=270,ee<0&&(L+=180))));var Ee={x:ae,y:ue},ke={x:le,y:ce},Oe=me,Ce=we,Pe=be,Me=_e,Ae={};"smooth"===w?Ae={hh:function(){Oe+=K*de*J,Pe-=K*de*J},vv:function(){Ce+=Q*de*ee,Me-=Q*de*ee},hv:function(){Oe+=K*de*J,Me-=Q*de*ee},vh:function(){Ce+=Q*de*ee,Pe-=K*de*J}}:"grid"===w&&(Ae={hh:function(){Oe+=(K*x.relative+x.abs)*J,Pe-=(K*(1-x.relative)-x.abs)*J,g&&(Oe-=oe*(1-ne)/2*J,Pe+=oe*(1-ne)/2*J),m&&(Oe-=ie*(1-re)/2*J,Pe+=ie*(1-re)/2*J)},vv:function(){Ce+=(Q*x.relative+x.abs)*ee,Me-=(Q*(1-x.relative)-x.abs)*ee,g&&(Ce-=oe*(1-ne)/2*ee,Me+=oe*(1-ne)/2*ee),m&&(Ce-=ie*(1-re)/2*ee,Me+=ie*(1-re)/2*ee)},hv:function(){Oe=be},vh:function(){Ce=_e}});var Ne="";["left","right"].includes(X)?Ne+="h":["bottom","top"].includes(X)?Ne+="v":"middle"===X&&(Ne+="m"),["left","right"].includes(H)?Ne+="h":["bottom","top"].includes(H)?Ne+="v":"middle"===H&&(Ne+="m"),Ae[Ne=K>Q?Ne.replace(/m/g,"h"):Ne.replace(/m/g,"v")](),Oe+=O,Ce+=C,Pe+=P,Me+=M;var je=l.buzzierMinSols(me,Oe,Pe,be),Te=je[0],De=je[1],Re=l.buzzierMinSols(we,Ce,Me,_e),Le=Re[0],ze=Re[1];Te<0&&(ve+=-Te),De>K&&(he+=De-K),Le<0&&(ge+=-Le),ze>Q&&(ye+=ze-Q),"grid"===w&&(ve+=pe,he+=pe,ge+=pe,ye+=pe),me+=ve,be+=ve,we+=ge,_e+=ge,Oe+=ve,Pe+=ve,Ce+=ge,Me+=ge;var Ie=K+ve+he,Be=Q+ge+ye;$-=ve,Z-=ge;var Ue,Fe=l.bzFunction(me,Oe,Pe,be),Xe=l.bzFunction(we,Ce,Me,_e),He={x:Fe(.01),y:Xe(.01)},Ve={x:Fe(.5),y:Xe(.5)},We={x:Fe(.99),y:Xe(.99)};return"grid"===w?Ue="M "+me+" "+we+" L  "+Oe+" "+Ce+" L "+Pe+" "+Me+" "+be+" "+_e:"smooth"===w&&(Ue="M "+me+" "+we+" C "+Oe+" "+Ce+", "+Pe+" "+Me+", "+be+" "+_e),{cx0:$,cy0:Z,x1:me,x2:be,y1:we,y2:_e,cw:Ie,ch:Be,cpx1:Oe,cpy1:Ce,cpx2:Pe,cpy2:Me,dx:q,dy:G,absDx:K,absDy:Q,headOrient:R,tailOrient:L,labelStartPos:He,labelMiddlePos:Ve,labelEndPos:We,excLeft:ve,excRight:he,excUp:ge,excDown:ye,headOffset:se,arrowHeadOffset:Ee,arrowTailOffset:ke,startPoints:z,endPoints:I,mainDivPos:Y,xSign:J,ySign:ee,lineLength:null!==(s=null===(c=D.current)||void 0===c?void 0:c.getTotalLength())&&void 0!==s?s:0,fHeadSize:oe,fTailSize:ie,arrowPath:Ue}}},"./src/Xarrow/utils/index.ts":function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.getSvgPos=t.getElemPos=t.getShortestLine=t.xStr2absRelative=t.factorDpathStr=t.getElementByPropGiven=void 0,t.getElementByPropGiven=function(e){return"string"==typeof e?document.getElementById(e):null==e?void 0:e.current},t.factorDpathStr=function(e,t){var n=e.split(/(\d+(?:\.\d+)?)/);return(n=n.map((function(e){return Number(e)?(Number(e)*t).toString():e}))).join("")},t.xStr2absRelative=function(e){if("string"!=typeof e)return{abs:0,relative:.5};var t=e.split("%"),n=0,r=0;if(1==t.length){var o=parseFloat(t[0]);if(!isNaN(o))return{abs:n=o,relative:0}}else if(2==t.length){var i=[parseFloat(t[0]),parseFloat(t[1])],a=i[0],u=i[1];if(isNaN(a)||(r=a/100),isNaN(u)||(n=u),!isNaN(a)||!isNaN(u))return{abs:n,relative:r}}},t.getShortestLine=function(e,t){var n,r=1/0,o=1/0;return e.forEach((function(e){t.forEach((function(t){var i,a;i=e,a=t,(o=Math.sqrt(Math.pow(i.x-a.x,2)+Math.pow(i.y-a.y,2)))<r&&(r=o,n={chosenStart:e,chosenEnd:t})}))})),n},t.getElemPos=function(e){if(!e)return{x:0,y:0,right:0,bottom:0};var t=e.getBoundingClientRect();return{x:t.left,y:t.top,right:t.right,bottom:t.bottom}},t.getSvgPos=function(e){if(!e.current)return{x:0,y:0};var t=e.current.getBoundingClientRect(),n=t.left,r=t.top,o=getComputedStyle(e.current);return{x:n-Number(o.left.slice(0,-2)),y:r-Number(o.top.slice(0,-2))}}},"./src/Xwrapper.tsx":function(e,t,n){var r=this&&this.__createBinding||(Object.create?function(e,t,n,r){void 0===r&&(r=n),Object.defineProperty(e,r,{enumerable:!0,get:function(){return t[n]}})}:function(e,t,n,r){void 0===r&&(r=n),e[r]=t[n]}),o=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),i=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)"default"!==n&&Object.prototype.hasOwnProperty.call(e,n)&&r(t,e,n);return o(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.XarrowContext=t.XelemContext=void 0;var a=i(n("react"));t.XelemContext=a.default.createContext(null),t.XarrowContext=a.default.createContext(null);var u={},l=0,c=(console.log,function(e){var n=e.children,r=e.instanceCount,o=a.useState({})[1],i=function(){return o({})};return a.useEffect((function(){r.current=l,u[r.current]=i}),[]),a.default.createElement(t.XarrowContext.Provider,{value:i},n)}),s=function(e){var n=e.children,r=e.instanceCount;return a.default.createElement(t.XelemContext.Provider,{value:u[r.current]},n)};t.default=function(e){var t=e.children,n=a.useRef(l),r=a.useState({})[1];return a.useEffect((function(){return l++,r({}),function(){delete u[n.current]}}),[]),a.default.createElement(s,{instanceCount:n},a.default.createElement(c,{instanceCount:n},t))}},"./src/constants.tsx":function(e,t,n){var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.cArrowShapes=t.arrowShapes=t.cSvgElems=t.cPaths=t.cAnchorEdge=void 0;var o=r(n("react"));t.cAnchorEdge=["middle","left","right","top","bottom","auto"],t.cPaths=["smooth","grid","straight"],t.cSvgElems=["circle","ellipse","line","path","polygon","polyline","rect"],t.arrowShapes={arrow1:{svgElem:o.default.createElement("path",{d:"M 0 0 L 1 0.5 L 0 1 L 0.25 0.5 z"}),offsetForward:.25},heart:{svgElem:o.default.createElement("path",{d:"M 0,0.25 A 0.125,0.125 0,0,1 0.5,0.25 A 0.125,0.125 0,0,1 1,0.25 Q 1,0.625 0.5,1 Q 0,0.625 0,0.25 z"}),offsetForward:.1},circle:{svgElem:o.default.createElement("circle",{r:.5,cx:.5,cy:.5}),offsetForward:0}},t.cArrowShapes=Object.keys(t.arrowShapes)},"./src/index.tsx":function(e,t,n){var r=this&&this.__createBinding||(Object.create?function(e,t,n,r){void 0===r&&(r=n),Object.defineProperty(e,r,{enumerable:!0,get:function(){return t[n]}})}:function(e,t,n,r){void 0===r&&(r=n),e[r]=t[n]}),o=this&&this.__exportStar||function(e,t){for(var n in e)"default"===n||Object.prototype.hasOwnProperty.call(t,n)||r(t,e,n)},i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.useXarrow=t.Xwrapper=t.default=void 0;var a=n("./src/Xarrow/Xarrow.tsx");Object.defineProperty(t,"default",{enumerable:!0,get:function(){return i(a).default}}),o(n("./src/types.ts"),t),o(n("./src/constants.tsx"),t);var u=n("./src/Xwrapper.tsx");Object.defineProperty(t,"Xwrapper",{enumerable:!0,get:function(){return i(u).default}});var l=n("./src/useXarrow.tsx");Object.defineProperty(t,"useXarrow",{enumerable:!0,get:function(){return i(l).default}})},"./src/types.ts":function(e,t){Object.defineProperty(t,"__esModule",{value:!0})},"./src/useXarrow.tsx":function(e,t,n){Object.defineProperty(t,"__esModule",{value:!0});var r=n("react"),o=n("./src/Xwrapper.tsx");t.default=function(){var e=r.useState({})[1],t=r.useContext(o.XelemContext);return t||(t=function(){}),r.useLayoutEffect((function(){t()})),function(){return e({})}}},lodash:function(e){e.exports=t},"prop-types":function(e){e.exports=n},react:function(t){t.exports=e}},o={};function i(e){var t=o[e];if(void 0!==t)return t.exports;var n=o[e]={id:e,loaded:!1,exports:{}};return r[e].call(n.exports,n,n.exports,i),n.loaded=!0,n.exports}return i.c=o,i.d=function(e,t){for(var n in t)i.o(t,n)&&!i.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},i.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},i.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},i.nmd=function(e){return e.paths=[],e.children||(e.children=[]),e},i(i.s="./src/index.tsx")}()},e.exports=r(n(294),n(486),n(697))},408:(e,t,n)=>{"use strict";var r=n(418),o=60103,i=60106;t.Fragment=60107,t.StrictMode=60108,t.Profiler=60114;var a=60109,u=60110,l=60112;t.Suspense=60113;var c=60115,s=60116;if("function"==typeof Symbol&&Symbol.for){var f=Symbol.for;o=f("react.element"),i=f("react.portal"),t.Fragment=f("react.fragment"),t.StrictMode=f("react.strict_mode"),t.Profiler=f("react.profiler"),a=f("react.provider"),u=f("react.context"),l=f("react.forward_ref"),t.Suspense=f("react.suspense"),c=f("react.memo"),s=f("react.lazy")}var d="function"==typeof Symbol&&Symbol.iterator;function p(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var h={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},v={};function g(e,t,n){this.props=e,this.context=t,this.refs=v,this.updater=n||h}function y(){}function m(e,t,n){this.props=e,this.context=t,this.refs=v,this.updater=n||h}g.prototype.isReactComponent={},g.prototype.setState=function(e,t){if("object"!=typeof e&&"function"!=typeof e&&null!=e)throw Error(p(85));this.updater.enqueueSetState(this,e,t,"setState")},g.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},y.prototype=g.prototype;var b=m.prototype=new y;b.constructor=m,r(b,g.prototype),b.isPureReactComponent=!0;var w={current:null},_=Object.prototype.hasOwnProperty,x={key:!0,ref:!0,__self:!0,__source:!0};function S(e,t,n){var r,i={},a=null,u=null;if(null!=t)for(r in void 0!==t.ref&&(u=t.ref),void 0!==t.key&&(a=""+t.key),t)_.call(t,r)&&!x.hasOwnProperty(r)&&(i[r]=t[r]);var l=arguments.length-2;if(1===l)i.children=n;else if(1<l){for(var c=Array(l),s=0;s<l;s++)c[s]=arguments[s+2];i.children=c}if(e&&e.defaultProps)for(r in l=e.defaultProps)void 0===i[r]&&(i[r]=l[r]);return{$$typeof:o,type:e,key:a,ref:u,props:i,_owner:w.current}}function E(e){return"object"==typeof e&&null!==e&&e.$$typeof===o}var k=/\/+/g;function O(e,t){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+e.replace(/[=:]/g,(function(e){return t[e]}))}(""+e.key):t.toString(36)}function C(e,t,n,r,a){var u=typeof e;"undefined"!==u&&"boolean"!==u||(e=null);var l=!1;if(null===e)l=!0;else switch(u){case"string":case"number":l=!0;break;case"object":switch(e.$$typeof){case o:case i:l=!0}}if(l)return a=a(l=e),e=""===r?"."+O(l,0):r,Array.isArray(a)?(n="",null!=e&&(n=e.replace(k,"$&/")+"/"),C(a,t,n,"",(function(e){return e}))):null!=a&&(E(a)&&(a=function(e,t){return{$$typeof:o,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}}(a,n+(!a.key||l&&l.key===a.key?"":(""+a.key).replace(k,"$&/")+"/")+e)),t.push(a)),1;if(l=0,r=""===r?".":r+":",Array.isArray(e))for(var c=0;c<e.length;c++){var s=r+O(u=e[c],c);l+=C(u,t,n,s,a)}else if(s=function(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=d&&e[d]||e["@@iterator"])?e:null}(e),"function"==typeof s)for(e=s.call(e),c=0;!(u=e.next()).done;)l+=C(u=u.value,t,n,s=r+O(u,c++),a);else if("object"===u)throw t=""+e,Error(p(31,"[object Object]"===t?"object with keys {"+Object.keys(e).join(", ")+"}":t));return l}function P(e,t,n){if(null==e)return e;var r=[],o=0;return C(e,r,"","",(function(e){return t.call(n,e,o++)})),r}function M(e){if(-1===e._status){var t=e._result;t=t(),e._status=0,e._result=t,t.then((function(t){0===e._status&&(t=t.default,e._status=1,e._result=t)}),(function(t){0===e._status&&(e._status=2,e._result=t)}))}if(1===e._status)return e._result;throw e._result}var A={current:null};function N(){var e=A.current;if(null===e)throw Error(p(321));return e}var j={ReactCurrentDispatcher:A,ReactCurrentBatchConfig:{transition:0},ReactCurrentOwner:w,IsSomeRendererActing:{current:!1},assign:r};t.Children={map:P,forEach:function(e,t,n){P(e,(function(){t.apply(this,arguments)}),n)},count:function(e){var t=0;return P(e,(function(){t++})),t},toArray:function(e){return P(e,(function(e){return e}))||[]},only:function(e){if(!E(e))throw Error(p(143));return e}},t.Component=g,t.PureComponent=m,t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=j,t.cloneElement=function(e,t,n){if(null==e)throw Error(p(267,e));var i=r({},e.props),a=e.key,u=e.ref,l=e._owner;if(null!=t){if(void 0!==t.ref&&(u=t.ref,l=w.current),void 0!==t.key&&(a=""+t.key),e.type&&e.type.defaultProps)var c=e.type.defaultProps;for(s in t)_.call(t,s)&&!x.hasOwnProperty(s)&&(i[s]=void 0===t[s]&&void 0!==c?c[s]:t[s])}var s=arguments.length-2;if(1===s)i.children=n;else if(1<s){c=Array(s);for(var f=0;f<s;f++)c[f]=arguments[f+2];i.children=c}return{$$typeof:o,type:e.type,key:a,ref:u,props:i,_owner:l}},t.createContext=function(e,t){return void 0===t&&(t=null),(e={$$typeof:u,_calculateChangedBits:t,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null}).Provider={$$typeof:a,_context:e},e.Consumer=e},t.createElement=S,t.createFactory=function(e){var t=S.bind(null,e);return t.type=e,t},t.createRef=function(){return{current:null}},t.forwardRef=function(e){return{$$typeof:l,render:e}},t.isValidElement=E,t.lazy=function(e){return{$$typeof:s,_payload:{_status:-1,_result:e},_init:M}},t.memo=function(e,t){return{$$typeof:c,type:e,compare:void 0===t?null:t}},t.useCallback=function(e,t){return N().useCallback(e,t)},t.useContext=function(e,t){return N().useContext(e,t)},t.useDebugValue=function(){},t.useEffect=function(e,t){return N().useEffect(e,t)},t.useImperativeHandle=function(e,t,n){return N().useImperativeHandle(e,t,n)},t.useLayoutEffect=function(e,t){return N().useLayoutEffect(e,t)},t.useMemo=function(e,t){return N().useMemo(e,t)},t.useReducer=function(e,t,n){return N().useReducer(e,t,n)},t.useRef=function(e){return N().useRef(e)},t.useState=function(e){return N().useState(e)},t.version="17.0.2"},294:(e,t,n)=>{"use strict";e.exports=n(408)},53:(e,t)=>{"use strict";var n,r,o,i;if("object"==typeof performance&&"function"==typeof performance.now){var a=performance;t.unstable_now=function(){return a.now()}}else{var u=Date,l=u.now();t.unstable_now=function(){return u.now()-l}}if("undefined"==typeof window||"function"!=typeof MessageChannel){var c=null,s=null,f=function(){if(null!==c)try{var e=t.unstable_now();c(!0,e),c=null}catch(e){throw setTimeout(f,0),e}};n=function(e){null!==c?setTimeout(n,0,e):(c=e,setTimeout(f,0))},r=function(e,t){s=setTimeout(e,t)},o=function(){clearTimeout(s)},t.unstable_shouldYield=function(){return!1},i=t.unstable_forceFrameRate=function(){}}else{var d=window.setTimeout,p=window.clearTimeout;if("undefined"!=typeof console){window.cancelAnimationFrame;window.requestAnimationFrame}var h=!1,v=null,g=-1,y=5,m=0;t.unstable_shouldYield=function(){return t.unstable_now()>=m},i=function(){},t.unstable_forceFrameRate=function(e){0>e||125<e||(y=0<e?Math.floor(1e3/e):5)};var b=new MessageChannel,w=b.port2;b.port1.onmessage=function(){if(null!==v){var e=t.unstable_now();m=e+y;try{v(!0,e)?w.postMessage(null):(h=!1,v=null)}catch(e){throw w.postMessage(null),e}}else h=!1},n=function(e){v=e,h||(h=!0,w.postMessage(null))},r=function(e,n){g=d((function(){e(t.unstable_now())}),n)},o=function(){p(g),g=-1}}function _(e,t){var n=e.length;e.push(t);e:for(;;){var r=n-1>>>1,o=e[r];if(!(void 0!==o&&0<E(o,t)))break e;e[r]=t,e[n]=o,n=r}}function x(e){return void 0===(e=e[0])?null:e}function S(e){var t=e[0];if(void 0!==t){var n=e.pop();if(n!==t){e[0]=n;e:for(var r=0,o=e.length;r<o;){var i=2*(r+1)-1,a=e[i],u=i+1,l=e[u];if(void 0!==a&&0>E(a,n))void 0!==l&&0>E(l,a)?(e[r]=l,e[u]=n,r=u):(e[r]=a,e[i]=n,r=i);else{if(!(void 0!==l&&0>E(l,n)))break e;e[r]=l,e[u]=n,r=u}}}return t}return null}function E(e,t){var n=e.sortIndex-t.sortIndex;return 0!==n?n:e.id-t.id}var k=[],O=[],C=1,P=null,M=3,A=!1,N=!1,j=!1;function T(e){for(var t=x(O);null!==t;){if(null===t.callback)S(O);else{if(!(t.startTime<=e))break;S(O),t.sortIndex=t.expirationTime,_(k,t)}t=x(O)}}function D(e){if(j=!1,T(e),!N)if(null!==x(k))N=!0,n(R);else{var t=x(O);null!==t&&r(D,t.startTime-e)}}function R(e,n){N=!1,j&&(j=!1,o()),A=!0;var i=M;try{for(T(n),P=x(k);null!==P&&(!(P.expirationTime>n)||e&&!t.unstable_shouldYield());){var a=P.callback;if("function"==typeof a){P.callback=null,M=P.priorityLevel;var u=a(P.expirationTime<=n);n=t.unstable_now(),"function"==typeof u?P.callback=u:P===x(k)&&S(k),T(n)}else S(k);P=x(k)}if(null!==P)var l=!0;else{var c=x(O);null!==c&&r(D,c.startTime-n),l=!1}return l}finally{P=null,M=i,A=!1}}var L=i;t.unstable_IdlePriority=5,t.unstable_ImmediatePriority=1,t.unstable_LowPriority=4,t.unstable_NormalPriority=3,t.unstable_Profiling=null,t.unstable_UserBlockingPriority=2,t.unstable_cancelCallback=function(e){e.callback=null},t.unstable_continueExecution=function(){N||A||(N=!0,n(R))},t.unstable_getCurrentPriorityLevel=function(){return M},t.unstable_getFirstCallbackNode=function(){return x(k)},t.unstable_next=function(e){switch(M){case 1:case 2:case 3:var t=3;break;default:t=M}var n=M;M=t;try{return e()}finally{M=n}},t.unstable_pauseExecution=function(){},t.unstable_requestPaint=L,t.unstable_runWithPriority=function(e,t){switch(e){case 1:case 2:case 3:case 4:case 5:break;default:e=3}var n=M;M=e;try{return t()}finally{M=n}},t.unstable_scheduleCallback=function(e,i,a){var u=t.unstable_now();switch("object"==typeof a&&null!==a?a="number"==typeof(a=a.delay)&&0<a?u+a:u:a=u,e){case 1:var l=-1;break;case 2:l=250;break;case 5:l=1073741823;break;case 4:l=1e4;break;default:l=5e3}return e={id:C++,callback:i,priorityLevel:e,startTime:a,expirationTime:l=a+l,sortIndex:-1},a>u?(e.sortIndex=a,_(O,e),null===x(k)&&e===x(O)&&(j?o():j=!0,r(D,a-u))):(e.sortIndex=l,_(k,e),N||A||(N=!0,n(R))),e},t.unstable_wrapCallback=function(e){var t=M;return function(){var n=M;M=t;try{return e.apply(this,arguments)}finally{M=n}}}},840:(e,t,n)=>{"use strict";e.exports=n(53)},379:(e,t,n)=>{"use strict";var r=function(){var e;return function(){return void 0===e&&(e=Boolean(window&&document&&document.all&&!window.atob)),e}}(),o=function(){var e={};return function(t){if(void 0===e[t]){var n=document.querySelector(t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}e[t]=n}return e[t]}}(),i=[];function a(e){for(var t=-1,n=0;n<i.length;n++)if(i[n].identifier===e){t=n;break}return t}function u(e,t){for(var n={},r=[],o=0;o<e.length;o++){var u=e[o],l=t.base?u[0]+t.base:u[0],c=n[l]||0,s="".concat(l," ").concat(c);n[l]=c+1;var f=a(s),d={css:u[1],media:u[2],sourceMap:u[3]};-1!==f?(i[f].references++,i[f].updater(d)):i.push({identifier:s,updater:v(d,t),references:1}),r.push(s)}return r}function l(e){var t=document.createElement("style"),r=e.attributes||{};if(void 0===r.nonce){var i=n.nc;i&&(r.nonce=i)}if(Object.keys(r).forEach((function(e){t.setAttribute(e,r[e])})),"function"==typeof e.insert)e.insert(t);else{var a=o(e.insert||"head");if(!a)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");a.appendChild(t)}return t}var c,s=(c=[],function(e,t){return c[e]=t,c.filter(Boolean).join("\n")});function f(e,t,n,r){var o=n?"":r.media?"@media ".concat(r.media," {").concat(r.css,"}"):r.css;if(e.styleSheet)e.styleSheet.cssText=s(t,o);else{var i=document.createTextNode(o),a=e.childNodes;a[t]&&e.removeChild(a[t]),a.length?e.insertBefore(i,a[t]):e.appendChild(i)}}function d(e,t,n){var r=n.css,o=n.media,i=n.sourceMap;if(o?e.setAttribute("media",o):e.removeAttribute("media"),i&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),e.styleSheet)e.styleSheet.cssText=r;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(r))}}var p=null,h=0;function v(e,t){var n,r,o;if(t.singleton){var i=h++;n=p||(p=l(t)),r=f.bind(null,n,i,!1),o=f.bind(null,n,i,!0)}else n=l(t),r=d.bind(null,n,t),o=function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)};return r(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;r(e=t)}else o()}}e.exports=function(e,t){(t=t||{}).singleton||"boolean"==typeof t.singleton||(t.singleton=r());var n=u(e=e||[],t);return function(e){if(e=e||[],"[object Array]"===Object.prototype.toString.call(e)){for(var r=0;r<n.length;r++){var o=a(n[r]);i[o].references--}for(var l=u(e,t),c=0;c<n.length;c++){var s=a(n[c]);0===i[s].references&&(i[s].updater(),i.splice(s,1))}n=l}}}}},t={};function n(r){var o=t[r];if(void 0!==o)return o.exports;var i=t[r]={id:r,loaded:!1,exports:{}};return e[r].call(i.exports,i,i.exports,n),i.loaded=!0,i.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.nmd=e=>(e.paths=[],e.children||(e.children=[]),e),(()=>{"use strict";var e=n(294),t=n(935),r=n(552),o=n(697),i=n.n(o),a=n(122);function u(e){return"/"===e.charAt(0)}function l(e,t){for(var n=t,r=n+1,o=e.length;r<o;n+=1,r+=1)e[n]=e[r];e.pop()}const c=function(e,t){void 0===t&&(t="");var n,r=e&&e.split("/")||[],o=t&&t.split("/")||[],i=e&&u(e),a=t&&u(t),c=i||a;if(e&&u(e)?o=r:r.length&&(o.pop(),o=o.concat(r)),!o.length)return"/";if(o.length){var s=o[o.length-1];n="."===s||".."===s||""===s}else n=!1;for(var f=0,d=o.length;d>=0;d--){var p=o[d];"."===p?l(o,d):".."===p?(l(o,d),f++):f&&(l(o,d),f--)}if(!c)for(;f--;f)o.unshift("..");!c||""===o[0]||o[0]&&u(o[0])||o.unshift("");var h=o.join("/");return n&&"/"!==h.substr(-1)&&(h+="/"),h};var s="Invariant failed";const f=function(e,t){if(!e)throw new Error(s)};function d(e){return"/"===e.charAt(0)?e:"/"+e}function p(e){return"/"===e.charAt(0)?e.substr(1):e}function h(e,t){return function(e,t){return 0===e.toLowerCase().indexOf(t.toLowerCase())&&-1!=="/?#".indexOf(e.charAt(t.length))}(e,t)?e.substr(t.length):e}function v(e){return"/"===e.charAt(e.length-1)?e.slice(0,-1):e}function g(e){var t=e.pathname,n=e.search,r=e.hash,o=t||"/";return n&&"?"!==n&&(o+="?"===n.charAt(0)?n:"?"+n),r&&"#"!==r&&(o+="#"===r.charAt(0)?r:"#"+r),o}function y(e,t,n,r){var o;"string"==typeof e?(o=function(e){var t=e||"/",n="",r="",o=t.indexOf("#");-1!==o&&(r=t.substr(o),t=t.substr(0,o));var i=t.indexOf("?");return-1!==i&&(n=t.substr(i),t=t.substr(0,i)),{pathname:t,search:"?"===n?"":n,hash:"#"===r?"":r}}(e),o.state=t):(void 0===(o=(0,a.Z)({},e)).pathname&&(o.pathname=""),o.search?"?"!==o.search.charAt(0)&&(o.search="?"+o.search):o.search="",o.hash?"#"!==o.hash.charAt(0)&&(o.hash="#"+o.hash):o.hash="",void 0!==t&&void 0===o.state&&(o.state=t));try{o.pathname=decodeURI(o.pathname)}catch(e){throw e instanceof URIError?new URIError('Pathname "'+o.pathname+'" could not be decoded. This is likely caused by an invalid percent-encoding.'):e}return n&&(o.key=n),r?o.pathname?"/"!==o.pathname.charAt(0)&&(o.pathname=c(o.pathname,r.pathname)):o.pathname=r.pathname:o.pathname||(o.pathname="/"),o}function m(){var e=null;var t=[];return{setPrompt:function(t){return e=t,function(){e===t&&(e=null)}},confirmTransitionTo:function(t,n,r,o){if(null!=e){var i="function"==typeof e?e(t,n):e;"string"==typeof i?"function"==typeof r?r(i,o):o(!0):o(!1!==i)}else o(!0)},appendListener:function(e){var n=!0;function r(){n&&e.apply(void 0,arguments)}return t.push(r),function(){n=!1,t=t.filter((function(e){return e!==r}))}},notifyListeners:function(){for(var e=arguments.length,n=new Array(e),r=0;r<e;r++)n[r]=arguments[r];t.forEach((function(e){return e.apply(void 0,n)}))}}}var b=!("undefined"==typeof window||!window.document||!window.document.createElement);function w(e,t){t(window.confirm(e))}var _="popstate",x="hashchange";function S(){try{return window.history.state||{}}catch(e){return{}}}function E(e){void 0===e&&(e={}),b||f(!1);var t,n=window.history,r=(-1===(t=window.navigator.userAgent).indexOf("Android 2.")&&-1===t.indexOf("Android 4.0")||-1===t.indexOf("Mobile Safari")||-1!==t.indexOf("Chrome")||-1!==t.indexOf("Windows Phone"))&&window.history&&"pushState"in window.history,o=!(-1===window.navigator.userAgent.indexOf("Trident")),i=e,u=i.forceRefresh,l=void 0!==u&&u,c=i.getUserConfirmation,s=void 0===c?w:c,p=i.keyLength,E=void 0===p?6:p,k=e.basename?v(d(e.basename)):"";function O(e){var t=e||{},n=t.key,r=t.state,o=window.location,i=o.pathname+o.search+o.hash;return k&&(i=h(i,k)),y(i,r,n)}function C(){return Math.random().toString(36).substr(2,E)}var P=m();function M(e){(0,a.Z)(F,e),F.length=n.length,P.notifyListeners(F.location,F.action)}function A(e){(function(e){return void 0===e.state&&-1===navigator.userAgent.indexOf("CriOS")})(e)||T(O(e.state))}function N(){T(O(S()))}var j=!1;function T(e){if(j)j=!1,M();else{P.confirmTransitionTo(e,"POP",s,(function(t){t?M({action:"POP",location:e}):function(e){var t=F.location,n=R.indexOf(t.key);-1===n&&(n=0);var r=R.indexOf(e.key);-1===r&&(r=0);var o=n-r;o&&(j=!0,z(o))}(e)}))}}var D=O(S()),R=[D.key];function L(e){return k+g(e)}function z(e){n.go(e)}var I=0;function B(e){1===(I+=e)&&1===e?(window.addEventListener(_,A),o&&window.addEventListener(x,N)):0===I&&(window.removeEventListener(_,A),o&&window.removeEventListener(x,N))}var U=!1;var F={length:n.length,action:"POP",location:D,createHref:L,push:function(e,t){var o="PUSH",i=y(e,t,C(),F.location);P.confirmTransitionTo(i,o,s,(function(e){if(e){var t=L(i),a=i.key,u=i.state;if(r)if(n.pushState({key:a,state:u},null,t),l)window.location.href=t;else{var c=R.indexOf(F.location.key),s=R.slice(0,c+1);s.push(i.key),R=s,M({action:o,location:i})}else window.location.href=t}}))},replace:function(e,t){var o="REPLACE",i=y(e,t,C(),F.location);P.confirmTransitionTo(i,o,s,(function(e){if(e){var t=L(i),a=i.key,u=i.state;if(r)if(n.replaceState({key:a,state:u},null,t),l)window.location.replace(t);else{var c=R.indexOf(F.location.key);-1!==c&&(R[c]=i.key),M({action:o,location:i})}else window.location.replace(t)}}))},go:z,goBack:function(){z(-1)},goForward:function(){z(1)},block:function(e){void 0===e&&(e=!1);var t=P.setPrompt(e);return U||(B(1),U=!0),function(){return U&&(U=!1,B(-1)),t()}},listen:function(e){var t=P.appendListener(e);return B(1),function(){B(-1),t()}}};return F}var k="hashchange",O={hashbang:{encodePath:function(e){return"!"===e.charAt(0)?e:"!/"+p(e)},decodePath:function(e){return"!"===e.charAt(0)?e.substr(1):e}},noslash:{encodePath:p,decodePath:d},slash:{encodePath:d,decodePath:d}};function C(e){var t=e.indexOf("#");return-1===t?e:e.slice(0,t)}function P(){var e=window.location.href,t=e.indexOf("#");return-1===t?"":e.substring(t+1)}function M(e){window.location.replace(C(window.location.href)+"#"+e)}function A(e){void 0===e&&{},b||f(!1);var t=window.history,n=(window.navigator.userAgent.indexOf("Firefox"),e),r=n.getUserConfirmation,o=void 0===r?w:r,i=n.hashType,u=void 0===i?"slash":i,l=e.basename?v(d(e.basename)):"",c=O[u],s=c.encodePath,p=c.decodePath;function _(){var e=p(P());return l&&h(e,l),y(e)}var x=m();function S(e){(0,a.Z)(U,e),U.length=t.length,x.notifyListeners(U.location,U.action)}var E=!1,A=null;function N(){var e=P(),t=s(e);if(e!==t)M(t);else{var n=_(),r=U.location;if(!E&&function(e,t){return e.pathname===t.pathname&&e.search===t.search&&e.hash===t.hash}(r,n))return;if(A===g(n))return;null,function(e){if(E)!1,S();else{var t="POP";x.confirmTransitionTo(e,t,o,(function(n){n?S({action:t,location:e}):function(e){var t=U.location,n=R.lastIndexOf(g(t));-1===n&&0;var r=R.lastIndexOf(g(e));-1===r&&0;var o=n-r;o&&(!0,L(o))}(e)}))}}(n)}}var j=P(),T=s(j);j!==T&&M(T);var D=_(),R=[g(D)];function L(e){t.go(e)}var z=0;function I(e){1===(z+=e)&&1===e?window.addEventListener(k,N):0===z&&window.removeEventListener(k,N)}var B=!1;var U={length:t.length,action:"POP",location:D,createHref:function(e){var t=document.querySelector("base"),n="";return t&&t.getAttribute("href")&&C(window.location.href),n+"#"+s(l+g(e))},push:function(e,t){var n="PUSH",r=y(e,void 0,void 0,U.location);x.confirmTransitionTo(r,n,o,(function(e){if(e){var t=g(r),o=s(l+t);if(P()!==o){t,function(e){window.location.hash=e}(o);var i=R.lastIndexOf(g(U.location)),a=R.slice(0,i+1);a.push(t),a,S({action:n,location:r})}else S()}}))},replace:function(e,t){var n="REPLACE",r=y(e,void 0,void 0,U.location);x.confirmTransitionTo(r,n,o,(function(e){if(e){var t=g(r),o=s(l+t);P()!==o&&(t,M(o));var i=R.indexOf(g(U.location));-1!==i&&(R[i]=t),S({action:n,location:r})}}))},go:L,goBack:function(){L(-1)},goForward:function(){L(1)},block:function(e){void 0===e&&!1;var t=x.setPrompt(e);return B||(I(1),!0),function(){return B&&(!1,I(-1)),t()}},listen:function(e){var t=x.appendListener(e);return I(1),function(){I(-1),t()}}};return U}function N(e,t,n){return Math.min(Math.max(e,t),n)}function j(e){void 0===e&&{};var t=e,n=t.getUserConfirmation,r=t.initialEntries,o=void 0===r?["/"]:r,i=t.initialIndex,u=void 0===i?0:i,l=t.keyLength,c=void 0===l?6:l,s=m();function f(e){(0,a.Z)(w,e),w.length=w.entries.length,s.notifyListeners(w.location,w.action)}function d(){return Math.random().toString(36).substr(2,c)}var p=N(u,0,o.length-1),h=o.map((function(e){return y(e,void 0,"string"==typeof e?d():e.key||d())})),v=g;function b(e){var t=N(w.index+e,0,w.entries.length-1),r=w.entries[t];s.confirmTransitionTo(r,"POP",n,(function(e){e?f({action:"POP",location:r,index:t}):f()}))}var w={length:h.length,action:"POP",location:h[p],index:p,entries:h,createHref:v,push:function(e,t){var r="PUSH",o=y(e,t,d(),w.location);s.confirmTransitionTo(o,r,n,(function(e){if(e){var t=w.index+1,n=w.entries.slice(0);n.length>t?n.splice(t,n.length-t,o):n.push(o),f({action:r,location:o,index:t,entries:n})}}))},replace:function(e,t){var r="REPLACE",o=y(e,t,d(),w.location);s.confirmTransitionTo(o,r,n,(function(e){e&&(w.entries[w.index]=o,f({action:r,location:o}))}))},go:b,goBack:function(){b(-1)},goForward:function(){b(1)},canGo:function(e){var t=w.index+e;return t>=0&&t<w.entries.length},block:function(e){return void 0===e&&!1,s.setPrompt(e)},listen:function(e){return s.appendListener(e)}};return w}var T=1073741823,D="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:void 0!==n.g?n.g:{};function R(e){var t=[];return{on:function(e){t.push(e)},off:function(e){t=t.filter((function(t){return t!==e}))},get:function(){return e},set:function(n,r){e=n,t.forEach((function(t){return t(e,r)}))}}}var L=e.createContext||function(t,n){var o,a,u="__create-react-context-"+function(){var e="__global_unique_id__";return D[e]=(D[e]||0)+1}()+"__",l=function(e){function t(){var t;return(t=e.apply(this,arguments)||this).emitter=R(t.props.value),t}(0,r.Z)(t,e);var o=t.prototype;return o.getChildContext=function(){var e;return(e={})[u]=this.emitter,e},o.componentWillReceiveProps=function(e){if(this.props.value!==e.value){var t,r=this.props.value,o=e.value;!function(e,t){return e===t?0!==e||1/e==1/t:e!=e&&t!=t}(r,o)?(t="function"==typeof n?n(r,o):T,0!==(t|=0)&&this.emitter.set(e.value,t)):t=0}},o.render=function(){return this.props.children},t}(e.Component);l.childContextTypes=((o={})[u]=i().object.isRequired,o);var c=function(e){function n(){var t;return(t=e.apply(this,arguments)||this).state={value:t.getValue()},t.onUpdate=function(e,n){0!=((0|t.observedBits)&n)&&t.setState({value:t.getValue()})},t}(0,r.Z)(n,e);var o=n.prototype;return o.componentWillReceiveProps=function(e){var t=e.observedBits;this.observedBits=null==t?T:t},o.componentDidMount=function(){this.context[u]&&this.context[u].on(this.onUpdate);var e=this.props.observedBits;this.observedBits=null==e?T:e},o.componentWillUnmount=function(){this.context[u]&&this.context[u].off(this.onUpdate)},o.getValue=function(){return this.context[u]?this.context[u].get():t},o.render=function(){return function(e){return Array.isArray(e)?e[0]:e}(this.props.children)(this.state.value)},n}(e.Component);return c.contextTypes=((a={})[u]=i().object,a),{Provider:l,Consumer:c}};const z=L;var I=n(779),B=n.n(I),U=(n(663),n(756)),F=(n(679),function(e){var t=z();return t.displayName=e,t}),X=F("Router-History"),H=function(e){var t=z();return t.displayName=e,t},V=H("Router"),W=function(t){function n(e){var n;return(n=t.call(this,e)||this).state={location:e.history.location},n._isMounted=!1,n._pendingLocation=null,e.staticContext||(n.unlisten=e.history.listen((function(e){n._isMounted?n.setState({location:e}):n._pendingLocation=e}))),n}(0,r.Z)(n,t),n.computeRootMatch=function(e){return{path:"/",url:"/",params:{},isExact:"/"===e}};var o=n.prototype;return o.componentDidMount=function(){this._isMounted=!0,this._pendingLocation&&this.setState({location:this._pendingLocation})},o.componentWillUnmount=function(){this.unlisten&&this.unlisten()},o.render=function(){return e.createElement(V.Provider,{value:{history:this.props.history,location:this.state.location,match:n.computeRootMatch(this.state.location.pathname),staticContext:this.props.staticContext}},e.createElement(X.Provider,{children:this.props.children||null,value:this.props.history}))},n}(e.Component);e.Component;e.Component;var Y={},$=0;function Z(e,t){void 0===t&&(t={}),("string"==typeof t||Array.isArray(t))&&(t={path:t});var n=t,r=n.path,o=n.exact,i=void 0!==o&&o,a=n.strict,u=void 0!==a&&a,l=n.sensitive,c=void 0!==l&&l;return[].concat(r).reduce((function(t,n){if(!n&&""!==n)return null;if(t)return t;var r=function(e,t){var n=""+t.end+t.strict+t.sensitive,r=Y[n]||(Y[n]={});if(r[e])return r[e];var o=[],i={regexp:B()(e,o,t),keys:o};return $<1e4&&(r[e]=i,$++),i}(n,{end:i,strict:u,sensitive:c}),o=r.regexp,a=r.keys,l=o.exec(e);if(!l)return null;var s=l[0],f=l.slice(1),d=e===s;return i&&!d?null:{path:n,url:"/"===n&&""===s?"/":s,isExact:d,params:a.reduce((function(e,t,n){return e[t.name]=f[n],e}),{})}}),null)}e.Component;function q(e){return"/"===e.charAt(0)?e:"/"+e}function G(e,t){if(!e)return t;var n=q(e);return 0!==t.pathname.indexOf(n)?t:(0,a.Z)({},t,{pathname:t.pathname.substr(n.length)})}function K(e){return"string"==typeof e?e:g(e)}function Q(e){return function(){f(!1)}}function J(){}e.Component;e.Component;e.useContext;var ee=function(t){function n(){for(var e,n=arguments.length,r=new Array(n),o=0;o<n;o++)r[o]=arguments[o];return(e=t.call.apply(t,[this].concat(r))||this).history=E(e.props),e}return(0,r.Z)(n,t),n.prototype.render=function(){return e.createElement(W,{history:this.history,children:this.props.children})},n}(e.Component);e.Component;var te=function(e,t){return"function"==typeof e?e(t):e},ne=function(e,t){return"string"==typeof e?y(e,null,null,t):e},re=function(e){return e},oe=e.forwardRef;void 0===oe&&(oe=re);var ie=oe((function(t,n){var r=t.innerRef,o=t.navigate,i=t.onClick,u=(0,U.Z)(t,["innerRef","navigate","onClick"]),l=u.target,c=(0,a.Z)({},u,{onClick:function(e){try{i&&i(e)}catch(t){throw e.preventDefault(),t}e.defaultPrevented||0!==e.button||l&&"_self"!==l||function(e){return!!(e.metaKey||e.altKey||e.ctrlKey||e.shiftKey)}(e)||(e.preventDefault(),o())}});return c.ref=re!==oe&&n||r,e.createElement("a",c)}));var ae=oe((function(t,n){var r=t.component,o=void 0===r?ie:r,i=t.replace,u=t.to,l=t.innerRef,c=(0,U.Z)(t,["component","replace","to","innerRef"]);return e.createElement(V.Consumer,null,(function(t){t||f(!1);var r=t.history,s=ne(te(u,t.location),t.location),d=s?r.createHref(s):"",p=(0,a.Z)({},c,{href:d,navigate:function(){var e=te(u,t.location);(i?r.replace:r.push)(e)}});return re!==oe?p.ref=n||l:p.innerRef=l,e.createElement(o,p)}))})),ue=function(e){return e},le=e.forwardRef;void 0===le&&(le=ue);le((function(t,n){var r=t["aria-current"],o=void 0===r?"page":r,i=t.activeClassName,u=void 0===i?"active":i,l=t.activeStyle,c=t.className,s=t.exact,d=t.isActive,p=t.location,h=t.sensitive,v=t.strict,g=t.style,y=t.to,m=t.innerRef,b=(0,U.Z)(t,["aria-current","activeClassName","activeStyle","className","exact","isActive","location","sensitive","strict","style","to","innerRef"]);return e.createElement(V.Consumer,null,(function(t){t||f(!1);var r=p||t.location,i=ne(te(y,r),r),w=i.pathname,_=w&&w.replace(/([.+*?=^!:${}()[\]|/\\])/g,"\\$1"),x=_?Z(r.pathname,{path:_,exact:s,sensitive:h,strict:v}):null,S=!!(d?d(x,r):x),E=S?function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return t.filter((function(e){return e})).join(" ")}(c,u):c,k=S?(0,a.Z)({},g,{},l):g,O=(0,a.Z)({"aria-current":S&&o||null,className:E,style:k,to:i},b);return ue!==le?O.ref=n||m:O.innerRef=m,e.createElement(ae,O)}))}));var ce=n(420),se=n.n(ce),fe=n(81),de=(n(193),n(379)),pe=n.n(de),he=n(300),ve={insert:"head",singleton:!1};pe()(he.Z,ve);he.Z.locals;function ge(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function ye(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?ge(Object(n),!0).forEach((function(t){me(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):ge(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function me(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function be(e){return function(e){if(Array.isArray(e))return xe(e)}(e)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(e)||_e(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function we(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null==n)return;var r,o,i=[],a=!0,u=!1;try{for(n=n.call(e);!(a=(r=n.next()).done)&&(i.push(r.value),!t||i.length!==t);a=!0);}catch(e){u=!0,o=e}finally{try{a||null==n.return||n.return()}finally{if(u)throw o}}return i}(e,t)||_e(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function _e(e,t){if(e){if("string"==typeof e)return xe(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?xe(e,t):void 0}}function xe(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var Se={border:"1px #999 solid",borderRadius:"0px",textAlign:"center",width:"12.5rem",height:"30px",color:"black",alignItems:"center",display:"flex",justifyContent:"center"},Ee={width:"100%",height:"100vh",background:"white",overflow:"auto",display:"flex",color:"black",cursor:"pointer"},ke=[{id:"box1",expand:!1,name:"Table 1",xpos:"",ypos:"",child:[{id:"box5",left:!1,right:!1},{id:"box6",left:!1,right:!1},{id:"box7",left:!1,right:!1},{id:"box8",left:!1,right:!1}]},{id:"box2",expand:!1,name:"Table 2",xpos:200,ypos:"",child:[{id:"box9",left:!1,right:!1},{id:"box10",left:!1,right:!1},{id:"box11",left:!1,right:!1},{id:"box12",left:!1,right:!1}]}];const Oe=function(t){var n=t.updateXarrow,r=(0,e.useRef)(0),o=we((0,e.useState)(!1),2),i=o[0],a=o[1],u=we((0,e.useState)(ke),2),l=u[0],c=u[1],s=we((0,e.useState)(null),2),f=s[0],d=s[1],p=we((0,e.useState)({start:null,end:null,parentStart:null,parentEnd:null}),2),h=p[0],v=p[1],g=we((0,e.useState)([]),2),y=g[0],m=g[1],b=we((0,e.useState)([]),2),w=b[0],_=b[1],x=we((0,e.useState)({display:!1,sX:"0",sy:"0",lx:"",ly:"",style:{top:"",left:"",position:"absolute"}}),2),S=x[0],E=x[1],k=we((0,e.useState)(),2),O=(k[0],k[1],we((0,e.useState)({x:"",y:""}),2)),C=(O[0],O[1]),P=function(e,t,n,r){e.stopPropagation(),h.start&&h.start!==t&&"end"===r?(v(ye(ye({},h),{},{end:t,parentEnd:n})),_([].concat(be(w),[{start:h.start,end:t,parentStart:h.parentStart,parentEnd:n,position:S}])),y.some((function(e){return e.end===n}))||m([].concat(be(y),[{start:h.parentStart,end:n}])),v({start:null,end:null,parentStart:null,parentEnd:null})):(v({start:null,end:null,parentStart:null,parentEnd:null}),v(ye(ye({},h),{},{start:t,parentStart:n})))};(0,e.useEffect)((function(){}),[w]);var M=function(e,t,n,r){e.preventDefault(),e.stopPropagation();var o=e.target,i=o.getBoundingClientRect().left+o.getBoundingClientRect().width/2,a=o.getBoundingClientRect().top+o.getBoundingClientRect().height/2;o.getBoundingClientRect().top,window.scrollY,o.getBoundingClientRect().left,window.scrollX;P(e,t,n,r),E(ye(ye({},S),{},{display:!0,sX:e.pageX,sy:e.pageY,lX:e.pageX,ly:e.pageY,style:{position:"absolute",top:o.getBoundingClientRect().top,left:o.getBoundingClientRect().left}})),document.onmousemove=function(t){Math.atan2(t.pageX-i,-(t.pageY-a)),Math.PI;var n,r,o,u,l=t.target.getBoundingClientRect();E(ye(ye({},S),{},{display:!0,lx:Math.abs(t.pageX-e.pageX),ly:Math.abs(t.pageY-e.pageY),style:{position:"absolute",top:Math.abs(e.pageY+l.top-2),left:Math.abs(e.pageX),width:Math.abs(t.pageX-e.pageX),height:Math.abs(t.pageY-e.pageY),transformOrigin:"0% 0%",transform:(n=t.pageX,r=e.pageX,o=t.pageY,u=e.pageY,n-r>1&&o-u>1?"rotateX(0deg)":n-r<1&&o-u>1?"rotateY(180deg)":n-r>1&&o-u<1?"rotateX(180deg)":n-r<1&&o-u<1?"rotate(180deg)":void 0)}}))},document.onmouseup=A},A=function(e){document.onmousemove=null,document.onMouseDown=null},N=function(e,t,n,r){P(e,t,n,r),A(e)};return e.createElement(e.Fragment,null,e.createElement("div",{style:Ee,id:"canvas",onScroll:function(){n()}},S.display&&e.createElement("svg",{style:S.style},e.createElement("path",{className:"line",fill:"none",d:"M".concat(S.sX,",").concat(S.sy," \n                 h").concat(S.lx/2," \n                 v").concat(S.ly," \n                 h").concat(S.lx/2)})),w.map((function(e){e.position.style,"M".concat(e.position.sX,",").concat(e.position.sy," \n                 h").concat(e.position.lx/2," \n                 v").concat(e.position.ly," \n                 h").concat(e.position.lx/2)})),l.map((function(t){return e.createElement("div",{className:"container-side",id:t.id,draggable:!0,key:t.id,onDrag:function(e){return function(e,t){C({x:e.pageX-50,y:e.pageY-50}),c(be(l.map((function(n){return n.id===t&&(n.xpos=e.pageX-50,n.ypos=e.pageY-50),n}))))}(e,t.id)},onDragEnd:function(e){return function(e,t){C({x:e.pageX-50,y:e.pageY-50}),c(be(l.map((function(n){return n.id===t&&(n.xpos=e.pageX-50,n.ypos=e.pageY-50),n}))))}(e,t.id)},style:{position:"absolute",left:t.xpos,top:t.ypos}},e.createElement("h3",{className:"handle"},t.name),e.createElement("input",{onChange:function(e){return t=e.target.value,d(t),void r.current.clear();var t},placeholder:"Input id ..."}),e.createElement("input",{onChange:function(e){return t=e.target.value,n=t.split(","),void(f&&c(be(l.map((function(e){return e.child.map((function(e){f===e.id&&(n.includes("left")&&(e.left=!0),n.includes("right")&&(e.right=!0))})),e})))));var t,n},ref:r,placeholder:"Input anchors ..."}),e.createElement("button",{onClick:function(){return function(e){c(be(l.map((function(t){return t.id===e&&(t.expand=!t.expand),t})))),n(),document.onclick=function(){n()},a(!i)}(t.id)}},"Expand"),t.expand&&t.child.map((function(n){return e.createElement(e.Fragment,null,e.createElement("div",null,e.createElement("div",null,e.createElement("div",{style:{display:"flex",justifyContent:"center",alignItems:"center"}},e.createElement("i",{className:"fa fa-plus",onMouseDown:function(e){return M(e,n.id,t.id,"start")},onMouseUp:function(e){return N(e,n.id,t.id,"end")}}),e.createElement("div",{id:n.id,style:ye({},Se)},n.id),e.createElement("i",{className:"fa fa-plus",onMouseDown:function(e){return M(e,n.id,t.id,"start")},onMouseUp:function(e){return N(e,n.id,t.id,"end")}})))))})))})),y.length&&y.map((function(t){return e.createElement(se(),{path:"grid",strokeWidth:.5,zIndex:1e3,headSize:16,color:"black",start:t.start,end:t.end,labels:e.createElement(fe.Z,null),startAnchor:"auto",endAnchor:"auto"})}))))};function Ce(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function Pe(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}function Me(e){if("string"==typeof e||"number"==typeof e)return""+e;let t="";if(Array.isArray(e))for(let n,r=0;r<e.length;r++)""!==(n=Me(e[r]))&&(t+=(t&&" ")+n);else for(let n in e)e[n]&&(t+=(t&&" ")+n);return t}function Ae(e){return"Minified Redux error #"+e+"; visit https://redux.js.org/Errors?code="+e+" for the full message or use the non-minified dev environment for full errors. "}var Ne="function"==typeof Symbol&&Symbol.observable||"@@observable",je=function(){return Math.random().toString(36).substring(7).split("").join(".")},Te={INIT:"@@redux/INIT"+je(),REPLACE:"@@redux/REPLACE"+je(),PROBE_UNKNOWN_ACTION:function(){return"@@redux/PROBE_UNKNOWN_ACTION"+je()}};function De(e){if("object"!=typeof e||null===e)return!1;for(var t=e;null!==Object.getPrototypeOf(t);)t=Object.getPrototypeOf(t);return Object.getPrototypeOf(e)===t}function Re(e,t,n){var r;if("function"==typeof t&&"function"==typeof n||"function"==typeof n&&"function"==typeof arguments[3])throw new Error(Ae(0));if("function"==typeof t&&void 0===n&&(n=t,t=void 0),void 0!==n){if("function"!=typeof n)throw new Error(Ae(1));return n(Re)(e,t)}if("function"!=typeof e)throw new Error(Ae(2));var o=e,i=t,a=[],u=a,l=!1;function c(){u===a&&(u=a.slice())}function s(){if(l)throw new Error(Ae(3));return i}function f(e){if("function"!=typeof e)throw new Error(Ae(4));if(l)throw new Error(Ae(5));var t=!0;return c(),u.push(e),function(){if(t){if(l)throw new Error(Ae(6));t=!1,c();var n=u.indexOf(e);u.splice(n,1),a=null}}}function d(e){if(!De(e))throw new Error(Ae(7));if(void 0===e.type)throw new Error(Ae(8));if(l)throw new Error(Ae(9));try{l=!0,i=o(i,e)}finally{l=!1}for(var t=a=u,n=0;n<t.length;n++){(0,t[n])()}return e}function p(e){if("function"!=typeof e)throw new Error(Ae(10));o=e,d({type:Te.REPLACE})}function h(){var e,t=f;return(e={subscribe:function(e){if("object"!=typeof e||null===e)throw new Error(Ae(11));function n(){e.next&&e.next(s())}return n(),{unsubscribe:t(n)}}})[Ne]=function(){return this},e}return d({type:Te.INIT}),(r={dispatch:d,subscribe:f,getState:s,replaceReducer:p})[Ne]=h,r}function Le(e,t){return function(){return t(e.apply(this,arguments))}}function ze(e,t){if("function"==typeof e)return Le(e,t);if("object"!=typeof e||null===e)throw new Error(Ae(16));var n={};for(var r in e){var o=e[r];"function"==typeof o&&(n[r]=Le(o,t))}return n}var Ie={exports:{}},Be={exports:{}},Ue={},Fe="function"==typeof Symbol&&Symbol.for,Xe=Fe?Symbol.for("react.element"):60103,He=Fe?Symbol.for("react.portal"):60106,Ve=Fe?Symbol.for("react.fragment"):60107,We=Fe?Symbol.for("react.strict_mode"):60108,Ye=Fe?Symbol.for("react.profiler"):60114,$e=Fe?Symbol.for("react.provider"):60109,Ze=Fe?Symbol.for("react.context"):60110,qe=Fe?Symbol.for("react.async_mode"):60111,Ge=Fe?Symbol.for("react.concurrent_mode"):60111,Ke=Fe?Symbol.for("react.forward_ref"):60112,Qe=Fe?Symbol.for("react.suspense"):60113,Je=Fe?Symbol.for("react.suspense_list"):60120,et=Fe?Symbol.for("react.memo"):60115,tt=Fe?Symbol.for("react.lazy"):60116,nt=Fe?Symbol.for("react.block"):60121,rt=Fe?Symbol.for("react.fundamental"):60117,ot=Fe?Symbol.for("react.responder"):60118,it=Fe?Symbol.for("react.scope"):60119;function at(e){if("object"==typeof e&&null!==e){var t=e.$$typeof;switch(t){case Xe:switch(e=e.type){case qe:case Ge:case Ve:case Ye:case We:case Qe:return e;default:switch(e=e&&e.$$typeof){case Ze:case Ke:case tt:case et:case $e:return e;default:return t}}case He:return t}}}function ut(e){return at(e)===Ge}Ue.AsyncMode=qe,Ue.ConcurrentMode=Ge,Ue.ContextConsumer=Ze,Ue.ContextProvider=$e,Ue.Element=Xe,Ue.ForwardRef=Ke,Ue.Fragment=Ve,Ue.Lazy=tt,Ue.Memo=et,Ue.Portal=He,Ue.Profiler=Ye,Ue.StrictMode=We,Ue.Suspense=Qe,Ue.isAsyncMode=function(e){return ut(e)||at(e)===qe},Ue.isConcurrentMode=ut,Ue.isContextConsumer=function(e){return at(e)===Ze},Ue.isContextProvider=function(e){return at(e)===$e},Ue.isElement=function(e){return"object"==typeof e&&null!==e&&e.$$typeof===Xe},Ue.isForwardRef=function(e){return at(e)===Ke},Ue.isFragment=function(e){return at(e)===Ve},Ue.isLazy=function(e){return at(e)===tt},Ue.isMemo=function(e){return at(e)===et},Ue.isPortal=function(e){return at(e)===He},Ue.isProfiler=function(e){return at(e)===Ye},Ue.isStrictMode=function(e){return at(e)===We},Ue.isSuspense=function(e){return at(e)===Qe},Ue.isValidElementType=function(e){return"string"==typeof e||"function"==typeof e||e===Ve||e===Ge||e===Ye||e===We||e===Qe||e===Je||"object"==typeof e&&null!==e&&(e.$$typeof===tt||e.$$typeof===et||e.$$typeof===$e||e.$$typeof===Ze||e.$$typeof===Ke||e.$$typeof===rt||e.$$typeof===ot||e.$$typeof===it||e.$$typeof===nt)},Ue.typeOf=at,Be.exports=Ue;var lt=Object.getOwnPropertySymbols,ct=Object.prototype.hasOwnProperty,st=Object.prototype.propertyIsEnumerable;function ft(e){if(null==e)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(e)}(function(){try{if(!Object.assign)return!1;var e=new String("abc");if(e[5]="de","5"===Object.getOwnPropertyNames(e)[0])return!1;for(var t={},n=0;n<10;n++)t["_"+String.fromCharCode(n)]=n;var r=Object.getOwnPropertyNames(t).map((function(e){return t[e]}));if("0123456789"!==r.join(""))return!1;var o={};return"abcdefghijklmnopqrst".split("").forEach((function(e){o[e]=e})),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},o)).join("")}catch(e){return!1}})()&&Object.assign;function dt(e,t,n,r,o){}dt.resetWarningCache=function(){0};Be.exports,Function.call.bind(Object.prototype.hasOwnProperty);function pt(){}function ht(){}ht.resetWarningCache=pt;Ie.exports=function(){function e(e,t,n,r,o,i){if("SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"!==i){var a=new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types");throw a.name="Invariant Violation",a}}function t(){return e}e.isRequired=e;var n={array:e,bool:e,func:e,number:e,object:e,string:e,symbol:e,any:e,arrayOf:t,element:e,elementType:e,instanceOf:t,node:e,objectOf:t,oneOf:t,oneOfType:t,shape:t,exact:t,checkPropTypes:ht,resetWarningCache:pt};return n.PropTypes=n,n}();Ie.exports;var vt=e.createContext(null);var gt=function(e){e()},yt=function(){return gt},mt={notify:function(){}};var bt=function(){function e(e,t){this.store=e,this.parentSub=t,this.unsubscribe=null,this.listeners=mt,this.handleChangeWrapper=this.handleChangeWrapper.bind(this)}var t=e.prototype;return t.addNestedSub=function(e){return this.trySubscribe(),this.listeners.subscribe(e)},t.notifyNestedSubs=function(){this.listeners.notify()},t.handleChangeWrapper=function(){this.onStateChange&&this.onStateChange()},t.isSubscribed=function(){return Boolean(this.unsubscribe)},t.trySubscribe=function(){this.unsubscribe||(this.unsubscribe=this.parentSub?this.parentSub.addNestedSub(this.handleChangeWrapper):this.store.subscribe(this.handleChangeWrapper),this.listeners=function(){var e=yt(),t=null,n=null;return{clear:function(){t=null,n=null},notify:function(){e((function(){for(var e=t;e;)e.callback(),e=e.next}))},get:function(){for(var e=[],n=t;n;)e.push(n),n=n.next;return e},subscribe:function(e){var r=!0,o=n={callback:e,next:null,prev:n};return o.prev?o.prev.next=o:t=o,function(){r&&null!==t&&(r=!1,o.next?o.next.prev=o.prev:n=o.prev,o.prev?o.prev.next=o.next:t=o.next)}}}}())},t.tryUnsubscribe=function(){this.unsubscribe&&(this.unsubscribe(),this.unsubscribe=null,this.listeners.clear(),this.listeners=mt)},e}(),wt="undefined"!=typeof window&&void 0!==window.document&&void 0!==window.document.createElement?e.useLayoutEffect:e.useEffect;function _t(t){var n=t.store,r=t.context,o=t.children,i=(0,e.useMemo)((function(){var e=new bt(n);return e.onStateChange=e.notifyNestedSubs,{store:n,subscription:e}}),[n]),a=(0,e.useMemo)((function(){return n.getState()}),[n]);wt((function(){var e=i.subscription;return e.trySubscribe(),a!==n.getState()&&e.notifyNestedSubs(),function(){e.tryUnsubscribe(),e.onStateChange=null}}),[i,a]);var u=r||vt;return e.createElement(u.Provider,{value:i},o)}var xt=Be.exports,St={};function Et(){return(0,e.useContext)(vt)}function kt(t){void 0===t&&(t=vt);var n=t===vt?Et:function(){return(0,e.useContext)(t)};return function(){return n().store}}St[xt.ForwardRef]={$$typeof:!0,render:!0,defaultProps:!0,displayName:!0,propTypes:!0},St[xt.Memo]={$$typeof:!0,compare:!0,defaultProps:!0,displayName:!0,propTypes:!0,type:!0};var Ot=kt();function Ct(e){void 0===e&&(e=vt);var t=e===vt?Ot:kt(e);return function(){return t().dispatch}}var Pt=Ct(),Mt=function(e,t){return e===t};function At(t){void 0===t&&(t=vt);var n=t===vt?Et:function(){return(0,e.useContext)(t)};return function(t,r){void 0===r&&(r=Mt);var o=n(),i=function(t,n,r,o){var i,a=(0,e.useReducer)((function(e){return e+1}),0)[1],u=(0,e.useMemo)((function(){return new bt(r,o)}),[r,o]),l=(0,e.useRef)(),c=(0,e.useRef)(),s=(0,e.useRef)(),f=(0,e.useRef)(),d=r.getState();try{if(t!==c.current||d!==s.current||l.current){var p=t(d);i=void 0!==f.current&&n(p,f.current)?f.current:p}else i=f.current}catch(e){throw l.current&&(e.message+="\nThe error may be correlated with this previous error:\n"+l.current.stack+"\n\n"),e}return wt((function(){c.current=t,s.current=d,f.current=i,l.current=void 0})),wt((function(){function e(){try{var e=r.getState(),t=c.current(e);if(n(t,f.current))return;f.current=t,s.current=e}catch(e){l.current=e}a()}return u.onStateChange=e,u.trySubscribe(),e(),function(){return u.tryUnsubscribe()}}),[r,u]),i}(t,r,o.store,o.subscription);return(0,e.useDebugValue)(i),i}}var Nt,jt=At();function Tt(e,t){return{type:e,payload:t}}Nt=t.unstable_batchedUpdates,gt=Nt;var Dt="SET_ON_CONNECT",Rt="SET_ON_CONNECT_START",Lt="SET_ON_CONNECT_STOP",zt="SET_ON_CONNECT_END",It="SET_ELEMENTS",Bt="UPDATE_NODE_DIMENSIONS",Ut="UPDATE_NODE_POS",Ft="UPDATE_NODE_POS_DIFF",Xt="SET_USER_SELECTION",Ht="UPDATE_USER_SELECTION",Vt="UNSET_USER_SELECTION",Wt="UNSET_NODES_SELECTION",Yt="SET_SELECTED_ELEMENTS",$t="RESET_SELECTED_ELEMENTS",Zt="ADD_SELECTED_ELEMENTS",qt="UPDATE_TRANSFORM",Gt="UPDATE_SIZE",Kt="INIT_D3ZOOM",Qt="SET_MINZOOM",Jt="SET_MAXZOOM",en="SET_TRANSLATEEXTENT",tn="SET_CONNECTION_POSITION",nn="SET_CONNECTION_NODEID",rn="SET_SNAPTOGRID",on="SET_SNAPGRID",an="SET_INTERACTIVE",un="SET_NODES_DRAGGABLE",ln="SET_NODES_CONNECTABLE",cn="SET_ELEMENTS_SELECTABLE",sn="SET_MULTI_SELECTION_ACTIVE",fn="SET_CONNECTION_MODE",dn="SET_NODE_EXTENT",pn=Object.freeze({__proto__:null,setOnConnect:function(e){return Tt(Dt,{onConnect:e})},setOnConnectStart:function(e){return Tt(Rt,{onConnectStart:e})},setOnConnectStop:function(e){return Tt(Lt,{onConnectStop:e})},setOnConnectEnd:function(e){return Tt(zt,{onConnectEnd:e})},setElements:function(e){return Tt(It,e)},updateNodeDimensions:function(e){return Tt(Bt,e)},updateNodePos:function(e){return Tt(Ut,e)},updateNodePosDiff:function(e){return Tt(Ft,e)},setUserSelection:function(e){return Tt(Xt,e)},updateUserSelection:function(e){return Tt(Ht,e)},unsetUserSelection:function(){return Tt(Vt)},setSelection:function(e){return Tt("SET_SELECTION",{selectionActive:e})},unsetNodesSelection:function(){return Tt(Wt,{nodesSelectionActive:!1})},resetSelectedElements:function(){return Tt($t,{selectedElements:null})},setSelectedElements:function(e){return Tt(Yt,e)},addSelectedElements:function(e){return Tt(Zt,e)},updateTransform:function(e){return Tt(qt,{transform:e})},updateSize:function(e){return Tt(Gt,{width:e.width||500,height:e.height||500})},initD3Zoom:function(e){return Tt(Kt,e)},setMinZoom:function(e){return Tt(Qt,e)},setMaxZoom:function(e){return Tt(Jt,e)},setTranslateExtent:function(e){return Tt(en,e)},setConnectionPosition:function(e){return Tt(tn,{connectionPosition:e})},setConnectionNodeId:function(e){return Tt(nn,e)},setSnapToGrid:function(e){return Tt(rn,{snapToGrid:e})},setSnapGrid:function(e){return Tt(on,{snapGrid:e})},setInteractive:function(e){return Tt(an,{nodesDraggable:e,nodesConnectable:e,elementsSelectable:e})},setNodesDraggable:function(e){return Tt(un,{nodesDraggable:e})},setNodesConnectable:function(e){return Tt(ln,{nodesConnectable:e})},setElementsSelectable:function(e){return Tt(cn,{elementsSelectable:e})},setMultiSelectionActive:function(e){return Tt(sn,{multiSelectionActive:e})},setConnectionMode:function(e){return Tt(fn,{connectionMode:e})},setNodeExtent:function(e){return Tt(dn,e)}});function hn(t){var n=Pt(),r=t(pn);return(0,e.useMemo)((function(){return ze(r,n)}),[n,r])}var vn=jt,gn=function(){return Ot()};function yn(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function mn(e,t){if(e){if("string"==typeof e)return yn(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?yn(e,t):void 0}}function bn(e){return function(e){if(Array.isArray(e))return yn(e)}(e)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(e)||mn(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function wn(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,i=[],a=!0,u=!1;try{for(n=n.call(e);!(a=(r=n.next()).done)&&(i.push(r.value),!t||i.length!==t);a=!0);}catch(e){u=!0,o=e}finally{try{a||null==n.return||n.return()}finally{if(u)throw o}}return i}}(e,t)||mn(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}var _n=function(e){var t=null==e?void 0:e.target;return["INPUT","SELECT","TEXTAREA","BUTTON"].includes(null==t?void 0:t.nodeName)||(null==t?void 0:t.hasAttribute("contenteditable"))},xn=function(e){return{width:e.offsetWidth,height:e.offsetHeight}},Sn=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:1;return Math.min(Math.max(e,t),n)},En=function(e,t){return{x:Sn(e.x,t[0][0],t[1][0]),y:Sn(e.y,t[0][1],t[1][1])}},kn=function(t){var n=wn((0,e.useState)(!1),2),r=n[0],o=n[1];return(0,e.useEffect)((function(){if(void 0!==t){var e=function(e){_n(e)||e.key!==t&&e.keyCode!==t||(e.preventDefault(),o(!0))},n=function(e){_n(e)||e.key!==t&&e.keyCode!==t||o(!1)},r=function(){return o(!1)};return window.addEventListener("keydown",e),window.addEventListener("keyup",n),window.addEventListener("blur",r),function(){window.removeEventListener("keydown",e),window.removeEventListener("keyup",n),window.removeEventListener("blur",r)}}}),[t,o]),r};function On(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Cn(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?On(Object(n),!0).forEach((function(t){Ce(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):On(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var Pn=function(e){return"id"in e&&"source"in e&&"target"in e},Mn=function(e){return"id"in e&&!("source"in e)&&!("target"in e)},An=function(e,t,n,r){var o=e.x,i=e.y,a=wn(t,3),u=a[0],l=a[1],c=a[2],s=wn(r,2),f=s[0],d=s[1],p={x:(o-u)/c,y:(i-l)/c};return n?{x:f*Math.round(p.x/f),y:d*Math.round(p.y/d)}:p},Nn=function(e){return function(t){var n=e.getState(),r=n.transform,o=n.snapToGrid,i=n.snapGrid;return An(t,r,o,i)}},jn=function(e,t){return Cn(Cn({},e),{},{id:e.id.toString(),type:e.type||"default",__rf:{position:En(e.position,t),width:null,height:null,handleBounds:{},isDragging:!1}})},Tn=function(e){return Cn(Cn({},e),{},{source:e.source.toString(),target:e.target.toString(),sourceHandle:e.sourceHandle?e.sourceHandle.toString():null,targetHandle:e.targetHandle?e.targetHandle.toString():null,id:e.id.toString(),type:e.type||"default"})},Dn=function(e,t){return{x:Math.min(e.x,t.x),y:Math.min(e.y,t.y),x2:Math.max(e.x2,t.x2),y2:Math.max(e.y2,t.y2)}},Rn=function(e){var t=e.x,n=e.y;return{x:t,y:n,x2:t+e.width,y2:n+e.height}},Ln=function(e){var t=e.x,n=e.y;return{x:t,y:n,width:e.x2-t,height:e.y2-n}},zn=function(e){var t=e.reduce((function(e,t){var n=t.__rf,r=(n=void 0===n?{}:n).position,o=n.width,i=n.height;return Dn(e,Rn(Cn(Cn({},r),{},{width:o,height:i})))}),{x:1/0,y:1/0,x2:-1/0,y2:-1/0});return Ln(t)},In=function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:[0,0,1],r=wn(n,3),o=r[0],i=r[1],a=r[2],u=arguments.length>3&&void 0!==arguments[3]&&arguments[3],l=Rn({x:(t.x-o)/a,y:(t.y-i)/a,width:t.width/a,height:t.height/a});return e.filter((function(e){var t=e.__rf,n=t.position,r=t.width,o=t.height,i=t.isDragging,a=Rn(Cn(Cn({},n),{},{width:r,height:o})),c=Math.max(0,Math.min(l.x2,a.x2)-Math.max(l.x,a.x)),s=Math.max(0,Math.min(l.y2,a.y2)-Math.max(l.y,a.y)),f=Math.ceil(c*s);return!(null!==r&&null!==o&&!i)||(u?f>0:f>=r*o)}))},Bn=function(e,t){var n=e.map((function(e){return e.id}));return t.filter((function(e){return n.includes(e.source)||n.includes(e.target)}))},Un=function(e,t){return[].concat(bn(e.map((function(e){var t=Cn({},e);return t.position=t.__rf.position,delete t.__rf,t}))),bn(t.map((function(e){return Cn({},e)}))))},Fn=function(e){return function(){var t=e.getState(),n=t.nodes,r=void 0===n?[]:n,o=t.edges;return Un(r,void 0===o?[]:o)}},Xn=function(e){return function(){var t=e.getState(),n=t.nodes,r=void 0===n?[]:n,o=t.edges,i=void 0===o?[]:o,a=t.transform;return{elements:Un(r,i),position:[a[0],a[1]],zoom:a[2]}}},Hn=function(e,t,n,r,o){var i=arguments.length>5&&void 0!==arguments[5]?arguments[5]:.1,a=t/(e.width*(1+i)),u=n/(e.height*(1+i)),l=Math.min(a,u),c=Sn(l,r,o),s=e.x+e.width/2,f=e.y+e.height/2,d=t/2-s*c,p=n/2-f*c;return[d,p,c]},Vn={value:()=>{}};function Wn(){for(var e,t=0,n=arguments.length,r={};t<n;++t){if(!(e=arguments[t]+"")||e in r||/[\s.]/.test(e))throw new Error("illegal type: "+e);r[e]=[]}return new Yn(r)}function Yn(e){this._=e}function $n(e,t){return e.trim().split(/^|\s+/).map((function(e){var n="",r=e.indexOf(".");if(r>=0&&(n=e.slice(r+1),e=e.slice(0,r)),e&&!t.hasOwnProperty(e))throw new Error("unknown type: "+e);return{type:e,name:n}}))}function Zn(e,t){for(var n,r=0,o=e.length;r<o;++r)if((n=e[r]).name===t)return n.value}function qn(e,t,n){for(var r=0,o=e.length;r<o;++r)if(e[r].name===t){e[r]=Vn,e=e.slice(0,r).concat(e.slice(r+1));break}return null!=n&&e.push({name:t,value:n}),e}Yn.prototype=Wn.prototype={constructor:Yn,on:function(e,t){var n,r=this._,o=$n(e+"",r),i=-1,a=o.length;if(!(arguments.length<2)){if(null!=t&&"function"!=typeof t)throw new Error("invalid callback: "+t);for(;++i<a;)if(n=(e=o[i]).type)r[n]=qn(r[n],e.name,t);else if(null==t)for(n in r)r[n]=qn(r[n],e.name,null);return this}for(;++i<a;)if((n=(e=o[i]).type)&&(n=Zn(r[n],e.name)))return n},copy:function(){var e={},t=this._;for(var n in t)e[n]=t[n].slice();return new Yn(e)},call:function(e,t){if((n=arguments.length-2)>0)for(var n,r,o=new Array(n),i=0;i<n;++i)o[i]=arguments[i+2];if(!this._.hasOwnProperty(e))throw new Error("unknown type: "+e);for(i=0,n=(r=this._[e]).length;i<n;++i)r[i].value.apply(t,o)},apply:function(e,t,n){if(!this._.hasOwnProperty(e))throw new Error("unknown type: "+e);for(var r=this._[e],o=0,i=r.length;o<i;++o)r[o].value.apply(t,n)}};var Gn="http://www.w3.org/1999/xhtml",Kn={svg:"http://www.w3.org/2000/svg",xhtml:Gn,xlink:"http://www.w3.org/1999/xlink",xml:"http://www.w3.org/XML/1998/namespace",xmlns:"http://www.w3.org/2000/xmlns/"};function Qn(e){var t=e+="",n=t.indexOf(":");return n>=0&&"xmlns"!==(t=e.slice(0,n))&&(e=e.slice(n+1)),Kn.hasOwnProperty(t)?{space:Kn[t],local:e}:e}function Jn(e){return function(){var t=this.ownerDocument,n=this.namespaceURI;return n===Gn&&t.documentElement.namespaceURI===Gn?t.createElement(e):t.createElementNS(n,e)}}function er(e){return function(){return this.ownerDocument.createElementNS(e.space,e.local)}}function tr(e){var t=Qn(e);return(t.local?er:Jn)(t)}function nr(){}function rr(e){return null==e?nr:function(){return this.querySelector(e)}}function or(e){return"object"==typeof e&&"length"in e?e:Array.from(e)}function ir(){return[]}function ar(e){return function(t){return t.matches(e)}}var ur=Array.prototype.find;function lr(){return this.firstElementChild}var cr=Array.prototype.filter;function sr(){return this.children}function fr(e){return new Array(e.length)}function dr(e,t){this.ownerDocument=e.ownerDocument,this.namespaceURI=e.namespaceURI,this._next=null,this._parent=e,this.__data__=t}function pr(e){return function(){return e}}function hr(e,t,n,r,o,i){for(var a,u=0,l=t.length,c=i.length;u<c;++u)(a=t[u])?(a.__data__=i[u],r[u]=a):n[u]=new dr(e,i[u]);for(;u<l;++u)(a=t[u])&&(o[u]=a)}function vr(e,t,n,r,o,i,a){var u,l,c,s=new Map,f=t.length,d=i.length,p=new Array(f);for(u=0;u<f;++u)(l=t[u])&&(p[u]=c=a.call(l,l.__data__,u,t)+"",s.has(c)?o[u]=l:s.set(c,l));for(u=0;u<d;++u)c=a.call(e,i[u],u,i)+"",(l=s.get(c))?(r[u]=l,l.__data__=i[u],s.delete(c)):n[u]=new dr(e,i[u]);for(u=0;u<f;++u)(l=t[u])&&s.get(p[u])===l&&(o[u]=l)}function gr(e){return e.__data__}function yr(e,t){return e<t?-1:e>t?1:e>=t?0:NaN}function mr(e){return function(){this.removeAttribute(e)}}function br(e){return function(){this.removeAttributeNS(e.space,e.local)}}function wr(e,t){return function(){this.setAttribute(e,t)}}function _r(e,t){return function(){this.setAttributeNS(e.space,e.local,t)}}function xr(e,t){return function(){var n=t.apply(this,arguments);null==n?this.removeAttribute(e):this.setAttribute(e,n)}}function Sr(e,t){return function(){var n=t.apply(this,arguments);null==n?this.removeAttributeNS(e.space,e.local):this.setAttributeNS(e.space,e.local,n)}}function Er(e){return e.ownerDocument&&e.ownerDocument.defaultView||e.document&&e||e.defaultView}function kr(e){return function(){this.style.removeProperty(e)}}function Or(e,t,n){return function(){this.style.setProperty(e,t,n)}}function Cr(e,t,n){return function(){var r=t.apply(this,arguments);null==r?this.style.removeProperty(e):this.style.setProperty(e,r,n)}}function Pr(e,t){return e.style.getPropertyValue(t)||Er(e).getComputedStyle(e,null).getPropertyValue(t)}function Mr(e){return function(){delete this[e]}}function Ar(e,t){return function(){this[e]=t}}function Nr(e,t){return function(){var n=t.apply(this,arguments);null==n?delete this[e]:this[e]=n}}function jr(e){return e.trim().split(/^|\s+/)}function Tr(e){return e.classList||new Dr(e)}function Dr(e){this._node=e,this._names=jr(e.getAttribute("class")||"")}function Rr(e,t){for(var n=Tr(e),r=-1,o=t.length;++r<o;)n.add(t[r])}function Lr(e,t){for(var n=Tr(e),r=-1,o=t.length;++r<o;)n.remove(t[r])}function zr(e){return function(){Rr(this,e)}}function Ir(e){return function(){Lr(this,e)}}function Br(e,t){return function(){(t.apply(this,arguments)?Rr:Lr)(this,e)}}function Ur(){this.textContent=""}function Fr(e){return function(){this.textContent=e}}function Xr(e){return function(){var t=e.apply(this,arguments);this.textContent=null==t?"":t}}function Hr(){this.innerHTML=""}function Vr(e){return function(){this.innerHTML=e}}function Wr(e){return function(){var t=e.apply(this,arguments);this.innerHTML=null==t?"":t}}function Yr(){this.nextSibling&&this.parentNode.appendChild(this)}function $r(){this.previousSibling&&this.parentNode.insertBefore(this,this.parentNode.firstChild)}function Zr(){return null}function qr(){var e=this.parentNode;e&&e.removeChild(this)}function Gr(){var e=this.cloneNode(!1),t=this.parentNode;return t?t.insertBefore(e,this.nextSibling):e}function Kr(){var e=this.cloneNode(!0),t=this.parentNode;return t?t.insertBefore(e,this.nextSibling):e}function Qr(e){return e.trim().split(/^|\s+/).map((function(e){var t="",n=e.indexOf(".");return n>=0&&(t=e.slice(n+1),e=e.slice(0,n)),{type:e,name:t}}))}function Jr(e){return function(){var t=this.__on;if(t){for(var n,r=0,o=-1,i=t.length;r<i;++r)n=t[r],e.type&&n.type!==e.type||n.name!==e.name?t[++o]=n:this.removeEventListener(n.type,n.listener,n.options);++o?t.length=o:delete this.__on}}}function eo(e,t,n){return function(){var r,o=this.__on,i=function(e){return function(t){e.call(this,t,this.__data__)}}(t);if(o)for(var a=0,u=o.length;a<u;++a)if((r=o[a]).type===e.type&&r.name===e.name)return this.removeEventListener(r.type,r.listener,r.options),this.addEventListener(r.type,r.listener=i,r.options=n),void(r.value=t);this.addEventListener(e.type,i,n),r={type:e.type,name:e.name,value:t,listener:i,options:n},o?o.push(r):this.__on=[r]}}function to(e,t,n){var r=Er(e),o=r.CustomEvent;"function"==typeof o?o=new o(t,n):(o=r.document.createEvent("Event"),n?(o.initEvent(t,n.bubbles,n.cancelable),o.detail=n.detail):o.initEvent(t,!1,!1)),e.dispatchEvent(o)}function no(e,t){return function(){return to(this,e,t)}}function ro(e,t){return function(){return to(this,e,t.apply(this,arguments))}}dr.prototype={constructor:dr,appendChild:function(e){return this._parent.insertBefore(e,this._next)},insertBefore:function(e,t){return this._parent.insertBefore(e,t)},querySelector:function(e){return this._parent.querySelector(e)},querySelectorAll:function(e){return this._parent.querySelectorAll(e)}},Dr.prototype={add:function(e){this._names.indexOf(e)<0&&(this._names.push(e),this._node.setAttribute("class",this._names.join(" ")))},remove:function(e){var t=this._names.indexOf(e);t>=0&&(this._names.splice(t,1),this._node.setAttribute("class",this._names.join(" ")))},contains:function(e){return this._names.indexOf(e)>=0}};var oo=[null];function io(e,t){this._groups=e,this._parents=t}function ao(e){return"string"==typeof e?new io([[document.querySelector(e)]],[document.documentElement]):new io([[e]],oo)}function uo(e){e.preventDefault(),e.stopImmediatePropagation()}function lo(e){var t=e.document.documentElement,n=ao(e).on("dragstart.drag",uo,!0);"onselectstart"in t?n.on("selectstart.drag",uo,!0):(t.__noselect=t.style.MozUserSelect,t.style.MozUserSelect="none")}function co(e,t){var n=e.document.documentElement,r=ao(e).on("dragstart.drag",null);t&&(r.on("click.drag",uo,!0),setTimeout((function(){r.on("click.drag",null)}),0)),"onselectstart"in n?r.on("selectstart.drag",null):(n.style.MozUserSelect=n.__noselect,delete n.__noselect)}function so(e,t,n){e.prototype=t.prototype=n,n.constructor=e}function fo(e,t){var n=Object.create(e.prototype);for(var r in t)n[r]=t[r];return n}function po(){}io.prototype={constructor:io,select:function(e){"function"!=typeof e&&(e=rr(e));for(var t=this._groups,n=t.length,r=new Array(n),o=0;o<n;++o)for(var i,a,u=t[o],l=u.length,c=r[o]=new Array(l),s=0;s<l;++s)(i=u[s])&&(a=e.call(i,i.__data__,s,u))&&("__data__"in i&&(a.__data__=i.__data__),c[s]=a);return new io(r,this._parents)},selectAll:function(e){e="function"==typeof e?function(e){return function(){var t=e.apply(this,arguments);return null==t?[]:or(t)}}(e):function(e){return null==e?ir:function(){return this.querySelectorAll(e)}}(e);for(var t=this._groups,n=t.length,r=[],o=[],i=0;i<n;++i)for(var a,u=t[i],l=u.length,c=0;c<l;++c)(a=u[c])&&(r.push(e.call(a,a.__data__,c,u)),o.push(a));return new io(r,o)},selectChild:function(e){return this.select(null==e?lr:function(e){return function(){return ur.call(this.children,e)}}("function"==typeof e?e:ar(e)))},selectChildren:function(e){return this.selectAll(null==e?sr:function(e){return function(){return cr.call(this.children,e)}}("function"==typeof e?e:ar(e)))},filter:function(e){"function"!=typeof e&&(e=function(e){return function(){return this.matches(e)}}(e));for(var t=this._groups,n=t.length,r=new Array(n),o=0;o<n;++o)for(var i,a=t[o],u=a.length,l=r[o]=[],c=0;c<u;++c)(i=a[c])&&e.call(i,i.__data__,c,a)&&l.push(i);return new io(r,this._parents)},data:function(e,t){if(!arguments.length)return Array.from(this,gr);var n=t?vr:hr,r=this._parents,o=this._groups;"function"!=typeof e&&(e=pr(e));for(var i=o.length,a=new Array(i),u=new Array(i),l=new Array(i),c=0;c<i;++c){var s=r[c],f=o[c],d=f.length,p=or(e.call(s,s&&s.__data__,c,r)),h=p.length,v=u[c]=new Array(h),g=a[c]=new Array(h),y=l[c]=new Array(d);n(s,f,v,g,y,p,t);for(var m,b,w=0,_=0;w<h;++w)if(m=v[w]){for(w>=_&&(_=w+1);!(b=g[_])&&++_<h;);m._next=b||null}}return(a=new io(a,r))._enter=u,a._exit=l,a},enter:function(){return new io(this._enter||this._groups.map(fr),this._parents)},exit:function(){return new io(this._exit||this._groups.map(fr),this._parents)},join:function(e,t,n){var r=this.enter(),o=this,i=this.exit();return r="function"==typeof e?e(r):r.append(e+""),null!=t&&(o=t(o)),null==n?i.remove():n(i),r&&o?r.merge(o).order():o},merge:function(e){if(!(e instanceof io))throw new Error("invalid merge");for(var t=this._groups,n=e._groups,r=t.length,o=n.length,i=Math.min(r,o),a=new Array(r),u=0;u<i;++u)for(var l,c=t[u],s=n[u],f=c.length,d=a[u]=new Array(f),p=0;p<f;++p)(l=c[p]||s[p])&&(d[p]=l);for(;u<r;++u)a[u]=t[u];return new io(a,this._parents)},selection:function(){return this},order:function(){for(var e=this._groups,t=-1,n=e.length;++t<n;)for(var r,o=e[t],i=o.length-1,a=o[i];--i>=0;)(r=o[i])&&(a&&4^r.compareDocumentPosition(a)&&a.parentNode.insertBefore(r,a),a=r);return this},sort:function(e){function t(t,n){return t&&n?e(t.__data__,n.__data__):!t-!n}e||(e=yr);for(var n=this._groups,r=n.length,o=new Array(r),i=0;i<r;++i){for(var a,u=n[i],l=u.length,c=o[i]=new Array(l),s=0;s<l;++s)(a=u[s])&&(c[s]=a);c.sort(t)}return new io(o,this._parents).order()},call:function(){var e=arguments[0];return arguments[0]=this,e.apply(null,arguments),this},nodes:function(){return Array.from(this)},node:function(){for(var e=this._groups,t=0,n=e.length;t<n;++t)for(var r=e[t],o=0,i=r.length;o<i;++o){var a=r[o];if(a)return a}return null},size:function(){let e=0;for(const t of this)++e;return e},empty:function(){return!this.node()},each:function(e){for(var t=this._groups,n=0,r=t.length;n<r;++n)for(var o,i=t[n],a=0,u=i.length;a<u;++a)(o=i[a])&&e.call(o,o.__data__,a,i);return this},attr:function(e,t){var n=Qn(e);if(arguments.length<2){var r=this.node();return n.local?r.getAttributeNS(n.space,n.local):r.getAttribute(n)}return this.each((null==t?n.local?br:mr:"function"==typeof t?n.local?Sr:xr:n.local?_r:wr)(n,t))},style:function(e,t,n){return arguments.length>1?this.each((null==t?kr:"function"==typeof t?Cr:Or)(e,t,null==n?"":n)):Pr(this.node(),e)},property:function(e,t){return arguments.length>1?this.each((null==t?Mr:"function"==typeof t?Nr:Ar)(e,t)):this.node()[e]},classed:function(e,t){var n=jr(e+"");if(arguments.length<2){for(var r=Tr(this.node()),o=-1,i=n.length;++o<i;)if(!r.contains(n[o]))return!1;return!0}return this.each(("function"==typeof t?Br:t?zr:Ir)(n,t))},text:function(e){return arguments.length?this.each(null==e?Ur:("function"==typeof e?Xr:Fr)(e)):this.node().textContent},html:function(e){return arguments.length?this.each(null==e?Hr:("function"==typeof e?Wr:Vr)(e)):this.node().innerHTML},raise:function(){return this.each(Yr)},lower:function(){return this.each($r)},append:function(e){var t="function"==typeof e?e:tr(e);return this.select((function(){return this.appendChild(t.apply(this,arguments))}))},insert:function(e,t){var n="function"==typeof e?e:tr(e),r=null==t?Zr:"function"==typeof t?t:rr(t);return this.select((function(){return this.insertBefore(n.apply(this,arguments),r.apply(this,arguments)||null)}))},remove:function(){return this.each(qr)},clone:function(e){return this.select(e?Kr:Gr)},datum:function(e){return arguments.length?this.property("__data__",e):this.node().__data__},on:function(e,t,n){var r,o,i=Qr(e+""),a=i.length;if(!(arguments.length<2)){for(u=t?eo:Jr,r=0;r<a;++r)this.each(u(i[r],t,n));return this}var u=this.node().__on;if(u)for(var l,c=0,s=u.length;c<s;++c)for(r=0,l=u[c];r<a;++r)if((o=i[r]).type===l.type&&o.name===l.name)return l.value},dispatch:function(e,t){return this.each(("function"==typeof t?ro:no)(e,t))},[Symbol.iterator]:function*(){for(var e=this._groups,t=0,n=e.length;t<n;++t)for(var r,o=e[t],i=0,a=o.length;i<a;++i)(r=o[i])&&(yield r)}};var ho=.7,vo=1/ho,go="\\s*([+-]?\\d+)\\s*",yo="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)\\s*",mo="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)%\\s*",bo=/^#([0-9a-f]{3,8})$/,wo=new RegExp("^rgb\\("+[go,go,go]+"\\)$"),_o=new RegExp("^rgb\\("+[mo,mo,mo]+"\\)$"),xo=new RegExp("^rgba\\("+[go,go,go,yo]+"\\)$"),So=new RegExp("^rgba\\("+[mo,mo,mo,yo]+"\\)$"),Eo=new RegExp("^hsl\\("+[yo,mo,mo]+"\\)$"),ko=new RegExp("^hsla\\("+[yo,mo,mo,yo]+"\\)$"),Oo={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074};function Co(){return this.rgb().formatHex()}function Po(){return this.rgb().formatRgb()}function Mo(e){var t,n;return e=(e+"").trim().toLowerCase(),(t=bo.exec(e))?(n=t[1].length,t=parseInt(t[1],16),6===n?Ao(t):3===n?new Do(t>>8&15|t>>4&240,t>>4&15|240&t,(15&t)<<4|15&t,1):8===n?No(t>>24&255,t>>16&255,t>>8&255,(255&t)/255):4===n?No(t>>12&15|t>>8&240,t>>8&15|t>>4&240,t>>4&15|240&t,((15&t)<<4|15&t)/255):null):(t=wo.exec(e))?new Do(t[1],t[2],t[3],1):(t=_o.exec(e))?new Do(255*t[1]/100,255*t[2]/100,255*t[3]/100,1):(t=xo.exec(e))?No(t[1],t[2],t[3],t[4]):(t=So.exec(e))?No(255*t[1]/100,255*t[2]/100,255*t[3]/100,t[4]):(t=Eo.exec(e))?Io(t[1],t[2]/100,t[3]/100,1):(t=ko.exec(e))?Io(t[1],t[2]/100,t[3]/100,t[4]):Oo.hasOwnProperty(e)?Ao(Oo[e]):"transparent"===e?new Do(NaN,NaN,NaN,0):null}function Ao(e){return new Do(e>>16&255,e>>8&255,255&e,1)}function No(e,t,n,r){return r<=0&&(e=t=n=NaN),new Do(e,t,n,r)}function jo(e){return e instanceof po||(e=Mo(e)),e?new Do((e=e.rgb()).r,e.g,e.b,e.opacity):new Do}function To(e,t,n,r){return 1===arguments.length?jo(e):new Do(e,t,n,null==r?1:r)}function Do(e,t,n,r){this.r=+e,this.g=+t,this.b=+n,this.opacity=+r}function Ro(){return"#"+zo(this.r)+zo(this.g)+zo(this.b)}function Lo(){var e=this.opacity;return(1===(e=isNaN(e)?1:Math.max(0,Math.min(1,e)))?"rgb(":"rgba(")+Math.max(0,Math.min(255,Math.round(this.r)||0))+", "+Math.max(0,Math.min(255,Math.round(this.g)||0))+", "+Math.max(0,Math.min(255,Math.round(this.b)||0))+(1===e?")":", "+e+")")}function zo(e){return((e=Math.max(0,Math.min(255,Math.round(e)||0)))<16?"0":"")+e.toString(16)}function Io(e,t,n,r){return r<=0?e=t=n=NaN:n<=0||n>=1?e=t=NaN:t<=0&&(e=NaN),new Uo(e,t,n,r)}function Bo(e){if(e instanceof Uo)return new Uo(e.h,e.s,e.l,e.opacity);if(e instanceof po||(e=Mo(e)),!e)return new Uo;if(e instanceof Uo)return e;var t=(e=e.rgb()).r/255,n=e.g/255,r=e.b/255,o=Math.min(t,n,r),i=Math.max(t,n,r),a=NaN,u=i-o,l=(i+o)/2;return u?(a=t===i?(n-r)/u+6*(n<r):n===i?(r-t)/u+2:(t-n)/u+4,u/=l<.5?i+o:2-i-o,a*=60):u=l>0&&l<1?0:a,new Uo(a,u,l,e.opacity)}function Uo(e,t,n,r){this.h=+e,this.s=+t,this.l=+n,this.opacity=+r}function Fo(e,t,n){return 255*(e<60?t+(n-t)*e/60:e<180?n:e<240?t+(n-t)*(240-e)/60:t)}so(po,Mo,{copy:function(e){return Object.assign(new this.constructor,this,e)},displayable:function(){return this.rgb().displayable()},hex:Co,formatHex:Co,formatHsl:function(){return Bo(this).formatHsl()},formatRgb:Po,toString:Po}),so(Do,To,fo(po,{brighter:function(e){return e=null==e?vo:Math.pow(vo,e),new Do(this.r*e,this.g*e,this.b*e,this.opacity)},darker:function(e){return e=null==e?ho:Math.pow(ho,e),new Do(this.r*e,this.g*e,this.b*e,this.opacity)},rgb:function(){return this},displayable:function(){return-.5<=this.r&&this.r<255.5&&-.5<=this.g&&this.g<255.5&&-.5<=this.b&&this.b<255.5&&0<=this.opacity&&this.opacity<=1},hex:Ro,formatHex:Ro,formatRgb:Lo,toString:Lo})),so(Uo,(function(e,t,n,r){return 1===arguments.length?Bo(e):new Uo(e,t,n,null==r?1:r)}),fo(po,{brighter:function(e){return e=null==e?vo:Math.pow(vo,e),new Uo(this.h,this.s,this.l*e,this.opacity)},darker:function(e){return e=null==e?ho:Math.pow(ho,e),new Uo(this.h,this.s,this.l*e,this.opacity)},rgb:function(){var e=this.h%360+360*(this.h<0),t=isNaN(e)||isNaN(this.s)?0:this.s,n=this.l,r=n+(n<.5?n:1-n)*t,o=2*n-r;return new Do(Fo(e>=240?e-240:e+120,o,r),Fo(e,o,r),Fo(e<120?e+240:e-120,o,r),this.opacity)},displayable:function(){return(0<=this.s&&this.s<=1||isNaN(this.s))&&0<=this.l&&this.l<=1&&0<=this.opacity&&this.opacity<=1},formatHsl:function(){var e=this.opacity;return(1===(e=isNaN(e)?1:Math.max(0,Math.min(1,e)))?"hsl(":"hsla(")+(this.h||0)+", "+100*(this.s||0)+"%, "+100*(this.l||0)+"%"+(1===e?")":", "+e+")")}}));var Xo=e=>()=>e;function Ho(e){return 1==(e=+e)?Vo:function(t,n){return n-t?function(e,t,n){return e=Math.pow(e,n),t=Math.pow(t,n)-e,n=1/n,function(r){return Math.pow(e+r*t,n)}}(t,n,e):Xo(isNaN(t)?n:t)}}function Vo(e,t){var n=t-e;return n?function(e,t){return function(n){return e+n*t}}(e,n):Xo(isNaN(e)?t:e)}var Wo=function e(t){var n=Ho(t);function r(e,t){var r=n((e=To(e)).r,(t=To(t)).r),o=n(e.g,t.g),i=n(e.b,t.b),a=Vo(e.opacity,t.opacity);return function(t){return e.r=r(t),e.g=o(t),e.b=i(t),e.opacity=a(t),e+""}}return r.gamma=e,r}(1);function Yo(e,t){return e=+e,t=+t,function(n){return e*(1-n)+t*n}}var $o=/[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g,Zo=new RegExp($o.source,"g");function qo(e,t){var n,r,o,i=$o.lastIndex=Zo.lastIndex=0,a=-1,u=[],l=[];for(e+="",t+="";(n=$o.exec(e))&&(r=Zo.exec(t));)(o=r.index)>i&&(o=t.slice(i,o),u[a]?u[a]+=o:u[++a]=o),(n=n[0])===(r=r[0])?u[a]?u[a]+=r:u[++a]=r:(u[++a]=null,l.push({i:a,x:Yo(n,r)})),i=Zo.lastIndex;return i<t.length&&(o=t.slice(i),u[a]?u[a]+=o:u[++a]=o),u.length<2?l[0]?function(e){return function(t){return e(t)+""}}(l[0].x):function(e){return function(){return e}}(t):(t=l.length,function(e){for(var n,r=0;r<t;++r)u[(n=l[r]).i]=n.x(e);return u.join("")})}var Go,Ko=180/Math.PI,Qo={translateX:0,translateY:0,rotate:0,skewX:0,scaleX:1,scaleY:1};function Jo(e,t,n,r,o,i){var a,u,l;return(a=Math.sqrt(e*e+t*t))&&(e/=a,t/=a),(l=e*n+t*r)&&(n-=e*l,r-=t*l),(u=Math.sqrt(n*n+r*r))&&(n/=u,r/=u,l/=u),e*r<t*n&&(e=-e,t=-t,l=-l,a=-a),{translateX:o,translateY:i,rotate:Math.atan2(t,e)*Ko,skewX:Math.atan(l)*Ko,scaleX:a,scaleY:u}}function ei(e,t,n,r){function o(e){return e.length?e.pop()+" ":""}return function(i,a){var u=[],l=[];return i=e(i),a=e(a),function(e,r,o,i,a,u){if(e!==o||r!==i){var l=a.push("translate(",null,t,null,n);u.push({i:l-4,x:Yo(e,o)},{i:l-2,x:Yo(r,i)})}else(o||i)&&a.push("translate("+o+t+i+n)}(i.translateX,i.translateY,a.translateX,a.translateY,u,l),function(e,t,n,i){e!==t?(e-t>180?t+=360:t-e>180&&(e+=360),i.push({i:n.push(o(n)+"rotate(",null,r)-2,x:Yo(e,t)})):t&&n.push(o(n)+"rotate("+t+r)}(i.rotate,a.rotate,u,l),function(e,t,n,i){e!==t?i.push({i:n.push(o(n)+"skewX(",null,r)-2,x:Yo(e,t)}):t&&n.push(o(n)+"skewX("+t+r)}(i.skewX,a.skewX,u,l),function(e,t,n,r,i,a){if(e!==n||t!==r){var u=i.push(o(i)+"scale(",null,",",null,")");a.push({i:u-4,x:Yo(e,n)},{i:u-2,x:Yo(t,r)})}else 1===n&&1===r||i.push(o(i)+"scale("+n+","+r+")")}(i.scaleX,i.scaleY,a.scaleX,a.scaleY,u,l),i=a=null,function(e){for(var t,n=-1,r=l.length;++n<r;)u[(t=l[n]).i]=t.x(e);return u.join("")}}}var ti=ei((function(e){const t=new("function"==typeof DOMMatrix?DOMMatrix:WebKitCSSMatrix)(e+"");return t.isIdentity?Qo:Jo(t.a,t.b,t.c,t.d,t.e,t.f)}),"px, ","px)","deg)"),ni=ei((function(e){return null==e?Qo:(Go||(Go=document.createElementNS("http://www.w3.org/2000/svg","g")),Go.setAttribute("transform",e),(e=Go.transform.baseVal.consolidate())?Jo((e=e.matrix).a,e.b,e.c,e.d,e.e,e.f):Qo)}),", ",")",")");function ri(e){return((e=Math.exp(e))+1/e)/2}var oi=function e(t,n,r){function o(e,o){var i,a,u=e[0],l=e[1],c=e[2],s=o[0],f=o[1],d=o[2],p=s-u,h=f-l,v=p*p+h*h;if(v<1e-12)a=Math.log(d/c)/t,i=function(e){return[u+e*p,l+e*h,c*Math.exp(t*e*a)]};else{var g=Math.sqrt(v),y=(d*d-c*c+r*v)/(2*c*n*g),m=(d*d-c*c-r*v)/(2*d*n*g),b=Math.log(Math.sqrt(y*y+1)-y),w=Math.log(Math.sqrt(m*m+1)-m);a=(w-b)/t,i=function(e){var r=e*a,o=ri(b),i=c/(n*g)*(o*function(e){return((e=Math.exp(2*e))-1)/(e+1)}(t*r+b)-function(e){return((e=Math.exp(e))-1/e)/2}(b));return[u+i*p,l+i*h,c*o/ri(t*r+b)]}}return i.duration=1e3*a*t/Math.SQRT2,i}return o.rho=function(t){var n=Math.max(.001,+t),r=n*n;return e(n,r,r*r)},o}(Math.SQRT2,2,4),ii="http://www.w3.org/1999/xhtml",ai={svg:"http://www.w3.org/2000/svg",xhtml:ii,xlink:"http://www.w3.org/1999/xlink",xml:"http://www.w3.org/XML/1998/namespace",xmlns:"http://www.w3.org/2000/xmlns/"};function ui(e){var t=e+="",n=t.indexOf(":");return n>=0&&"xmlns"!==(t=e.slice(0,n))&&(e=e.slice(n+1)),ai.hasOwnProperty(t)?{space:ai[t],local:e}:e}function li(e){return function(){var t=this.ownerDocument,n=this.namespaceURI;return n===ii&&t.documentElement.namespaceURI===ii?t.createElement(e):t.createElementNS(n,e)}}function ci(e){return function(){return this.ownerDocument.createElementNS(e.space,e.local)}}function si(e){var t=ui(e);return(t.local?ci:li)(t)}function fi(){}function di(e){return null==e?fi:function(){return this.querySelector(e)}}function pi(e){return"object"==typeof e&&"length"in e?e:Array.from(e)}function hi(){return[]}function vi(e){return function(t){return t.matches(e)}}var gi=Array.prototype.find;function yi(){return this.firstElementChild}var mi=Array.prototype.filter;function bi(){return this.children}function wi(e){return new Array(e.length)}function _i(e,t){this.ownerDocument=e.ownerDocument,this.namespaceURI=e.namespaceURI,this._next=null,this._parent=e,this.__data__=t}function xi(e){return function(){return e}}function Si(e,t,n,r,o,i){for(var a,u=0,l=t.length,c=i.length;u<c;++u)(a=t[u])?(a.__data__=i[u],r[u]=a):n[u]=new _i(e,i[u]);for(;u<l;++u)(a=t[u])&&(o[u]=a)}function Ei(e,t,n,r,o,i,a){var u,l,c,s=new Map,f=t.length,d=i.length,p=new Array(f);for(u=0;u<f;++u)(l=t[u])&&(p[u]=c=a.call(l,l.__data__,u,t)+"",s.has(c)?o[u]=l:s.set(c,l));for(u=0;u<d;++u)c=a.call(e,i[u],u,i)+"",(l=s.get(c))?(r[u]=l,l.__data__=i[u],s.delete(c)):n[u]=new _i(e,i[u]);for(u=0;u<f;++u)(l=t[u])&&s.get(p[u])===l&&(o[u]=l)}function ki(e){return e.__data__}function Oi(e,t){return e<t?-1:e>t?1:e>=t?0:NaN}function Ci(e){return function(){this.removeAttribute(e)}}function Pi(e){return function(){this.removeAttributeNS(e.space,e.local)}}function Mi(e,t){return function(){this.setAttribute(e,t)}}function Ai(e,t){return function(){this.setAttributeNS(e.space,e.local,t)}}function Ni(e,t){return function(){var n=t.apply(this,arguments);null==n?this.removeAttribute(e):this.setAttribute(e,n)}}function ji(e,t){return function(){var n=t.apply(this,arguments);null==n?this.removeAttributeNS(e.space,e.local):this.setAttributeNS(e.space,e.local,n)}}function Ti(e){return e.ownerDocument&&e.ownerDocument.defaultView||e.document&&e||e.defaultView}function Di(e){return function(){this.style.removeProperty(e)}}function Ri(e,t,n){return function(){this.style.setProperty(e,t,n)}}function Li(e,t,n){return function(){var r=t.apply(this,arguments);null==r?this.style.removeProperty(e):this.style.setProperty(e,r,n)}}function zi(e,t){return e.style.getPropertyValue(t)||Ti(e).getComputedStyle(e,null).getPropertyValue(t)}function Ii(e){return function(){delete this[e]}}function Bi(e,t){return function(){this[e]=t}}function Ui(e,t){return function(){var n=t.apply(this,arguments);null==n?delete this[e]:this[e]=n}}function Fi(e){return e.trim().split(/^|\s+/)}function Xi(e){return e.classList||new Hi(e)}function Hi(e){this._node=e,this._names=Fi(e.getAttribute("class")||"")}function Vi(e,t){for(var n=Xi(e),r=-1,o=t.length;++r<o;)n.add(t[r])}function Wi(e,t){for(var n=Xi(e),r=-1,o=t.length;++r<o;)n.remove(t[r])}function Yi(e){return function(){Vi(this,e)}}function $i(e){return function(){Wi(this,e)}}function Zi(e,t){return function(){(t.apply(this,arguments)?Vi:Wi)(this,e)}}function qi(){this.textContent=""}function Gi(e){return function(){this.textContent=e}}function Ki(e){return function(){var t=e.apply(this,arguments);this.textContent=null==t?"":t}}function Qi(){this.innerHTML=""}function Ji(e){return function(){this.innerHTML=e}}function ea(e){return function(){var t=e.apply(this,arguments);this.innerHTML=null==t?"":t}}function ta(){this.nextSibling&&this.parentNode.appendChild(this)}function na(){this.previousSibling&&this.parentNode.insertBefore(this,this.parentNode.firstChild)}function ra(){return null}function oa(){var e=this.parentNode;e&&e.removeChild(this)}function ia(){var e=this.cloneNode(!1),t=this.parentNode;return t?t.insertBefore(e,this.nextSibling):e}function aa(){var e=this.cloneNode(!0),t=this.parentNode;return t?t.insertBefore(e,this.nextSibling):e}function ua(e){return e.trim().split(/^|\s+/).map((function(e){var t="",n=e.indexOf(".");return n>=0&&(t=e.slice(n+1),e=e.slice(0,n)),{type:e,name:t}}))}function la(e){return function(){var t=this.__on;if(t){for(var n,r=0,o=-1,i=t.length;r<i;++r)n=t[r],e.type&&n.type!==e.type||n.name!==e.name?t[++o]=n:this.removeEventListener(n.type,n.listener,n.options);++o?t.length=o:delete this.__on}}}function ca(e,t,n){return function(){var r,o=this.__on,i=function(e){return function(t){e.call(this,t,this.__data__)}}(t);if(o)for(var a=0,u=o.length;a<u;++a)if((r=o[a]).type===e.type&&r.name===e.name)return this.removeEventListener(r.type,r.listener,r.options),this.addEventListener(r.type,r.listener=i,r.options=n),void(r.value=t);this.addEventListener(e.type,i,n),r={type:e.type,name:e.name,value:t,listener:i,options:n},o?o.push(r):this.__on=[r]}}function sa(e,t,n){var r=Ti(e),o=r.CustomEvent;"function"==typeof o?o=new o(t,n):(o=r.document.createEvent("Event"),n?(o.initEvent(t,n.bubbles,n.cancelable),o.detail=n.detail):o.initEvent(t,!1,!1)),e.dispatchEvent(o)}function fa(e,t){return function(){return sa(this,e,t)}}function da(e,t){return function(){return sa(this,e,t.apply(this,arguments))}}_i.prototype={constructor:_i,appendChild:function(e){return this._parent.insertBefore(e,this._next)},insertBefore:function(e,t){return this._parent.insertBefore(e,t)},querySelector:function(e){return this._parent.querySelector(e)},querySelectorAll:function(e){return this._parent.querySelectorAll(e)}},Hi.prototype={add:function(e){this._names.indexOf(e)<0&&(this._names.push(e),this._node.setAttribute("class",this._names.join(" ")))},remove:function(e){var t=this._names.indexOf(e);t>=0&&(this._names.splice(t,1),this._node.setAttribute("class",this._names.join(" ")))},contains:function(e){return this._names.indexOf(e)>=0}};var pa=[null];function ha(e,t){this._groups=e,this._parents=t}function va(e){return"string"==typeof e?new ha([[document.querySelector(e)]],[document.documentElement]):new ha([[e]],pa)}function ga(e,t){if(e=function(e){let t;for(;t=e.sourceEvent;)e=t;return e}(e),void 0===t&&(t=e.currentTarget),t){var n=t.ownerSVGElement||t;if(n.createSVGPoint){var r=n.createSVGPoint();return r.x=e.clientX,r.y=e.clientY,[(r=r.matrixTransform(t.getScreenCTM().inverse())).x,r.y]}if(t.getBoundingClientRect){var o=t.getBoundingClientRect();return[e.clientX-o.left-t.clientLeft,e.clientY-o.top-t.clientTop]}}return[e.pageX,e.pageY]}ha.prototype={constructor:ha,select:function(e){"function"!=typeof e&&(e=di(e));for(var t=this._groups,n=t.length,r=new Array(n),o=0;o<n;++o)for(var i,a,u=t[o],l=u.length,c=r[o]=new Array(l),s=0;s<l;++s)(i=u[s])&&(a=e.call(i,i.__data__,s,u))&&("__data__"in i&&(a.__data__=i.__data__),c[s]=a);return new ha(r,this._parents)},selectAll:function(e){e="function"==typeof e?function(e){return function(){var t=e.apply(this,arguments);return null==t?[]:pi(t)}}(e):function(e){return null==e?hi:function(){return this.querySelectorAll(e)}}(e);for(var t=this._groups,n=t.length,r=[],o=[],i=0;i<n;++i)for(var a,u=t[i],l=u.length,c=0;c<l;++c)(a=u[c])&&(r.push(e.call(a,a.__data__,c,u)),o.push(a));return new ha(r,o)},selectChild:function(e){return this.select(null==e?yi:function(e){return function(){return gi.call(this.children,e)}}("function"==typeof e?e:vi(e)))},selectChildren:function(e){return this.selectAll(null==e?bi:function(e){return function(){return mi.call(this.children,e)}}("function"==typeof e?e:vi(e)))},filter:function(e){"function"!=typeof e&&(e=function(e){return function(){return this.matches(e)}}(e));for(var t=this._groups,n=t.length,r=new Array(n),o=0;o<n;++o)for(var i,a=t[o],u=a.length,l=r[o]=[],c=0;c<u;++c)(i=a[c])&&e.call(i,i.__data__,c,a)&&l.push(i);return new ha(r,this._parents)},data:function(e,t){if(!arguments.length)return Array.from(this,ki);var n=t?Ei:Si,r=this._parents,o=this._groups;"function"!=typeof e&&(e=xi(e));for(var i=o.length,a=new Array(i),u=new Array(i),l=new Array(i),c=0;c<i;++c){var s=r[c],f=o[c],d=f.length,p=pi(e.call(s,s&&s.__data__,c,r)),h=p.length,v=u[c]=new Array(h),g=a[c]=new Array(h),y=l[c]=new Array(d);n(s,f,v,g,y,p,t);for(var m,b,w=0,_=0;w<h;++w)if(m=v[w]){for(w>=_&&(_=w+1);!(b=g[_])&&++_<h;);m._next=b||null}}return(a=new ha(a,r))._enter=u,a._exit=l,a},enter:function(){return new ha(this._enter||this._groups.map(wi),this._parents)},exit:function(){return new ha(this._exit||this._groups.map(wi),this._parents)},join:function(e,t,n){var r=this.enter(),o=this,i=this.exit();return r="function"==typeof e?e(r):r.append(e+""),null!=t&&(o=t(o)),null==n?i.remove():n(i),r&&o?r.merge(o).order():o},merge:function(e){if(!(e instanceof ha))throw new Error("invalid merge");for(var t=this._groups,n=e._groups,r=t.length,o=n.length,i=Math.min(r,o),a=new Array(r),u=0;u<i;++u)for(var l,c=t[u],s=n[u],f=c.length,d=a[u]=new Array(f),p=0;p<f;++p)(l=c[p]||s[p])&&(d[p]=l);for(;u<r;++u)a[u]=t[u];return new ha(a,this._parents)},selection:function(){return this},order:function(){for(var e=this._groups,t=-1,n=e.length;++t<n;)for(var r,o=e[t],i=o.length-1,a=o[i];--i>=0;)(r=o[i])&&(a&&4^r.compareDocumentPosition(a)&&a.parentNode.insertBefore(r,a),a=r);return this},sort:function(e){function t(t,n){return t&&n?e(t.__data__,n.__data__):!t-!n}e||(e=Oi);for(var n=this._groups,r=n.length,o=new Array(r),i=0;i<r;++i){for(var a,u=n[i],l=u.length,c=o[i]=new Array(l),s=0;s<l;++s)(a=u[s])&&(c[s]=a);c.sort(t)}return new ha(o,this._parents).order()},call:function(){var e=arguments[0];return arguments[0]=this,e.apply(null,arguments),this},nodes:function(){return Array.from(this)},node:function(){for(var e=this._groups,t=0,n=e.length;t<n;++t)for(var r=e[t],o=0,i=r.length;o<i;++o){var a=r[o];if(a)return a}return null},size:function(){let e=0;for(const t of this)++e;return e},empty:function(){return!this.node()},each:function(e){for(var t=this._groups,n=0,r=t.length;n<r;++n)for(var o,i=t[n],a=0,u=i.length;a<u;++a)(o=i[a])&&e.call(o,o.__data__,a,i);return this},attr:function(e,t){var n=ui(e);if(arguments.length<2){var r=this.node();return n.local?r.getAttributeNS(n.space,n.local):r.getAttribute(n)}return this.each((null==t?n.local?Pi:Ci:"function"==typeof t?n.local?ji:Ni:n.local?Ai:Mi)(n,t))},style:function(e,t,n){return arguments.length>1?this.each((null==t?Di:"function"==typeof t?Li:Ri)(e,t,null==n?"":n)):zi(this.node(),e)},property:function(e,t){return arguments.length>1?this.each((null==t?Ii:"function"==typeof t?Ui:Bi)(e,t)):this.node()[e]},classed:function(e,t){var n=Fi(e+"");if(arguments.length<2){for(var r=Xi(this.node()),o=-1,i=n.length;++o<i;)if(!r.contains(n[o]))return!1;return!0}return this.each(("function"==typeof t?Zi:t?Yi:$i)(n,t))},text:function(e){return arguments.length?this.each(null==e?qi:("function"==typeof e?Ki:Gi)(e)):this.node().textContent},html:function(e){return arguments.length?this.each(null==e?Qi:("function"==typeof e?ea:Ji)(e)):this.node().innerHTML},raise:function(){return this.each(ta)},lower:function(){return this.each(na)},append:function(e){var t="function"==typeof e?e:si(e);return this.select((function(){return this.appendChild(t.apply(this,arguments))}))},insert:function(e,t){var n="function"==typeof e?e:si(e),r=null==t?ra:"function"==typeof t?t:di(t);return this.select((function(){return this.insertBefore(n.apply(this,arguments),r.apply(this,arguments)||null)}))},remove:function(){return this.each(oa)},clone:function(e){return this.select(e?aa:ia)},datum:function(e){return arguments.length?this.property("__data__",e):this.node().__data__},on:function(e,t,n){var r,o,i=ua(e+""),a=i.length;if(!(arguments.length<2)){for(u=t?ca:la,r=0;r<a;++r)this.each(u(i[r],t,n));return this}var u=this.node().__on;if(u)for(var l,c=0,s=u.length;c<s;++c)for(r=0,l=u[c];r<a;++r)if((o=i[r]).type===l.type&&o.name===l.name)return l.value},dispatch:function(e,t){return this.each(("function"==typeof t?da:fa)(e,t))},[Symbol.iterator]:function*(){for(var e=this._groups,t=0,n=e.length;t<n;++t)for(var r,o=e[t],i=0,a=o.length;i<a;++i)(r=o[i])&&(yield r)}};var ya="http://www.w3.org/1999/xhtml",ma={svg:"http://www.w3.org/2000/svg",xhtml:ya,xlink:"http://www.w3.org/1999/xlink",xml:"http://www.w3.org/XML/1998/namespace",xmlns:"http://www.w3.org/2000/xmlns/"};function ba(e){var t=e+="",n=t.indexOf(":");return n>=0&&"xmlns"!==(t=e.slice(0,n))&&(e=e.slice(n+1)),ma.hasOwnProperty(t)?{space:ma[t],local:e}:e}function wa(e){return function(){var t=this.ownerDocument,n=this.namespaceURI;return n===ya&&t.documentElement.namespaceURI===ya?t.createElement(e):t.createElementNS(n,e)}}function _a(e){return function(){return this.ownerDocument.createElementNS(e.space,e.local)}}function xa(e){var t=ba(e);return(t.local?_a:wa)(t)}function Sa(){}function Ea(e){return null==e?Sa:function(){return this.querySelector(e)}}function ka(e){return null==e?[]:Array.isArray(e)?e:Array.from(e)}function Oa(){return[]}function Ca(e){return null==e?Oa:function(){return this.querySelectorAll(e)}}function Pa(e){return function(){return this.matches(e)}}function Ma(e){return function(t){return t.matches(e)}}var Aa=Array.prototype.find;function Na(){return this.firstElementChild}var ja=Array.prototype.filter;function Ta(){return Array.from(this.children)}function Da(e){return new Array(e.length)}function Ra(e,t){this.ownerDocument=e.ownerDocument,this.namespaceURI=e.namespaceURI,this._next=null,this._parent=e,this.__data__=t}function La(e){return function(){return e}}function za(e,t,n,r,o,i){for(var a,u=0,l=t.length,c=i.length;u<c;++u)(a=t[u])?(a.__data__=i[u],r[u]=a):n[u]=new Ra(e,i[u]);for(;u<l;++u)(a=t[u])&&(o[u]=a)}function Ia(e,t,n,r,o,i,a){var u,l,c,s=new Map,f=t.length,d=i.length,p=new Array(f);for(u=0;u<f;++u)(l=t[u])&&(p[u]=c=a.call(l,l.__data__,u,t)+"",s.has(c)?o[u]=l:s.set(c,l));for(u=0;u<d;++u)c=a.call(e,i[u],u,i)+"",(l=s.get(c))?(r[u]=l,l.__data__=i[u],s.delete(c)):n[u]=new Ra(e,i[u]);for(u=0;u<f;++u)(l=t[u])&&s.get(p[u])===l&&(o[u]=l)}function Ba(e){return e.__data__}function Ua(e){return"object"==typeof e&&"length"in e?e:Array.from(e)}function Fa(e,t){return e<t?-1:e>t?1:e>=t?0:NaN}function Xa(e){return function(){this.removeAttribute(e)}}function Ha(e){return function(){this.removeAttributeNS(e.space,e.local)}}function Va(e,t){return function(){this.setAttribute(e,t)}}function Wa(e,t){return function(){this.setAttributeNS(e.space,e.local,t)}}function Ya(e,t){return function(){var n=t.apply(this,arguments);null==n?this.removeAttribute(e):this.setAttribute(e,n)}}function $a(e,t){return function(){var n=t.apply(this,arguments);null==n?this.removeAttributeNS(e.space,e.local):this.setAttributeNS(e.space,e.local,n)}}function Za(e){return e.ownerDocument&&e.ownerDocument.defaultView||e.document&&e||e.defaultView}function qa(e){return function(){this.style.removeProperty(e)}}function Ga(e,t,n){return function(){this.style.setProperty(e,t,n)}}function Ka(e,t,n){return function(){var r=t.apply(this,arguments);null==r?this.style.removeProperty(e):this.style.setProperty(e,r,n)}}function Qa(e,t){return e.style.getPropertyValue(t)||Za(e).getComputedStyle(e,null).getPropertyValue(t)}function Ja(e){return function(){delete this[e]}}function eu(e,t){return function(){this[e]=t}}function tu(e,t){return function(){var n=t.apply(this,arguments);null==n?delete this[e]:this[e]=n}}function nu(e){return e.trim().split(/^|\s+/)}function ru(e){return e.classList||new ou(e)}function ou(e){this._node=e,this._names=nu(e.getAttribute("class")||"")}function iu(e,t){for(var n=ru(e),r=-1,o=t.length;++r<o;)n.add(t[r])}function au(e,t){for(var n=ru(e),r=-1,o=t.length;++r<o;)n.remove(t[r])}function uu(e){return function(){iu(this,e)}}function lu(e){return function(){au(this,e)}}function cu(e,t){return function(){(t.apply(this,arguments)?iu:au)(this,e)}}function su(){this.textContent=""}function fu(e){return function(){this.textContent=e}}function du(e){return function(){var t=e.apply(this,arguments);this.textContent=null==t?"":t}}function pu(){this.innerHTML=""}function hu(e){return function(){this.innerHTML=e}}function vu(e){return function(){var t=e.apply(this,arguments);this.innerHTML=null==t?"":t}}function gu(){this.nextSibling&&this.parentNode.appendChild(this)}function yu(){this.previousSibling&&this.parentNode.insertBefore(this,this.parentNode.firstChild)}function mu(){return null}function bu(){var e=this.parentNode;e&&e.removeChild(this)}function wu(){var e=this.cloneNode(!1),t=this.parentNode;return t?t.insertBefore(e,this.nextSibling):e}function _u(){var e=this.cloneNode(!0),t=this.parentNode;return t?t.insertBefore(e,this.nextSibling):e}function xu(e){return e.trim().split(/^|\s+/).map((function(e){var t="",n=e.indexOf(".");return n>=0&&(t=e.slice(n+1),e=e.slice(0,n)),{type:e,name:t}}))}function Su(e){return function(){var t=this.__on;if(t){for(var n,r=0,o=-1,i=t.length;r<i;++r)n=t[r],e.type&&n.type!==e.type||n.name!==e.name?t[++o]=n:this.removeEventListener(n.type,n.listener,n.options);++o?t.length=o:delete this.__on}}}function Eu(e,t,n){return function(){var r,o=this.__on,i=function(e){return function(t){e.call(this,t,this.__data__)}}(t);if(o)for(var a=0,u=o.length;a<u;++a)if((r=o[a]).type===e.type&&r.name===e.name)return this.removeEventListener(r.type,r.listener,r.options),this.addEventListener(r.type,r.listener=i,r.options=n),void(r.value=t);this.addEventListener(e.type,i,n),r={type:e.type,name:e.name,value:t,listener:i,options:n},o?o.push(r):this.__on=[r]}}function ku(e,t,n){var r=Za(e),o=r.CustomEvent;"function"==typeof o?o=new o(t,n):(o=r.document.createEvent("Event"),n?(o.initEvent(t,n.bubbles,n.cancelable),o.detail=n.detail):o.initEvent(t,!1,!1)),e.dispatchEvent(o)}function Ou(e,t){return function(){return ku(this,e,t)}}function Cu(e,t){return function(){return ku(this,e,t.apply(this,arguments))}}Ra.prototype={constructor:Ra,appendChild:function(e){return this._parent.insertBefore(e,this._next)},insertBefore:function(e,t){return this._parent.insertBefore(e,t)},querySelector:function(e){return this._parent.querySelector(e)},querySelectorAll:function(e){return this._parent.querySelectorAll(e)}},ou.prototype={add:function(e){this._names.indexOf(e)<0&&(this._names.push(e),this._node.setAttribute("class",this._names.join(" ")))},remove:function(e){var t=this._names.indexOf(e);t>=0&&(this._names.splice(t,1),this._node.setAttribute("class",this._names.join(" ")))},contains:function(e){return this._names.indexOf(e)>=0}};var Pu=[null];function Mu(e,t){this._groups=e,this._parents=t}function Au(){return new Mu([[document.documentElement]],Pu)}Mu.prototype=Au.prototype={constructor:Mu,select:function(e){"function"!=typeof e&&(e=Ea(e));for(var t=this._groups,n=t.length,r=new Array(n),o=0;o<n;++o)for(var i,a,u=t[o],l=u.length,c=r[o]=new Array(l),s=0;s<l;++s)(i=u[s])&&(a=e.call(i,i.__data__,s,u))&&("__data__"in i&&(a.__data__=i.__data__),c[s]=a);return new Mu(r,this._parents)},selectAll:function(e){e="function"==typeof e?function(e){return function(){return ka(e.apply(this,arguments))}}(e):Ca(e);for(var t=this._groups,n=t.length,r=[],o=[],i=0;i<n;++i)for(var a,u=t[i],l=u.length,c=0;c<l;++c)(a=u[c])&&(r.push(e.call(a,a.__data__,c,u)),o.push(a));return new Mu(r,o)},selectChild:function(e){return this.select(null==e?Na:function(e){return function(){return Aa.call(this.children,e)}}("function"==typeof e?e:Ma(e)))},selectChildren:function(e){return this.selectAll(null==e?Ta:function(e){return function(){return ja.call(this.children,e)}}("function"==typeof e?e:Ma(e)))},filter:function(e){"function"!=typeof e&&(e=Pa(e));for(var t=this._groups,n=t.length,r=new Array(n),o=0;o<n;++o)for(var i,a=t[o],u=a.length,l=r[o]=[],c=0;c<u;++c)(i=a[c])&&e.call(i,i.__data__,c,a)&&l.push(i);return new Mu(r,this._parents)},data:function(e,t){if(!arguments.length)return Array.from(this,Ba);var n=t?Ia:za,r=this._parents,o=this._groups;"function"!=typeof e&&(e=La(e));for(var i=o.length,a=new Array(i),u=new Array(i),l=new Array(i),c=0;c<i;++c){var s=r[c],f=o[c],d=f.length,p=Ua(e.call(s,s&&s.__data__,c,r)),h=p.length,v=u[c]=new Array(h),g=a[c]=new Array(h),y=l[c]=new Array(d);n(s,f,v,g,y,p,t);for(var m,b,w=0,_=0;w<h;++w)if(m=v[w]){for(w>=_&&(_=w+1);!(b=g[_])&&++_<h;);m._next=b||null}}return(a=new Mu(a,r))._enter=u,a._exit=l,a},enter:function(){return new Mu(this._enter||this._groups.map(Da),this._parents)},exit:function(){return new Mu(this._exit||this._groups.map(Da),this._parents)},join:function(e,t,n){var r=this.enter(),o=this,i=this.exit();return"function"==typeof e?(r=e(r))&&(r=r.selection()):r=r.append(e+""),null!=t&&(o=t(o))&&(o=o.selection()),null==n?i.remove():n(i),r&&o?r.merge(o).order():o},merge:function(e){for(var t=e.selection?e.selection():e,n=this._groups,r=t._groups,o=n.length,i=r.length,a=Math.min(o,i),u=new Array(o),l=0;l<a;++l)for(var c,s=n[l],f=r[l],d=s.length,p=u[l]=new Array(d),h=0;h<d;++h)(c=s[h]||f[h])&&(p[h]=c);for(;l<o;++l)u[l]=n[l];return new Mu(u,this._parents)},selection:function(){return this},order:function(){for(var e=this._groups,t=-1,n=e.length;++t<n;)for(var r,o=e[t],i=o.length-1,a=o[i];--i>=0;)(r=o[i])&&(a&&4^r.compareDocumentPosition(a)&&a.parentNode.insertBefore(r,a),a=r);return this},sort:function(e){function t(t,n){return t&&n?e(t.__data__,n.__data__):!t-!n}e||(e=Fa);for(var n=this._groups,r=n.length,o=new Array(r),i=0;i<r;++i){for(var a,u=n[i],l=u.length,c=o[i]=new Array(l),s=0;s<l;++s)(a=u[s])&&(c[s]=a);c.sort(t)}return new Mu(o,this._parents).order()},call:function(){var e=arguments[0];return arguments[0]=this,e.apply(null,arguments),this},nodes:function(){return Array.from(this)},node:function(){for(var e=this._groups,t=0,n=e.length;t<n;++t)for(var r=e[t],o=0,i=r.length;o<i;++o){var a=r[o];if(a)return a}return null},size:function(){let e=0;for(const t of this)++e;return e},empty:function(){return!this.node()},each:function(e){for(var t=this._groups,n=0,r=t.length;n<r;++n)for(var o,i=t[n],a=0,u=i.length;a<u;++a)(o=i[a])&&e.call(o,o.__data__,a,i);return this},attr:function(e,t){var n=ba(e);if(arguments.length<2){var r=this.node();return n.local?r.getAttributeNS(n.space,n.local):r.getAttribute(n)}return this.each((null==t?n.local?Ha:Xa:"function"==typeof t?n.local?$a:Ya:n.local?Wa:Va)(n,t))},style:function(e,t,n){return arguments.length>1?this.each((null==t?qa:"function"==typeof t?Ka:Ga)(e,t,null==n?"":n)):Qa(this.node(),e)},property:function(e,t){return arguments.length>1?this.each((null==t?Ja:"function"==typeof t?tu:eu)(e,t)):this.node()[e]},classed:function(e,t){var n=nu(e+"");if(arguments.length<2){for(var r=ru(this.node()),o=-1,i=n.length;++o<i;)if(!r.contains(n[o]))return!1;return!0}return this.each(("function"==typeof t?cu:t?uu:lu)(n,t))},text:function(e){return arguments.length?this.each(null==e?su:("function"==typeof e?du:fu)(e)):this.node().textContent},html:function(e){return arguments.length?this.each(null==e?pu:("function"==typeof e?vu:hu)(e)):this.node().innerHTML},raise:function(){return this.each(gu)},lower:function(){return this.each(yu)},append:function(e){var t="function"==typeof e?e:xa(e);return this.select((function(){return this.appendChild(t.apply(this,arguments))}))},insert:function(e,t){var n="function"==typeof e?e:xa(e),r=null==t?mu:"function"==typeof t?t:Ea(t);return this.select((function(){return this.insertBefore(n.apply(this,arguments),r.apply(this,arguments)||null)}))},remove:function(){return this.each(bu)},clone:function(e){return this.select(e?_u:wu)},datum:function(e){return arguments.length?this.property("__data__",e):this.node().__data__},on:function(e,t,n){var r,o,i=xu(e+""),a=i.length;if(!(arguments.length<2)){for(u=t?Eu:Su,r=0;r<a;++r)this.each(u(i[r],t,n));return this}var u=this.node().__on;if(u)for(var l,c=0,s=u.length;c<s;++c)for(r=0,l=u[c];r<a;++r)if((o=i[r]).type===l.type&&o.name===l.name)return l.value},dispatch:function(e,t){return this.each(("function"==typeof t?Cu:Ou)(e,t))},[Symbol.iterator]:function*(){for(var e=this._groups,t=0,n=e.length;t<n;++t)for(var r,o=e[t],i=0,a=o.length;i<a;++i)(r=o[i])&&(yield r)}};var Nu,ju,Tu=0,Du=0,Ru=0,Lu=0,zu=0,Iu=0,Bu="object"==typeof performance&&performance.now?performance:Date,Uu="object"==typeof window&&window.requestAnimationFrame?window.requestAnimationFrame.bind(window):function(e){setTimeout(e,17)};function Fu(){return zu||(Uu(Xu),zu=Bu.now()+Iu)}function Xu(){zu=0}function Hu(){this._call=this._time=this._next=null}function Vu(e,t,n){var r=new Hu;return r.restart(e,t,n),r}function Wu(){zu=(Lu=Bu.now())+Iu,Tu=Du=0;try{!function(){Fu(),++Tu;for(var e,t=Nu;t;)(e=zu-t._time)>=0&&t._call.call(null,e),t=t._next;--Tu}()}finally{Tu=0,function(){var e,t,n=Nu,r=1/0;for(;n;)n._call?(r>n._time&&(r=n._time),e=n,n=n._next):(t=n._next,n._next=null,n=e?e._next=t:Nu=t);ju=e,$u(r)}(),zu=0}}function Yu(){var e=Bu.now(),t=e-Lu;t>1e3&&(Iu-=t,Lu=e)}function $u(e){Tu||(Du&&(Du=clearTimeout(Du)),e-zu>24?(e<1/0&&(Du=setTimeout(Wu,e-Bu.now()-Iu)),Ru&&(Ru=clearInterval(Ru))):(Ru||(Lu=Bu.now(),Ru=setInterval(Yu,1e3)),Tu=1,Uu(Wu)))}function Zu(e,t,n){var r=new Hu;return t=null==t?0:+t,r.restart((n=>{r.stop(),e(n+t)}),t,n),r}Hu.prototype=Vu.prototype={constructor:Hu,restart:function(e,t,n){if("function"!=typeof e)throw new TypeError("callback is not a function");n=(null==n?Fu():+n)+(null==t?0:+t),this._next||ju===this||(ju?ju._next=this:Nu=this,ju=this),this._call=e,this._time=n,$u()},stop:function(){this._call&&(this._call=null,this._time=1/0,$u())}};var qu=Wn("start","end","cancel","interrupt"),Gu=[];function Ku(e,t,n,r,o,i){var a=e.__transition;if(a){if(n in a)return}else e.__transition={};!function(e,t,n){var r,o=e.__transition;function i(e){n.state=1,n.timer.restart(a,n.delay,n.time),n.delay<=e&&a(e-n.delay)}function a(i){var c,s,f,d;if(1!==n.state)return l();for(c in o)if((d=o[c]).name===n.name){if(3===d.state)return Zu(a);4===d.state?(d.state=6,d.timer.stop(),d.on.call("interrupt",e,e.__data__,d.index,d.group),delete o[c]):+c<t&&(d.state=6,d.timer.stop(),d.on.call("cancel",e,e.__data__,d.index,d.group),delete o[c])}if(Zu((function(){3===n.state&&(n.state=4,n.timer.restart(u,n.delay,n.time),u(i))})),n.state=2,n.on.call("start",e,e.__data__,n.index,n.group),2===n.state){for(n.state=3,r=new Array(f=n.tween.length),c=0,s=-1;c<f;++c)(d=n.tween[c].value.call(e,e.__data__,n.index,n.group))&&(r[++s]=d);r.length=s+1}}function u(t){for(var o=t<n.duration?n.ease.call(null,t/n.duration):(n.timer.restart(l),n.state=5,1),i=-1,a=r.length;++i<a;)r[i].call(e,o);5===n.state&&(n.on.call("end",e,e.__data__,n.index,n.group),l())}function l(){for(var r in n.state=6,n.timer.stop(),delete o[t],o)return;delete e.__transition}o[t]=n,n.timer=Vu(i,0,n.time)}(e,n,{name:t,index:r,group:o,on:qu,tween:Gu,time:i.time,delay:i.delay,duration:i.duration,ease:i.ease,timer:null,state:0})}function Qu(e,t){var n=el(e,t);if(n.state>0)throw new Error("too late; already scheduled");return n}function Ju(e,t){var n=el(e,t);if(n.state>3)throw new Error("too late; already running");return n}function el(e,t){var n=e.__transition;if(!n||!(n=n[t]))throw new Error("transition not found");return n}function tl(e,t){var n,r,o,i=e.__transition,a=!0;if(i){for(o in t=null==t?null:t+"",i)(n=i[o]).name===t?(r=n.state>2&&n.state<5,n.state=6,n.timer.stop(),n.on.call(r?"interrupt":"cancel",e,e.__data__,n.index,n.group),delete i[o]):a=!1;a&&delete e.__transition}}function nl(e,t){var n,r;return function(){var o=Ju(this,e),i=o.tween;if(i!==n)for(var a=0,u=(r=n=i).length;a<u;++a)if(r[a].name===t){(r=r.slice()).splice(a,1);break}o.tween=r}}function rl(e,t,n){var r,o;if("function"!=typeof n)throw new Error;return function(){var i=Ju(this,e),a=i.tween;if(a!==r){o=(r=a).slice();for(var u={name:t,value:n},l=0,c=o.length;l<c;++l)if(o[l].name===t){o[l]=u;break}l===c&&o.push(u)}i.tween=o}}function ol(e,t,n){var r=e._id;return e.each((function(){var e=Ju(this,r);(e.value||(e.value={}))[t]=n.apply(this,arguments)})),function(e){return el(e,r).value[t]}}function il(e,t){var n;return("number"==typeof t?Yo:t instanceof Mo?Wo:(n=Mo(t))?(t=n,Wo):qo)(e,t)}function al(e){return function(){this.removeAttribute(e)}}function ul(e){return function(){this.removeAttributeNS(e.space,e.local)}}function ll(e,t,n){var r,o,i=n+"";return function(){var a=this.getAttribute(e);return a===i?null:a===r?o:o=t(r=a,n)}}function cl(e,t,n){var r,o,i=n+"";return function(){var a=this.getAttributeNS(e.space,e.local);return a===i?null:a===r?o:o=t(r=a,n)}}function sl(e,t,n){var r,o,i;return function(){var a,u,l=n(this);if(null!=l)return(a=this.getAttribute(e))===(u=l+"")?null:a===r&&u===o?i:(o=u,i=t(r=a,l));this.removeAttribute(e)}}function fl(e,t,n){var r,o,i;return function(){var a,u,l=n(this);if(null!=l)return(a=this.getAttributeNS(e.space,e.local))===(u=l+"")?null:a===r&&u===o?i:(o=u,i=t(r=a,l));this.removeAttributeNS(e.space,e.local)}}function dl(e,t){return function(n){this.setAttribute(e,t.call(this,n))}}function pl(e,t){return function(n){this.setAttributeNS(e.space,e.local,t.call(this,n))}}function hl(e,t){var n,r;function o(){var o=t.apply(this,arguments);return o!==r&&(n=(r=o)&&pl(e,o)),n}return o._value=t,o}function vl(e,t){var n,r;function o(){var o=t.apply(this,arguments);return o!==r&&(n=(r=o)&&dl(e,o)),n}return o._value=t,o}function gl(e,t){return function(){Qu(this,e).delay=+t.apply(this,arguments)}}function yl(e,t){return t=+t,function(){Qu(this,e).delay=t}}function ml(e,t){return function(){Ju(this,e).duration=+t.apply(this,arguments)}}function bl(e,t){return t=+t,function(){Ju(this,e).duration=t}}function wl(e,t){if("function"!=typeof t)throw new Error;return function(){Ju(this,e).ease=t}}function _l(e,t,n){var r,o,i=function(e){return(e+"").trim().split(/^|\s+/).every((function(e){var t=e.indexOf(".");return t>=0&&(e=e.slice(0,t)),!e||"start"===e}))}(t)?Qu:Ju;return function(){var a=i(this,e),u=a.on;u!==r&&(o=(r=u).copy()).on(t,n),a.on=o}}var xl=Au.prototype.constructor;function Sl(e){return function(){this.style.removeProperty(e)}}function El(e,t,n){return function(r){this.style.setProperty(e,t.call(this,r),n)}}function kl(e,t,n){var r,o;function i(){var i=t.apply(this,arguments);return i!==o&&(r=(o=i)&&El(e,i,n)),r}return i._value=t,i}function Ol(e){return function(t){this.textContent=e.call(this,t)}}function Cl(e){var t,n;function r(){var r=e.apply(this,arguments);return r!==n&&(t=(n=r)&&Ol(r)),t}return r._value=e,r}var Pl=0;function Ml(e,t,n,r){this._groups=e,this._parents=t,this._name=n,this._id=r}function Al(){return++Pl}var Nl=Au.prototype;Ml.prototype={constructor:Ml,select:function(e){var t=this._name,n=this._id;"function"!=typeof e&&(e=Ea(e));for(var r=this._groups,o=r.length,i=new Array(o),a=0;a<o;++a)for(var u,l,c=r[a],s=c.length,f=i[a]=new Array(s),d=0;d<s;++d)(u=c[d])&&(l=e.call(u,u.__data__,d,c))&&("__data__"in u&&(l.__data__=u.__data__),f[d]=l,Ku(f[d],t,n,d,f,el(u,n)));return new Ml(i,this._parents,t,n)},selectAll:function(e){var t=this._name,n=this._id;"function"!=typeof e&&(e=Ca(e));for(var r=this._groups,o=r.length,i=[],a=[],u=0;u<o;++u)for(var l,c=r[u],s=c.length,f=0;f<s;++f)if(l=c[f]){for(var d,p=e.call(l,l.__data__,f,c),h=el(l,n),v=0,g=p.length;v<g;++v)(d=p[v])&&Ku(d,t,n,v,p,h);i.push(p),a.push(l)}return new Ml(i,a,t,n)},filter:function(e){"function"!=typeof e&&(e=Pa(e));for(var t=this._groups,n=t.length,r=new Array(n),o=0;o<n;++o)for(var i,a=t[o],u=a.length,l=r[o]=[],c=0;c<u;++c)(i=a[c])&&e.call(i,i.__data__,c,a)&&l.push(i);return new Ml(r,this._parents,this._name,this._id)},merge:function(e){if(e._id!==this._id)throw new Error;for(var t=this._groups,n=e._groups,r=t.length,o=n.length,i=Math.min(r,o),a=new Array(r),u=0;u<i;++u)for(var l,c=t[u],s=n[u],f=c.length,d=a[u]=new Array(f),p=0;p<f;++p)(l=c[p]||s[p])&&(d[p]=l);for(;u<r;++u)a[u]=t[u];return new Ml(a,this._parents,this._name,this._id)},selection:function(){return new xl(this._groups,this._parents)},transition:function(){for(var e=this._name,t=this._id,n=Al(),r=this._groups,o=r.length,i=0;i<o;++i)for(var a,u=r[i],l=u.length,c=0;c<l;++c)if(a=u[c]){var s=el(a,t);Ku(a,e,n,c,u,{time:s.time+s.delay+s.duration,delay:0,duration:s.duration,ease:s.ease})}return new Ml(r,this._parents,e,n)},call:Nl.call,nodes:Nl.nodes,node:Nl.node,size:Nl.size,empty:Nl.empty,each:Nl.each,on:function(e,t){var n=this._id;return arguments.length<2?el(this.node(),n).on.on(e):this.each(_l(n,e,t))},attr:function(e,t){var n=ba(e),r="transform"===n?ni:il;return this.attrTween(e,"function"==typeof t?(n.local?fl:sl)(n,r,ol(this,"attr."+e,t)):null==t?(n.local?ul:al)(n):(n.local?cl:ll)(n,r,t))},attrTween:function(e,t){var n="attr."+e;if(arguments.length<2)return(n=this.tween(n))&&n._value;if(null==t)return this.tween(n,null);if("function"!=typeof t)throw new Error;var r=ba(e);return this.tween(n,(r.local?hl:vl)(r,t))},style:function(e,t,n){var r="transform"==(e+="")?ti:il;return null==t?this.styleTween(e,function(e,t){var n,r,o;return function(){var i=Qa(this,e),a=(this.style.removeProperty(e),Qa(this,e));return i===a?null:i===n&&a===r?o:o=t(n=i,r=a)}}(e,r)).on("end.style."+e,Sl(e)):"function"==typeof t?this.styleTween(e,function(e,t,n){var r,o,i;return function(){var a=Qa(this,e),u=n(this),l=u+"";return null==u&&(this.style.removeProperty(e),l=u=Qa(this,e)),a===l?null:a===r&&l===o?i:(o=l,i=t(r=a,u))}}(e,r,ol(this,"style."+e,t))).each(function(e,t){var n,r,o,i,a="style."+t,u="end."+a;return function(){var l=Ju(this,e),c=l.on,s=null==l.value[a]?i||(i=Sl(t)):void 0;c===n&&o===s||(r=(n=c).copy()).on(u,o=s),l.on=r}}(this._id,e)):this.styleTween(e,function(e,t,n){var r,o,i=n+"";return function(){var a=Qa(this,e);return a===i?null:a===r?o:o=t(r=a,n)}}(e,r,t),n).on("end.style."+e,null)},styleTween:function(e,t,n){var r="style."+(e+="");if(arguments.length<2)return(r=this.tween(r))&&r._value;if(null==t)return this.tween(r,null);if("function"!=typeof t)throw new Error;return this.tween(r,kl(e,t,null==n?"":n))},text:function(e){return this.tween("text","function"==typeof e?function(e){return function(){var t=e(this);this.textContent=null==t?"":t}}(ol(this,"text",e)):function(e){return function(){this.textContent=e}}(null==e?"":e+""))},textTween:function(e){var t="text";if(arguments.length<1)return(t=this.tween(t))&&t._value;if(null==e)return this.tween(t,null);if("function"!=typeof e)throw new Error;return this.tween(t,Cl(e))},remove:function(){return this.on("end.remove",function(e){return function(){var t=this.parentNode;for(var n in this.__transition)if(+n!==e)return;t&&t.removeChild(this)}}(this._id))},tween:function(e,t){var n=this._id;if(e+="",arguments.length<2){for(var r,o=el(this.node(),n).tween,i=0,a=o.length;i<a;++i)if((r=o[i]).name===e)return r.value;return null}return this.each((null==t?nl:rl)(n,e,t))},delay:function(e){var t=this._id;return arguments.length?this.each(("function"==typeof e?gl:yl)(t,e)):el(this.node(),t).delay},duration:function(e){var t=this._id;return arguments.length?this.each(("function"==typeof e?ml:bl)(t,e)):el(this.node(),t).duration},ease:function(e){var t=this._id;return arguments.length?this.each(wl(t,e)):el(this.node(),t).ease},easeVarying:function(e){if("function"!=typeof e)throw new Error;return this.each(function(e,t){return function(){var n=t.apply(this,arguments);if("function"!=typeof n)throw new Error;Ju(this,e).ease=n}}(this._id,e))},end:function(){var e,t,n=this,r=n._id,o=n.size();return new Promise((function(i,a){var u={value:a},l={value:function(){0==--o&&i()}};n.each((function(){var n=Ju(this,r),o=n.on;o!==e&&((t=(e=o).copy())._.cancel.push(u),t._.interrupt.push(u),t._.end.push(l)),n.on=t})),0===o&&i()}))},[Symbol.iterator]:Nl[Symbol.iterator]};var jl={time:null,delay:0,duration:250,ease:function(e){return((e*=2)<=1?e*e*e:(e-=2)*e*e+2)/2}};function Tl(e,t){for(var n;!(n=e.__transition)||!(n=n[t]);)if(!(e=e.parentNode))throw new Error(`transition ${t} not found`);return n}Au.prototype.interrupt=function(e){return this.each((function(){tl(this,e)}))},Au.prototype.transition=function(e){var t,n;e instanceof Ml?(t=e._id,e=e._name):(t=Al(),(n=jl).time=Fu(),e=null==e?null:e+"");for(var r=this._groups,o=r.length,i=0;i<o;++i)for(var a,u=r[i],l=u.length,c=0;c<l;++c)(a=u[c])&&Ku(a,e,t,c,u,n||Tl(a,t));return new Ml(r,this._parents,e,t)};var Dl=e=>()=>e;function Rl(e,{sourceEvent:t,target:n,transform:r,dispatch:o}){Object.defineProperties(this,{type:{value:e,enumerable:!0,configurable:!0},sourceEvent:{value:t,enumerable:!0,configurable:!0},target:{value:n,enumerable:!0,configurable:!0},transform:{value:r,enumerable:!0,configurable:!0},_:{value:o}})}function Ll(e,t,n){this.k=e,this.x=t,this.y=n}Ll.prototype={constructor:Ll,scale:function(e){return 1===e?this:new Ll(this.k*e,this.x,this.y)},translate:function(e,t){return 0===e&0===t?this:new Ll(this.k,this.x+this.k*e,this.y+this.k*t)},apply:function(e){return[e[0]*this.k+this.x,e[1]*this.k+this.y]},applyX:function(e){return e*this.k+this.x},applyY:function(e){return e*this.k+this.y},invert:function(e){return[(e[0]-this.x)/this.k,(e[1]-this.y)/this.k]},invertX:function(e){return(e-this.x)/this.k},invertY:function(e){return(e-this.y)/this.k},rescaleX:function(e){return e.copy().domain(e.range().map(this.invertX,this).map(e.invert,e))},rescaleY:function(e){return e.copy().domain(e.range().map(this.invertY,this).map(e.invert,e))},toString:function(){return"translate("+this.x+","+this.y+") scale("+this.k+")"}};var zl=new Ll(1,0,0);function Il(e){e.stopImmediatePropagation()}function Bl(e){e.preventDefault(),e.stopImmediatePropagation()}function Ul(e){return!(e.ctrlKey&&"wheel"!==e.type||e.button)}function Fl(){var e=this;return e instanceof SVGElement?(e=e.ownerSVGElement||e).hasAttribute("viewBox")?[[(e=e.viewBox.baseVal).x,e.y],[e.x+e.width,e.y+e.height]]:[[0,0],[e.width.baseVal.value,e.height.baseVal.value]]:[[0,0],[e.clientWidth,e.clientHeight]]}function Xl(){return this.__zoom||zl}function Hl(e){return-e.deltaY*(1===e.deltaMode?.05:e.deltaMode?1:.002)*(e.ctrlKey?10:1)}function Vl(){return navigator.maxTouchPoints||"ontouchstart"in this}function Wl(e,t,n){var r=e.invertX(t[0][0])-n[0][0],o=e.invertX(t[1][0])-n[1][0],i=e.invertY(t[0][1])-n[0][1],a=e.invertY(t[1][1])-n[1][1];return e.translate(o>r?(r+o)/2:Math.min(0,r)||Math.max(0,o),a>i?(i+a)/2:Math.min(0,i)||Math.max(0,a))}var Yl,$l,Zl,ql,Gl,Kl;!function(e){e.Left="left",e.Top="top",e.Right="right",e.Bottom="bottom"}(Yl||(Yl={})),function(e){e.Arrow="arrow",e.ArrowClosed="arrowclosed"}($l||($l={})),function(e){e.Lines="lines",e.Dots="dots"}(Zl||(Zl={})),function(e){e.Strict="strict",e.Loose="loose"}(ql||(ql={})),function(e){e.Bezier="default",e.Straight="straight",e.Step="step",e.SmoothStep="smoothstep"}(Gl||(Gl={})),function(e){e.Free="free",e.Vertical="vertical",e.Horizontal="horizontal"}(Kl||(Kl={}));var Ql=function(e,t){return e.x!==t.x||e.y!==t.y||e.zoom!==t.k},Jl=function(e){return{x:e.x,y:e.y,zoom:e.k}},ec=function(t){var n=t.onMove,r=t.onMoveStart,o=t.onMoveEnd,i=t.zoomOnScroll,a=void 0===i||i,u=t.zoomOnPinch,l=void 0===u||u,c=t.panOnScroll,s=void 0!==c&&c,f=t.panOnScrollSpeed,d=void 0===f?.5:f,p=t.panOnScrollMode,h=void 0===p?Kl.Free:p,v=t.zoomOnDoubleClick,g=void 0===v||v,y=t.selectionKeyPressed,m=t.elementsSelectable,b=t.paneMoveable,w=void 0===b||b,_=t.defaultPosition,x=void 0===_?[0,0]:_,S=t.defaultZoom,E=void 0===S?1:S,k=t.translateExtent,O=t.zoomActivationKeyCode,C=t.children,P=(0,e.useRef)(null),M=(0,e.useRef)({x:0,y:0,zoom:0}),A=gn(),N=vn((function(e){return e.d3Zoom})),j=vn((function(e){return e.d3Selection})),T=vn((function(e){return e.d3ZoomHandler})),D=hn((function(e){return e.initD3Zoom})),R=hn((function(e){return e.updateTransform})),L=kn(O);return function(t){var n=hn((function(e){return e.updateSize}));(0,e.useEffect)((function(){var e,r=function(){if(t.current){var e=xn(t.current);0===e.height||e.width,n(e)}};return r(),window.onresize=r,t.current&&(e=new ResizeObserver((function(){return r()}))).observe(t.current),function(){window.onresize=null,e&&t.current&&e.unobserve(t.current)}}),[])}(P),(0,e.useEffect)((function(){if(P.current){var e=A.getState(),t=void 0!==k?k:e.translateExtent,n=function(){var e,t,n,r=Ul,o=Fl,i=Wl,a=Hl,u=Vl,l=[0,1/0],c=[[-1/0,-1/0],[1/0,1/0]],s=250,f=oi,d=Wn("start","zoom","end"),p=500,h=0,v=10;function g(e){e.property("__zoom",Xl).on("wheel.zoom",S,{passive:!1}).on("mousedown.zoom",E).on("dblclick.zoom",k).filter(u).on("touchstart.zoom",O).on("touchmove.zoom",C).on("touchend.zoom touchcancel.zoom",P).style("-webkit-tap-highlight-color","rgba(0,0,0,0)")}function y(e,t){return(t=Math.max(l[0],Math.min(l[1],t)))===e.k?e:new Ll(t,e.x,e.y)}function m(e,t,n){var r=t[0]-n[0]*e.k,o=t[1]-n[1]*e.k;return r===e.x&&o===e.y?e:new Ll(e.k,r,o)}function b(e){return[(+e[0][0]+ +e[1][0])/2,(+e[0][1]+ +e[1][1])/2]}function w(e,t,n,r){e.on("start.zoom",(function(){_(this,arguments).event(r).start()})).on("interrupt.zoom end.zoom",(function(){_(this,arguments).event(r).end()})).tween("zoom",(function(){var e=this,i=arguments,a=_(e,i).event(r),u=o.apply(e,i),l=null==n?b(u):"function"==typeof n?n.apply(e,i):n,c=Math.max(u[1][0]-u[0][0],u[1][1]-u[0][1]),s=e.__zoom,d="function"==typeof t?t.apply(e,i):t,p=f(s.invert(l).concat(c/s.k),d.invert(l).concat(c/d.k));return function(e){if(1===e)e=d;else{var t=p(e),n=c/t[2];e=new Ll(n,l[0]-t[0]*n,l[1]-t[1]*n)}a.zoom(null,e)}}))}function _(e,t,n){return!n&&e.__zooming||new x(e,t)}function x(e,t){this.that=e,this.args=t,this.active=0,this.sourceEvent=null,this.extent=o.apply(e,t),this.taps=0}function S(e,...t){if(r.apply(this,arguments)){var n=_(this,t).event(e),o=this.__zoom,u=Math.max(l[0],Math.min(l[1],o.k*Math.pow(2,a.apply(this,arguments)))),s=ga(e);if(n.wheel)n.mouse[0][0]===s[0]&&n.mouse[0][1]===s[1]||(n.mouse[1]=o.invert(n.mouse[0]=s)),clearTimeout(n.wheel);else{if(o.k===u)return;n.mouse=[s,o.invert(s)],tl(this),n.start()}Bl(e),n.wheel=setTimeout(f,150),n.zoom("mouse",i(m(y(o,u),n.mouse[0],n.mouse[1]),n.extent,c))}function f(){n.wheel=null,n.end()}}function E(e,...t){if(!n&&r.apply(this,arguments)){var o=e.currentTarget,a=_(this,t,!0).event(e),u=va(e.view).on("mousemove.zoom",d,!0).on("mouseup.zoom",p,!0),l=ga(e,o),s=e.clientX,f=e.clientY;lo(e.view),Il(e),a.mouse=[l,this.__zoom.invert(l)],tl(this),a.start()}function d(e){if(Bl(e),!a.moved){var t=e.clientX-s,n=e.clientY-f;a.moved=t*t+n*n>h}a.event(e).zoom("mouse",i(m(a.that.__zoom,a.mouse[0]=ga(e,o),a.mouse[1]),a.extent,c))}function p(e){u.on("mousemove.zoom mouseup.zoom",null),co(e.view,a.moved),Bl(e),a.event(e).end()}}function k(e,...t){if(r.apply(this,arguments)){var n=this.__zoom,a=ga(e.changedTouches?e.changedTouches[0]:e,this),u=n.invert(a),l=n.k*(e.shiftKey?.5:2),f=i(m(y(n,l),a,u),o.apply(this,t),c);Bl(e),s>0?va(this).transition().duration(s).call(w,f,a,e):va(this).call(g.transform,f,a,e)}}function O(n,...o){if(r.apply(this,arguments)){var i,a,u,l,c=n.touches,s=c.length,f=_(this,o,n.changedTouches.length===s).event(n);for(Il(n),a=0;a<s;++a)l=[l=ga(u=c[a],this),this.__zoom.invert(l),u.identifier],f.touch0?f.touch1||f.touch0[2]===l[2]||(f.touch1=l,f.taps=0):(f.touch0=l,i=!0,f.taps=1+!!e);e&&(e=clearTimeout(e)),i&&(f.taps<2&&(t=l[0],e=setTimeout((function(){e=null}),p)),tl(this),f.start())}}function C(e,...t){if(this.__zooming){var n,r,o,a,u=_(this,t).event(e),l=e.changedTouches,s=l.length;for(Bl(e),n=0;n<s;++n)o=ga(r=l[n],this),u.touch0&&u.touch0[2]===r.identifier?u.touch0[0]=o:u.touch1&&u.touch1[2]===r.identifier&&(u.touch1[0]=o);if(r=u.that.__zoom,u.touch1){var f=u.touch0[0],d=u.touch0[1],p=u.touch1[0],h=u.touch1[1],v=(v=p[0]-f[0])*v+(v=p[1]-f[1])*v,g=(g=h[0]-d[0])*g+(g=h[1]-d[1])*g;r=y(r,Math.sqrt(v/g)),o=[(f[0]+p[0])/2,(f[1]+p[1])/2],a=[(d[0]+h[0])/2,(d[1]+h[1])/2]}else{if(!u.touch0)return;o=u.touch0[0],a=u.touch0[1]}u.zoom("touch",i(m(r,o,a),u.extent,c))}}function P(e,...r){if(this.__zooming){var o,i,a=_(this,r).event(e),u=e.changedTouches,l=u.length;for(Il(e),n&&clearTimeout(n),n=setTimeout((function(){n=null}),p),o=0;o<l;++o)i=u[o],a.touch0&&a.touch0[2]===i.identifier?delete a.touch0:a.touch1&&a.touch1[2]===i.identifier&&delete a.touch1;if(a.touch1&&!a.touch0&&(a.touch0=a.touch1,delete a.touch1),a.touch0)a.touch0[1]=this.__zoom.invert(a.touch0[0]);else if(a.end(),2===a.taps&&(i=ga(i,this),Math.hypot(t[0]-i[0],t[1]-i[1])<v)){var c=va(this).on("dblclick.zoom");c&&c.apply(this,arguments)}}}return g.transform=function(e,t,n,r){var o=e.selection?e.selection():e;o.property("__zoom",Xl),e!==o?w(e,t,n,r):o.interrupt().each((function(){_(this,arguments).event(r).start().zoom(null,"function"==typeof t?t.apply(this,arguments):t).end()}))},g.scaleBy=function(e,t,n,r){g.scaleTo(e,(function(){return this.__zoom.k*("function"==typeof t?t.apply(this,arguments):t)}),n,r)},g.scaleTo=function(e,t,n,r){g.transform(e,(function(){var e=o.apply(this,arguments),r=this.__zoom,a=null==n?b(e):"function"==typeof n?n.apply(this,arguments):n,u=r.invert(a),l="function"==typeof t?t.apply(this,arguments):t;return i(m(y(r,l),a,u),e,c)}),n,r)},g.translateBy=function(e,t,n,r){g.transform(e,(function(){return i(this.__zoom.translate("function"==typeof t?t.apply(this,arguments):t,"function"==typeof n?n.apply(this,arguments):n),o.apply(this,arguments),c)}),null,r)},g.translateTo=function(e,t,n,r,a){g.transform(e,(function(){var e=o.apply(this,arguments),a=this.__zoom,u=null==r?b(e):"function"==typeof r?r.apply(this,arguments):r;return i(zl.translate(u[0],u[1]).scale(a.k).translate("function"==typeof t?-t.apply(this,arguments):-t,"function"==typeof n?-n.apply(this,arguments):-n),e,c)}),r,a)},x.prototype={event:function(e){return e&&(this.sourceEvent=e),this},start:function(){return 1==++this.active&&(this.that.__zooming=this,this.emit("start")),this},zoom:function(e,t){return this.mouse&&"mouse"!==e&&(this.mouse[1]=t.invert(this.mouse[0])),this.touch0&&"touch"!==e&&(this.touch0[1]=t.invert(this.touch0[0])),this.touch1&&"touch"!==e&&(this.touch1[1]=t.invert(this.touch1[0])),this.that.__zoom=t,this.emit("zoom"),this},end:function(){return 0==--this.active&&(delete this.that.__zooming,this.emit("end")),this},emit:function(e){var t=va(this.that).datum();d.call(e,this.that,new Rl(e,{sourceEvent:this.sourceEvent,target:g,type:e,transform:this.that.__zoom,dispatch:d}),t)}},g.wheelDelta=function(e){return arguments.length?(a="function"==typeof e?e:Dl(+e),g):a},g.filter=function(e){return arguments.length?(r="function"==typeof e?e:Dl(!!e),g):r},g.touchable=function(e){return arguments.length?(u="function"==typeof e?e:Dl(!!e),g):u},g.extent=function(e){return arguments.length?(o="function"==typeof e?e:Dl([[+e[0][0],+e[0][1]],[+e[1][0],+e[1][1]]]),g):o},g.scaleExtent=function(e){return arguments.length?(l[0]=+e[0],l[1]=+e[1],g):[l[0],l[1]]},g.translateExtent=function(e){return arguments.length?(c[0][0]=+e[0][0],c[1][0]=+e[1][0],c[0][1]=+e[0][1],c[1][1]=+e[1][1],g):[[c[0][0],c[0][1]],[c[1][0],c[1][1]]]},g.constrain=function(e){return arguments.length?(i=e,g):i},g.duration=function(e){return arguments.length?(s=+e,g):s},g.interpolate=function(e){return arguments.length?(f=e,g):f},g.on=function(){var e=d.on.apply(d,arguments);return e===d?g:e},g.clickDistance=function(e){return arguments.length?(h=(e=+e)*e,g):Math.sqrt(h)},g.tapDistance=function(e){return arguments.length?(v=+e,g):v},g}().scaleExtent([e.minZoom,e.maxZoom]).translateExtent(t),r=function(e){return"string"==typeof e?new Mu([[document.querySelector(e)]],[document.documentElement]):new Mu([[e]],Pu)}(P.current).call(n),o=Sn(x[0],t[0][0],t[1][0]),i=Sn(x[1],t[0][1],t[1][1]),a=Sn(E,e.minZoom,e.maxZoom),u=zl.translate(o,i).scale(a);n.transform(r,u),D({d3Zoom:n,d3Selection:r,d3ZoomHandler:r.on("wheel.zoom"),transform:[o,i,a]})}}),[]),(0,e.useEffect)((function(){j&&N&&(s&&!L?j.on("wheel",(function(e){e.preventDefault(),e.stopImmediatePropagation();var t=j.property("__zoom").k||1;if(e.ctrlKey&&l){var n=function(e,t){if(e=function(e){let t;for(;t=e.sourceEvent;)e=t;return e}(e),void 0===t&&(t=e.currentTarget),t){var n=t.ownerSVGElement||t;if(n.createSVGPoint){var r=n.createSVGPoint();return r.x=e.clientX,r.y=e.clientY,[(r=r.matrixTransform(t.getScreenCTM().inverse())).x,r.y]}if(t.getBoundingClientRect){var o=t.getBoundingClientRect();return[e.clientX-o.left-t.clientLeft,e.clientY-o.top-t.clientTop]}}return[e.pageX,e.pageY]}(e),r=-e.deltaY*(1===e.deltaMode?.05:e.deltaMode?1:.002)*10,o=t*Math.pow(2,r);N.scaleTo(j,o,n)}else{var i=1===e.deltaMode?20:1,a=h===Kl.Vertical?0:e.deltaX*i,u=h===Kl.Horizontal?0:e.deltaY*i;N.translateBy(j,-a/t*d,-u/t*d)}})).on("wheel.zoom",null):void 0!==T&&j.on("wheel",null).on("wheel.zoom",T))}),[s,h,j,N,T,L,l]),(0,e.useEffect)((function(){N&&(y?N.on("zoom",null):N.on("zoom",(function(e){if(R([e.transform.x,e.transform.y,e.transform.k]),n){var t=Jl(e.transform);n(t)}})))}),[y,N,R,n]),(0,e.useEffect)((function(){N&&(r?N.on("start",(function(e){if(Ql(M.current,e.transform)){var t=Jl(e.transform);M.current=t,r(t)}})):N.on("start",null))}),[N,r]),(0,e.useEffect)((function(){N&&(o?N.on("end",(function(e){if(Ql(M.current,e.transform)){var t=Jl(e.transform);M.current=t,o(t)}})):N.on("end",null))}),[N,o]),(0,e.useEffect)((function(){N&&N.filter((function(e){var t=L||a,n=l&&e.ctrlKey;return!!(w||t||s||g||l)&&(!y&&(!(!g&&"dblclick"===e.type)&&((!e.target.closest(".nowheel")||"wheel"!==e.type)&&((!e.target.closest(".react-flow__node")&&!e.target.closest(".react-flow__edge")||"wheel"===e.type)&&((!e.target.closest(".react-flow__nodesselection")||"wheel"===e.type)&&(!(!l&&e.ctrlKey&&"wheel"===e.type)&&(!!(t||s||n||"wheel"!==e.type)&&(!!(w||"mousedown"!==e.type&&"touchstart"!==e.type)&&!(e.ctrlKey&&"wheel"!==e.type||e.button)))))))))}))}),[N,a,l,s,g,w,y,m,L]),e.createElement("div",{className:"react-flow__renderer react-flow__zoompane",ref:P},C)};function tc(e){var t=e.target.closest(".react-flow");if(t){var n=t.getBoundingClientRect();return{x:e.clientX-n.left,y:e.clientY-n.top}}}var nc,rc=function(){var t=vn((function(e){return e.userSelectionRect}));return t.draw?e.createElement("div",{className:"react-flow__selection",style:{width:t.width,height:t.height,transform:"translate(".concat(t.x,"px, ").concat(t.y,"px)")}}):null},oc=(0,e.memo)((function(t){var n=t.selectionKeyPressed,r=vn((function(e){return e.selectionActive})),o=vn((function(e){return e.elementsSelectable})),i=hn((function(e){return e.setUserSelection})),a=hn((function(e){return e.updateUserSelection})),u=hn((function(e){return e.unsetUserSelection})),l=hn((function(e){return e.unsetNodesSelection}));if(!o||!(r||n))return null;return e.createElement("div",{className:"react-flow__selectionpane",onMouseDown:function(e){var t=tc(e);t&&i(t)},onMouseMove:function(e){if(n&&r){var t=tc(e);t&&a(t)}},onMouseUp:function(){return u()},onMouseLeave:function(){u(),l()}},e.createElement(rc,null))})),ic={exports:{}},ac={},uc={exports:{}};nc=uc,function(){var e={}.hasOwnProperty;function t(){for(var n=[],r=0;r<arguments.length;r++){var o=arguments[r];if(o){var i=typeof o;if("string"===i||"number"===i)n.push(o);else if(Array.isArray(o)&&o.length){var a=t.apply(null,o);a&&n.push(a)}else if("object"===i)for(var u in o)e.call(o,u)&&o[u]&&n.push(u)}}return n.join(" ")}nc.exports?(t.default=t,nc.exports=t):window.classNames=t}();var lc={},cc={};Object.defineProperty(cc,"__esModule",{value:!0}),cc.findInArray=function(e,t){for(var n=0,r=e.length;n<r;n++)if(t.apply(t,[e[n],n,e]))return e[n]},cc.isFunction=function(e){return"function"==typeof e||"[object Function]"===Object.prototype.toString.call(e)},cc.isNum=function(e){return"number"==typeof e&&!isNaN(e)},cc.int=function(e){return parseInt(e,10)},cc.dontSetMe=function(e,t,n){if(e[t])return new Error("Invalid prop ".concat(t," passed to ").concat(n," - do not set this, set it on the child."))};var sc={};Object.defineProperty(sc,"__esModule",{value:!0}),sc.getPrefix=dc,sc.browserPrefixToKey=pc,sc.browserPrefixToStyle=function(e,t){return t?"-".concat(t.toLowerCase(),"-").concat(e):e},sc.default=void 0;var fc=["Moz","Webkit","O","ms"];function dc(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"transform";if("undefined"==typeof window||void 0===window.document)return"";var t=window.document.documentElement.style;if(e in t)return"";for(var n=0;n<fc.length;n++)if(pc(e,fc[n])in t)return fc[n];return""}function pc(e,t){return t?"".concat(t).concat(function(e){for(var t="",n=!0,r=0;r<e.length;r++)n?(t+=e[r].toUpperCase(),n=!1):"-"===e[r]?n=!0:t+=e[r];return t}(e)):e}var hc=dc();function vc(e){return vc="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},vc(e)}sc.default=hc,Object.defineProperty(lc,"__esModule",{value:!0}),lc.matchesSelector=Sc,lc.matchesSelectorAndParentsTo=function(e,t,n){var r=e;do{if(Sc(r,t))return!0;if(r===n)return!1;r=r.parentNode}while(r);return!1},lc.addEvent=function(e,t,n,r){if(!e)return;var o=wc({capture:!0},r);e.addEventListener?e.addEventListener(t,n,o):e.attachEvent?e.attachEvent("on"+t,n):e["on"+t]=n},lc.removeEvent=function(e,t,n,r){if(!e)return;var o=wc({capture:!0},r);e.removeEventListener?e.removeEventListener(t,n,o):e.detachEvent?e.detachEvent("on"+t,n):e["on"+t]=null},lc.outerHeight=function(e){var t=e.clientHeight,n=e.ownerDocument.defaultView.getComputedStyle(e);return t+=(0,gc.int)(n.borderTopWidth),t+=(0,gc.int)(n.borderBottomWidth)},lc.outerWidth=function(e){var t=e.clientWidth,n=e.ownerDocument.defaultView.getComputedStyle(e);return t+=(0,gc.int)(n.borderLeftWidth),t+=(0,gc.int)(n.borderRightWidth)},lc.innerHeight=function(e){var t=e.clientHeight,n=e.ownerDocument.defaultView.getComputedStyle(e);return t-=(0,gc.int)(n.paddingTop),t-=(0,gc.int)(n.paddingBottom)},lc.innerWidth=function(e){var t=e.clientWidth,n=e.ownerDocument.defaultView.getComputedStyle(e);return t-=(0,gc.int)(n.paddingLeft),t-=(0,gc.int)(n.paddingRight)},lc.offsetXYFromParent=function(e,t,n){var r=t===t.ownerDocument.body?{left:0,top:0}:t.getBoundingClientRect(),o=(e.clientX+t.scrollLeft-r.left)/n,i=(e.clientY+t.scrollTop-r.top)/n;return{x:o,y:i}},lc.createCSSTransform=function(e,t){var n=Ec(e,t,"px");return _c({},(0,yc.browserPrefixToKey)("transform",yc.default),n)},lc.createSVGTransform=function(e,t){return Ec(e,t,"")},lc.getTranslation=Ec,lc.getTouch=function(e,t){return e.targetTouches&&(0,gc.findInArray)(e.targetTouches,(function(e){return t===e.identifier}))||e.changedTouches&&(0,gc.findInArray)(e.changedTouches,(function(e){return t===e.identifier}))},lc.getTouchIdentifier=function(e){if(e.targetTouches&&e.targetTouches[0])return e.targetTouches[0].identifier;if(e.changedTouches&&e.changedTouches[0])return e.changedTouches[0].identifier},lc.addUserSelectStyles=function(e){if(!e)return;var t=e.getElementById("react-draggable-style-el");t||((t=e.createElement("style")).type="text/css",t.id="react-draggable-style-el",t.innerHTML=".react-draggable-transparent-selection *::-moz-selection {all: inherit;}\n",t.innerHTML+=".react-draggable-transparent-selection *::selection {all: inherit;}\n",e.getElementsByTagName("head")[0].appendChild(t));e.body&&kc(e.body,"react-draggable-transparent-selection")},lc.removeUserSelectStyles=function(e){if(!e)return;try{if(e.body&&Oc(e.body,"react-draggable-transparent-selection"),e.selection)e.selection.empty();else{var t=(e.defaultView||window).getSelection();t&&"Caret"!==t.type&&t.removeAllRanges()}}catch(e){}},lc.addClassName=kc,lc.removeClassName=Oc;var gc=cc,yc=function(e){if(e&&e.__esModule)return e;if(null===e||"object"!==vc(e)&&"function"!=typeof e)return{default:e};var t=mc();if(t&&t.has(e))return t.get(e);var n={},r=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var o in e)if(Object.prototype.hasOwnProperty.call(e,o)){var i=r?Object.getOwnPropertyDescriptor(e,o):null;i&&(i.get||i.set)?Object.defineProperty(n,o,i):n[o]=e[o]}n.default=e,t&&t.set(e,n);return n}(sc);function mc(){if("function"!=typeof WeakMap)return null;var e=new WeakMap;return mc=function(){return e},e}function bc(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function wc(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?bc(Object(n),!0).forEach((function(t){_c(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):bc(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function _c(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var xc="";function Sc(e,t){return xc||(xc=(0,gc.findInArray)(["matches","webkitMatchesSelector","mozMatchesSelector","msMatchesSelector","oMatchesSelector"],(function(t){return(0,gc.isFunction)(e[t])}))),!!(0,gc.isFunction)(e[xc])&&e[xc](t)}function Ec(e,t,n){var r=e.x,o=e.y,i="translate(".concat(r).concat(n,",").concat(o).concat(n,")");if(t){var a="".concat("string"==typeof t.x?t.x:t.x+n),u="".concat("string"==typeof t.y?t.y:t.y+n);i="translate(".concat(a,", ").concat(u,")")+i}return i}function kc(e,t){e.classList?e.classList.add(t):e.className.match(new RegExp("(?:^|\\s)".concat(t,"(?!\\S)")))||(e.className+=" ".concat(t))}function Oc(e,t){e.classList?e.classList.remove(t):e.className=e.className.replace(new RegExp("(?:^|\\s)".concat(t,"(?!\\S)"),"g"),"")}var Cc={};Object.defineProperty(Cc,"__esModule",{value:!0}),Cc.getBoundPosition=function(e,t,n){if(!e.props.bounds)return[t,n];var r=e.props.bounds;r="string"==typeof r?r:function(e){return{left:e.left,top:e.top,right:e.right,bottom:e.bottom}}(r);var o=Ac(e);if("string"==typeof r){var i,a=o.ownerDocument,u=a.defaultView;if(!((i="parent"===r?o.parentNode:a.querySelector(r))instanceof u.HTMLElement))throw new Error('Bounds selector "'+r+'" could not find an element.');var l=u.getComputedStyle(o),c=u.getComputedStyle(i);r={left:-o.offsetLeft+(0,Pc.int)(c.paddingLeft)+(0,Pc.int)(l.marginLeft),top:-o.offsetTop+(0,Pc.int)(c.paddingTop)+(0,Pc.int)(l.marginTop),right:(0,Mc.innerWidth)(i)-(0,Mc.outerWidth)(o)-o.offsetLeft+(0,Pc.int)(c.paddingRight)-(0,Pc.int)(l.marginRight),bottom:(0,Mc.innerHeight)(i)-(0,Mc.outerHeight)(o)-o.offsetTop+(0,Pc.int)(c.paddingBottom)-(0,Pc.int)(l.marginBottom)}}(0,Pc.isNum)(r.right)&&(t=Math.min(t,r.right));(0,Pc.isNum)(r.bottom)&&(n=Math.min(n,r.bottom));(0,Pc.isNum)(r.left)&&(t=Math.max(t,r.left));(0,Pc.isNum)(r.top)&&(n=Math.max(n,r.top));return[t,n]},Cc.snapToGrid=function(e,t,n){var r=Math.round(t/e[0])*e[0],o=Math.round(n/e[1])*e[1];return[r,o]},Cc.canDragX=function(e){return"both"===e.props.axis||"x"===e.props.axis},Cc.canDragY=function(e){return"both"===e.props.axis||"y"===e.props.axis},Cc.getControlPosition=function(e,t,n){var r="number"==typeof t?(0,Mc.getTouch)(e,t):null;if("number"==typeof t&&!r)return null;var o=Ac(n),i=n.props.offsetParent||o.offsetParent||o.ownerDocument.body;return(0,Mc.offsetXYFromParent)(r||e,i,n.props.scale)},Cc.createCoreData=function(e,t,n){var r=e.state,o=!(0,Pc.isNum)(r.lastX),i=Ac(e);return o?{node:i,deltaX:0,deltaY:0,lastX:t,lastY:n,x:t,y:n}:{node:i,deltaX:t-r.lastX,deltaY:n-r.lastY,lastX:r.lastX,lastY:r.lastY,x:t,y:n}},Cc.createDraggableData=function(e,t){var n=e.props.scale;return{node:t.node,x:e.state.x+t.deltaX/n,y:e.state.y+t.deltaY/n,deltaX:t.deltaX/n,deltaY:t.deltaY/n,lastX:e.state.x,lastY:e.state.y}};var Pc=cc,Mc=lc;function Ac(e){var t=e.findDOMNode();if(!t)throw new Error("<DraggableCore>: Unmounted during event!");return t}var Nc={},jc={};Object.defineProperty(jc,"__esModule",{value:!0}),jc.default=function(){},Object.defineProperty(Nc,"__esModule",{value:!0}),Nc.default=void 0;var Tc=function(e){if(e&&e.__esModule)return e;if(null===e||"object"!==Xc(e)&&"function"!=typeof e)return{default:e};var t=Fc();if(t&&t.has(e))return t.get(e);var n={},r=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var o in e)if(Object.prototype.hasOwnProperty.call(e,o)){var i=r?Object.getOwnPropertyDescriptor(e,o):null;i&&(i.get||i.set)?Object.defineProperty(n,o,i):n[o]=e[o]}n.default=e,t&&t.set(e,n);return n}(e),Dc=Uc(Ie.exports),Rc=Uc(t),Lc=lc,zc=Cc,Ic=cc,Bc=Uc(jc);function Uc(e){return e&&e.__esModule?e:{default:e}}function Fc(){if("function"!=typeof WeakMap)return null;var e=new WeakMap;return Fc=function(){return e},e}function Xc(e){return Xc="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Xc(e)}function Hc(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(e)))return;var n=[],r=!0,o=!1,i=void 0;try{for(var a,u=e[Symbol.iterator]();!(r=(a=u.next()).done)&&(n.push(a.value),!t||n.length!==t);r=!0);}catch(e){o=!0,i=e}finally{try{r||null==u.return||u.return()}finally{if(o)throw i}}return n}(e,t)||function(e,t){if(!e)return;if("string"==typeof e)return Vc(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return Vc(e,t)}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Vc(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function Wc(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function Yc(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function $c(e,t){return $c=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e},$c(e,t)}function Zc(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=Kc(e);if(t){var o=Kc(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return qc(this,n)}}function qc(e,t){return!t||"object"!==Xc(t)&&"function"!=typeof t?Gc(e):t}function Gc(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function Kc(e){return Kc=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)},Kc(e)}function Qc(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var Jc={start:"touchstart",move:"touchmove",stop:"touchend"},es={start:"mousedown",move:"mousemove",stop:"mouseup"},ts=es,ns=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&$c(e,t)}(i,e);var t,n,r,o=Zc(i);function i(){var e;Wc(this,i);for(var t=arguments.length,n=new Array(t),r=0;r<t;r++)n[r]=arguments[r];return Qc(Gc(e=o.call.apply(o,[this].concat(n))),"state",{dragging:!1,lastX:NaN,lastY:NaN,touchIdentifier:null}),Qc(Gc(e),"mounted",!1),Qc(Gc(e),"handleDragStart",(function(t){if(e.props.onMouseDown(t),!e.props.allowAnyClick&&"number"==typeof t.button&&0!==t.button)return!1;var n=e.findDOMNode();if(!n||!n.ownerDocument||!n.ownerDocument.body)throw new Error("<DraggableCore> not mounted on DragStart!");var r=n.ownerDocument;if(!(e.props.disabled||!(t.target instanceof r.defaultView.Node)||e.props.handle&&!(0,Lc.matchesSelectorAndParentsTo)(t.target,e.props.handle,n)||e.props.cancel&&(0,Lc.matchesSelectorAndParentsTo)(t.target,e.props.cancel,n))){"touchstart"===t.type&&t.preventDefault();var o=(0,Lc.getTouchIdentifier)(t);e.setState({touchIdentifier:o});var i=(0,zc.getControlPosition)(t,o,Gc(e));if(null!=i){var a=i.x,u=i.y,l=(0,zc.createCoreData)(Gc(e),a,u);(0,Bc.default)("DraggableCore: handleDragStart: %j",l),(0,Bc.default)("calling",e.props.onStart),!1!==e.props.onStart(t,l)&&!1!==e.mounted&&(e.props.enableUserSelectHack&&(0,Lc.addUserSelectStyles)(r),e.setState({dragging:!0,lastX:a,lastY:u}),(0,Lc.addEvent)(r,ts.move,e.handleDrag),(0,Lc.addEvent)(r,ts.stop,e.handleDragStop))}}})),Qc(Gc(e),"handleDrag",(function(t){var n=(0,zc.getControlPosition)(t,e.state.touchIdentifier,Gc(e));if(null!=n){var r=n.x,o=n.y;if(Array.isArray(e.props.grid)){var i=r-e.state.lastX,a=o-e.state.lastY,u=Hc((0,zc.snapToGrid)(e.props.grid,i,a),2);if(i=u[0],a=u[1],!i&&!a)return;r=e.state.lastX+i,o=e.state.lastY+a}var l=(0,zc.createCoreData)(Gc(e),r,o);if((0,Bc.default)("DraggableCore: handleDrag: %j",l),!1!==e.props.onDrag(t,l)&&!1!==e.mounted)e.setState({lastX:r,lastY:o});else try{e.handleDragStop(new MouseEvent("mouseup"))}catch(t){var c=document.createEvent("MouseEvents");c.initMouseEvent("mouseup",!0,!0,window,0,0,0,0,0,!1,!1,!1,!1,0,null),e.handleDragStop(c)}}})),Qc(Gc(e),"handleDragStop",(function(t){if(e.state.dragging){var n=(0,zc.getControlPosition)(t,e.state.touchIdentifier,Gc(e));if(null!=n){var r=n.x,o=n.y,i=(0,zc.createCoreData)(Gc(e),r,o);if(!1===e.props.onStop(t,i)||!1===e.mounted)return!1;var a=e.findDOMNode();a&&e.props.enableUserSelectHack&&(0,Lc.removeUserSelectStyles)(a.ownerDocument),(0,Bc.default)("DraggableCore: handleDragStop: %j",i),e.setState({dragging:!1,lastX:NaN,lastY:NaN}),a&&((0,Bc.default)("DraggableCore: Removing handlers"),(0,Lc.removeEvent)(a.ownerDocument,ts.move,e.handleDrag),(0,Lc.removeEvent)(a.ownerDocument,ts.stop,e.handleDragStop))}}})),Qc(Gc(e),"onMouseDown",(function(t){return ts=es,e.handleDragStart(t)})),Qc(Gc(e),"onMouseUp",(function(t){return ts=es,e.handleDragStop(t)})),Qc(Gc(e),"onTouchStart",(function(t){return ts=Jc,e.handleDragStart(t)})),Qc(Gc(e),"onTouchEnd",(function(t){return ts=Jc,e.handleDragStop(t)})),e}return t=i,(n=[{key:"componentDidMount",value:function(){this.mounted=!0;var e=this.findDOMNode();e&&(0,Lc.addEvent)(e,Jc.start,this.onTouchStart,{passive:!1})}},{key:"componentWillUnmount",value:function(){this.mounted=!1;var e=this.findDOMNode();if(e){var t=e.ownerDocument;(0,Lc.removeEvent)(t,es.move,this.handleDrag),(0,Lc.removeEvent)(t,Jc.move,this.handleDrag),(0,Lc.removeEvent)(t,es.stop,this.handleDragStop),(0,Lc.removeEvent)(t,Jc.stop,this.handleDragStop),(0,Lc.removeEvent)(e,Jc.start,this.onTouchStart,{passive:!1}),this.props.enableUserSelectHack&&(0,Lc.removeUserSelectStyles)(t)}}},{key:"findDOMNode",value:function(){return this.props.nodeRef?this.props.nodeRef.current:Rc.default.findDOMNode(this)}},{key:"render",value:function(){return Tc.cloneElement(Tc.Children.only(this.props.children),{onMouseDown:this.onMouseDown,onMouseUp:this.onMouseUp,onTouchEnd:this.onTouchEnd})}}])&&Yc(t.prototype,n),r&&Yc(t,r),i}(Tc.Component);Nc.default=ns,Qc(ns,"displayName","DraggableCore"),Qc(ns,"propTypes",{allowAnyClick:Dc.default.bool,disabled:Dc.default.bool,enableUserSelectHack:Dc.default.bool,offsetParent:function(e,t){if(e[t]&&1!==e[t].nodeType)throw new Error("Draggable's offsetParent must be a DOM Node.")},grid:Dc.default.arrayOf(Dc.default.number),handle:Dc.default.string,cancel:Dc.default.string,nodeRef:Dc.default.object,onStart:Dc.default.func,onDrag:Dc.default.func,onStop:Dc.default.func,onMouseDown:Dc.default.func,scale:Dc.default.number,className:Ic.dontSetMe,style:Ic.dontSetMe,transform:Ic.dontSetMe}),Qc(ns,"defaultProps",{allowAnyClick:!1,cancel:null,disabled:!1,enableUserSelectHack:!0,offsetParent:null,handle:null,grid:null,transform:null,onStart:function(){},onDrag:function(){},onStop:function(){},onMouseDown:function(){},scale:1}),function(n){Object.defineProperty(n,"__esModule",{value:!0}),Object.defineProperty(n,"DraggableCore",{enumerable:!0,get:function(){return s.default}}),n.default=void 0;var r=function(e){if(e&&e.__esModule)return e;if(null===e||"object"!==h(e)&&"function"!=typeof e)return{default:e};var t=p();if(t&&t.has(e))return t.get(e);var n={},r=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var o in e)if(Object.prototype.hasOwnProperty.call(e,o)){var i=r?Object.getOwnPropertyDescriptor(e,o):null;i&&(i.get||i.set)?Object.defineProperty(n,o,i):n[o]=e[o]}n.default=e,t&&t.set(e,n);return n}(e),o=d(Ie.exports),i=d(t),a=d(uc.exports),u=lc,l=Cc,c=cc,s=d(Nc),f=d(jc);function d(e){return e&&e.__esModule?e:{default:e}}function p(){if("function"!=typeof WeakMap)return null;var e=new WeakMap;return p=function(){return e},e}function h(e){return h="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},h(e)}function v(){return v=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},v.apply(this,arguments)}function g(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}function y(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(e)))return;var n=[],r=!0,o=!1,i=void 0;try{for(var a,u=e[Symbol.iterator]();!(r=(a=u.next()).done)&&(n.push(a.value),!t||n.length!==t);r=!0);}catch(e){o=!0,i=e}finally{try{r||null==u.return||u.return()}finally{if(o)throw i}}return n}(e,t)||function(e,t){if(!e)return;if("string"==typeof e)return m(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return m(e,t)}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function m(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function b(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function w(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?b(Object(n),!0).forEach((function(t){P(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):b(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function _(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function x(e,t,n){return t&&_(e.prototype,t),n&&_(e,n),e}function S(e,t){return S=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e},S(e,t)}function E(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=C(e);if(t){var o=C(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return k(this,n)}}function k(e,t){return!t||"object"!==h(t)&&"function"!=typeof t?O(e):t}function O(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function C(e){return C=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)},C(e)}function P(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var M=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&S(e,t)}(n,e);var t=E(n);function n(e){var r;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,n),P(O(r=t.call(this,e)),"onDragStart",(function(e,t){if((0,f.default)("Draggable: onDragStart: %j",t),!1===r.props.onStart(e,(0,l.createDraggableData)(O(r),t)))return!1;r.setState({dragging:!0,dragged:!0})})),P(O(r),"onDrag",(function(e,t){if(!r.state.dragging)return!1;(0,f.default)("Draggable: onDrag: %j",t);var n=(0,l.createDraggableData)(O(r),t),o={x:n.x,y:n.y};if(r.props.bounds){var i=o.x,a=o.y;o.x+=r.state.slackX,o.y+=r.state.slackY;var u=y((0,l.getBoundPosition)(O(r),o.x,o.y),2),c=u[0],s=u[1];o.x=c,o.y=s,o.slackX=r.state.slackX+(i-o.x),o.slackY=r.state.slackY+(a-o.y),n.x=o.x,n.y=o.y,n.deltaX=o.x-r.state.x,n.deltaY=o.y-r.state.y}if(!1===r.props.onDrag(e,n))return!1;r.setState(o)})),P(O(r),"onDragStop",(function(e,t){if(!r.state.dragging)return!1;if(!1===r.props.onStop(e,(0,l.createDraggableData)(O(r),t)))return!1;(0,f.default)("Draggable: onDragStop: %j",t);var n={dragging:!1,slackX:0,slackY:0};if(Boolean(r.props.position)){var o=r.props.position,i=o.x,a=o.y;n.x=i,n.y=a}r.setState(n)})),r.state={dragging:!1,dragged:!1,x:e.position?e.position.x:e.defaultPosition.x,y:e.position?e.position.y:e.defaultPosition.y,prevPropsPosition:w({},e.position),slackX:0,slackY:0,isElementSVG:!1},e.position&&!e.onDrag&&e.onStop,r}return x(n,null,[{key:"getDerivedStateFromProps",value:function(e,t){var n=e.position,r=t.prevPropsPosition;return!n||r&&n.x===r.x&&n.y===r.y?null:((0,f.default)("Draggable: getDerivedStateFromProps %j",{position:n,prevPropsPosition:r}),{x:n.x,y:n.y,prevPropsPosition:w({},n)})}}]),x(n,[{key:"componentDidMount",value:function(){void 0!==window.SVGElement&&this.findDOMNode()instanceof window.SVGElement&&this.setState({isElementSVG:!0})}},{key:"componentWillUnmount",value:function(){this.setState({dragging:!1})}},{key:"findDOMNode",value:function(){return this.props.nodeRef?this.props.nodeRef.current:i.default.findDOMNode(this)}},{key:"render",value:function(){var e,t=this.props;t.axis,t.bounds;var n=t.children,o=t.defaultPosition,i=t.defaultClassName,c=t.defaultClassNameDragging,f=t.defaultClassNameDragged,d=t.position,p=t.positionOffset;t.scale;var h=g(t,["axis","bounds","children","defaultPosition","defaultClassName","defaultClassNameDragging","defaultClassNameDragged","position","positionOffset","scale"]),y={},m=null,b=!Boolean(d)||this.state.dragging,_=d||o,x={x:(0,l.canDragX)(this)&&b?this.state.x:_.x,y:(0,l.canDragY)(this)&&b?this.state.y:_.y};this.state.isElementSVG?m=(0,u.createSVGTransform)(x,p):y=(0,u.createCSSTransform)(x,p);var S=(0,a.default)(n.props.className||"",i,(P(e={},c,this.state.dragging),P(e,f,this.state.dragged),e));return r.createElement(s.default,v({},h,{onStart:this.onDragStart,onDrag:this.onDrag,onStop:this.onDragStop}),r.cloneElement(r.Children.only(n),{className:S,style:w(w({},n.props.style),y),transform:m}))}}]),n}(r.Component);n.default=M,P(M,"displayName","Draggable"),P(M,"propTypes",w(w({},s.default.propTypes),{},{axis:o.default.oneOf(["both","x","y","none"]),bounds:o.default.oneOfType([o.default.shape({left:o.default.number,right:o.default.number,top:o.default.number,bottom:o.default.number}),o.default.string,o.default.oneOf([!1])]),defaultClassName:o.default.string,defaultClassNameDragging:o.default.string,defaultClassNameDragged:o.default.string,defaultPosition:o.default.shape({x:o.default.number,y:o.default.number}),positionOffset:o.default.shape({x:o.default.oneOfType([o.default.number,o.default.string]),y:o.default.oneOfType([o.default.number,o.default.string])}),position:o.default.shape({x:o.default.number,y:o.default.number}),className:c.dontSetMe,style:c.dontSetMe,transform:c.dontSetMe})),P(M,"defaultProps",w(w({},s.default.defaultProps),{},{axis:"both",bounds:!1,defaultClassName:"react-draggable",defaultClassNameDragging:"react-draggable-dragging",defaultClassNameDragged:"react-draggable-dragged",defaultPosition:{x:0,y:0},position:null,scale:1}))}(ac);var rs=ac.default,os=ac.DraggableCore;ic.exports=rs,ic.exports.default=rs;var is=ic.exports.DraggableCore=os,as=ic.exports;function us(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function ls(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?us(Object(n),!0).forEach((function(t){Ce(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):us(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var cs=function(t){var n=t.onSelectionDragStart,r=t.onSelectionDrag,o=t.onSelectionDragStop,i=t.onSelectionContextMenu,a=wn(vn((function(e){return e.transform})),3),u=a[0],l=a[1],c=a[2],s=vn((function(e){return e.selectedNodesBbox})),f=vn((function(e){return e.selectionActive})),d=vn((function(e){return e.selectedElements})),p=vn((function(e){return e.snapToGrid})),h=vn((function(e){return e.snapGrid})),v=vn((function(e){return e.nodes})),g=hn((function(e){return e.updateNodePosDiff})),y=(0,e.useRef)(null),m=(0,e.useMemo)((function(){return p?h:[1,1]}),[p,h]),b=(0,e.useMemo)((function(){return d?d.filter(Mn).map((function(e){var t=v.find((function(t){return t.id===e.id}));return ls(ls({},t),{},{position:null==t?void 0:t.__rf.position})})):[]}),[d,v]),w=(0,e.useMemo)((function(){return{transform:"translate(".concat(u,"px,").concat(l,"px) scale(").concat(c,")")}}),[u,l,c]),_=(0,e.useMemo)((function(){return{width:s.width,height:s.height,top:s.y,left:s.x}}),[s]),x=(0,e.useCallback)((function(e){null==n||n(e,b)}),[n,b]),S=(0,e.useCallback)((function(e,t){r&&r(e,b),g({diff:{x:t.deltaX,y:t.deltaY},isDragging:!0})}),[r,b,g]),E=(0,e.useCallback)((function(e){g({isDragging:!1}),null==o||o(e,b)}),[b,o]),k=(0,e.useCallback)((function(e){var t=d?d.filter(Mn).map((function(e){return v.find((function(t){return t.id===e.id}))})):[];null==i||i(e,t)}),[i]);return!d||f?null:e.createElement("div",{className:"react-flow__nodesselection",style:w},e.createElement(as,{scale:c,grid:m,onStart:function(e){return x(e)},onDrag:function(e,t){return S(e,t)},onStop:function(e){return E(e)},nodeRef:y,enableUserSelectHack:!1},e.createElement("div",{ref:y,className:"react-flow__nodesselection-rect",onContextMenu:k,style:_})))},ss=function(t){var n=t.children,r=t.onPaneClick,o=t.onPaneContextMenu,i=t.onPaneScroll,a=t.onElementsRemove,u=t.deleteKeyCode,l=t.onMove,c=t.onMoveStart,s=t.onMoveEnd,f=t.selectionKeyCode,d=t.multiSelectionKeyCode,p=t.zoomActivationKeyCode,h=t.elementsSelectable,v=t.zoomOnScroll,g=t.zoomOnPinch,y=t.panOnScroll,m=t.panOnScrollSpeed,b=t.panOnScrollMode,w=t.zoomOnDoubleClick,_=t.paneMoveable,x=t.defaultPosition,S=t.defaultZoom,E=t.translateExtent,k=t.onSelectionDragStart,O=t.onSelectionDrag,C=t.onSelectionDragStop,P=t.onSelectionContextMenu,M=hn((function(e){return e.unsetNodesSelection})),A=hn((function(e){return e.resetSelectedElements})),N=vn((function(e){return e.nodesSelectionActive})),j=kn(f);!function(t){var n=t.deleteKeyCode,r=t.multiSelectionKeyCode,o=t.onElementsRemove,i=gn(),a=hn((function(e){return e.unsetNodesSelection})),u=hn((function(e){return e.setMultiSelectionActive})),l=hn((function(e){return e.resetSelectedElements})),c=kn(n),s=kn(r);(0,e.useEffect)((function(){var e=i.getState(),t=e.edges,n=e.selectedElements;if(o&&c&&n){var r=n.filter(Mn),u=Bn(r,t),s=[].concat(bn(n),bn(u)).reduce((function(e,t){return e.set(t.id,t)}),new Map);o(Array.from(s.values())),a(),l()}}),[c]),(0,e.useEffect)((function(){u(s)}),[s])}({onElementsRemove:a,deleteKeyCode:u,multiSelectionKeyCode:d});var T=(0,e.useCallback)((function(e){null==r||r(e),M(),A()}),[r]),D=(0,e.useCallback)((function(e){null==o||o(e)}),[o]),R=(0,e.useCallback)((function(e){null==i||i(e)}),[i]);return e.createElement(ec,{onMove:l,onMoveStart:c,onMoveEnd:s,selectionKeyPressed:j,elementsSelectable:h,zoomOnScroll:v,zoomOnPinch:g,panOnScroll:y,panOnScrollSpeed:m,panOnScrollMode:b,zoomOnDoubleClick:w,paneMoveable:_,defaultPosition:x,defaultZoom:S,translateExtent:E,zoomActivationKeyCode:p},n,e.createElement(oc,{selectionKeyPressed:j}),N&&e.createElement(cs,{onSelectionDragStart:k,onSelectionDrag:O,onSelectionDragStop:C,onSelectionContextMenu:P}),e.createElement("div",{className:"react-flow__pane",onClick:T,onContextMenu:D,onWheel:R}))};ss.displayName="FlowRenderer";var fs=(0,e.memo)(ss),ds=function(t){var n=vn((function(e){return e.transform})),r=vn((function(e){return e.selectedElements})),o=vn((function(e){return e.nodesDraggable})),i=vn((function(e){return e.nodesConnectable})),a=vn((function(e){return e.elementsSelectable})),u=vn((function(e){return e.width})),l=vn((function(e){return e.height})),c=vn((function(e){return e.nodes})),s=hn((function(e){return e.updateNodeDimensions})),f=t.onlyRenderVisibleElements?In(c,{x:0,y:0,width:u,height:l},n,!0):c,d=(0,e.useMemo)((function(){return{transform:"translate(".concat(n[0],"px,").concat(n[1],"px) scale(").concat(n[2],")")}}),[n[0],n[1],n[2]]),p=(0,e.useMemo)((function(){return"undefined"==typeof ResizeObserver?null:new ResizeObserver((function(e){var t=e.map((function(e){return{id:e.target.getAttribute("data-id"),nodeElement:e.target}}));s(t)}))}),[]);return e.createElement("div",{className:"react-flow__nodes",style:d},f.map((function(u){var l=u.type||"default",c=t.nodeTypes[l]||t.nodeTypes.default;t.nodeTypes[l];var s=!!(u.draggable||o&&void 0===u.draggable),f=!!(u.selectable||a&&void 0===u.selectable),d=!!(u.connectable||i&&void 0===u.connectable);return e.createElement(c,{key:u.id,id:u.id,className:u.className,style:u.style,type:l,data:u.data,sourcePosition:u.sourcePosition,targetPosition:u.targetPosition,isHidden:u.isHidden,xPos:u.__rf.position.x,yPos:u.__rf.position.y,isDragging:u.__rf.isDragging,isInitialized:null!==u.__rf.width&&null!==u.__rf.height,snapGrid:t.snapGrid,snapToGrid:t.snapToGrid,selectNodesOnDrag:t.selectNodesOnDrag,onClick:t.onElementClick,onMouseEnter:t.onNodeMouseEnter,onMouseMove:t.onNodeMouseMove,onMouseLeave:t.onNodeMouseLeave,onContextMenu:t.onNodeContextMenu,onNodeDoubleClick:t.onNodeDoubleClick,onNodeDragStart:t.onNodeDragStart,onNodeDrag:t.onNodeDrag,onNodeDragStop:t.onNodeDragStop,scale:n[2],selected:(null==r?void 0:r.some((function(e){return e.id===u.id})))||!1,isDraggable:s,isSelectable:f,isConnectable:d,resizeObserver:p})})))};ds.displayName="NodeRenderer";var ps=(0,e.memo)(ds),hs=["x","y","label","labelStyle","labelShowBg","labelBgStyle","labelBgPadding","labelBgBorderRadius","children","className"];function vs(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}var gs=function(t){var n=t.x,r=t.y,o=t.label,i=t.labelStyle,a=void 0===i?{}:i,u=t.labelShowBg,l=void 0===u||u,c=t.labelBgStyle,s=void 0===c?{}:c,f=t.labelBgPadding,d=void 0===f?[2,4]:f,p=t.labelBgBorderRadius,h=void 0===p?2:p,v=t.children,g=t.className,y=Pe(t,hs),m=(0,e.useRef)(null),b=wn((0,e.useState)({x:0,y:0,width:0,height:0}),2),w=b[0],_=b[1],x=Me(["react-flow__edge-textwrapper",g]);return(0,e.useEffect)((function(){if(m.current){var e=m.current.getBBox();_({x:e.x,y:e.y,width:e.width,height:e.height})}}),[o]),void 0!==o&&o?e.createElement("g",function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?vs(Object(n),!0).forEach((function(t){Ce(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):vs(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}({transform:"translate(".concat(n-w.width/2," ").concat(r-w.height/2,")"),className:x},y),l&&e.createElement("rect",{width:w.width+2*d[0],x:-d[0],y:-d[1],height:w.height+2*d[1],className:"react-flow__edge-textbg",style:s,rx:h,ry:h}),e.createElement("text",{className:"react-flow__edge-text",y:w.height/2,dy:"0.3em",ref:m,style:a},o),v):null},ys=(0,e.memo)(gs),ms=function(e,t){return void 0!==t&&t?"url(#".concat(t,")"):void 0!==e?"url(#react-flow__".concat(e,")"):"none"},bs=[Yl.Left,Yl.Right],ws=function(e){var t=e.sourceX,n=e.sourceY,r=e.targetX,o=e.targetY,i=e.sourcePosition,a=void 0===i?Yl.Bottom:i,u=e.targetPosition,l=void 0===u?Yl.Top:u,c=bs.includes(a),s=bs.includes(l);if(c&&!s||s&&!c){var f=c?Math.abs(r-t):0,d=t>r?t-f:t+f,p=c?0:Math.abs(o-n);return[d,n<o?n+p:n-p,f,p]}var h=Math.abs(r-t)/2,v=r<t?r+h:r-h,g=Math.abs(o-n)/2;return[v,o<n?o+g:o-g,h,g]};function _s(e){var t=e.sourceX,n=e.sourceY,r=e.sourcePosition,o=void 0===r?Yl.Bottom:r,i=e.targetX,a=e.targetY,u=e.targetPosition,l=void 0===u?Yl.Top:u,c=e.centerX,s=e.centerY,f=wn(ws({sourceX:t,sourceY:n,targetX:i,targetY:a}),2),d=f[0],p=f[1],h=[Yl.Left,Yl.Right],v=void 0!==c?c:d,g=void 0!==s?s:p,y="M".concat(t,",").concat(n," C").concat(t,",").concat(g," ").concat(i,",").concat(g," ").concat(i,",").concat(a);return h.includes(o)&&h.includes(l)?y="M".concat(t,",").concat(n," C").concat(v,",").concat(n," ").concat(v,",").concat(a," ").concat(i,",").concat(a):h.includes(l)?y="M".concat(t,",").concat(n," C").concat(t,",").concat(a," ").concat(t,",").concat(a," ").concat(i,",").concat(a):h.includes(o)&&(y="M".concat(t,",").concat(n," C").concat(i,",").concat(n," ").concat(i,",").concat(n," ").concat(i,",").concat(a)),y}var xs=(0,e.memo)((function(t){var n=t.sourceX,r=t.sourceY,o=t.targetX,i=t.targetY,a=t.sourcePosition,u=void 0===a?Yl.Bottom:a,l=t.targetPosition,c=void 0===l?Yl.Top:l,s=t.label,f=t.labelStyle,d=t.labelShowBg,p=t.labelBgStyle,h=t.labelBgPadding,v=t.labelBgBorderRadius,g=t.style,y=t.arrowHeadType,m=t.markerEndId,b=wn(ws({sourceX:n,sourceY:r,targetX:o,targetY:i,sourcePosition:u,targetPosition:c}),2),w=b[0],_=b[1],x=_s({sourceX:n,sourceY:r,sourcePosition:u,targetX:o,targetY:i,targetPosition:c}),S=s?e.createElement(ys,{x:w,y:_,label:s,labelStyle:f,labelShowBg:d,labelBgStyle:p,labelBgPadding:h,labelBgBorderRadius:v}):null,E=ms(y,m);return e.createElement(e.Fragment,null,e.createElement("path",{style:g,d:x,className:"react-flow__edge-path",markerEnd:E}),S)})),Ss=function(e,t,n){return"L ".concat(e,",").concat(t-n,"Q ").concat(e,",").concat(t," ").concat(e+n,",").concat(t)},Es=function(e,t,n){return"L ".concat(e+n,",").concat(t,"Q ").concat(e,",").concat(t," ").concat(e,",").concat(t-n)},ks=function(e,t,n){return"L ".concat(e,",").concat(t-n,"Q ").concat(e,",").concat(t," ").concat(e-n,",").concat(t)},Os=function(e,t,n){return"L ".concat(e-n,",").concat(t,"Q ").concat(e,",").concat(t," ").concat(e,",").concat(t-n)},Cs=function(e,t,n){return"L ".concat(e+n,",").concat(t,"Q ").concat(e,",").concat(t," ").concat(e,",").concat(t+n)},Ps=function(e,t,n){return"L ".concat(e,",").concat(t+n,"Q ").concat(e,",").concat(t," ").concat(e+n,",").concat(t)},Ms=function(e,t,n){return"L ".concat(e,",").concat(t+n,"Q ").concat(e,",").concat(t," ").concat(e-n,",").concat(t)},As=function(e,t,n){return"L ".concat(e-n,",").concat(t,"Q ").concat(e,",").concat(t," ").concat(e,",").concat(t+n)};function Ns(e){var t=e.sourceX,n=e.sourceY,r=e.sourcePosition,o=void 0===r?Yl.Bottom:r,i=e.targetX,a=e.targetY,u=e.targetPosition,l=void 0===u?Yl.Top:u,c=e.borderRadius,s=void 0===c?5:c,f=e.centerX,d=e.centerY,p=wn(ws({sourceX:t,sourceY:n,targetX:i,targetY:a}),4),h=p[0],v=p[1],g=p[2],y=p[3],m=Math.min(s,Math.abs(i-t)),b=Math.min(s,Math.abs(a-n)),w=Math.min(m,b,g,y),_=[Yl.Left,Yl.Right],x=void 0!==f?f:h,S=void 0!==d?d:v,E=null,k=null;return t<=i?(E=n<=a?Ss(t,S,w):Ps(t,S,w),k=n<=a?As(i,S,w):Os(i,S,w)):(E=n<a?ks(t,S,w):Ms(t,S,w),k=n<a?Cs(i,S,w):Es(i,S,w)),_.includes(o)&&_.includes(l)?t<=i&&(E=n<=a?As(x,n,w):Os(x,n,w),k=n<=a?Ss(x,a,w):Ps(x,a,w)):_.includes(o)&&!_.includes(l)?(E=t<=i?n<=a?As(i,n,w):Os(i,n,w):n<=a?Cs(i,n,w):Es(i,n,w),k=""):!_.includes(o)&&_.includes(l)&&(E=t<=i?n<=a?Ss(t,a,w):Ps(t,a,w):n<=a?ks(t,a,w):Ms(t,a,w),k=""),"M ".concat(t,",").concat(n).concat(E).concat(k,"L ").concat(i,",").concat(a)}var js=(0,e.memo)((function(t){var n=t.sourceX,r=t.sourceY,o=t.targetX,i=t.targetY,a=t.label,u=t.labelStyle,l=t.labelShowBg,c=t.labelBgStyle,s=t.labelBgPadding,f=t.labelBgBorderRadius,d=t.style,p=t.sourcePosition,h=void 0===p?Yl.Bottom:p,v=t.targetPosition,g=void 0===v?Yl.Top:v,y=t.arrowHeadType,m=t.markerEndId,b=t.borderRadius,w=void 0===b?5:b,_=wn(ws({sourceX:n,sourceY:r,targetX:o,targetY:i,sourcePosition:h,targetPosition:g}),2),x=_[0],S=_[1],E=Ns({sourceX:n,sourceY:r,sourcePosition:h,targetX:o,targetY:i,targetPosition:g,borderRadius:w}),k=ms(y,m),O=a?e.createElement(ys,{x,y:S,label:a,labelStyle:u,labelShowBg:l,labelBgStyle:c,labelBgPadding:s,labelBgBorderRadius:f}):null;return e.createElement(e.Fragment,null,e.createElement("path",{style:d,className:"react-flow__edge-path",d:E,markerEnd:k}),O)})),Ts=function(t){var n=t.connectionNodeId,r=t.connectionHandleId,o=t.connectionHandleType,i=t.connectionLineStyle,a=t.connectionPositionX,u=t.connectionPositionY,l=t.connectionLineType,c=void 0===l?Gl.Bezier:l,s=t.nodes,f=void 0===s?[]:s,d=t.transform,p=t.isConnectable,h=t.CustomConnectionLineComponent,v=wn((0,e.useState)(null),2),g=v[0],y=v[1],m=n,b=r;if((0,e.useEffect)((function(){var e=f.find((function(e){return e.id===m}))||null;y(e)}),[]),!g||!p)return null;var w=b?g.__rf.handleBounds[o].find((function(e){return e.id===b})):g.__rf.handleBounds[o][0],_=w?w.x+w.width/2:g.__rf.width/2,x=w?w.y+w.height/2:g.__rf.height,S=g.__rf.position.x+_,E=g.__rf.position.y+x,k=(a-d[0])/d[2],O=(u-d[1])/d[2],C=(null==w?void 0:w.position)===Yl.Left||(null==w?void 0:w.position)===Yl.Right?Yl.Left:Yl.Top;if(h)return e.createElement("g",{className:"react-flow__connection"},e.createElement(h,{sourceX:S,sourceY:E,sourcePosition:null==w?void 0:w.position,targetX:k,targetY:O,targetPosition:C,connectionLineType:c,connectionLineStyle:i}));var P="";return P=c===Gl.Bezier?_s({sourceX:S,sourceY:E,sourcePosition:null==w?void 0:w.position,targetX:k,targetY:O,targetPosition:C}):c===Gl.Step?Ns({sourceX:S,sourceY:E,sourcePosition:null==w?void 0:w.position,targetX:k,targetY:O,targetPosition:C,borderRadius:0}):c===Gl.SmoothStep?Ns({sourceX:S,sourceY:E,sourcePosition:null==w?void 0:w.position,targetX:k,targetY:O,targetPosition:C}):"M".concat(S,",").concat(E," ").concat(k,",").concat(O),e.createElement("g",{className:"react-flow__connection"},e.createElement("path",{d:P,className:"react-flow__connection-path",style:i}))},Ds=function(t){var n=t.id,r=t.children;return e.createElement("marker",{className:"react-flow__arrowhead",id:n,markerWidth:"12.5",markerHeight:"12.5",viewBox:"-10 -10 20 20",orient:"auto",refX:"0",refY:"0"},r)},Rs=function(t){var n=t.color;return e.createElement("defs",null,e.createElement(Ds,{id:"react-flow__arrowclosed"},e.createElement("polyline",{stroke:n,strokeLinecap:"round",strokeLinejoin:"round",strokeWidth:"1",fill:n,points:"-5,-4 0,0 -5,4 -5,-4"})),e.createElement(Ds,{id:"react-flow__arrow"},e.createElement("polyline",{stroke:n,strokeLinecap:"round",strokeLinejoin:"round",strokeWidth:"1.5",fill:"none",points:"-5,-4 0,0 -5,4"})))};function Ls(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function zs(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Ls(Object(n),!0).forEach((function(t){Ce(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Ls(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}Rs.displayName="MarkerDefinitions";var Is=(0,e.memo)((function(t){return e.createElement(js,zs(zs({},t),{},{borderRadius:0}))})),Bs=(0,e.memo)((function(t){var n=t.sourceX,r=t.sourceY,o=t.targetX,i=t.targetY,a=t.label,u=t.labelStyle,l=t.labelShowBg,c=t.labelBgStyle,s=t.labelBgPadding,f=t.labelBgBorderRadius,d=t.style,p=t.arrowHeadType,h=t.markerEndId,v=Math.abs(i-r)/2,g=i<r?i+v:i-v,y=Math.abs(o-n)/2,m=o<n?o+y:o-y,b=ms(p,h),w=a?e.createElement(ys,{x:m,y:g,label:a,labelStyle:u,labelShowBg:l,labelBgStyle:c,labelBgPadding:s,labelBgBorderRadius:f}):null;return e.createElement(e.Fragment,null,e.createElement("path",{style:d,className:"react-flow__edge-path",d:"M ".concat(n,",").concat(r,"L ").concat(o,",").concat(i),markerEnd:b}),w)}));function Us(e,t,n,r,o,i,a){var u=a.elementFromPoint(e.clientX,e.clientY),l=(null==u?void 0:u.classList.contains("target"))||!1,c=(null==u?void 0:u.classList.contains("source"))||!1,s={elementBelow:u,isValid:!1,connection:{source:null,target:null,sourceHandle:null,targetHandle:null},isHoveringHandle:!1};if(u&&(l||c)&&(s.isHoveringHandle=!0,t!==ql.Strict||(n&&c||!n&&l))){var f=u.getAttribute("data-nodeid"),d=u.getAttribute("data-handleid"),p=n?{source:f,sourceHandle:d,target:r,targetHandle:o}:{source:r,sourceHandle:o,target:f,targetHandle:d};s.connection=p,s.isValid=i(p)}return s}function Fs(e){null==e||e.classList.remove("react-flow__handle-valid"),null==e||e.classList.remove("react-flow__handle-connecting")}function Xs(e,t,n,r,o,i,a,u,l,c,s,f,d,p){var h,v,g,y=e.target.closest(".react-flow"),m=(h=e.target,(null===(v=h.getRootNode)||void 0===v?void 0:v.call(h))||(null===(g=window)||void 0===g?void 0:g.document));if(m){var b=m.elementFromPoint(e.clientX,e.clientY),w=null==b?void 0:b.classList.contains("target"),_=null==b?void 0:b.classList.contains("source");if(y&&(w||_||c)){var x,S=c||(w?"target":"source"),E=y.getBoundingClientRect();o({x:e.clientX-E.left,y:e.clientY-E.top}),r({connectionNodeId:n,connectionHandleId:t,connectionHandleType:S}),null==f||f(e,{nodeId:n,handleId:t,handleType:S}),m.addEventListener("mousemove",k),m.addEventListener("mouseup",(function e(o){var f=Us(o,l,a,n,t,u,m),h=f.connection,v=f.isValid;null==d||d(o),v&&(null==i||i(h)),null==p||p(o),c&&s&&s(o),Fs(x),r({connectionNodeId:null,connectionHandleId:null,connectionHandleType:null}),m.removeEventListener("mousemove",k),m.removeEventListener("mouseup",e)}))}}function k(e){o({x:e.clientX-E.left,y:e.clientY-E.top});var r=Us(e,l,a,n,t,u,m),i=r.connection,c=r.elementBelow,s=r.isValid;if(!r.isHoveringHandle)return Fs(x);!(i.source===i.target)&&c&&(x=c,c.classList.add("react-flow__handle-connecting"),c.classList.toggle("react-flow__handle-valid",s))}}var Hs=function(e,t,n){return n===Yl.Left?e-t:n===Yl.Right?e+t:e},Vs=function(e,t,n){return n===Yl.Top?e-t:n===Yl.Bottom?e+t:e},Ws=function(t){var n=t.className,r=t.position,o=t.centerX,i=t.centerY,a=t.radius,u=void 0===a?10:a;return e.createElement("circle",{className:Me(["react-flow__edgeupdater",n]),cx:Hs(o,u,r),cy:Vs(i,u,r),r:u,stroke:"transparent",fill:"transparent"})},Ys=function(t){var n=function(n){var r=n.id,o=n.className,i=n.type,a=n.data,u=n.onClick,l=n.onEdgeDoubleClick,c=n.selected,s=n.animated,f=n.label,d=n.labelStyle,p=n.labelShowBg,h=n.labelBgStyle,v=n.labelBgPadding,g=n.labelBgBorderRadius,y=n.style,m=n.arrowHeadType,b=n.source,w=n.target,_=n.sourceX,x=n.sourceY,S=n.targetX,E=n.targetY,k=n.sourcePosition,O=n.targetPosition,C=n.elementsSelectable,P=n.markerEndId,M=n.isHidden,A=n.sourceHandleId,N=n.targetHandleId,j=n.handleEdgeUpdate,T=n.onConnectEdge,D=n.onContextMenu,R=n.onMouseEnter,L=n.onMouseMove,z=n.onMouseLeave,I=n.edgeUpdaterRadius,B=n.onEdgeUpdateStart,U=n.onEdgeUpdateEnd,F=hn((function(e){return e.addSelectedElements})),X=hn((function(e){return e.setConnectionNodeId})),H=hn((function(e){return e.unsetNodesSelection})),V=hn((function(e){return e.setConnectionPosition})),W=vn((function(e){return e.connectionMode})),Y=wn((0,e.useState)(!1),2),$=Y[0],Z=Y[1],q=!C&&!u,G=Me(["react-flow__edge","react-flow__edge-".concat(i),o,{selected:c,animated:s,inactive:q,updating:$}]),K=(0,e.useMemo)((function(){var e={id:r,source:b,target:w,type:i};return A&&(e.sourceHandle=A),N&&(e.targetHandle=N),void 0!==a&&(e.data=a),e}),[r,b,w,i,A,N,a]),Q=(0,e.useCallback)((function(e){C&&(H(),F(K)),null==u||u(e,K)}),[C,K,u]),J=(0,e.useCallback)((function(e){null==l||l(e,K)}),[K,l]),ee=(0,e.useCallback)((function(e){null==D||D(e,K)}),[K,D]),te=(0,e.useCallback)((function(e){null==R||R(e,K)}),[K,D]),ne=(0,e.useCallback)((function(e){null==L||L(e,K)}),[K,D]),re=(0,e.useCallback)((function(e){null==z||z(e,K)}),[K,D]),oe=(0,e.useCallback)((function(e,t){var n=t?w:b,r=t?N:A,o=t;null==B||B(e,K),Xs(e,r,n,X,V,T,o,(function(){return!0}),W,t?"target":"source",U?function(e){return U(e,K)}:void 0)}),[r,b,w,i,A,N,X,V,K]),ie=(0,e.useCallback)((function(e){oe(e,!0)}),[r,b,A,oe]),ae=(0,e.useCallback)((function(e){oe(e,!1)}),[r,w,N,oe]),ue=(0,e.useCallback)((function(){return Z(!0)}),[Z]),le=(0,e.useCallback)((function(){return Z(!1)}),[Z]);return M?null:e.createElement("g",{className:G,onClick:Q,onDoubleClick:J,onContextMenu:ee,onMouseEnter:te,onMouseMove:ne,onMouseLeave:re},e.createElement(t,{id:r,source:b,target:w,selected:c,animated:s,label:f,labelStyle:d,labelShowBg:p,labelBgStyle:h,labelBgPadding:v,labelBgBorderRadius:g,data:a,style:y,arrowHeadType:m,sourceX:_,sourceY:x,targetX:S,targetY:E,sourcePosition:k,targetPosition:O,markerEndId:P,sourceHandleId:A,targetHandleId:N}),j&&e.createElement("g",{onMouseDown:ie,onMouseEnter:ue,onMouseOut:le},e.createElement(Ws,{position:k,centerX:_,centerY:x,radius:I})),j&&e.createElement("g",{onMouseDown:ae,onMouseEnter:ue,onMouseOut:le},e.createElement(Ws,{position:O,centerX:S,centerY:E,radius:I})))};return n.displayName="EdgeWrapper",(0,e.memo)(n)};function $s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Zs(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?$s(Object(n),!0).forEach((function(t){Ce(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):$s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function qs(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:null,r=((null==n?void 0:n.x)||0)+t.__rf.position.x,o=((null==n?void 0:n.y)||0)+t.__rf.position.y,i=(null==n?void 0:n.width)||t.__rf.width,a=(null==n?void 0:n.height)||t.__rf.height;switch(e){case Yl.Top:return{x:r+i/2,y:o};case Yl.Right:return{x:r+i,y:o+a/2};case Yl.Bottom:return{x:r+i/2,y:o+a};case Yl.Left:return{x:r,y:o+a/2}}}function Gs(e,t){if(!e)return null;var n=null;return 1!==e.length&&t?t&&(n=e.find((function(e){return e.id===t}))):n=e[0],void 0===n?null:n}var Ks=function(t){var n=t.edge,r=t.props,o=t.nodes,i=t.selectedElements,a=t.elementsSelectable,u=t.transform,l=t.width,c=t.height,s=t.onlyRenderVisibleElements,f=t.connectionMode,d=n.sourceHandle||null,p=n.targetHandle||null,h=function(e,t){return t.reduce((function(t,n){return n.id===e.source&&(t.sourceNode=n),n.id===e.target&&(t.targetNode=n),t}),{sourceNode:null,targetNode:null})}(n,o),v=h.sourceNode,g=h.targetNode,y=(0,e.useCallback)((function(e){var t;null===(t=r.onEdgeUpdate)||void 0===t||t.call(r,n,e)}),[n]);if(!v)return null;if(!g)return null;if(!v.__rf.width||!g.__rf.width)return null;var m=n.type||"default",b=r.edgeTypes[m]||r.edgeTypes.default,w=g.__rf.handleBounds,_=f===ql.Strict?w.target:w.target||w.source,x=Gs(v.__rf.handleBounds.source,d),S=Gs(_,p),E=x?x.position:Yl.Bottom,k=S?S.position:Yl.Top;if(!x)return null;if(!S)return null;var O=function(e,t,n,r,o,i){var a=qs(n,e,t),u=qs(i,r,o);return{sourceX:a.x,sourceY:a.y,targetX:u.x,targetY:u.y}}(v,x,E,g,S,k),C=O.sourceX,P=O.sourceY,M=O.targetX,A=O.targetY,N=!s||function(e){var t=e.sourcePos,n=e.targetPos,r=e.width,o=e.height,i=e.transform,a={x:Math.min(t.x,n.x),y:Math.min(t.y,n.y),x2:Math.max(t.x,n.x),y2:Math.max(t.y,n.y)};a.x===a.x2&&(a.x2+=1),a.y===a.y2&&(a.y2+=1);var u=Rn({x:(0-i[0])/i[2],y:(0-i[1])/i[2],width:r/i[2],height:o/i[2]}),l=Math.max(0,Math.min(u.x2,a.x2)-Math.max(u.x,a.x)),c=Math.max(0,Math.min(u.y2,a.y2)-Math.max(u.y,a.y));return Math.ceil(l*c)>0}({sourcePos:{x:C,y:P},targetPos:{x:M,y:A},width:l,height:c,transform:u});if(!N)return null;var j=(null==i?void 0:i.some((function(e){return Pn(e)&&e.id===n.id})))||!1;return e.createElement(b,{key:n.id,id:n.id,className:n.className,type:n.type,data:n.data,onClick:r.onElementClick,selected:j,animated:n.animated,label:n.label,labelStyle:n.labelStyle,labelShowBg:n.labelShowBg,labelBgStyle:n.labelBgStyle,labelBgPadding:n.labelBgPadding,labelBgBorderRadius:n.labelBgBorderRadius,style:n.style,arrowHeadType:n.arrowHeadType,source:n.source,target:n.target,sourceHandleId:d,targetHandleId:p,sourceX:C,sourceY:P,targetX:M,targetY:A,sourcePosition:E,targetPosition:k,elementsSelectable:a,markerEndId:r.markerEndId,isHidden:n.isHidden,onConnectEdge:y,handleEdgeUpdate:void 0!==r.onEdgeUpdate,onContextMenu:r.onEdgeContextMenu,onMouseEnter:r.onEdgeMouseEnter,onMouseMove:r.onEdgeMouseMove,onMouseLeave:r.onEdgeMouseLeave,edgeUpdaterRadius:r.edgeUpdaterRadius,onEdgeDoubleClick:r.onEdgeDoubleClick,onEdgeUpdateStart:r.onEdgeUpdateStart,onEdgeUpdateEnd:r.onEdgeUpdateEnd})},Qs=function(t){var n=vn((function(e){return e.transform})),r=vn((function(e){return e.nodes})),o=vn((function(e){return e.edges})),i=vn((function(e){return e.connectionNodeId})),a=vn((function(e){return e.connectionHandleId})),u=vn((function(e){return e.connectionHandleType})),l=vn((function(e){return e.connectionPosition})),c=vn((function(e){return e.selectedElements})),s=vn((function(e){return e.nodesConnectable})),f=vn((function(e){return e.elementsSelectable})),d=vn((function(e){return e.width})),p=vn((function(e){return e.height}));if(!d)return null;var h=t.connectionLineType,v=t.arrowHeadColor,g=t.connectionLineStyle,y=t.connectionLineComponent,m=t.onlyRenderVisibleElements,b="translate(".concat(n[0],",").concat(n[1],") scale(").concat(n[2],")"),w=i&&u;return e.createElement("svg",{width:d,height:p,className:"react-flow__edges"},e.createElement(Rs,{color:v}),e.createElement("g",{transform:b},o.map((function(o){return e.createElement(Ks,{key:o.id,edge:o,props:t,nodes:r,selectedElements:c,elementsSelectable:f,transform:n,width:d,height:p,onlyRenderVisibleElements:m})})),w&&e.createElement(Ts,{nodes:r,connectionNodeId:i,connectionHandleId:a,connectionHandleType:u,connectionPositionX:l.x,connectionPositionY:l.y,transform:n,connectionLineStyle:g,connectionLineType:h,isConnectable:s,CustomConnectionLineComponent:y})))};Qs.displayName="EdgeRenderer";var Js=(0,e.memo)(Qs),ef=.1,tf={zoomIn:function(){},zoomOut:function(){},zoomTo:function(e){},transform:function(e){},fitView:function(){},setCenter:function(e,t){},fitBounds:function(e){},project:function(e){return e},initialized:!1},nf=function(){var t=gn(),n=vn((function(e){return e.d3Zoom})),r=vn((function(e){return e.d3Selection})),o=(0,e.useMemo)((function(){return r&&n?{zoomIn:function(){return n.scaleBy(r,1.2)},zoomOut:function(){return n.scaleBy(r,1/1.2)},zoomTo:function(e){return n.scaleTo(r,e)},transform:function(e){var t=zl.translate(e.x,e.y).scale(e.zoom);n.transform(r,t)},fitView:function(){var e,o=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{padding:ef,includeHiddenNodes:!1},i=t.getState(),a=i.nodes,u=i.width,l=i.height,c=i.minZoom,s=i.maxZoom;if(a.length){var f=zn(o.includeHiddenNodes?a:a.filter((function(e){return!e.isHidden}))),d=Hn(f,u,l,c,s,null!==(e=o.padding)&&void 0!==e?e:ef),p=wn(d,3),h=p[0],v=p[1],g=p[2],y=zl.translate(h,v).scale(g);n.transform(r,y)}},setCenter:function(e,o,i){var a=t.getState(),u=a.width,l=a.height,c=a.maxZoom,s=void 0!==i?i:c,f=u/2-e*s,d=l/2-o*s,p=zl.translate(f,d).scale(s);n.transform(r,p)},fitBounds:function(e){var o=arguments.length>1&&void 0!==arguments[1]?arguments[1]:ef,i=t.getState(),a=i.width,u=i.height,l=i.minZoom,c=i.maxZoom,s=Hn(e,a,u,l,c,o),f=wn(s,3),d=f[0],p=f[1],h=f[2],v=zl.translate(d,p).scale(h);n.transform(r,v)},project:function(e){var n=t.getState(),r=n.transform,o=n.snapToGrid,i=n.snapGrid;return An(e,r,o,i)},initialized:!0}:tf}),[n,r]);return o},rf=function(t){var n=t.nodeTypes,r=t.edgeTypes,o=t.onMove,i=t.onMoveStart,a=t.onMoveEnd,u=t.onLoad,l=t.onElementClick,c=t.onNodeDoubleClick,s=t.onEdgeDoubleClick,f=t.onNodeMouseEnter,d=t.onNodeMouseMove,p=t.onNodeMouseLeave,h=t.onNodeContextMenu,v=t.onNodeDragStart,g=t.onNodeDrag,y=t.onNodeDragStop,m=t.onSelectionDragStart,b=t.onSelectionDrag,w=t.onSelectionDragStop,_=t.onSelectionContextMenu,x=t.connectionMode,S=t.connectionLineType,E=t.connectionLineStyle,k=t.connectionLineComponent,O=t.selectionKeyCode,C=t.multiSelectionKeyCode,P=t.zoomActivationKeyCode,M=t.onElementsRemove,A=t.deleteKeyCode,N=t.onConnect,j=t.onConnectStart,T=t.onConnectStop,D=t.onConnectEnd,R=t.snapToGrid,L=t.snapGrid,z=t.onlyRenderVisibleElements,I=t.nodesDraggable,B=t.nodesConnectable,U=t.elementsSelectable,F=t.selectNodesOnDrag,X=t.minZoom,H=t.maxZoom,V=t.defaultZoom,W=t.defaultPosition,Y=t.translateExtent,$=t.nodeExtent,Z=t.arrowHeadColor,q=t.markerEndId,G=t.zoomOnScroll,K=t.zoomOnPinch,Q=t.panOnScroll,J=t.panOnScrollSpeed,ee=t.panOnScrollMode,te=t.zoomOnDoubleClick,ne=t.paneMoveable,re=t.onPaneClick,oe=t.onPaneScroll,ie=t.onPaneContextMenu,ae=t.onEdgeUpdate,ue=t.onEdgeContextMenu,le=t.onEdgeMouseEnter,ce=t.onEdgeMouseMove,se=t.onEdgeMouseLeave,fe=t.edgeUpdaterRadius,de=t.onEdgeUpdateStart,pe=t.onEdgeUpdateEnd,he=(0,e.useRef)(!1),ve=hn((function(e){return e.setOnConnect})),ge=hn((function(e){return e.setOnConnectStart})),ye=hn((function(e){return e.setOnConnectStop})),me=hn((function(e){return e.setOnConnectEnd})),be=hn((function(e){return e.setSnapGrid})),we=hn((function(e){return e.setSnapToGrid})),_e=hn((function(e){return e.setNodesDraggable})),xe=hn((function(e){return e.setNodesConnectable})),Se=hn((function(e){return e.setElementsSelectable})),Ee=hn((function(e){return e.setMinZoom})),ke=hn((function(e){return e.setMaxZoom})),Oe=hn((function(e){return e.setTranslateExtent})),Ce=hn((function(e){return e.setNodeExtent})),Pe=hn((function(e){return e.setConnectionMode})),Me=gn(),Ae=nf(),Ne=Ae.zoomIn,je=Ae.zoomOut,Te=Ae.zoomTo,De=Ae.transform,Re=Ae.fitView,Le=Ae.initialized;return(0,e.useEffect)((function(){!he.current&&Le&&(u&&u({fitView:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{padding:.1};return Re(e)},zoomIn:Ne,zoomOut:je,zoomTo:Te,setTransform:De,project:Nn(Me),getElements:Fn(Me),toObject:Xn(Me)}),he.current=!0)}),[u,Ne,je,Te,De,Re,Le]),(0,e.useEffect)((function(){N&&ve(N)}),[N]),(0,e.useEffect)((function(){j&&ge(j)}),[j]),(0,e.useEffect)((function(){T&&ye(T)}),[T]),(0,e.useEffect)((function(){D&&me(D)}),[D]),(0,e.useEffect)((function(){void 0!==R&&we(R)}),[R]),(0,e.useEffect)((function(){void 0!==L&&be(L)}),[L]),(0,e.useEffect)((function(){void 0!==I&&_e(I)}),[I]),(0,e.useEffect)((function(){void 0!==B&&xe(B)}),[B]),(0,e.useEffect)((function(){void 0!==U&&Se(U)}),[U]),(0,e.useEffect)((function(){void 0!==X&&Ee(X)}),[X]),(0,e.useEffect)((function(){void 0!==H&&ke(H)}),[H]),(0,e.useEffect)((function(){void 0!==Y&&Oe(Y)}),[Y]),(0,e.useEffect)((function(){void 0!==$&&Ce($)}),[$]),(0,e.useEffect)((function(){void 0!==x&&Pe(x)}),[x]),e.createElement(fs,{onPaneClick:re,onPaneContextMenu:ie,onPaneScroll:oe,onElementsRemove:M,deleteKeyCode:A,selectionKeyCode:O,multiSelectionKeyCode:C,zoomActivationKeyCode:P,elementsSelectable:U,onMove:o,onMoveStart:i,onMoveEnd:a,zoomOnScroll:G,zoomOnPinch:K,zoomOnDoubleClick:te,panOnScroll:Q,panOnScrollSpeed:J,panOnScrollMode:ee,paneMoveable:ne,defaultPosition:W,defaultZoom:V,translateExtent:Y,onSelectionDragStart:m,onSelectionDrag:b,onSelectionDragStop:w,onSelectionContextMenu:_},e.createElement(ps,{nodeTypes:n,onElementClick:l,onNodeDoubleClick:c,onNodeMouseEnter:f,onNodeMouseMove:d,onNodeMouseLeave:p,onNodeContextMenu:h,onNodeDragStop:y,onNodeDrag:g,onNodeDragStart:v,selectNodesOnDrag:F,snapToGrid:R,snapGrid:L,onlyRenderVisibleElements:z}),e.createElement(Js,{edgeTypes:r,onElementClick:l,onEdgeDoubleClick:s,connectionLineType:S,connectionLineStyle:E,connectionLineComponent:k,connectionMode:x,arrowHeadColor:Z,markerEndId:q,onEdgeUpdate:ae,onlyRenderVisibleElements:z,onEdgeContextMenu:ue,onEdgeMouseEnter:le,onEdgeMouseMove:ce,onEdgeMouseLeave:se,onEdgeUpdateStart:de,onEdgeUpdateEnd:pe,edgeUpdaterRadius:fe}))};rf.displayName="GraphView";var of=(0,e.memo)(rf),af=function(t){var n=t.elements,r=hn((function(e){return e.setElements}));return(0,e.useEffect)((function(){r(n)}),[n]),null},uf=(0,e.createContext)(null),lf=uf.Provider;uf.Consumer;var cf=["type","position","isValidConnection","isConnectable","id","onConnect","children","className"];function sf(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}var ff=function(){return!0},df=function(t){var n=t.type,r=void 0===n?"source":n,o=t.position,i=void 0===o?Yl.Top:o,a=t.isValidConnection,u=void 0===a?ff:a,l=t.isConnectable,c=void 0===l||l,s=t.id,f=t.onConnect,d=t.children,p=t.className,h=Pe(t,cf),v=(0,e.useContext)(uf),g=hn((function(e){return e.setConnectionPosition})),y=hn((function(e){return e.setConnectionNodeId})),m=vn((function(e){return e.onConnect})),b=vn((function(e){return e.onConnectStart})),w=vn((function(e){return e.onConnectStop})),_=vn((function(e){return e.onConnectEnd})),x=vn((function(e){return e.connectionMode})),S=s||null,E="target"===r,k=(0,e.useCallback)((function(e){null==m||m(e),null==f||f(e)}),[m,f]),O=(0,e.useCallback)((function(e){Xs(e,S,v,y,g,k,E,u,x,void 0,void 0,b,w,_)}),[S,v,y,g,k,E,u,x,b,w,_]),C=Me(["react-flow__handle","react-flow__handle-".concat(i),"nodrag",p,{source:!E,target:E,connectable:c}]);return e.createElement("div",function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?sf(Object(n),!0).forEach((function(t){Ce(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):sf(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}({"data-handleid":S,"data-nodeid":v,"data-handlepos":i,className:C,onMouseDown:O},h),d)};df.displayName="Handle";var pf=(0,e.memo)(df),hf=function(t){var n=t.data,r=t.isConnectable,o=t.targetPosition,i=void 0===o?Yl.Top:o,a=t.sourcePosition,u=void 0===a?Yl.Bottom:a;return e.createElement(e.Fragment,null,e.createElement(pf,{type:"target",position:i,isConnectable:r}),n.label,e.createElement(pf,{type:"source",position:u,isConnectable:r}))};hf.displayName="DefaultNode";var vf=(0,e.memo)(hf),gf=function(t){var n=t.data,r=t.isConnectable,o=t.sourcePosition,i=void 0===o?Yl.Bottom:o;return e.createElement(e.Fragment,null,n.label,e.createElement(pf,{type:"source",position:i,isConnectable:r}))};gf.displayName="InputNode";var yf=(0,e.memo)(gf),mf=function(t){var n=t.data,r=t.isConnectable,o=t.targetPosition,i=void 0===o?Yl.Top:o;return e.createElement(e.Fragment,null,e.createElement(pf,{type:"target",position:i,isConnectable:r}),n.label)};mf.displayName="OutputNode";var bf=(0,e.memo)(mf);function wf(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}var _f=function(t){var n=function(n){var r=n.id,o=n.type,i=n.data,a=n.scale,u=n.xPos,l=n.yPos,c=n.selected,s=n.onClick,f=n.onMouseEnter,d=n.onMouseMove,p=n.onMouseLeave,h=n.onContextMenu,v=n.onNodeDoubleClick,g=n.onNodeDragStart,y=n.onNodeDrag,m=n.onNodeDragStop,b=n.style,w=n.className,_=n.isDraggable,x=n.isSelectable,S=n.isConnectable,E=n.selectNodesOnDrag,k=n.sourcePosition,O=n.targetPosition,C=n.isHidden,P=n.isInitialized,M=n.snapToGrid,A=n.snapGrid,N=n.isDragging,j=n.resizeObserver,T=hn((function(e){return e.updateNodeDimensions})),D=hn((function(e){return e.addSelectedElements})),R=hn((function(e){return e.updateNodePosDiff})),L=hn((function(e){return e.unsetNodesSelection})),z=(0,e.useRef)(null),I=(0,e.useMemo)((function(){return{id:r,type:o,position:{x:u,y:l},data:i}}),[r,o,u,l,i]),B=(0,e.useMemo)((function(){return M?A:[1,1]}),[M,A]),U=(0,e.useMemo)((function(){return function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?wf(Object(n),!0).forEach((function(t){Ce(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):wf(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}({zIndex:c?10:3,transform:"translate(".concat(u,"px,").concat(l,"px)"),pointerEvents:x||_||s||f||d||p?"all":"none",opacity:P?1:0},b)}),[c,u,l,x,_,s,P,b,f,d,p]),F=(0,e.useMemo)((function(){if(f&&!N)return function(e){return f(e,I)}}),[f,N,I]),X=(0,e.useMemo)((function(){if(d&&!N)return function(e){return d(e,I)}}),[d,N,I]),H=(0,e.useMemo)((function(){if(p&&!N)return function(e){return p(e,I)}}),[p,N,I]),V=(0,e.useMemo)((function(){if(h)return function(e){return h(e,I)}}),[h,I]),W=(0,e.useCallback)((function(e){_||(x&&(L(),c||D(I)),null==s||s(e,I))}),[x,c,_,s,I]),Y=(0,e.useCallback)((function(e){null==g||g(e,I),E&&x?(L(),c||D(I)):E||c||!x||(L(),D([]))}),[I,c,E,x,g]),$=(0,e.useCallback)((function(e,t){y&&(I.position.x+=t.deltaX,I.position.y+=t.deltaY,y(e,I)),R({id:r,diff:{x:t.deltaX,y:t.deltaY},isDragging:!0})}),[r,I,y]),Z=(0,e.useCallback)((function(e){if(!N)return!x||E||c||D(I),void(null==s||s(e,I));R({id:I.id,isDragging:!1}),null==m||m(e,I)}),[I,x,E,s,m,N,c]),q=(0,e.useCallback)((function(e){null==v||v(e,I)}),[I,v]);if((0,e.useLayoutEffect)((function(){z.current&&!C&&T([{id:r,nodeElement:z.current,forceUpdate:!0}])}),[r,C,k,O]),(0,e.useEffect)((function(){if(z.current){var e=z.current;return null==j||j.observe(e),function(){return null==j?void 0:j.unobserve(e)}}}),[]),C)return null;var G=Me(["react-flow__node","react-flow__node-".concat(o),w,{selected:c,selectable:x}]);return e.createElement(is,{onStart:Y,onDrag:$,onStop:Z,scale:a,disabled:!_,cancel:".nodrag",nodeRef:z,grid:B,enableUserSelectHack:!1},e.createElement("div",{className:G,ref:z,style:U,onMouseEnter:F,onMouseMove:X,onMouseLeave:H,onContextMenu:V,onClick:W,onDoubleClick:q,"data-id":r},e.createElement(lf,{value:r},e.createElement(t,{id:r,data:i,type:o,xPos:u,yPos:l,selected:c,isConnectable:S,sourcePosition:k,targetPosition:O,isDragging:N}))))};return n.displayName="NodeWrapper",(0,e.memo)(n)};function xf(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Sf(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?xf(Object(n),!0).forEach((function(t){Ce(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):xf(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var Ef=function(t){var n=t.onSelectionChange,r=vn((function(e){return e.selectedElements}));return(0,e.useEffect)((function(){n(r)}),[r]),null},kf=function e(t,n){if(t===n)return!0;if(t&&n&&"object"==typeof t&&"object"==typeof n){if(t.constructor!==n.constructor)return!1;var r,o,i;if(Array.isArray(t)){if((r=t.length)!=n.length)return!1;for(o=r;0!=o--;)if(!e(t[o],n[o]))return!1;return!0}if(t.constructor===RegExp)return t.source===n.source&&t.flags===n.flags;if(t.valueOf!==Object.prototype.valueOf)return t.valueOf()===n.valueOf();if(t.toString!==Object.prototype.toString)return t.toString()===n.toString();if((r=(i=Object.keys(t)).length)!==Object.keys(n).length)return!1;for(o=r;0!=o--;)if(!Object.prototype.hasOwnProperty.call(n,i[o]))return!1;for(o=r;0!=o--;){var a=i[o];if(!e(t[a],n[a]))return!1}return!0}return t!=t&&n!=n};function Of(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}var Cf=function(e,t){var n=e.getBoundingClientRect();return{source:Pf(".source",e,n,t),target:Pf(".target",e,n,t)}},Pf=function(e,t,n,r){var o=t.querySelectorAll(e);return o&&o.length?Array.from(o).map((function(e){var t=e.getBoundingClientRect(),o=xn(e);return function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Of(Object(n),!0).forEach((function(t){Ce(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Of(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}({id:e.getAttribute("data-handleid"),position:e.getAttribute("data-handlepos"),x:(t.left-n.left)/r,y:(t.top-n.top)/r},o)})):null};function Mf(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Af(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Mf(Object(n),!0).forEach((function(t){Ce(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Mf(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function Nf(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:Tf,t=arguments.length>1?arguments[1]:void 0;switch(t.type){case It:var n=t.payload,r={nextNodes:[],nextEdges:[]},o=n.reduce((function(t,n){if(Mn(n)){var r=e.nodes.find((function(e){return e.id===n.id}));if(r){var o=Af(Af({},r),n);r.position.x===n.position.x&&r.position.y===n.position.y||(o.__rf.position=n.position),void 0!==n.type&&n.type!==r.type&&(o.__rf.width=null),t.nextNodes.push(o)}else t.nextNodes.push(jn(n,e.nodeExtent))}else if(Pn(n)){var i=e.edges.find((function(e){return e.id===n.id}));i?t.nextEdges.push(Af(Af({},i),n)):t.nextEdges.push(Tn(n))}return t}),r),i=o.nextNodes,a=o.nextEdges;return Af(Af({},e),{},{nodes:i,edges:a});case Bt:var u=e.nodes.map((function(n){var r=t.payload.find((function(e){return e.id===n.id}));if(r){var o=xn(r.nodeElement);if(o.width&&o.height&&(n.__rf.width!==o.width||n.__rf.height!==o.height||r.forceUpdate)){var i=Cf(r.nodeElement,e.transform[2]);return Af(Af({},n),{},{__rf:Af(Af(Af({},n.__rf),o),{},{handleBounds:i})})}}return n}));return Af(Af({},e),{},{nodes:u});case Ut:var l=t.payload,c=l.id,s=l.pos,f=s;if(e.snapToGrid){var d=wn(e.snapGrid,2),p=d[0],h=d[1];f={x:p*Math.round(s.x/p),y:h*Math.round(s.y/h)}}var v=e.nodes.map((function(e){return e.id===c?Af(Af({},e),{},{__rf:Af(Af({},e.__rf),{},{position:f})}):e}));return Af(Af({},e),{},{nodes:v});case Ft:var g=t.payload,y=g.id,m=g.diff,b=g.isDragging,w=e.nodes.map((function(t){var n;if(y===t.id||null!==(n=e.selectedElements)&&void 0!==n&&n.find((function(e){return e.id===t.id}))){var r=Af(Af({},t),{},{__rf:Af(Af({},t.__rf),{},{isDragging:b})});return m&&(r.__rf.position={x:t.__rf.position.x+m.x,y:t.__rf.position.y+m.y}),r}return t}));return Af(Af({},e),{},{nodes:w});case Xt:var _=t.payload;return Af(Af({},e),{},{selectionActive:!0,userSelectionRect:{width:0,height:0,startX:_.x,startY:_.y,x:_.x,y:_.y,draw:!0}});case Ht:var x,S,E=t.payload,k=null!==(x=e.userSelectionRect.startX)&&void 0!==x?x:0,O=null!==(S=e.userSelectionRect.startY)&&void 0!==S?S:0,C=Af(Af({},e.userSelectionRect),{},{x:E.x<k?E.x:e.userSelectionRect.x,y:E.y<O?E.y:e.userSelectionRect.y,width:Math.abs(E.x-k),height:Math.abs(E.y-O)}),P=In(e.nodes,C,e.transform),M=Bn(P,e.edges),A=[].concat(bn(P),bn(M)),N=!kf(A,e.selectedElements),j=N?{selectedElements:A.length>0?A:null}:{};return Af(Af(Af({},e),j),{},{userSelectionRect:C});case Vt:var T,D=null===(T=e.selectedElements)||void 0===T?void 0:T.filter((function(e){return Mn(e)&&e.__rf})),R=Af(Af({},e),{},{selectionActive:!1,userSelectionRect:Af(Af({},e.userSelectionRect),{},{draw:!1})});if(D&&0!==D.length){var L=zn(D);R.selectedNodesBbox=L,R.nodesSelectionActive=!0}else R.selectedElements=null,R.nodesSelectionActive=!1;return R;case Yt:var z=t.payload,I=Array.isArray(z)?z:[z],B=!kf(I,e.selectedElements),U=B?I:e.selectedElements;return Af(Af({},e),{},{selectedElements:U});case Zt:var F=e.multiSelectionActive,X=e.selectedElements,H=t.payload,V=Array.isArray(H)?H:[H],W=V;F&&(W=X?[].concat(bn(X),bn(V)):V);var Y=!kf(W,e.selectedElements),$=Y?W:e.selectedElements;return Af(Af({},e),{},{selectedElements:$});case Kt:var Z=t.payload,q=Z.d3Zoom,G=Z.d3Selection,K=Z.d3ZoomHandler,Q=Z.transform;return Af(Af({},e),{},{d3Zoom:q,d3Selection:G,d3ZoomHandler:K,transform:Q});case Qt:var J,ee=t.payload;return null===(J=e.d3Zoom)||void 0===J||J.scaleExtent([ee,e.maxZoom]),Af(Af({},e),{},{minZoom:ee});case Jt:var te,ne=t.payload;return null===(te=e.d3Zoom)||void 0===te||te.scaleExtent([e.minZoom,ne]),Af(Af({},e),{},{maxZoom:ne});case en:var re,oe=t.payload;return null===(re=e.d3Zoom)||void 0===re||re.translateExtent(oe),Af(Af({},e),{},{translateExtent:oe});case dn:var ie=t.payload;return Af(Af({},e),{},{nodeExtent:ie,nodes:e.nodes.map((function(e){return Af(Af({},e),{},{__rf:Af(Af({},e.__rf),{},{position:En(e.__rf.position,ie)})})}))});case Dt:case Rt:case Lt:case zt:case $t:case Wt:case qt:case Gt:case tn:case nn:case rn:case on:case an:case un:case ln:case cn:case sn:case fn:return Af(Af({},e),t.payload);default:return e}}function jf(e){return Re(Nf,e)}var Tf={width:0,height:0,transform:[0,0,1],nodes:[],edges:[],selectedElements:null,selectedNodesBbox:{x:0,y:0,width:0,height:0},d3Zoom:null,d3Selection:null,d3ZoomHandler:void 0,minZoom:.5,maxZoom:2,translateExtent:[[Number.NEGATIVE_INFINITY,Number.NEGATIVE_INFINITY],[Number.POSITIVE_INFINITY,Number.POSITIVE_INFINITY]],nodeExtent:[[Number.NEGATIVE_INFINITY,Number.NEGATIVE_INFINITY],[Number.POSITIVE_INFINITY,Number.POSITIVE_INFINITY]],nodesSelectionActive:!1,selectionActive:!1,userSelectionRect:{startX:0,startY:0,x:0,y:0,width:0,height:0,draw:!1},connectionNodeId:null,connectionHandleId:null,connectionHandleType:"source",connectionPosition:{x:0,y:0},connectionMode:ql.Strict,snapGrid:[15,15],snapToGrid:!1,nodesDraggable:!0,nodesConnectable:!0,elementsSelectable:!0,multiSelectionActive:!1,reactFlowVersion:"9.6.1"},Df=jf(Tf),Rf=function(t){var n=t.children,r=(0,e.useContext)(vt);return(0,e.useMemo)((function(){var e,t;return null==r||null===(e=r.store)||void 0===e||null===(t=e.getState())||void 0===t?void 0:t.reactFlowVersion}),[r])?e.createElement(e.Fragment,null,n):e.createElement(_t,{store:Df},n)};function Lf(e,t){void 0===t&&(t={});var n=t.insertAt;if(e&&"undefined"!=typeof document){var r=document.head||document.getElementsByTagName("head")[0],o=document.createElement("style");o.type="text/css","top"===n&&r.firstChild?r.insertBefore(o,r.firstChild):r.appendChild(o),o.styleSheet?o.styleSheet.cssText=e:o.appendChild(document.createTextNode(e))}}Rf.displayName="ReactFlowWrapper";Lf(".react-flow{width:100%;height:100%;position:relative;overflow:hidden}.react-flow__pane,.react-flow__renderer,.react-flow__selectionpane{width:100%;height:100%;position:absolute;top:0;left:0}.react-flow__pane{z-index:1}.react-flow__renderer{z-index:4}.react-flow__selectionpane{z-index:5}.react-flow__edges,.react-flow__selection{position:absolute;top:0;left:0}.react-flow__edges{pointer-events:none;z-index:2}.react-flow__edge{pointer-events:visibleStroke;}.react-flow__edge.inactive{pointer-events:none}@-webkit-keyframes dashdraw{0%{stroke-dashoffset:10}}@keyframes dashdraw{0%{stroke-dashoffset:10}}.react-flow__edge-path{fill:none}.react-flow__edge-textwrapper{pointer-events:all}.react-flow__edge-text{pointer-events:none;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.react-flow__connection{pointer-events:none;}.react-flow__connection .animated{stroke-dasharray:5;-webkit-animation:dashdraw .5s linear infinite;animation:dashdraw .5s linear infinite}.react-flow__connection-path{fill:none}.react-flow__nodes{width:100%;height:100%;pointer-events:none;z-index:3}.react-flow__node,.react-flow__nodes{position:absolute;transform-origin:0 0}.react-flow__node{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;pointer-events:all}.react-flow__nodesselection{z-index:3;position:absolute;width:100%;height:100%;top:0;left:0;transform-origin:left top;pointer-events:none;}.react-flow__nodesselection-rect{position:absolute;pointer-events:all;cursor:-webkit-grab;cursor:grab}.react-flow__handle{pointer-events:none;}.react-flow__handle.connectable{pointer-events:all}.react-flow__handle-bottom{top:auto;left:50%;bottom:-4px;transform:translate(-50%)}.react-flow__handle-top{left:50%;top:-4px;transform:translate(-50%)}.react-flow__handle-left{top:50%;left:-4px;transform:translateY(-50%)}.react-flow__handle-right{right:-4px;top:50%;transform:translateY(-50%)}.react-flow__edgeupdater{cursor:move;pointer-events:all}.react-flow__background{position:absolute;top:0;left:0;width:100%;height:100%}.react-flow__controls{position:absolute;z-index:5;bottom:10px;left:10px;}.react-flow__controls-button{width:24px;height:24px;border:none;}.react-flow__controls-button svg{width:100%}.react-flow__minimap{position:absolute;z-index:5;bottom:10px;right:10px}");Lf(".react-flow__selection{background:rgba(0,89,220,.08);border:1px dotted rgba(0,89,220,.8)}.react-flow__edge.selected .react-flow__edge-path{stroke:#555}.react-flow__edge.animated path{stroke-dasharray:5;-webkit-animation:dashdraw .5s linear infinite;animation:dashdraw .5s linear infinite}.react-flow__edge.updating .react-flow__edge-path{stroke:#777}.react-flow__edge-path{stroke:#b1b1b7;stroke-width:1}.react-flow__edge-text{font-size:10px}.react-flow__edge-textbg{fill:#fff}.react-flow__connection-path{stroke:#b1b1b7;stroke-width:1}.react-flow__node{cursor:-webkit-grab;cursor:grab}.react-flow__node-default,.react-flow__node-input,.react-flow__node-output{padding:10px;border-radius:3px;width:150px;font-size:12px;color:#222;text-align:center;border-width:1px;border-style:solid}.react-flow__node-default.selectable:hover,.react-flow__node-input.selectable:hover,.react-flow__node-output.selectable:hover{box-shadow:0 1px 4px 1px rgba(0,0,0,.08)}.react-flow__node-input{background:#fff;border-color:#0041d0;}.react-flow__node-input.selected,.react-flow__node-input.selected:hover{box-shadow:0 0 0 .5px #0041d0}.react-flow__node-input .react-flow__handle{background:#0041d0}.react-flow__node-default{background:#fff;border-color:#1a192b;}.react-flow__node-default.selected,.react-flow__node-default.selected:hover{box-shadow:0 0 0 .5px #1a192b}.react-flow__node-default .react-flow__handle{background:#1a192b}.react-flow__node-output{background:#fff;border-color:#ff0072;}.react-flow__node-output.selected,.react-flow__node-output.selected:hover{box-shadow:0 0 0 .5px #ff0072}.react-flow__node-output .react-flow__handle{background:#ff0072}.react-flow__nodesselection-rect{background:rgba(0,89,220,.08);border:1px dotted rgba(0,89,220,.8)}.react-flow__handle{position:absolute;width:6px;height:6px;background:#555;border:1px solid #fff;border-radius:100%;}.react-flow__handle.connectable{cursor:crosshair}.react-flow__minimap{background-color:#fff}.react-flow__controls{box-shadow:0 0 2px 1px rgba(0,0,0,.08);}.react-flow__controls-button{background:#fefefe;border-bottom:1px solid #eee;box-sizing:content-box;display:flex;justify-content:center;align-items:center;width:16px;height:16px;cursor:pointer;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;padding:5px;}.react-flow__controls-button svg{max-width:12px;max-height:12px}.react-flow__controls-button:hover{background:#f4f4f4}");var zf=["elements","className","nodeTypes","edgeTypes","onElementClick","onLoad","onMove","onMoveStart","onMoveEnd","onElementsRemove","onConnect","onConnectStart","onConnectStop","onConnectEnd","onNodeMouseEnter","onNodeMouseMove","onNodeMouseLeave","onNodeContextMenu","onNodeDoubleClick","onNodeDragStart","onNodeDrag","onNodeDragStop","onSelectionChange","onSelectionDragStart","onSelectionDrag","onSelectionDragStop","onSelectionContextMenu","connectionMode","connectionLineType","connectionLineStyle","connectionLineComponent","deleteKeyCode","selectionKeyCode","multiSelectionKeyCode","zoomActivationKeyCode","snapToGrid","snapGrid","onlyRenderVisibleElements","selectNodesOnDrag","nodesDraggable","nodesConnectable","elementsSelectable","minZoom","maxZoom","defaultZoom","defaultPosition","translateExtent","nodeExtent","arrowHeadColor","markerEndId","zoomOnScroll","zoomOnPinch","panOnScroll","panOnScrollSpeed","panOnScrollMode","zoomOnDoubleClick","paneMoveable","onPaneClick","onPaneScroll","onPaneContextMenu","children","onEdgeUpdate","onEdgeContextMenu","onEdgeDoubleClick","onEdgeMouseEnter","onEdgeMouseMove","onEdgeMouseLeave","onEdgeUpdateStart","onEdgeUpdateEnd","edgeUpdaterRadius","nodeTypesId","edgeTypesId"];function If(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Bf(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?If(Object(n),!0).forEach((function(t){Ce(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):If(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var Uf={input:yf,default:vf,output:bf},Ff={default:xs,straight:Bs,step:Is,smoothstep:js},Xf=(0,e.forwardRef)((function(t,n){var r=t.elements,o=void 0===r?[]:r,i=t.className,a=t.nodeTypes,u=void 0===a?Uf:a,l=t.edgeTypes,c=void 0===l?Ff:l,s=t.onElementClick,f=t.onLoad,d=t.onMove,p=t.onMoveStart,h=t.onMoveEnd,v=t.onElementsRemove,g=t.onConnect,y=t.onConnectStart,m=t.onConnectStop,b=t.onConnectEnd,w=t.onNodeMouseEnter,_=t.onNodeMouseMove,x=t.onNodeMouseLeave,S=t.onNodeContextMenu,E=t.onNodeDoubleClick,k=t.onNodeDragStart,O=t.onNodeDrag,C=t.onNodeDragStop,P=t.onSelectionChange,M=t.onSelectionDragStart,A=t.onSelectionDrag,N=t.onSelectionDragStop,j=t.onSelectionContextMenu,T=t.connectionMode,D=void 0===T?ql.Strict:T,R=t.connectionLineType,L=void 0===R?Gl.Bezier:R,z=t.connectionLineStyle,I=t.connectionLineComponent,B=t.deleteKeyCode,U=void 0===B?"Backspace":B,F=t.selectionKeyCode,X=void 0===F?"Shift":F,H=t.multiSelectionKeyCode,V=void 0===H?"Meta":H,W=t.zoomActivationKeyCode,Y=void 0===W?"Meta":W,$=t.snapToGrid,Z=void 0!==$&&$,q=t.snapGrid,G=void 0===q?[15,15]:q,K=t.onlyRenderVisibleElements,Q=void 0!==K&&K,J=t.selectNodesOnDrag,ee=void 0===J||J,te=t.nodesDraggable,ne=t.nodesConnectable,re=t.elementsSelectable,oe=t.minZoom,ie=t.maxZoom,ae=t.defaultZoom,ue=void 0===ae?1:ae,le=t.defaultPosition,ce=void 0===le?[0,0]:le,se=t.translateExtent,fe=t.nodeExtent,de=t.arrowHeadColor,pe=void 0===de?"#b1b1b7":de,he=t.markerEndId,ve=t.zoomOnScroll,ge=void 0===ve||ve,ye=t.zoomOnPinch,me=void 0===ye||ye,be=t.panOnScroll,we=void 0!==be&&be,_e=t.panOnScrollSpeed,xe=void 0===_e?.5:_e,Se=t.panOnScrollMode,Ee=void 0===Se?Kl.Free:Se,ke=t.zoomOnDoubleClick,Oe=void 0===ke||ke,Ce=t.paneMoveable,Ae=void 0===Ce||Ce,Ne=t.onPaneClick,je=t.onPaneScroll,Te=t.onPaneContextMenu,De=t.children,Re=t.onEdgeUpdate,Le=t.onEdgeContextMenu,ze=t.onEdgeDoubleClick,Ie=t.onEdgeMouseEnter,Be=t.onEdgeMouseMove,Ue=t.onEdgeMouseLeave,Fe=t.onEdgeUpdateStart,Xe=t.onEdgeUpdateEnd,He=t.edgeUpdaterRadius,Ve=void 0===He?10:He,We=t.nodeTypesId,Ye=void 0===We?"1":We,$e=t.edgeTypesId,Ze=void 0===$e?"1":$e,qe=Pe(t,zf),Ge=(0,e.useMemo)((function(){return function(e){var t={input:_f(e.input||yf),default:_f(e.default||vf),output:_f(e.output||bf)},n=Object.keys(e).filter((function(e){return!["input","default","output"].includes(e)})).reduce((function(t,n){return t[n]=_f(e[n]||vf),t}),{});return Sf(Sf({},t),n)}(u)}),[Ye]),Ke=(0,e.useMemo)((function(){return function(e){var t={default:Ys(e.default||xs),straight:Ys(e.bezier||Bs),step:Ys(e.step||Is),smoothstep:Ys(e.step||js)},n=Object.keys(e).filter((function(e){return!["default","bezier"].includes(e)})).reduce((function(t,n){return t[n]=Ys(e[n]||xs),t}),{});return Zs(Zs({},t),n)}(c)}),[Ze]),Qe=Me(["react-flow",i]);return e.createElement("div",Bf(Bf({},qe),{},{ref:n,className:Qe}),e.createElement(Rf,null,e.createElement(of,{onLoad:f,onMove:d,onMoveStart:p,onMoveEnd:h,onElementClick:s,onNodeMouseEnter:w,onNodeMouseMove:_,onNodeMouseLeave:x,onNodeContextMenu:S,onNodeDoubleClick:E,onNodeDragStart:k,onNodeDrag:O,onNodeDragStop:C,nodeTypes:Ge,edgeTypes:Ke,connectionMode:D,connectionLineType:L,connectionLineStyle:z,connectionLineComponent:I,selectionKeyCode:X,onElementsRemove:v,deleteKeyCode:U,multiSelectionKeyCode:V,zoomActivationKeyCode:Y,onConnect:g,onConnectStart:y,onConnectStop:m,onConnectEnd:b,snapToGrid:Z,snapGrid:G,onlyRenderVisibleElements:Q,nodesDraggable:te,nodesConnectable:ne,elementsSelectable:re,selectNodesOnDrag:ee,minZoom:oe,maxZoom:ie,defaultZoom:ue,defaultPosition:ce,translateExtent:se,nodeExtent:fe,arrowHeadColor:pe,markerEndId:he,zoomOnScroll:ge,zoomOnPinch:me,zoomOnDoubleClick:Oe,panOnScroll:we,panOnScrollSpeed:xe,panOnScrollMode:Ee,paneMoveable:Ae,onPaneClick:Ne,onPaneScroll:je,onPaneContextMenu:Te,onSelectionDragStart:M,onSelectionDrag:A,onSelectionDragStop:N,onSelectionContextMenu:j,onEdgeUpdate:Re,onEdgeContextMenu:Le,onEdgeDoubleClick:ze,onEdgeMouseEnter:Ie,onEdgeMouseMove:Be,onEdgeMouseLeave:Ue,onEdgeUpdateStart:Fe,onEdgeUpdateEnd:Xe,edgeUpdaterRadius:Ve}),e.createElement(af,{elements:o}),P&&e.createElement(Ef,{onSelectionChange:P}),De))}));Xf.displayName="ReactFlow";var Hf=function(t){var n=t.x,r=t.y,o=t.width,i=t.height,a=t.style,u=t.color,l=t.strokeColor,c=t.strokeWidth,s=t.className,f=t.borderRadius,d=t.shapeRendering,p=a||{},h=p.background,v=p.backgroundColor,g=u||h||v;return e.createElement("rect",{className:Me(["react-flow__minimap-node",s]),x:n,y:r,rx:f,ry:f,width:o,height:i,fill:g,stroke:l,strokeWidth:c,shapeRendering:d})};Hf.displayName="MiniMapNode";var Vf=(0,e.memo)(Hf),Wf=function(t){var n,r=t.style,o=t.className,i=t.nodeStrokeColor,a=void 0===i?"#555":i,u=t.nodeColor,l=void 0===u?"#fff":u,c=t.nodeClassName,s=void 0===c?"":c,f=t.nodeBorderRadius,d=void 0===f?5:f,p=t.nodeStrokeWidth,h=void 0===p?2:p,v=t.maskColor,g=void 0===v?"rgb(240, 242, 243, 0.7)":v,y=vn((function(e){return e.width})),m=vn((function(e){return e.height})),b=wn(vn((function(e){return e.transform})),3),w=b[0],_=b[1],x=b[2],S=vn((function(e){return e.nodes})),E=Me(["react-flow__minimap",o]),k=(null==r?void 0:r.width)||200,O=(null==r?void 0:r.height)||150,C=l instanceof Function?l:function(){return l},P=a instanceof Function?a:function(){return a},M=s instanceof Function?s:function(){return s},A=S&&S.length,N=zn(S),j={x:-w/x,y:-_/x,width:y/x,height:m/x},T=A?(n=j,Ln(Dn(Rn(N),Rn(n)))):j,D=T.width/k,R=T.height/O,L=Math.max(D,R),z=L*k,I=L*O,B=5*L,U=T.x-(z-T.width)/2-B,F=T.y-(I-T.height)/2-B,X=z+2*B,H=I+2*B,V="undefined"==typeof window||window.chrome?"crispEdges":"geometricPrecision";return e.createElement("svg",{width:k,height:O,viewBox:"".concat(U," ").concat(F," ").concat(X," ").concat(H),style:r,className:E},S.filter((function(e){return!e.isHidden})).map((function(t){return e.createElement(Vf,{key:t.id,x:t.__rf.position.x,y:t.__rf.position.y,width:t.__rf.width,height:t.__rf.height,style:t.style,className:M(t),color:C(t),borderRadius:d,strokeColor:P(t),strokeWidth:h,shapeRendering:V})})),e.createElement("path",{className:"react-flow__minimap-mask",d:"M".concat(U-B,",").concat(F-B,"h").concat(X+2*B,"v").concat(H+2*B,"h").concat(-X-2*B,"z\n        M").concat(j.x,",").concat(j.y,"h").concat(j.width,"v").concat(j.height,"h").concat(-j.width,"z"),fill:g,fillRule:"evenodd"}))};Wf.displayName="MiniMap";function Yf(){return Yf=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},Yf.apply(this,arguments)}var $f=e.createElement("path",{d:"M32 18.133H18.133V32h-4.266V18.133H0v-4.266h13.867V0h4.266v13.867H32z"});function Zf(t){return e.createElement("svg",Yf({xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 32 32"},t),$f)}function qf(){return qf=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},qf.apply(this,arguments)}var Gf=e.createElement("path",{d:"M0 0h32v4.2H0z"});function Kf(t){return e.createElement("svg",qf({xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 32 5"},t),Gf)}function Qf(){return Qf=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},Qf.apply(this,arguments)}var Jf=e.createElement("path",{d:"M3.692 4.63c0-.53.4-.938.939-.938h5.215V0H4.708C2.13 0 0 2.054 0 4.63v5.216h3.692V4.631zM27.354 0h-5.2v3.692h5.17c.53 0 .984.4.984.939v5.215H32V4.631A4.624 4.624 0 0027.354 0zm.954 24.83c0 .532-.4.94-.939.94h-5.215v3.768h5.215c2.577 0 4.631-2.13 4.631-4.707v-5.139h-3.692v5.139zm-23.677.94a.919.919 0 01-.939-.94v-5.138H0v5.139c0 2.577 2.13 4.707 4.708 4.707h5.138V25.77H4.631z"});function ed(t){return e.createElement("svg",Qf({xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 32 30"},t),Jf)}function td(){return td=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},td.apply(this,arguments)}var nd=e.createElement("path",{d:"M21.333 10.667H19.81V7.619C19.81 3.429 16.38 0 12.19 0 8 0 4.571 3.429 4.571 7.619v3.048H3.048A3.056 3.056 0 000 13.714v15.238A3.056 3.056 0 003.048 32h18.285a3.056 3.056 0 003.048-3.048V13.714a3.056 3.056 0 00-3.048-3.047zM12.19 24.533a3.056 3.056 0 01-3.047-3.047 3.056 3.056 0 013.047-3.048 3.056 3.056 0 013.048 3.048 3.056 3.056 0 01-3.048 3.047zm4.724-13.866H7.467V7.619c0-2.59 2.133-4.724 4.723-4.724 2.591 0 4.724 2.133 4.724 4.724v3.048z"});function rd(t){return e.createElement("svg",td({xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 25 32"},t),nd)}function od(){return od=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},od.apply(this,arguments)}var id=e.createElement("path",{d:"M21.333 10.667H19.81V7.619C19.81 3.429 16.38 0 12.19 0c-4.114 1.828-1.37 2.133.305 2.438 1.676.305 4.42 2.59 4.42 5.181v3.048H3.047A3.056 3.056 0 000 13.714v15.238A3.056 3.056 0 003.048 32h18.285a3.056 3.056 0 003.048-3.048V13.714a3.056 3.056 0 00-3.048-3.047zM12.19 24.533a3.056 3.056 0 01-3.047-3.047 3.056 3.056 0 013.047-3.048 3.056 3.056 0 013.048 3.048 3.056 3.056 0 01-3.048 3.047z"});function ad(t){return e.createElement("svg",od({xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 25 32"},t),id)}var ud=["children","className"];function ld(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}var cd=function(t){var n=t.children,r=t.className,o=Pe(t,ud);return e.createElement("button",function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?ld(Object(n),!0).forEach((function(t){Ce(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):ld(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}({className:Me(["react-flow__controls-button",r])},o),n)},sd=function(t){var n=t.style,r=t.showZoom,o=void 0===r||r,i=t.showFitView,a=void 0===i||i,u=t.showInteractive,l=void 0===u||u,c=t.fitViewParams,s=t.onZoomIn,f=t.onZoomOut,d=t.onFitView,p=t.onInteractiveChange,h=t.className,v=t.children,g=wn((0,e.useState)(!1),2),y=g[0],m=g[1],b=hn((function(e){return e.setInteractive})),w=nf(),_=w.zoomIn,x=w.zoomOut,S=w.fitView,E=vn((function(e){return e.nodesDraggable&&e.nodesConnectable&&e.elementsSelectable})),k=Me(["react-flow__controls",h]),O=(0,e.useCallback)((function(){null==_||_(),null==s||s()}),[_,s]),C=(0,e.useCallback)((function(){null==x||x(),null==f||f()}),[x,f]),P=(0,e.useCallback)((function(){null==S||S(c),null==d||d()}),[S,c,d]),M=(0,e.useCallback)((function(){null==b||b(!E),null==p||p(!E)}),[E,b,p]);return(0,e.useEffect)((function(){m(!0)}),[]),y?e.createElement("div",{className:k,style:n},o&&e.createElement(e.Fragment,null,e.createElement(cd,{onClick:O,className:"react-flow__controls-zoomin"},e.createElement(Zf,null)),e.createElement(cd,{onClick:C,className:"react-flow__controls-zoomout"},e.createElement(Kf,null))),a&&e.createElement(cd,{className:"react-flow__controls-fitview",onClick:P},e.createElement(ed,null)),l&&e.createElement(cd,{className:"react-flow__controls-interactive",onClick:M},E?e.createElement(ad,null):e.createElement(rd,null)),v):null};sd.displayName="Controls";var fd;function dd(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function pd(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?dd(Object(n),!0).forEach((function(t){Ce(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):dd(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var hd=(Ce(fd={},Zl.Dots,"#81818a"),Ce(fd,Zl.Lines,"#eee"),fd),vd=function(t){var n=t.variant,r=void 0===n?Zl.Dots:n,o=t.gap,i=void 0===o?15:o,a=t.size,u=void 0===a?.4:a,l=t.color,c=t.style,s=t.className,f=wn(vn((function(e){return e.transform})),3),d=f[0],p=f[1],h=f[2],v=(0,e.useMemo)((function(){return"pattern-".concat(Math.floor(1e5*Math.random()))}),[]),g=Me(["react-flow__background",s]),y=i*h,m=d%y,b=p%y,w=r===Zl.Lines,_=l||hd[r],x=w?function(t,n,r){return e.createElement("path",{stroke:r,strokeWidth:n,d:"M".concat(t/2," 0 V").concat(t," M0 ").concat(t/2," H").concat(t)})}(y,u,_):function(t,n){return e.createElement("circle",{cx:t,cy:t,r:t,fill:n})}(u*h,_);return e.createElement("svg",{className:g,style:pd(pd({},c),{},{width:"100%",height:"100%"})},e.createElement("pattern",{id:v,x:m,y:b,width:y,height:y,patternUnits:"userSpaceOnUse"},x),e.createElement("rect",{x:"0",y:"0",width:"100%",height:"100%",fill:"url(#".concat(v,")")}))};vd.displayName="Background";var gd=n(618),yd={insert:"head",singleton:!1};pe()(gd.Z,yd);gd.Z.locals;var md=n(64),bd={insert:"head",singleton:!1};pe()(md.Z,bd);md.Z.locals;function wd(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null==n)return;var r,o,i=[],a=!0,u=!1;try{for(n=n.call(e);!(a=(r=n.next()).done)&&(i.push(r.value),!t||i.length!==t);a=!0);}catch(e){u=!0,o=e}finally{try{a||null==n.return||n.return()}finally{if(u)throw o}}return i}(e,t)||function(e,t){if(!e)return;if("string"==typeof e)return _d(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return _d(e,t)}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function _d(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function xd(){var t=(0,ce.useXarrow)(),n=wd((0,e.useState)("CLICK ME"),2);n[0],n[1];return e.createElement("div",{style:{display:"flex",justifyContent:"space-between"}},e.createElement(Oe,{updateXarrow:t}))}(0,t.render)(e.createElement(ee,null,e.createElement(xd,null)),document.getElementById("root"))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,