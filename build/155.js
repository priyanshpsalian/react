/*! For license information please see 155.js.LICENSE.txt */
(self.webpackChunktravelviser=self.webpackChunktravelviser||[]).push([[155],{122:(e,t,n)=>{"use strict";function r(){return(r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}n.d(t,{Z:()=>r})},552:(e,t,n)=>{"use strict";function r(e,t){return(r=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function o(e,t){e.prototype=Object.create(t.prototype),e.prototype.constructor=e,r(e,t)}n.d(t,{Z:()=>o})},756:(e,t,n)=>{"use strict";function r(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}n.d(t,{Z:()=>r})},318:e=>{e.exports=function(e){return e&&e.__esModule?e:{default:e}},e.exports.default=e.exports,e.exports.__esModule=!0},862:(e,t,n)=>{var r=n(8).default;function o(){if("function"!=typeof WeakMap)return null;var e=new WeakMap;return o=function(){return e},e}e.exports=function(e){if(e&&e.__esModule)return e;if(null===e||"object"!==r(e)&&"function"!=typeof e)return{default:e};var t=o();if(t&&t.has(e))return t.get(e);var n={},i=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var a in e)if(Object.prototype.hasOwnProperty.call(e,a)){var u=i?Object.getOwnPropertyDescriptor(e,a):null;u&&(u.get||u.set)?Object.defineProperty(n,a,u):n[a]=e[a]}return n.default=e,t&&t.set(e,n),n},e.exports.default=e.exports,e.exports.__esModule=!0},8:e=>{function t(n){return"function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?(e.exports=t=function(e){return typeof e},e.exports.default=e.exports,e.exports.__esModule=!0):(e.exports=t=function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},e.exports.default=e.exports,e.exports.__esModule=!0),t(n)}e.exports=t,e.exports.default=e.exports,e.exports.__esModule=!0},500:(e,t,n)=>{"use strict";function r(e){for(var t="https://material-ui.com/production-error/?code="+e,n=1;n<arguments.length;n+=1)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified Material-UI error #"+e+"; visit "+t+" for the full message."}function o(e){if("string"!=typeof e)throw new Error(r(7));return e.charAt(0).toUpperCase()+e.slice(1)}function i(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return t.reduce((function(e,t){return null==t?e:function(){for(var n=arguments.length,r=new Array(n),o=0;o<n;o++)r[o]=arguments[o];e.apply(this,r),t.apply(this,r)}}),(function(){}))}n.r(t),n.d(t,{capitalize:()=>o,createChainedFunction:()=>i,createSvgIcon:()=>Pr,debounce:()=>Cr,deprecatedPropType:()=>Mr,isMuiElement:()=>Nr,ownerDocument:()=>Tr,ownerWindow:()=>jr,requirePropFactory:()=>Dr,setRef:()=>Rr,unstable_useId:()=>Ur,unsupportedProp:()=>Ar,useControlled:()=>Lr,useEventCallback:()=>Ir,useForkRef:()=>Br,useIsFocusVisible:()=>Kr});var a=n(122),u=n(294),l=n(756);function c(e,t){if(null==e)return{};var n,r,o=(0,l.Z)(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}function s(e){var t,n,r="";if("string"==typeof e||"number"==typeof e)r+=e;else if("object"==typeof e)if(Array.isArray(e))for(t=0;t<e.length;t++)e[t]&&(n=s(e[t]))&&(r&&(r+=" "),r+=n);else for(t in e)e[t]&&(r&&(r+=" "),r+=t);return r}function f(){for(var e,t,n=0,r="";n<arguments.length;)(e=arguments[n++])&&(t=s(e))&&(r&&(r+=" "),r+=t);return r}n(697);var d=n(679),p=n.n(d),h="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};const v="object"===("undefined"==typeof window?"undefined":h(window))&&"object"===("undefined"==typeof document?"undefined":h(document))&&9===document.nodeType;function y(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function g(e,t,n){return t&&y(e.prototype,t),n&&y(e,n),e}var m=n(552);function b(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}var w={}.constructor;function _(e){if(null==e||"object"!=typeof e)return e;if(Array.isArray(e))return e.map(_);if(e.constructor!==w)return e;var t={};for(var n in e)t[n]=_(e[n]);return t}function S(e,t,n){void 0===e&&(e="unnamed");var r=n.jss,o=_(t);return r.plugins.onCreateRule(e,o,n)||(e[0],null)}var x=function(e,t){for(var n="",r=0;r<e.length&&"!important"!==e[r];r++)n&&(n+=t),n+=e[r];return n},E=function(e,t){if(void 0===t&&(t=!1),!Array.isArray(e))return e;var n="";if(Array.isArray(e[0]))for(var r=0;r<e.length&&"!important"!==e[r];r++)n&&(n+=", "),n+=x(e[r]," ");else n=x(e,", ");return t||"!important"!==e[e.length-1]||(n+=" !important"),n};function k(e,t){for(var n="",r=0;r<t;r++)n+="  ";return n+e}function O(e,t,n){void 0===n&&(n={});var r="";if(!t)return r;var o=n.indent,i=void 0===o?0:o,a=t.fallbacks;if(e&&i++,a)if(Array.isArray(a))for(var u=0;u<a.length;u++){var l=a[u];for(var c in l){var s=l[c];null!=s&&(r&&(r+="\n"),r+=""+k(c+": "+E(s)+";",i))}}else for(var f in a){var d=a[f];null!=d&&(r&&(r+="\n"),r+=""+k(f+": "+E(d)+";",i))}for(var p in t){var h=t[p];null!=h&&"fallbacks"!==p&&(r&&(r+="\n"),r+=""+k(p+": "+E(h)+";",i))}return(r||n.allowEmpty)&&e?(r&&(r="\n"+r+"\n"),k(e+" {"+r,--i)+k("}",i)):r}var P=/([[\].#*$><+~=|^:(),"'`\s])/g,C="undefined"!=typeof CSS&&CSS.escape,M=function(e){return C?C(e):e.replace(P,"\\$1")},N=function(){function e(e,t,n){this.type="style",this.key=void 0,this.isProcessed=!1,this.style=void 0,this.renderer=void 0,this.renderable=void 0,this.options=void 0;var r=n.sheet,o=n.Renderer;this.key=e,this.options=n,this.style=t,r?this.renderer=r.renderer:o&&(this.renderer=new o)}return e.prototype.prop=function(e,t,n){if(void 0===t)return this.style[e];var r=!!n&&n.force;if(!r&&this.style[e]===t)return this;var o=t;n&&!1===n.process||(o=this.options.jss.plugins.onChangeValue(t,e,this));var i=null==o||!1===o,a=e in this.style;if(i&&!a&&!r)return this;var u=i&&a;if(u?delete this.style[e]:this.style[e]=o,this.renderable&&this.renderer)return u?this.renderer.removeProperty(this.renderable,e):this.renderer.setProperty(this.renderable,e,o),this;var l=this.options.sheet;return l&&l.attached,this},e}(),T=function(e){function t(t,n,r){var o;(o=e.call(this,t,n,r)||this).selectorText=void 0,o.id=void 0,o.renderable=void 0;var i=r.selector,a=r.scoped,u=r.sheet,l=r.generateId;return i?o.selectorText=i:!1!==a&&(o.id=l(b(b(o)),u),o.selectorText="."+M(o.id)),o}(0,m.Z)(t,e);var n=t.prototype;return n.applyTo=function(e){var t=this.renderer;if(t){var n=this.toJSON();for(var r in n)t.setProperty(e,r,n[r])}return this},n.toJSON=function(){var e={};for(var t in this.style){var n=this.style[t];"object"!=typeof n?e[t]=n:Array.isArray(n)&&(e[t]=E(n))}return e},n.toString=function(e){var t=this.options.sheet,n=t&&t.options.link?(0,a.Z)({},e,{allowEmpty:!0}):e;return O(this.selectorText,this.style,n)},g(t,[{key:"selector",set:function(e){if(e!==this.selectorText){this.selectorText=e;var t=this.renderer,n=this.renderable;n&&t&&(t.setSelector(n,e)||t.replaceRule(n,this))}},get:function(){return this.selectorText}}]),t}(N),j={onCreateRule:function(e,t,n){return"@"===e[0]||n.parent&&"keyframes"===n.parent.type?null:new T(e,t,n)}},D={indent:1,children:!0},R=/@([\w-]+)/,A=function(){function e(e,t,n){this.type="conditional",this.at=void 0,this.key=void 0,this.query=void 0,this.rules=void 0,this.options=void 0,this.isProcessed=!1,this.renderable=void 0,this.key=e;var r=e.match(R);for(var o in this.at=r?r[1]:"unknown",this.query=n.name||"@"+this.at,this.options=n,this.rules=new oe((0,a.Z)({},n,{parent:this})),t)this.rules.add(o,t[o]);this.rules.process()}var t=e.prototype;return t.getRule=function(e){return this.rules.get(e)},t.indexOf=function(e){return this.rules.indexOf(e)},t.addRule=function(e,t,n){var r=this.rules.add(e,t,n);return r?(this.options.jss.plugins.onProcessRule(r),r):null},t.toString=function(e){if(void 0===e&&(e=D),null==e.indent&&(e.indent=D.indent),null==e.children&&(e.children=D.children),!1===e.children)return this.query+" {}";var t=this.rules.toString(e);return t?this.query+" {\n"+t+"\n}":""},e}(),L=/@media|@supports\s+/,z={onCreateRule:function(e,t,n){return L.test(e)?new A(e,t,n):null}},I={indent:1,children:!0},B=/@keyframes\s+([\w-]+)/,U=function(){function e(e,t,n){this.type="keyframes",this.at="@keyframes",this.key=void 0,this.name=void 0,this.id=void 0,this.rules=void 0,this.options=void 0,this.isProcessed=!1,this.renderable=void 0;var r=e.match(B);r&&r[1]?this.name=r[1]:this.name="noname",this.key=this.type+"-"+this.name,this.options=n;var o=n.scoped,i=n.sheet,u=n.generateId;for(var l in this.id=!1===o?this.name:M(u(this,i)),this.rules=new oe((0,a.Z)({},n,{parent:this})),t)this.rules.add(l,t[l],(0,a.Z)({},n,{parent:this}));this.rules.process()}return e.prototype.toString=function(e){if(void 0===e&&(e=I),null==e.indent&&(e.indent=I.indent),null==e.children&&(e.children=I.children),!1===e.children)return this.at+" "+this.id+" {}";var t=this.rules.toString(e);return t&&(t="\n"+t+"\n"),this.at+" "+this.id+" {"+t+"}"},e}(),F=/@keyframes\s+/,H=/\$([\w-]+)/g,V=function(e,t){return"string"==typeof e?e.replace(H,(function(e,n){return n in t?t[n]:e})):e},X=function(e,t,n){var r=e[t],o=V(r,n);o!==r&&(e[t]=o)},W={onCreateRule:function(e,t,n){return"string"==typeof e&&F.test(e)?new U(e,t,n):null},onProcessStyle:function(e,t,n){return"style"===t.type&&n?("animation-name"in e&&X(e,"animation-name",n.keyframes),"animation"in e&&X(e,"animation",n.keyframes),e):e},onChangeValue:function(e,t,n){var r=n.options.sheet;if(!r)return e;switch(t){case"animation":case"animation-name":return V(e,r.keyframes);default:return e}}},Y=function(e){function t(){for(var t,n=arguments.length,r=new Array(n),o=0;o<n;o++)r[o]=arguments[o];return(t=e.call.apply(e,[this].concat(r))||this).renderable=void 0,t}return(0,m.Z)(t,e),t.prototype.toString=function(e){var t=this.options.sheet,n=t&&t.options.link?(0,a.Z)({},e,{allowEmpty:!0}):e;return O(this.key,this.style,n)},t}(N),$={onCreateRule:function(e,t,n){return n.parent&&"keyframes"===n.parent.type?new Y(e,t,n):null}},Z=function(){function e(e,t,n){this.type="font-face",this.at="@font-face",this.key=void 0,this.style=void 0,this.options=void 0,this.isProcessed=!1,this.renderable=void 0,this.key=e,this.style=t,this.options=n}return e.prototype.toString=function(e){if(Array.isArray(this.style)){for(var t="",n=0;n<this.style.length;n++)t+=O(this.at,this.style[n]),this.style[n+1]&&(t+="\n");return t}return O(this.at,this.style,e)},e}(),q=/@font-face/,G={onCreateRule:function(e,t,n){return q.test(e)?new Z(e,t,n):null}},K=function(){function e(e,t,n){this.type="viewport",this.at="@viewport",this.key=void 0,this.style=void 0,this.options=void 0,this.isProcessed=!1,this.renderable=void 0,this.key=e,this.style=t,this.options=n}return e.prototype.toString=function(e){return O(this.key,this.style,e)},e}(),Q={onCreateRule:function(e,t,n){return"@viewport"===e||"@-ms-viewport"===e?new K(e,t,n):null}},J=function(){function e(e,t,n){this.type="simple",this.key=void 0,this.value=void 0,this.options=void 0,this.isProcessed=!1,this.renderable=void 0,this.key=e,this.value=t,this.options=n}return e.prototype.toString=function(e){if(Array.isArray(this.value)){for(var t="",n=0;n<this.value.length;n++)t+=this.key+" "+this.value[n]+";",this.value[n+1]&&(t+="\n");return t}return this.key+" "+this.value+";"},e}(),ee={"@charset":!0,"@import":!0,"@namespace":!0},te=[j,z,W,$,G,Q,{onCreateRule:function(e,t,n){return e in ee?new J(e,t,n):null}}],ne={process:!0},re={force:!0,process:!0},oe=function(){function e(e){this.map={},this.raw={},this.index=[],this.counter=0,this.options=void 0,this.classes=void 0,this.keyframes=void 0,this.options=e,this.classes=e.classes,this.keyframes=e.keyframes}var t=e.prototype;return t.add=function(e,t,n){var r=this.options,o=r.parent,i=r.sheet,u=r.jss,l=r.Renderer,c=r.generateId,s=r.scoped,f=(0,a.Z)({classes:this.classes,parent:o,sheet:i,jss:u,Renderer:l,generateId:c,scoped:s,name:e,keyframes:this.keyframes,selector:void 0},n),d=e;e in this.raw&&(d=e+"-d"+this.counter++),this.raw[d]=t,d in this.classes&&(f.selector="."+M(this.classes[d]));var p=S(d,t,f);if(!p)return null;this.register(p);var h=void 0===f.index?this.index.length:f.index;return this.index.splice(h,0,p),p},t.get=function(e){return this.map[e]},t.remove=function(e){this.unregister(e),delete this.raw[e.key],this.index.splice(this.index.indexOf(e),1)},t.indexOf=function(e){return this.index.indexOf(e)},t.process=function(){var e=this.options.jss.plugins;this.index.slice(0).forEach(e.onProcessRule,e)},t.register=function(e){this.map[e.key]=e,e instanceof T?(this.map[e.selector]=e,e.id&&(this.classes[e.key]=e.id)):e instanceof U&&this.keyframes&&(this.keyframes[e.name]=e.id)},t.unregister=function(e){delete this.map[e.key],e instanceof T?(delete this.map[e.selector],delete this.classes[e.key]):e instanceof U&&delete this.keyframes[e.name]},t.update=function(){var e,t,n;if("string"==typeof(arguments.length<=0?void 0:arguments[0])?(e=arguments.length<=0?void 0:arguments[0],t=arguments.length<=1?void 0:arguments[1],n=arguments.length<=2?void 0:arguments[2]):(t=arguments.length<=0?void 0:arguments[0],n=arguments.length<=1?void 0:arguments[1],e=null),e)this.updateOne(this.map[e],t,n);else for(var r=0;r<this.index.length;r++)this.updateOne(this.index[r],t,n)},t.updateOne=function(t,n,r){void 0===r&&(r=ne);var o=this.options,i=o.jss.plugins,a=o.sheet;if(t.rules instanceof e)t.rules.update(n,r);else{var u=t,l=u.style;if(i.onUpdate(n,t,a,r),r.process&&l&&l!==u.style){for(var c in i.onProcessStyle(u.style,u,a),u.style){var s=u.style[c];s!==l[c]&&u.prop(c,s,re)}for(var f in l){var d=u.style[f],p=l[f];null==d&&d!==p&&u.prop(f,null,re)}}}},t.toString=function(e){for(var t="",n=this.options.sheet,r=!!n&&n.options.link,o=0;o<this.index.length;o++){var i=this.index[o].toString(e);(i||r)&&(t&&(t+="\n"),t+=i)}return t},e}(),ie=function(){function e(e,t){for(var n in this.options=void 0,this.deployed=void 0,this.attached=void 0,this.rules=void 0,this.renderer=void 0,this.classes=void 0,this.keyframes=void 0,this.queue=void 0,this.attached=!1,this.deployed=!1,this.classes={},this.keyframes={},this.options=(0,a.Z)({},t,{sheet:this,parent:this,classes:this.classes,keyframes:this.keyframes}),t.Renderer&&(this.renderer=new t.Renderer(this)),this.rules=new oe(this.options),e)this.rules.add(n,e[n]);this.rules.process()}var t=e.prototype;return t.attach=function(){return this.attached||(this.renderer&&this.renderer.attach(),this.attached=!0,this.deployed||this.deploy()),this},t.detach=function(){return this.attached?(this.renderer&&this.renderer.detach(),this.attached=!1,this):this},t.addRule=function(e,t,n){var r=this.queue;this.attached&&!r&&(this.queue=[]);var o=this.rules.add(e,t,n);return o?(this.options.jss.plugins.onProcessRule(o),this.attached?this.deployed?(r?r.push(o):(this.insertRule(o),this.queue&&(this.queue.forEach(this.insertRule,this),this.queue=void 0)),o):o:(this.deployed=!1,o)):null},t.insertRule=function(e){this.renderer&&this.renderer.insertRule(e)},t.addRules=function(e,t){var n=[];for(var r in e){var o=this.addRule(r,e[r],t);o&&n.push(o)}return n},t.getRule=function(e){return this.rules.get(e)},t.deleteRule=function(e){var t="object"==typeof e?e:this.rules.get(e);return!(!t||this.attached&&!t.renderable)&&(this.rules.remove(t),!(this.attached&&t.renderable&&this.renderer)||this.renderer.deleteRule(t.renderable))},t.indexOf=function(e){return this.rules.indexOf(e)},t.deploy=function(){return this.renderer&&this.renderer.deploy(),this.deployed=!0,this},t.update=function(){var e;return(e=this.rules).update.apply(e,arguments),this},t.updateOne=function(e,t,n){return this.rules.updateOne(e,t,n),this},t.toString=function(e){return this.rules.toString(e)},e}(),ae=function(){function e(){this.plugins={internal:[],external:[]},this.registry=void 0}var t=e.prototype;return t.onCreateRule=function(e,t,n){for(var r=0;r<this.registry.onCreateRule.length;r++){var o=this.registry.onCreateRule[r](e,t,n);if(o)return o}return null},t.onProcessRule=function(e){if(!e.isProcessed){for(var t=e.options.sheet,n=0;n<this.registry.onProcessRule.length;n++)this.registry.onProcessRule[n](e,t);e.style&&this.onProcessStyle(e.style,e,t),e.isProcessed=!0}},t.onProcessStyle=function(e,t,n){for(var r=0;r<this.registry.onProcessStyle.length;r++)t.style=this.registry.onProcessStyle[r](t.style,t,n)},t.onProcessSheet=function(e){for(var t=0;t<this.registry.onProcessSheet.length;t++)this.registry.onProcessSheet[t](e)},t.onUpdate=function(e,t,n,r){for(var o=0;o<this.registry.onUpdate.length;o++)this.registry.onUpdate[o](e,t,n,r)},t.onChangeValue=function(e,t,n){for(var r=e,o=0;o<this.registry.onChangeValue.length;o++)r=this.registry.onChangeValue[o](r,t,n);return r},t.use=function(e,t){void 0===t&&(t={queue:"external"});var n=this.plugins[t.queue];-1===n.indexOf(e)&&(n.push(e),this.registry=[].concat(this.plugins.external,this.plugins.internal).reduce((function(e,t){for(var n in t)n in e&&e[n].push(t[n]);return e}),{onCreateRule:[],onProcessRule:[],onProcessStyle:[],onProcessSheet:[],onChangeValue:[],onUpdate:[]}))},e}(),ue=new(function(){function e(){this.registry=[]}var t=e.prototype;return t.add=function(e){var t=this.registry,n=e.options.index;if(-1===t.indexOf(e))if(0===t.length||n>=this.index)t.push(e);else for(var r=0;r<t.length;r++)if(t[r].options.index>n)return void t.splice(r,0,e)},t.reset=function(){this.registry=[]},t.remove=function(e){var t=this.registry.indexOf(e);this.registry.splice(t,1)},t.toString=function(e){for(var t=void 0===e?{}:e,n=t.attached,r=(0,l.Z)(t,["attached"]),o="",i=0;i<this.registry.length;i++){var a=this.registry[i];null!=n&&a.attached!==n||(o&&(o+="\n"),o+=a.toString(r))}return o},g(e,[{key:"index",get:function(){return 0===this.registry.length?0:this.registry[this.registry.length-1].options.index}}]),e}()),le="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window&&window.Math===Math?window:"undefined"!=typeof self&&self.Math===Math?self:Function("return this")(),ce="2f1acc6c3a606b082e5eef5e54414ffb";null==le[ce]&&(le[ce]=0);var se=le[ce]++,fe=function(e){void 0===e&&(e={});var t=0;return function(n,r){t+=1;var o="",i="";return r&&(r.options.classNamePrefix&&(i=r.options.classNamePrefix),null!=r.options.jss.id&&(o=String(r.options.jss.id))),e.minify?""+(i||"c")+se+o+t:i+n.key+"-"+se+(o?"-"+o:"")+"-"+t}},de=function(e){var t;return function(){return t||(t=e()),t}},pe=function(e,t){try{return e.attributeStyleMap?e.attributeStyleMap.get(t):e.style.getPropertyValue(t)}catch(e){return""}},he=function(e,t,n){try{var r=n;if(Array.isArray(n)&&(r=E(n,!0),"!important"===n[n.length-1]))return e.style.setProperty(t,r,"important"),!0;e.attributeStyleMap?e.attributeStyleMap.set(t,r):e.style.setProperty(t,r)}catch(e){return!1}return!0},ve=function(e,t){try{e.attributeStyleMap?e.attributeStyleMap.delete(t):e.style.removeProperty(t)}catch(e){}},ye=function(e,t){return e.selectorText=t,e.selectorText===t},ge=de((function(){return document.querySelector("head")}));var me=de((function(){var e=document.querySelector('meta[property="csp-nonce"]');return e?e.getAttribute("content"):null})),be=function(e,t,n){try{"insertRule"in e?e.insertRule(t,n):"appendRule"in e&&e.appendRule(t)}catch(e){return!1}return e.cssRules[n]},we=function(e,t){var n=e.cssRules.length;return void 0===t||t>n?n:t},_e=function(){function e(e){this.getPropertyValue=pe,this.setProperty=he,this.removeProperty=ve,this.setSelector=ye,this.element=void 0,this.sheet=void 0,this.hasInsertedRules=!1,this.cssRules=[],e&&ue.add(e),this.sheet=e;var t=this.sheet?this.sheet.options:{},n=t.media,r=t.meta,o=t.element;this.element=o||function(){var e=document.createElement("style");return e.textContent="\n",e}(),this.element.setAttribute("data-jss",""),n&&this.element.setAttribute("media",n),r&&this.element.setAttribute("data-meta",r);var i=me();i&&this.element.setAttribute("nonce",i)}var t=e.prototype;return t.attach=function(){if(!this.element.parentNode&&this.sheet){!function(e,t){var n=t.insertionPoint,r=function(e){var t=ue.registry;if(t.length>0){var n=function(e,t){for(var n=0;n<e.length;n++){var r=e[n];if(r.attached&&r.options.index>t.index&&r.options.insertionPoint===t.insertionPoint)return r}return null}(t,e);if(n&&n.renderer)return{parent:n.renderer.element.parentNode,node:n.renderer.element};if((n=function(e,t){for(var n=e.length-1;n>=0;n--){var r=e[n];if(r.attached&&r.options.insertionPoint===t.insertionPoint)return r}return null}(t,e))&&n.renderer)return{parent:n.renderer.element.parentNode,node:n.renderer.element.nextSibling}}var r=e.insertionPoint;if(r&&"string"==typeof r){var o=function(e){for(var t=ge(),n=0;n<t.childNodes.length;n++){var r=t.childNodes[n];if(8===r.nodeType&&r.nodeValue.trim()===e)return r}return null}(r);if(o)return{parent:o.parentNode,node:o.nextSibling}}return!1}(t);if(!1!==r&&r.parent)r.parent.insertBefore(e,r.node);else if(n&&"number"==typeof n.nodeType){var o=n,i=o.parentNode;i&&i.insertBefore(e,o.nextSibling)}else ge().appendChild(e)}(this.element,this.sheet.options);var e=Boolean(this.sheet&&this.sheet.deployed);this.hasInsertedRules&&e&&(this.hasInsertedRules=!1,this.deploy())}},t.detach=function(){if(this.sheet){var e=this.element.parentNode;e&&e.removeChild(this.element),this.sheet.options.link&&(this.cssRules=[],this.element.textContent="\n")}},t.deploy=function(){var e=this.sheet;e&&(e.options.link?this.insertRules(e.rules):this.element.textContent="\n"+e.toString()+"\n")},t.insertRules=function(e,t){for(var n=0;n<e.index.length;n++)this.insertRule(e.index[n],n,t)},t.insertRule=function(e,t,n){if(void 0===n&&(n=this.element.sheet),e.rules){var r=e,o=n;if("conditional"===e.type||"keyframes"===e.type){var i=we(n,t);if(!1===(o=be(n,r.toString({children:!1}),i)))return!1;this.refCssRule(e,i,o)}return this.insertRules(r.rules,o),o}var a=e.toString();if(!a)return!1;var u=we(n,t),l=be(n,a,u);return!1!==l&&(this.hasInsertedRules=!0,this.refCssRule(e,u,l),l)},t.refCssRule=function(e,t,n){e.renderable=n,e.options.parent instanceof ie&&(this.cssRules[t]=n)},t.deleteRule=function(e){var t=this.element.sheet,n=this.indexOf(e);return-1!==n&&(t.deleteRule(n),this.cssRules.splice(n,1),!0)},t.indexOf=function(e){return this.cssRules.indexOf(e)},t.replaceRule=function(e,t){var n=this.indexOf(e);return-1!==n&&(this.element.sheet.deleteRule(n),this.cssRules.splice(n,1),this.insertRule(t,n))},t.getRules=function(){return this.element.sheet.cssRules},e}(),Se=0,xe=function(){function e(e){this.id=Se++,this.version="10.6.0",this.plugins=new ae,this.options={id:{minify:!1},createGenerateId:fe,Renderer:v?_e:null,plugins:[]},this.generateId=fe({minify:!1});for(var t=0;t<te.length;t++)this.plugins.use(te[t],{queue:"internal"});this.setup(e)}var t=e.prototype;return t.setup=function(e){return void 0===e&&(e={}),e.createGenerateId&&(this.options.createGenerateId=e.createGenerateId),e.id&&(this.options.id=(0,a.Z)({},this.options.id,e.id)),(e.createGenerateId||e.id)&&(this.generateId=this.options.createGenerateId(this.options.id)),null!=e.insertionPoint&&(this.options.insertionPoint=e.insertionPoint),"Renderer"in e&&(this.options.Renderer=e.Renderer),e.plugins&&this.use.apply(this,e.plugins),this},t.createStyleSheet=function(e,t){void 0===t&&(t={});var n=t.index;"number"!=typeof n&&(n=0===ue.index?0:ue.index+1);var r=new ie(e,(0,a.Z)({},t,{jss:this,generateId:t.generateId||this.generateId,insertionPoint:this.options.insertionPoint,Renderer:this.options.Renderer,index:n}));return this.plugins.onProcessSheet(r),r},t.removeStyleSheet=function(e){return e.detach(),ue.remove(e),this},t.createRule=function(e,t,n){if(void 0===t&&(t={}),void 0===n&&(n={}),"object"==typeof e)return this.createRule(void 0,e,t);var r=(0,a.Z)({},n,{name:e,jss:this,Renderer:this.options.Renderer});r.generateId||(r.generateId=this.generateId),r.classes||(r.classes={}),r.keyframes||(r.keyframes={});var o=S(e,t,r);return o&&this.plugins.onProcessRule(o),o},t.use=function(){for(var e=this,t=arguments.length,n=new Array(t),r=0;r<t;r++)n[r]=arguments[r];return n.forEach((function(t){e.plugins.use(t)})),this},e}();function Ee(e){var t=null;for(var n in e){var r=e[n],o=typeof r;if("function"===o)t||(t={}),t[n]=r;else if("object"===o&&null!==r&&!Array.isArray(r)){var i=Ee(r);i&&(t||(t={}),t[n]=i)}}return t}var ke="object"==typeof CSS&&null!=CSS&&"number"in CSS,Oe=function(e){return new xe(e)};function Pe(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.baseClasses,n=e.newClasses;if(e.Component,!n)return t;var r=(0,a.Z)({},t);return Object.keys(n).forEach((function(e){n[e]&&(r[e]="".concat(t[e]," ").concat(n[e]))})),r}Oe();const Ce=function(e,t,n,r){var o=e.get(t);o||(o=new Map,e.set(t,o)),o.set(n,r)},Me=function(e,t,n){var r=e.get(t);return r?r.get(n):void 0},Ne=function(e,t,n){e.get(t).delete(n)},Te=u.createContext(null);function je(){return u.useContext(Te)}const De="function"==typeof Symbol&&Symbol.for?Symbol.for("mui.nested"):"__THEME_NESTED__";var Re=["checked","disabled","error","focused","focusVisible","required","expanded","selected"],Ae=Date.now(),Le="fnValues"+Ae,ze="fnStyle"+ ++Ae;var Ie="@global",Be="@global ",Ue=function(){function e(e,t,n){for(var r in this.type="global",this.at=Ie,this.rules=void 0,this.options=void 0,this.key=void 0,this.isProcessed=!1,this.key=e,this.options=n,this.rules=new oe((0,a.Z)({},n,{parent:this})),t)this.rules.add(r,t[r]);this.rules.process()}var t=e.prototype;return t.getRule=function(e){return this.rules.get(e)},t.addRule=function(e,t,n){var r=this.rules.add(e,t,n);return r&&this.options.jss.plugins.onProcessRule(r),r},t.indexOf=function(e){return this.rules.indexOf(e)},t.toString=function(){return this.rules.toString()},e}(),Fe=function(){function e(e,t,n){this.type="global",this.at=Ie,this.options=void 0,this.rule=void 0,this.isProcessed=!1,this.key=void 0,this.key=e,this.options=n;var r=e.substr(Be.length);this.rule=n.jss.createRule(r,t,(0,a.Z)({},n,{parent:this}))}return e.prototype.toString=function(e){return this.rule?this.rule.toString(e):""},e}(),He=/\s*,\s*/g;function Ve(e,t){for(var n=e.split(He),r="",o=0;o<n.length;o++)r+=t+" "+n[o].trim(),n[o+1]&&(r+=", ");return r}var Xe=/\s*,\s*/g,We=/&/g,Ye=/\$([\w-]+)/g;var $e=/[A-Z]/g,Ze=/^ms-/,qe={};function Ge(e){return"-"+e.toLowerCase()}const Ke=function(e){if(qe.hasOwnProperty(e))return qe[e];var t=e.replace($e,Ge);return qe[e]=Ze.test(t)?"-"+t:t};function Qe(e){var t={};for(var n in e)t[0===n.indexOf("--")?n:Ke(n)]=e[n];return e.fallbacks&&(Array.isArray(e.fallbacks)?t.fallbacks=e.fallbacks.map(Qe):t.fallbacks=Qe(e.fallbacks)),t}var Je=ke&&CSS?CSS.px:"px",et=ke&&CSS?CSS.ms:"ms",tt=ke&&CSS?CSS.percent:"%";function nt(e){var t=/(-[a-z])/g,n=function(e){return e[1].toUpperCase()},r={};for(var o in e)r[o]=e[o],r[o.replace(t,n)]=e[o];return r}var rt=nt({"animation-delay":et,"animation-duration":et,"background-position":Je,"background-position-x":Je,"background-position-y":Je,"background-size":Je,border:Je,"border-bottom":Je,"border-bottom-left-radius":Je,"border-bottom-right-radius":Je,"border-bottom-width":Je,"border-left":Je,"border-left-width":Je,"border-radius":Je,"border-right":Je,"border-right-width":Je,"border-top":Je,"border-top-left-radius":Je,"border-top-right-radius":Je,"border-top-width":Je,"border-width":Je,"border-block":Je,"border-block-end":Je,"border-block-end-width":Je,"border-block-start":Je,"border-block-start-width":Je,"border-block-width":Je,"border-inline":Je,"border-inline-end":Je,"border-inline-end-width":Je,"border-inline-start":Je,"border-inline-start-width":Je,"border-inline-width":Je,"border-start-start-radius":Je,"border-start-end-radius":Je,"border-end-start-radius":Je,"border-end-end-radius":Je,margin:Je,"margin-bottom":Je,"margin-left":Je,"margin-right":Je,"margin-top":Je,"margin-block":Je,"margin-block-end":Je,"margin-block-start":Je,"margin-inline":Je,"margin-inline-end":Je,"margin-inline-start":Je,padding:Je,"padding-bottom":Je,"padding-left":Je,"padding-right":Je,"padding-top":Je,"padding-block":Je,"padding-block-end":Je,"padding-block-start":Je,"padding-inline":Je,"padding-inline-end":Je,"padding-inline-start":Je,"mask-position-x":Je,"mask-position-y":Je,"mask-size":Je,height:Je,width:Je,"min-height":Je,"max-height":Je,"min-width":Je,"max-width":Je,bottom:Je,left:Je,top:Je,right:Je,inset:Je,"inset-block":Je,"inset-block-end":Je,"inset-block-start":Je,"inset-inline":Je,"inset-inline-end":Je,"inset-inline-start":Je,"box-shadow":Je,"text-shadow":Je,"column-gap":Je,"column-rule":Je,"column-rule-width":Je,"column-width":Je,"font-size":Je,"font-size-delta":Je,"letter-spacing":Je,"text-decoration-thickness":Je,"text-indent":Je,"text-stroke":Je,"text-stroke-width":Je,"word-spacing":Je,motion:Je,"motion-offset":Je,outline:Je,"outline-offset":Je,"outline-width":Je,perspective:Je,"perspective-origin-x":tt,"perspective-origin-y":tt,"transform-origin":tt,"transform-origin-x":tt,"transform-origin-y":tt,"transform-origin-z":tt,"transition-delay":et,"transition-duration":et,"vertical-align":Je,"flex-basis":Je,"shape-margin":Je,size:Je,gap:Je,grid:Je,"grid-gap":Je,"row-gap":Je,"grid-row-gap":Je,"grid-column-gap":Je,"grid-template-rows":Je,"grid-template-columns":Je,"grid-auto-rows":Je,"grid-auto-columns":Je,"box-shadow-x":Je,"box-shadow-y":Je,"box-shadow-blur":Je,"box-shadow-spread":Je,"font-line-height":Je,"text-shadow-x":Je,"text-shadow-y":Je,"text-shadow-blur":Je});function ot(e,t,n){if(null==t)return t;if(Array.isArray(t))for(var r=0;r<t.length;r++)t[r]=ot(e,t[r],n);else if("object"==typeof t)if("fallbacks"===e)for(var o in t)t[o]=ot(o,t[o],n);else for(var i in t)t[i]=ot(e+"-"+i,t[i],n);else if("number"==typeof t&&!1===isNaN(t)){var a=n[e]||rt[e];return!a||0===t&&a===Je?t.toString():"function"==typeof a?a(t).toString():""+t+a}return t}function it(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function at(e,t){if(e){if("string"==typeof e)return it(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?it(e,t):void 0}}var ut="",lt="",ct="",st="",ft=v&&"ontouchstart"in document.documentElement;if(v){var dt={Moz:"-moz-",ms:"-ms-",O:"-o-",Webkit:"-webkit-"},pt=document.createElement("p").style;for(var ht in dt)if(ht+"Transform"in pt){ut=ht,lt=dt[ht];break}"Webkit"===ut&&"msHyphens"in pt&&(ut="ms",lt=dt.ms,st="edge"),"Webkit"===ut&&"-apple-trailing-word"in pt&&(ct="apple")}var vt=ut,yt=lt,gt=ct,mt=st,bt=ft,wt={noPrefill:["appearance"],supportedProperty:function(e){return"appearance"===e&&("ms"===vt?"-webkit-"+e:yt+e)}},_t={noPrefill:["color-adjust"],supportedProperty:function(e){return"color-adjust"===e&&("Webkit"===vt?yt+"print-"+e:e)}},St=/[-\s]+(.)?/g;function xt(e,t){return t?t.toUpperCase():""}function Et(e){return e.replace(St,xt)}function kt(e){return Et("-"+e)}var Ot,Pt={noPrefill:["mask"],supportedProperty:function(e,t){if(!/^mask/.test(e))return!1;if("Webkit"===vt){var n="mask-image";if(Et(n)in t)return e;if(vt+kt(n)in t)return yt+e}return e}},Ct={noPrefill:["text-orientation"],supportedProperty:function(e){return"text-orientation"===e&&("apple"!==gt||bt?e:yt+e)}},Mt={noPrefill:["transform"],supportedProperty:function(e,t,n){return"transform"===e&&(n.transform?e:yt+e)}},Nt={noPrefill:["transition"],supportedProperty:function(e,t,n){return"transition"===e&&(n.transition?e:yt+e)}},Tt={noPrefill:["writing-mode"],supportedProperty:function(e){return"writing-mode"===e&&("Webkit"===vt||"ms"===vt&&"edge"!==mt?yt+e:e)}},jt={noPrefill:["user-select"],supportedProperty:function(e){return"user-select"===e&&("Moz"===vt||"ms"===vt||"apple"===gt?yt+e:e)}},Dt={supportedProperty:function(e,t){return!!/^break-/.test(e)&&("Webkit"===vt?"WebkitColumn"+kt(e)in t&&yt+"column-"+e:"Moz"===vt&&"page"+kt(e)in t&&"page-"+e)}},Rt={supportedProperty:function(e,t){if(!/^(border|margin|padding)-inline/.test(e))return!1;if("Moz"===vt)return e;var n=e.replace("-inline","");return vt+kt(n)in t&&yt+n}},At={supportedProperty:function(e,t){return Et(e)in t&&e}},Lt={supportedProperty:function(e,t){var n=kt(e);return"-"===e[0]||"-"===e[0]&&"-"===e[1]?e:vt+n in t?yt+e:"Webkit"!==vt&&"Webkit"+n in t&&"-webkit-"+e}},zt={supportedProperty:function(e){return"scroll-snap"===e.substring(0,11)&&("ms"===vt?""+yt+e:e)}},It={supportedProperty:function(e){return"overscroll-behavior"===e&&("ms"===vt?yt+"scroll-chaining":e)}},Bt={"flex-grow":"flex-positive","flex-shrink":"flex-negative","flex-basis":"flex-preferred-size","justify-content":"flex-pack",order:"flex-order","align-items":"flex-align","align-content":"flex-line-pack"},Ut={supportedProperty:function(e,t){var n=Bt[e];return!!n&&vt+kt(n)in t&&yt+n}},Ft={flex:"box-flex","flex-grow":"box-flex","flex-direction":["box-orient","box-direction"],order:"box-ordinal-group","align-items":"box-align","flex-flow":["box-orient","box-direction"],"justify-content":"box-pack"},Ht=Object.keys(Ft),Vt=function(e){return yt+e},Xt=[wt,_t,Pt,Ct,Mt,Nt,Tt,jt,Dt,Rt,At,Lt,zt,It,Ut,{supportedProperty:function(e,t,n){var r=n.multiple;if(Ht.indexOf(e)>-1){var o=Ft[e];if(!Array.isArray(o))return vt+kt(o)in t&&yt+o;if(!r)return!1;for(var i=0;i<o.length;i++)if(!(vt+kt(o[0])in t))return!1;return o.map(Vt)}return!1}}],Wt=Xt.filter((function(e){return e.supportedProperty})).map((function(e){return e.supportedProperty})),Yt=Xt.filter((function(e){return e.noPrefill})).reduce((function(e,t){return e.push.apply(e,function(e){if(Array.isArray(e))return it(e)}(n=t.noPrefill)||function(e){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(e))return Array.from(e)}(n)||at(n)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),e;var n}),[]),$t={};if(v){Ot=document.createElement("p");var Zt=window.getComputedStyle(document.documentElement,"");for(var qt in Zt)isNaN(qt)||($t[Zt[qt]]=Zt[qt]);Yt.forEach((function(e){return delete $t[e]}))}function Gt(e,t){if(void 0===t&&(t={}),!Ot)return e;if(null!=$t[e])return $t[e];"transition"!==e&&"transform"!==e||(t[e]=e in Ot.style);for(var n=0;n<Wt.length&&($t[e]=Wt[n](e,Ot.style,t),!$t[e]);n++);try{Ot.style[e]=""}catch(e){return!1}return $t[e]}var Kt,Qt={},Jt={transition:1,"transition-property":1,"-webkit-transition":1,"-webkit-transition-property":1},en=/(^\s*[\w-]+)|, (\s*[\w-]+)(?![^()]*\))/g;function tn(e,t,n){return"var"===t?"var":"all"===t?"all":"all"===n?", all":(t?Gt(t):", "+Gt(n))||t||n}function nn(e,t){var n=t;if(!Kt||"content"===e)return t;if("string"!=typeof n||!isNaN(parseInt(n,10)))return n;var r=e+n;if(null!=Qt[r])return Qt[r];try{Kt.style[e]=n}catch(e){return Qt[r]=!1,!1}if(Jt[e])n=n.replace(en,tn);else if(""===Kt.style[e]&&("-ms-flex"===(n=yt+n)&&(Kt.style[e]="-ms-flexbox"),Kt.style[e]=n,""===Kt.style[e]))return Qt[r]=!1,!1;return Kt.style[e]="",Qt[r]=n,Qt[r]}v&&(Kt=document.createElement("p"));var rn,on=Oe({plugins:[{onCreateRule:function(e,t,n){if("function"!=typeof t)return null;var r=S(e,{},n);return r[ze]=t,r},onProcessStyle:function(e,t){if(Le in t||ze in t)return e;var n={};for(var r in e){var o=e[r];"function"==typeof o&&(delete e[r],n[r]=o)}return t[Le]=n,e},onUpdate:function(e,t,n,r){var o=t,i=o[ze];i&&(o.style=i(e)||{});var a=o[Le];if(a)for(var u in a)o.prop(u,a[u](e),r)}},{onCreateRule:function(e,t,n){if(!e)return null;if(e===Ie)return new Ue(e,t,n);if("@"===e[0]&&e.substr(0,Be.length)===Be)return new Fe(e,t,n);var r=n.parent;return r&&("global"===r.type||r.options.parent&&"global"===r.options.parent.type)&&(n.scoped=!1),!1===n.scoped&&(n.selector=e),null},onProcessRule:function(e,t){"style"===e.type&&t&&(function(e,t){var n=e.options,r=e.style,o=r?r[Ie]:null;if(o){for(var i in o)t.addRule(i,o[i],(0,a.Z)({},n,{selector:Ve(i,e.selector)}));delete r[Ie]}}(e,t),function(e,t){var n=e.options,r=e.style;for(var o in r)if("@"===o[0]&&o.substr(0,Ie.length)===Ie){var i=Ve(o.substr(Ie.length),e.selector);t.addRule(i,r[o],(0,a.Z)({},n,{selector:i})),delete r[o]}}(e,t))}},function(){function e(e,t){return function(n,r){var o=e.getRule(r)||t&&t.getRule(r);return o?(o=o).selector:r}}function t(e,t){for(var n=t.split(Xe),r=e.split(Xe),o="",i=0;i<n.length;i++)for(var a=n[i],u=0;u<r.length;u++){var l=r[u];o&&(o+=", "),o+=-1!==l.indexOf("&")?l.replace(We,a):a+" "+l}return o}function n(e,t,n){if(n)return(0,a.Z)({},n,{index:n.index+1});var r=e.options.nestingLevel;r=void 0===r?1:r+1;var o=(0,a.Z)({},e.options,{nestingLevel:r,index:t.indexOf(e)+1});return delete o.name,o}return{onProcessStyle:function(r,o,i){if("style"!==o.type)return r;var u,l,c=o,s=c.options.parent;for(var f in r){var d=-1!==f.indexOf("&"),p="@"===f[0];if(d||p){if(u=n(c,s,u),d){var h=t(f,c.selector);l||(l=e(s,i)),h=h.replace(Ye,l),s.addRule(h,r[f],(0,a.Z)({},u,{selector:h}))}else p&&s.addRule(f,{},u).addRule(c.key,r[f],{selector:c.selector});delete r[f]}}return r}}}(),{onProcessStyle:function(e){if(Array.isArray(e)){for(var t=0;t<e.length;t++)e[t]=Qe(e[t]);return e}return Qe(e)},onChangeValue:function(e,t,n){if(0===t.indexOf("--"))return e;var r=Ke(t);return t===r?e:(n.prop(r,e),null)}},function(e){void 0===e&&(e={});var t=nt(e);return{onProcessStyle:function(e,n){if("style"!==n.type)return e;for(var r in e)e[r]=ot(r,e[r],t);return e},onChangeValue:function(e,n){return ot(n,e,t)}}}(),"undefined"==typeof window?null:function(){function e(t){for(var n in t){var r=t[n];if("fallbacks"===n&&Array.isArray(r))t[n]=r.map(e);else{var o=!1,i=Gt(n);i&&i!==n&&(o=!0);var a=!1,u=nn(i,E(r));u&&u!==r&&(a=!0),(o||a)&&(o&&delete t[n],t[i||n]=u||r)}}return t}return{onProcessRule:function(e){if("keyframes"===e.type){var t=e;t.at=function(e){return"-"===e[1]||"ms"===vt?e:"@"+yt+"keyframes"+e.substr(10)}(t.at)}},onProcessStyle:function(t,n){return"style"!==n.type?t:e(t)},onChangeValue:function(e,t){return nn(t,E(e))||e}}}(),(rn=function(e,t){return e.length===t.length?e>t?1:-1:e.length-t.length},{onProcessStyle:function(e,t){if("style"!==t.type)return e;for(var n={},r=Object.keys(e).sort(rn),o=0;o<r.length;o++)n[r[o]]=e[r[o]];return n}})]}),an={disableGeneration:!1,generateClassName:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.disableGlobal,n=void 0!==t&&t,r=e.productionPrefix,o=void 0===r?"jss":r,i=e.seed,a=void 0===i?"":i,u=""===a?"":"".concat(a,"-"),l=0,c=function(){return l+=1};return function(e,t){var r=t.options.name;if(r&&0===r.indexOf("Mui")&&!t.options.link&&!n){if(-1!==Re.indexOf(e.key))return"Mui-".concat(e.key);var i="".concat(u).concat(r,"-").concat(e.key);return t.options.theme[De]&&""===a?"".concat(i,"-").concat(c()):i}return"".concat(u).concat(o).concat(c())}}(),jss:on,sheetsCache:null,sheetsManager:new Map,sheetsRegistry:null},un=u.createContext(an),ln=-1e9;function cn(){return ln+=1}function sn(e){return(sn="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function fn(e){return e&&"object"===sn(e)&&e.constructor===Object}function dn(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{clone:!0},r=n.clone?(0,a.Z)({},e):e;return fn(e)&&fn(t)&&Object.keys(t).forEach((function(o){"__proto__"!==o&&(fn(t[o])&&o in e?r[o]=dn(e[o],t[o],n):r[o]=t[o])})),r}function pn(e){var t="function"==typeof e;return{create:function(n,r){var o;try{o=t?e(n):e}catch(e){throw e}if(!r||!n.overrides||!n.overrides[r])return o;var i=n.overrides[r],u=(0,a.Z)({},o);return Object.keys(i).forEach((function(e){u[e]=dn(u[e],i[e])})),u},options:{}}}const hn={};function vn(e,t,n){var r=e.state;if(e.stylesOptions.disableGeneration)return t||{};r.cacheClasses||(r.cacheClasses={value:null,lastProp:null,lastJSS:{}});var o=!1;return r.classes!==r.cacheClasses.lastJSS&&(r.cacheClasses.lastJSS=r.classes,o=!0),t!==r.cacheClasses.lastProp&&(r.cacheClasses.lastProp=t,o=!0),o&&(r.cacheClasses.value=Pe({baseClasses:r.cacheClasses.lastJSS,newClasses:t,Component:n})),r.cacheClasses.value}function yn(e,t){var n=e.state,r=e.theme,o=e.stylesOptions,i=e.stylesCreator,u=e.name;if(!o.disableGeneration){var l=Me(o.sheetsManager,i,r);l||(l={refs:0,staticSheet:null,dynamicStyles:null},Ce(o.sheetsManager,i,r,l));var c=(0,a.Z)({},i.options,o,{theme:r,flip:"boolean"==typeof o.flip?o.flip:"rtl"===r.direction});c.generateId=c.serverGenerateClassName||c.generateClassName;var s=o.sheetsRegistry;if(0===l.refs){var f;o.sheetsCache&&(f=Me(o.sheetsCache,i,r));var d=i.create(r,u);f||((f=o.jss.createStyleSheet(d,(0,a.Z)({link:!1},c))).attach(),o.sheetsCache&&Ce(o.sheetsCache,i,r,f)),s&&s.add(f),l.staticSheet=f,l.dynamicStyles=Ee(d)}if(l.dynamicStyles){var p=o.jss.createStyleSheet(l.dynamicStyles,(0,a.Z)({link:!0},c));p.update(t),p.attach(),n.dynamicSheet=p,n.classes=Pe({baseClasses:l.staticSheet.classes,newClasses:p.classes}),s&&s.add(p)}else n.classes=l.staticSheet.classes;l.refs+=1}}function gn(e,t){var n=e.state;n.dynamicSheet&&n.dynamicSheet.update(t)}function mn(e){var t=e.state,n=e.theme,r=e.stylesOptions,o=e.stylesCreator;if(!r.disableGeneration){var i=Me(r.sheetsManager,o,n);i.refs-=1;var a=r.sheetsRegistry;0===i.refs&&(Ne(r.sheetsManager,o,n),r.jss.removeStyleSheet(i.staticSheet),a&&a.remove(i.staticSheet)),t.dynamicSheet&&(r.jss.removeStyleSheet(t.dynamicSheet),a&&a.remove(t.dynamicSheet))}}function bn(e,t){var n,r=u.useRef([]),o=u.useMemo((function(){return{}}),t);r.current!==o&&(r.current=o,n=e()),u.useEffect((function(){return function(){n&&n()}}),[o])}function wn(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=t.name,r=t.classNamePrefix,o=t.Component,i=t.defaultTheme,l=void 0===i?hn:i,s=c(t,["name","classNamePrefix","Component","defaultTheme"]),f=pn(e),d=n||r||"makeStyles";f.options={index:cn(),name:n,meta:d,classNamePrefix:d};var p=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=je()||l,r=(0,a.Z)({},u.useContext(un),s),i=u.useRef(),c=u.useRef();bn((function(){var o={name:n,state:{},stylesCreator:f,stylesOptions:r,theme:t};return yn(o,e),c.current=!1,i.current=o,function(){mn(o)}}),[t,f]),u.useEffect((function(){c.current&&gn(i.current,e),c.current=!0}));var d=vn(i.current,e.classes,o);return d};return p}function _n(e){var t=e.theme,n=e.name,r=e.props;if(!t||!t.props||!t.props[n])return r;var o,i=t.props[n];for(o in i)void 0===r[o]&&(r[o]=i[o]);return r}var Sn=["xs","sm","md","lg","xl"];function xn(e){var t=e.values,n=void 0===t?{xs:0,sm:600,md:960,lg:1280,xl:1920}:t,r=e.unit,o=void 0===r?"px":r,i=e.step,u=void 0===i?5:i,l=c(e,["values","unit","step"]);function s(e){var t="number"==typeof n[e]?n[e]:e;return"@media (min-width:".concat(t).concat(o,")")}function f(e,t){var r=Sn.indexOf(t);return r===Sn.length-1?s(e):"@media (min-width:".concat("number"==typeof n[e]?n[e]:e).concat(o,") and ")+"(max-width:".concat((-1!==r&&"number"==typeof n[Sn[r+1]]?n[Sn[r+1]]:t)-u/100).concat(o,")")}return(0,a.Z)({keys:Sn,values:n,up:s,down:function(e){var t=Sn.indexOf(e)+1,r=n[Sn[t]];return t===Sn.length?s("xs"):"@media (max-width:".concat(("number"==typeof r&&t>0?r:e)-u/100).concat(o,")")},between:f,only:function(e){return f(e,e)},width:function(e){return n[e]}},l)}function En(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function kn(e,t,n){var r;return(0,a.Z)({gutters:function(){var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return(0,a.Z)({paddingLeft:t(2),paddingRight:t(2)},n,En({},e.up("sm"),(0,a.Z)({paddingLeft:t(3),paddingRight:t(3)},n[e.up("sm")])))},toolbar:(r={minHeight:56},En(r,"".concat(e.up("xs")," and (orientation: landscape)"),{minHeight:48}),En(r,e.up("sm"),{minHeight:64}),r)},n)}const On={black:"#000",white:"#fff"},Pn={50:"#fafafa",100:"#f5f5f5",200:"#eeeeee",300:"#e0e0e0",400:"#bdbdbd",500:"#9e9e9e",600:"#757575",700:"#616161",800:"#424242",900:"#212121",A100:"#d5d5d5",A200:"#aaaaaa",A400:"#303030",A700:"#616161"},Cn="#7986cb",Mn="#3f51b5",Nn="#303f9f",Tn="#ff4081",jn="#f50057",Dn="#c51162",Rn="#e57373",An="#f44336",Ln="#d32f2f",zn="#ffb74d",In="#ff9800",Bn="#f57c00",Un="#64b5f6",Fn="#2196f3",Hn="#1976d2",Vn="#81c784",Xn="#4caf50",Wn="#388e3c";function Yn(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:1;return Math.min(Math.max(t,e),n)}function $n(e){if(e.type)return e;if("#"===e.charAt(0))return $n(function(e){e=e.substr(1);var t=new RegExp(".{1,".concat(e.length>=6?2:1,"}"),"g"),n=e.match(t);return n&&1===n[0].length&&(n=n.map((function(e){return e+e}))),n?"rgb".concat(4===n.length?"a":"","(").concat(n.map((function(e,t){return t<3?parseInt(e,16):Math.round(parseInt(e,16)/255*1e3)/1e3})).join(", "),")"):""}(e));var t=e.indexOf("("),n=e.substring(0,t);if(-1===["rgb","rgba","hsl","hsla"].indexOf(n))throw new Error(r(3,e));var o=e.substring(t+1,e.length-1).split(",");return{type:n,values:o=o.map((function(e){return parseFloat(e)}))}}function Zn(e){var t=e.type,n=e.values;return-1!==t.indexOf("rgb")?n=n.map((function(e,t){return t<3?parseInt(e,10):e})):-1!==t.indexOf("hsl")&&(n[1]="".concat(n[1],"%"),n[2]="".concat(n[2],"%")),"".concat(t,"(").concat(n.join(", "),")")}function qn(e){var t="hsl"===(e=$n(e)).type?$n(function(e){var t=(e=$n(e)).values,n=t[0],r=t[1]/100,o=t[2]/100,i=r*Math.min(o,1-o),a=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:(e+n/30)%12;return o-i*Math.max(Math.min(t-3,9-t,1),-1)},u="rgb",l=[Math.round(255*a(0)),Math.round(255*a(8)),Math.round(255*a(4))];return"hsla"===e.type&&(u+="a",l.push(t[3])),Zn({type:u,values:l})}(e)).values:e.values;return t=t.map((function(e){return(e/=255)<=.03928?e/12.92:Math.pow((e+.055)/1.055,2.4)})),Number((.2126*t[0]+.7152*t[1]+.0722*t[2]).toFixed(3))}var Gn={text:{primary:"rgba(0, 0, 0, 0.87)",secondary:"rgba(0, 0, 0, 0.54)",disabled:"rgba(0, 0, 0, 0.38)",hint:"rgba(0, 0, 0, 0.38)"},divider:"rgba(0, 0, 0, 0.12)",background:{paper:On.white,default:Pn[50]},action:{active:"rgba(0, 0, 0, 0.54)",hover:"rgba(0, 0, 0, 0.04)",hoverOpacity:.04,selected:"rgba(0, 0, 0, 0.08)",selectedOpacity:.08,disabled:"rgba(0, 0, 0, 0.26)",disabledBackground:"rgba(0, 0, 0, 0.12)",disabledOpacity:.38,focus:"rgba(0, 0, 0, 0.12)",focusOpacity:.12,activatedOpacity:.12}},Kn={text:{primary:On.white,secondary:"rgba(255, 255, 255, 0.7)",disabled:"rgba(255, 255, 255, 0.5)",hint:"rgba(255, 255, 255, 0.5)",icon:"rgba(255, 255, 255, 0.5)"},divider:"rgba(255, 255, 255, 0.12)",background:{paper:Pn[800],default:"#303030"},action:{active:On.white,hover:"rgba(255, 255, 255, 0.08)",hoverOpacity:.08,selected:"rgba(255, 255, 255, 0.16)",selectedOpacity:.16,disabled:"rgba(255, 255, 255, 0.3)",disabledBackground:"rgba(255, 255, 255, 0.12)",disabledOpacity:.38,focus:"rgba(255, 255, 255, 0.12)",focusOpacity:.12,activatedOpacity:.24}};function Qn(e,t,n,r){var o=r.light||r,i=r.dark||1.5*r;e[t]||(e.hasOwnProperty(n)?e[t]=e[n]:"light"===t?e.light=function(e,t){if(e=$n(e),t=Yn(t),-1!==e.type.indexOf("hsl"))e.values[2]+=(100-e.values[2])*t;else if(-1!==e.type.indexOf("rgb"))for(var n=0;n<3;n+=1)e.values[n]+=(255-e.values[n])*t;return Zn(e)}(e.main,o):"dark"===t&&(e.dark=function(e,t){if(e=$n(e),t=Yn(t),-1!==e.type.indexOf("hsl"))e.values[2]*=1-t;else if(-1!==e.type.indexOf("rgb"))for(var n=0;n<3;n+=1)e.values[n]*=1-t;return Zn(e)}(e.main,i)))}function Jn(e){var t=e.primary,n=void 0===t?{light:Cn,main:Mn,dark:Nn}:t,o=e.secondary,i=void 0===o?{light:Tn,main:jn,dark:Dn}:o,u=e.error,l=void 0===u?{light:Rn,main:An,dark:Ln}:u,s=e.warning,f=void 0===s?{light:zn,main:In,dark:Bn}:s,d=e.info,p=void 0===d?{light:Un,main:Fn,dark:Hn}:d,h=e.success,v=void 0===h?{light:Vn,main:Xn,dark:Wn}:h,y=e.type,g=void 0===y?"light":y,m=e.contrastThreshold,b=void 0===m?3:m,w=e.tonalOffset,_=void 0===w?.2:w,S=c(e,["primary","secondary","error","warning","info","success","type","contrastThreshold","tonalOffset"]);function x(e){return function(e,t){var n=qn(e),r=qn(t);return(Math.max(n,r)+.05)/(Math.min(n,r)+.05)}(e,Kn.text.primary)>=b?Kn.text.primary:Gn.text.primary}var E=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:500,n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:300,o=arguments.length>3&&void 0!==arguments[3]?arguments[3]:700;if(!(e=(0,a.Z)({},e)).main&&e[t]&&(e.main=e[t]),!e.main)throw new Error(r(4,t));if("string"!=typeof e.main)throw new Error(r(5,JSON.stringify(e.main)));return Qn(e,"light",n,_),Qn(e,"dark",o,_),e.contrastText||(e.contrastText=x(e.main)),e},k={dark:Kn,light:Gn};return dn((0,a.Z)({common:On,type:g,primary:E(n),secondary:E(i,"A400","A200","A700"),error:E(l),warning:E(f),info:E(p),success:E(v),grey:Pn,contrastThreshold:b,getContrastText:x,augmentColor:E,tonalOffset:_},k[g]),S)}function er(e){return Math.round(1e5*e)/1e5}var tr={textTransform:"uppercase"},nr='"Roboto", "Helvetica", "Arial", sans-serif';function rr(e,t){var n="function"==typeof t?t(e):t,r=n.fontFamily,o=void 0===r?nr:r,i=n.fontSize,u=void 0===i?14:i,l=n.fontWeightLight,s=void 0===l?300:l,f=n.fontWeightRegular,d=void 0===f?400:f,p=n.fontWeightMedium,h=void 0===p?500:p,v=n.fontWeightBold,y=void 0===v?700:v,g=n.htmlFontSize,m=void 0===g?16:g,b=n.allVariants,w=n.pxToRem,_=c(n,["fontFamily","fontSize","fontWeightLight","fontWeightRegular","fontWeightMedium","fontWeightBold","htmlFontSize","allVariants","pxToRem"]),S=u/14,x=w||function(e){return"".concat(e/m*S,"rem")},E=function(e,t,n,r,i){return(0,a.Z)({fontFamily:o,fontWeight:e,fontSize:x(t),lineHeight:n},o===nr?{letterSpacing:"".concat(er(r/t),"em")}:{},i,b)},k={h1:E(s,96,1.167,-1.5),h2:E(s,60,1.2,-.5),h3:E(d,48,1.167,0),h4:E(d,34,1.235,.25),h5:E(d,24,1.334,0),h6:E(h,20,1.6,.15),subtitle1:E(d,16,1.75,.15),subtitle2:E(h,14,1.57,.1),body1:E(d,16,1.5,.15),body2:E(d,14,1.43,.15),button:E(h,14,1.75,.4,tr),caption:E(d,12,1.66,.4),overline:E(d,12,2.66,1,tr)};return dn((0,a.Z)({htmlFontSize:m,pxToRem:x,round:er,fontFamily:o,fontSize:u,fontWeightLight:s,fontWeightRegular:d,fontWeightMedium:h,fontWeightBold:y},k),_,{clone:!1})}function or(){return["".concat(arguments.length<=0?void 0:arguments[0],"px ").concat(arguments.length<=1?void 0:arguments[1],"px ").concat(arguments.length<=2?void 0:arguments[2],"px ").concat(arguments.length<=3?void 0:arguments[3],"px rgba(0,0,0,").concat(.2,")"),"".concat(arguments.length<=4?void 0:arguments[4],"px ").concat(arguments.length<=5?void 0:arguments[5],"px ").concat(arguments.length<=6?void 0:arguments[6],"px ").concat(arguments.length<=7?void 0:arguments[7],"px rgba(0,0,0,").concat(.14,")"),"".concat(arguments.length<=8?void 0:arguments[8],"px ").concat(arguments.length<=9?void 0:arguments[9],"px ").concat(arguments.length<=10?void 0:arguments[10],"px ").concat(arguments.length<=11?void 0:arguments[11],"px rgba(0,0,0,").concat(.12,")")].join(",")}const ir=["none",or(0,2,1,-1,0,1,1,0,0,1,3,0),or(0,3,1,-2,0,2,2,0,0,1,5,0),or(0,3,3,-2,0,3,4,0,0,1,8,0),or(0,2,4,-1,0,4,5,0,0,1,10,0),or(0,3,5,-1,0,5,8,0,0,1,14,0),or(0,3,5,-1,0,6,10,0,0,1,18,0),or(0,4,5,-2,0,7,10,1,0,2,16,1),or(0,5,5,-3,0,8,10,1,0,3,14,2),or(0,5,6,-3,0,9,12,1,0,3,16,2),or(0,6,6,-3,0,10,14,1,0,4,18,3),or(0,6,7,-4,0,11,15,1,0,4,20,3),or(0,7,8,-4,0,12,17,2,0,5,22,4),or(0,7,8,-4,0,13,19,2,0,5,24,4),or(0,7,9,-4,0,14,21,2,0,5,26,4),or(0,8,9,-5,0,15,22,2,0,6,28,5),or(0,8,10,-5,0,16,24,2,0,6,30,5),or(0,8,11,-5,0,17,26,2,0,6,32,5),or(0,9,11,-5,0,18,28,2,0,7,34,6),or(0,9,12,-6,0,19,29,2,0,7,36,6),or(0,10,13,-6,0,20,31,3,0,8,38,7),or(0,10,13,-6,0,21,33,3,0,8,40,7),or(0,10,14,-6,0,22,35,3,0,8,42,7),or(0,11,14,-7,0,23,36,3,0,9,44,8),or(0,11,15,-7,0,24,38,3,0,9,46,8)],ar={borderRadius:4};var ur={xs:0,sm:600,md:960,lg:1280,xl:1920},lr={keys:["xs","sm","md","lg","xl"],up:function(e){return"@media (min-width:".concat(ur[e],"px)")}};const cr=function(e,t){return t?dn(e,t,{clone:!1}):e};var sr={m:"margin",p:"padding"},fr={t:"Top",r:"Right",b:"Bottom",l:"Left",x:["Left","Right"],y:["Top","Bottom"]},dr={marginX:"mx",marginY:"my",paddingX:"px",paddingY:"py"},pr=function(e){var t={};return function(e){return void 0===t[e]&&(t[e]=function(e){if(e.length>2){if(!dr[e])return[e];e=dr[e]}var t=(a=e.split(""),u=2,function(e){if(Array.isArray(e))return e}(a)||function(e,t){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(e)){var n=[],r=!0,o=!1,i=void 0;try{for(var a,u=e[Symbol.iterator]();!(r=(a=u.next()).done)&&(n.push(a.value),!t||n.length!==t);r=!0);}catch(e){o=!0,i=e}finally{try{r||null==u.return||u.return()}finally{if(o)throw i}}return n}}(a,u)||at(a,u)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),n=t[0],r=t[1],o=sr[n],i=fr[r]||"";var a,u;return Array.isArray(i)?i.map((function(e){return o+e})):[o+i]}(e)),t[e]}}(),hr=["m","mt","mr","mb","ml","mx","my","p","pt","pr","pb","pl","px","py","margin","marginTop","marginRight","marginBottom","marginLeft","marginX","marginY","padding","paddingTop","paddingRight","paddingBottom","paddingLeft","paddingX","paddingY"];function vr(e){var t=e.spacing||8;return"number"==typeof t?function(e){return t*e}:Array.isArray(t)?function(e){return t[e]}:"function"==typeof t?t:function(){}}function yr(e){var t=vr(e.theme);return Object.keys(e).map((function(n){if(-1===hr.indexOf(n))return null;var r=function(e,t){return function(n){return e.reduce((function(e,r){return e[r]=function(e,t){if("string"==typeof t||null==t)return t;var n=e(Math.abs(t));return t>=0?n:"number"==typeof n?-n:"-".concat(n)}(t,n),e}),{})}}(pr(n),t),o=e[n];return function(e,t,n){if(Array.isArray(t)){var r=e.theme.breakpoints||lr;return t.reduce((function(e,o,i){return e[r.up(r.keys[i])]=n(t[i]),e}),{})}if("object"===sn(t)){var o=e.theme.breakpoints||lr;return Object.keys(t).reduce((function(e,r){return e[o.up(r)]=n(t[r]),e}),{})}return n(t)}(e,o,r)})).reduce(cr,{})}function gr(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:8;if(e.mui)return e;var t=vr({spacing:e}),n=function(){for(var e=arguments.length,n=new Array(e),r=0;r<e;r++)n[r]=arguments[r];return 0===n.length?t(1):1===n.length?t(n[0]):n.map((function(e){if("string"==typeof e)return e;var n=t(e);return"number"==typeof n?"".concat(n,"px"):n})).join(" ")};return Object.defineProperty(n,"unit",{get:function(){return e}}),n.mui=!0,n}yr.propTypes={},yr.filterProps=hr;var mr={easeInOut:"cubic-bezier(0.4, 0, 0.2, 1)",easeOut:"cubic-bezier(0.0, 0, 0.2, 1)",easeIn:"cubic-bezier(0.4, 0, 1, 1)",sharp:"cubic-bezier(0.4, 0, 0.6, 1)"},br={shortest:150,shorter:200,short:250,standard:300,complex:375,enteringScreen:225,leavingScreen:195};function wr(e){return"".concat(Math.round(e),"ms")}const _r={easing:mr,duration:br,create:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:["all"],t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=t.duration,r=void 0===n?br.standard:n,o=t.easing,i=void 0===o?mr.easeInOut:o,a=t.delay,u=void 0===a?0:a;return c(t,["duration","easing","delay"]),(Array.isArray(e)?e:[e]).map((function(e){return"".concat(e," ").concat("string"==typeof r?r:wr(r)," ").concat(i," ").concat("string"==typeof u?u:wr(u))})).join(",")},getAutoHeightDuration:function(e){if(!e)return 0;var t=e/36;return Math.round(10*(4+15*Math.pow(t,.25)+t/5))}},Sr={mobileStepper:1e3,speedDial:1050,appBar:1100,drawer:1200,modal:1300,snackbar:1400,tooltip:1500},xr=function(){for(var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.breakpoints,n=void 0===t?{}:t,r=e.mixins,o=void 0===r?{}:r,i=e.palette,a=void 0===i?{}:i,u=e.spacing,l=e.typography,s=void 0===l?{}:l,f=c(e,["breakpoints","mixins","palette","spacing","typography"]),d=Jn(a),p=xn(n),h=gr(u),v=dn({breakpoints:p,direction:"ltr",mixins:kn(p,h,o),overrides:{},palette:d,props:{},shadows:ir,typography:rr(d,s),spacing:h,shape:ar,transitions:_r,zIndex:Sr},f),y=arguments.length,g=new Array(y>1?y-1:0),m=1;m<y;m++)g[m-1]=arguments[m];return g.reduce((function(e,t){return dn(e,t)}),v)}();var Er=u.forwardRef((function(e,t){var n=e.children,r=e.classes,i=e.className,l=e.color,s=void 0===l?"inherit":l,d=e.component,p=void 0===d?"svg":d,h=e.fontSize,v=void 0===h?"default":h,y=e.htmlColor,g=e.titleAccess,m=e.viewBox,b=void 0===m?"0 0 24 24":m,w=c(e,["children","classes","className","color","component","fontSize","htmlColor","titleAccess","viewBox"]);return u.createElement(p,(0,a.Z)({className:f(r.root,i,"inherit"!==s&&r["color".concat(o(s))],"default"!==v&&r["fontSize".concat(o(v))]),focusable:"false",viewBox:b,color:y,"aria-hidden":!g||void 0,role:g?"img":void 0,ref:t},w),n,g?u.createElement("title",null,g):null)}));Er.muiName="SvgIcon";const kr=(Or={name:"MuiSvgIcon"},function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return function(n){var r=t.defaultTheme,o=t.withTheme,i=void 0!==o&&o,l=t.name,s=c(t,["defaultTheme","withTheme","name"]),f=l,d=wn(e,(0,a.Z)({defaultTheme:r,Component:n,name:l||n.displayName,classNamePrefix:f},s)),h=u.forwardRef((function(e,t){e.classes;var o,s=e.innerRef,f=c(e,["classes","innerRef"]),p=d((0,a.Z)({},n.defaultProps,e)),h=f;return("string"==typeof l||i)&&(o=je()||r,l&&(h=_n({theme:o,name:l,props:f})),i&&!h.theme&&(h.theme=o)),u.createElement(n,(0,a.Z)({ref:s||t,classes:p},h))}));return p()(h,n),h}}((function(e){return{root:{userSelect:"none",width:"1em",height:"1em",display:"inline-block",fill:"currentColor",flexShrink:0,fontSize:e.typography.pxToRem(24),transition:e.transitions.create("fill",{duration:e.transitions.duration.shorter})},colorPrimary:{color:e.palette.primary.main},colorSecondary:{color:e.palette.secondary.main},colorAction:{color:e.palette.action.active},colorError:{color:e.palette.error.main},colorDisabled:{color:e.palette.action.disabled},fontSizeInherit:{fontSize:"inherit"},fontSizeSmall:{fontSize:e.typography.pxToRem(20)},fontSizeLarge:{fontSize:e.typography.pxToRem(35)}}}),(0,a.Z)({defaultTheme:xr},Or)))(Er);var Or;function Pr(e,t){var n=function(t,n){return u.createElement(kr,(0,a.Z)({ref:n},t),e)};return n.muiName=kr.muiName,u.memo(u.forwardRef(n))}function Cr(e){var t,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:166;function r(){for(var r=arguments.length,o=new Array(r),i=0;i<r;i++)o[i]=arguments[i];var a=this,u=function(){e.apply(a,o)};clearTimeout(t),t=setTimeout(u,n)}return r.clear=function(){clearTimeout(t)},r}function Mr(e,t){return function(){return null}}function Nr(e,t){return u.isValidElement(e)&&-1!==t.indexOf(e.type.muiName)}function Tr(e){return e&&e.ownerDocument||document}function jr(e){return Tr(e).defaultView||window}function Dr(e){return function(){return null}}function Rr(e,t){"function"==typeof e?e(t):e&&(e.current=t)}function Ar(e,t,n,r,o){return null}function Lr(e){var t=e.controlled,n=e.default,r=(e.name,e.state,u.useRef(void 0!==t).current),o=u.useState(n),i=o[0],a=o[1];return[r?t:i,u.useCallback((function(e){r||a(e)}),[])]}var zr="undefined"!=typeof window?u.useLayoutEffect:u.useEffect;function Ir(e){var t=u.useRef(e);return zr((function(){t.current=e})),u.useCallback((function(){return t.current.apply(void 0,arguments)}),[])}function Br(e,t){return u.useMemo((function(){return null==e&&null==t?null:function(n){Rr(e,n),Rr(t,n)}}),[e,t])}function Ur(e){var t=u.useState(e),n=t[0],r=t[1],o=e||n;return u.useEffect((function(){null==n&&r("mui-".concat(Math.round(1e5*Math.random())))}),[n]),o}var Fr=n(935),Hr=!0,Vr=!1,Xr=null,Wr={text:!0,search:!0,url:!0,tel:!0,email:!0,password:!0,number:!0,date:!0,month:!0,week:!0,time:!0,datetime:!0,"datetime-local":!0};function Yr(e){e.metaKey||e.altKey||e.ctrlKey||(Hr=!0)}function $r(){Hr=!1}function Zr(){"hidden"===this.visibilityState&&Vr&&(Hr=!0)}function qr(e){var t,n,r,o=e.target;try{return o.matches(":focus-visible")}catch(e){}return Hr||(n=(t=o).type,!("INPUT"!==(r=t.tagName)||!Wr[n]||t.readOnly)||"TEXTAREA"===r&&!t.readOnly||!!t.isContentEditable)}function Gr(){Vr=!0,window.clearTimeout(Xr),Xr=window.setTimeout((function(){Vr=!1}),100)}function Kr(){return{isFocusVisible:qr,onBlurVisible:Gr,ref:u.useCallback((function(e){var t,n=Fr.findDOMNode(e);null!=n&&((t=n.ownerDocument).addEventListener("keydown",Yr,!0),t.addEventListener("mousedown",$r,!0),t.addEventListener("pointerdown",$r,!0),t.addEventListener("touchstart",$r,!0),t.addEventListener("visibilitychange",Zr,!0))}),[])}}},81:(e,t,n)=>{"use strict";var r=n(318),o=n(862);t.Z=void 0;var i=o(n(294)),a=(0,r(n(108)).default)(i.createElement("path",{d:"M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76 0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71 0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71 0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76 0 5-2.24 5-5s-2.24-5-5-5z"}),"Link");t.Z=a},108:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"default",{enumerable:!0,get:function(){return r.createSvgIcon}});var r=n(500)},184:(e,t)=>{var n;!function(){"use strict";var r={}.hasOwnProperty;function o(){for(var e=[],t=0;t<arguments.length;t++){var n=arguments[t];if(n){var i=typeof n;if("string"===i||"number"===i)e.push(n);else if(Array.isArray(n)){if(n.length){var a=o.apply(null,n);a&&e.push(a)}}else if("object"===i)if(n.toString===Object.prototype.toString)for(var u in n)r.call(n,u)&&n[u]&&e.push(u);else e.push(n.toString())}}return e.join(" ")}e.exports?(o.default=o,e.exports=o):void 0===(n=function(){return o}.apply(t,[]))||(e.exports=n)}()},645:e=>{"use strict";e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n=e(t);return t[2]?"@media ".concat(t[2]," {").concat(n,"}"):n})).join("")},t.i=function(e,n,r){"string"==typeof e&&(e=[[null,e,""]]);var o={};if(r)for(var i=0;i<this.length;i++){var a=this[i][0];null!=a&&(o[a]=!0)}for(var u=0;u<e.length;u++){var l=[].concat(e[u]);r&&o[l[0]]||(n&&(l[2]?l[2]="".concat(n," and ").concat(l[2]):l[2]=n),t.push(l))}},t}},15:e=>{"use strict";function t(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}e.exports=function(e){var n,r,o=(r=4,function(e){if(Array.isArray(e))return e}(n=e)||function(e,t){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(e)){var n=[],r=!0,o=!1,i=void 0;try{for(var a,u=e[Symbol.iterator]();!(r=(a=u.next()).done)&&(n.push(a.value),!t||n.length!==t);r=!0);}catch(e){o=!0,i=e}finally{try{r||null==u.return||u.return()}finally{if(o)throw i}}return n}}(n,r)||function(e,n){if(e){if("string"==typeof e)return t(e,n);var r=Object.prototype.toString.call(e).slice(8,-1);return"Object"===r&&e.constructor&&(r=e.constructor.name),"Map"===r||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?t(e,n):void 0}}(n,r)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),i=o[1],a=o[3];if("function"==typeof btoa){var u=btoa(unescape(encodeURIComponent(JSON.stringify(a)))),l="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(u),c="/*# ".concat(l," */"),s=a.sources.map((function(e){return"/*# sourceURL=".concat(a.sourceRoot||"").concat(e," */")}));return[i].concat(s).concat([c]).join("\n")}return[i].join("\n")}},679:(e,t,n)=>{"use strict";var r=n(296),o={childContextTypes:!0,contextType:!0,contextTypes:!0,defaultProps:!0,displayName:!0,getDefaultProps:!0,getDerivedStateFromError:!0,getDerivedStateFromProps:!0,mixins:!0,propTypes:!0,type:!0},i={name:!0,length:!0,prototype:!0,caller:!0,callee:!0,arguments:!0,arity:!0},a={$$typeof:!0,compare:!0,defaultProps:!0,displayName:!0,propTypes:!0,type:!0},u={};function l(e){return r.isMemo(e)?a:u[e.$$typeof]||o}u[r.ForwardRef]={$$typeof:!0,render:!0,defaultProps:!0,displayName:!0,propTypes:!0},u[r.Memo]=a;var c=Object.defineProperty,s=Object.getOwnPropertyNames,f=Object.getOwnPropertySymbols,d=Object.getOwnPropertyDescriptor,p=Object.getPrototypeOf,h=Object.prototype;e.exports=function e(t,n,r){if("string"!=typeof n){if(h){var o=p(n);o&&o!==h&&e(t,o,r)}var a=s(n);f&&(a=a.concat(f(n)));for(var u=l(t),v=l(n),y=0;y<a.length;++y){var g=a[y];if(!(i[g]||r&&r[g]||v&&v[g]||u&&u[g])){var m=d(n,g);try{c(t,g,m)}catch(e){}}}}return t}},103:(e,t)=>{"use strict";var n="function"==typeof Symbol&&Symbol.for,r=n?Symbol.for("react.element"):60103,o=n?Symbol.for("react.portal"):60106,i=n?Symbol.for("react.fragment"):60107,a=n?Symbol.for("react.strict_mode"):60108,u=n?Symbol.for("react.profiler"):60114,l=n?Symbol.for("react.provider"):60109,c=n?Symbol.for("react.context"):60110,s=n?Symbol.for("react.async_mode"):60111,f=n?Symbol.for("react.concurrent_mode"):60111,d=n?Symbol.for("react.forward_ref"):60112,p=n?Symbol.for("react.suspense"):60113,h=n?Symbol.for("react.suspense_list"):60120,v=n?Symbol.for("react.memo"):60115,y=n?Symbol.for("react.lazy"):60116,g=n?Symbol.for("react.block"):60121,m=n?Symbol.for("react.fundamental"):60117,b=n?Symbol.for("react.responder"):60118,w=n?Symbol.for("react.scope"):60119;function _(e){if("object"==typeof e&&null!==e){var t=e.$$typeof;switch(t){case r:switch(e=e.type){case s:case f:case i:case u:case a:case p:return e;default:switch(e=e&&e.$$typeof){case c:case d:case y:case v:case l:return e;default:return t}}case o:return t}}}function S(e){return _(e)===f}t.AsyncMode=s,t.ConcurrentMode=f,t.ContextConsumer=c,t.ContextProvider=l,t.Element=r,t.ForwardRef=d,t.Fragment=i,t.Lazy=y,t.Memo=v,t.Portal=o,t.Profiler=u,t.StrictMode=a,t.Suspense=p,t.isAsyncMode=function(e){return S(e)||_(e)===s},t.isConcurrentMode=S,t.isContextConsumer=function(e){return _(e)===c},t.isContextProvider=function(e){return _(e)===l},t.isElement=function(e){return"object"==typeof e&&null!==e&&e.$$typeof===r},t.isForwardRef=function(e){return _(e)===d},t.isFragment=function(e){return _(e)===i},t.isLazy=function(e){return _(e)===y},t.isMemo=function(e){return _(e)===v},t.isPortal=function(e){return _(e)===o},t.isProfiler=function(e){return _(e)===u},t.isStrictMode=function(e){return _(e)===a},t.isSuspense=function(e){return _(e)===p},t.isValidElementType=function(e){return"string"==typeof e||"function"==typeof e||e===i||e===f||e===u||e===a||e===p||e===h||"object"==typeof e&&null!==e&&(e.$$typeof===y||e.$$typeof===v||e.$$typeof===l||e.$$typeof===c||e.$$typeof===d||e.$$typeof===m||e.$$typeof===b||e.$$typeof===w||e.$$typeof===g)},t.typeOf=_},296:(e,t,n)=>{"use strict";e.exports=n(103)},826:e=>{e.exports=Array.isArray||function(e){return"[object Array]"==Object.prototype.toString.call(e)}},486:function(e,t,n){var r;e=n.nmd(e),function(){var o,i="Expected a function",a="__lodash_hash_undefined__",u="__lodash_placeholder__",l=32,c=128,s=1/0,f=9007199254740991,d=NaN,p=4294967295,h=[["ary",c],["bind",1],["bindKey",2],["curry",8],["curryRight",16],["flip",512],["partial",l],["partialRight",64],["rearg",256]],v="[object Arguments]",y="[object Array]",g="[object Boolean]",m="[object Date]",b="[object Error]",w="[object Function]",_="[object GeneratorFunction]",S="[object Map]",x="[object Number]",E="[object Object]",k="[object Promise]",O="[object RegExp]",P="[object Set]",C="[object String]",M="[object Symbol]",N="[object WeakMap]",T="[object ArrayBuffer]",j="[object DataView]",D="[object Float32Array]",R="[object Float64Array]",A="[object Int8Array]",L="[object Int16Array]",z="[object Int32Array]",I="[object Uint8Array]",B="[object Uint8ClampedArray]",U="[object Uint16Array]",F="[object Uint32Array]",H=/\b__p \+= '';/g,V=/\b(__p \+=) '' \+/g,X=/(__e\(.*?\)|\b__t\)) \+\n'';/g,W=/&(?:amp|lt|gt|quot|#39);/g,Y=/[&<>"']/g,$=RegExp(W.source),Z=RegExp(Y.source),q=/<%-([\s\S]+?)%>/g,G=/<%([\s\S]+?)%>/g,K=/<%=([\s\S]+?)%>/g,Q=/\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,J=/^\w*$/,ee=/[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g,te=/[\\^$.*+?()[\]{}|]/g,ne=RegExp(te.source),re=/^\s+/,oe=/\s/,ie=/\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/,ae=/\{\n\/\* \[wrapped with (.+)\] \*/,ue=/,? & /,le=/[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g,ce=/[()=,{}\[\]\/\s]/,se=/\\(\\)?/g,fe=/\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g,de=/\w*$/,pe=/^[-+]0x[0-9a-f]+$/i,he=/^0b[01]+$/i,ve=/^\[object .+?Constructor\]$/,ye=/^0o[0-7]+$/i,ge=/^(?:0|[1-9]\d*)$/,me=/[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g,be=/($^)/,we=/['\n\r\u2028\u2029\\]/g,_e="\\u0300-\\u036f\\ufe20-\\ufe2f\\u20d0-\\u20ff",Se="a-z\\xdf-\\xf6\\xf8-\\xff",xe="A-Z\\xc0-\\xd6\\xd8-\\xde",Ee="\\xac\\xb1\\xd7\\xf7\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf\\u2000-\\u206f \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000",ke="["+Ee+"]",Oe="["+_e+"]",Pe="\\d+",Ce="["+Se+"]",Me="[^\\ud800-\\udfff"+Ee+Pe+"\\u2700-\\u27bf"+Se+xe+"]",Ne="\\ud83c[\\udffb-\\udfff]",Te="[^\\ud800-\\udfff]",je="(?:\\ud83c[\\udde6-\\uddff]){2}",De="[\\ud800-\\udbff][\\udc00-\\udfff]",Re="["+xe+"]",Ae="(?:"+Ce+"|"+Me+")",Le="(?:"+Re+"|"+Me+")",ze="(?:['’](?:d|ll|m|re|s|t|ve))?",Ie="(?:['’](?:D|LL|M|RE|S|T|VE))?",Be="(?:"+Oe+"|"+Ne+")?",Ue="[\\ufe0e\\ufe0f]?",Fe=Ue+Be+"(?:\\u200d(?:"+[Te,je,De].join("|")+")"+Ue+Be+")*",He="(?:"+["[\\u2700-\\u27bf]",je,De].join("|")+")"+Fe,Ve="(?:"+[Te+Oe+"?",Oe,je,De,"[\\ud800-\\udfff]"].join("|")+")",Xe=RegExp("['’]","g"),We=RegExp(Oe,"g"),Ye=RegExp(Ne+"(?="+Ne+")|"+Ve+Fe,"g"),$e=RegExp([Re+"?"+Ce+"+"+ze+"(?="+[ke,Re,"$"].join("|")+")",Le+"+"+Ie+"(?="+[ke,Re+Ae,"$"].join("|")+")",Re+"?"+Ae+"+"+ze,Re+"+"+Ie,"\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])","\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])",Pe,He].join("|"),"g"),Ze=RegExp("[\\u200d\\ud800-\\udfff"+_e+"\\ufe0e\\ufe0f]"),qe=/[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/,Ge=["Array","Buffer","DataView","Date","Error","Float32Array","Float64Array","Function","Int8Array","Int16Array","Int32Array","Map","Math","Object","Promise","RegExp","Set","String","Symbol","TypeError","Uint8Array","Uint8ClampedArray","Uint16Array","Uint32Array","WeakMap","_","clearTimeout","isFinite","parseInt","setTimeout"],Ke=-1,Qe={};Qe[D]=Qe[R]=Qe[A]=Qe[L]=Qe[z]=Qe[I]=Qe[B]=Qe[U]=Qe[F]=!0,Qe[v]=Qe[y]=Qe[T]=Qe[g]=Qe[j]=Qe[m]=Qe[b]=Qe[w]=Qe[S]=Qe[x]=Qe[E]=Qe[O]=Qe[P]=Qe[C]=Qe[N]=!1;var Je={};Je[v]=Je[y]=Je[T]=Je[j]=Je[g]=Je[m]=Je[D]=Je[R]=Je[A]=Je[L]=Je[z]=Je[S]=Je[x]=Je[E]=Je[O]=Je[P]=Je[C]=Je[M]=Je[I]=Je[B]=Je[U]=Je[F]=!0,Je[b]=Je[w]=Je[N]=!1;var et={"\\":"\\","'":"'","\n":"n","\r":"r","\u2028":"u2028","\u2029":"u2029"},tt=parseFloat,nt=parseInt,rt="object"==typeof n.g&&n.g&&n.g.Object===Object&&n.g,ot="object"==typeof self&&self&&self.Object===Object&&self,it=rt||ot||Function("return this")(),at=t&&!t.nodeType&&t,ut=at&&e&&!e.nodeType&&e,lt=ut&&ut.exports===at,ct=lt&&rt.process,st=function(){try{return ut&&ut.require&&ut.require("util").types||ct&&ct.binding&&ct.binding("util")}catch(e){}}(),ft=st&&st.isArrayBuffer,dt=st&&st.isDate,pt=st&&st.isMap,ht=st&&st.isRegExp,vt=st&&st.isSet,yt=st&&st.isTypedArray;function gt(e,t,n){switch(n.length){case 0:return e.call(t);case 1:return e.call(t,n[0]);case 2:return e.call(t,n[0],n[1]);case 3:return e.call(t,n[0],n[1],n[2])}return e.apply(t,n)}function mt(e,t,n,r){for(var o=-1,i=null==e?0:e.length;++o<i;){var a=e[o];t(r,a,n(a),e)}return r}function bt(e,t){for(var n=-1,r=null==e?0:e.length;++n<r&&!1!==t(e[n],n,e););return e}function wt(e,t){for(var n=null==e?0:e.length;n--&&!1!==t(e[n],n,e););return e}function _t(e,t){for(var n=-1,r=null==e?0:e.length;++n<r;)if(!t(e[n],n,e))return!1;return!0}function St(e,t){for(var n=-1,r=null==e?0:e.length,o=0,i=[];++n<r;){var a=e[n];t(a,n,e)&&(i[o++]=a)}return i}function xt(e,t){return!(null==e||!e.length)&&Dt(e,t,0)>-1}function Et(e,t,n){for(var r=-1,o=null==e?0:e.length;++r<o;)if(n(t,e[r]))return!0;return!1}function kt(e,t){for(var n=-1,r=null==e?0:e.length,o=Array(r);++n<r;)o[n]=t(e[n],n,e);return o}function Ot(e,t){for(var n=-1,r=t.length,o=e.length;++n<r;)e[o+n]=t[n];return e}function Pt(e,t,n,r){var o=-1,i=null==e?0:e.length;for(r&&i&&(n=e[++o]);++o<i;)n=t(n,e[o],o,e);return n}function Ct(e,t,n,r){var o=null==e?0:e.length;for(r&&o&&(n=e[--o]);o--;)n=t(n,e[o],o,e);return n}function Mt(e,t){for(var n=-1,r=null==e?0:e.length;++n<r;)if(t(e[n],n,e))return!0;return!1}var Nt=zt("length");function Tt(e,t,n){var r;return n(e,(function(e,n,o){if(t(e,n,o))return r=n,!1})),r}function jt(e,t,n,r){for(var o=e.length,i=n+(r?1:-1);r?i--:++i<o;)if(t(e[i],i,e))return i;return-1}function Dt(e,t,n){return t==t?function(e,t,n){for(var r=n-1,o=e.length;++r<o;)if(e[r]===t)return r;return-1}(e,t,n):jt(e,At,n)}function Rt(e,t,n,r){for(var o=n-1,i=e.length;++o<i;)if(r(e[o],t))return o;return-1}function At(e){return e!=e}function Lt(e,t){var n=null==e?0:e.length;return n?Ut(e,t)/n:d}function zt(e){return function(t){return null==t?o:t[e]}}function It(e){return function(t){return null==e?o:e[t]}}function Bt(e,t,n,r,o){return o(e,(function(e,o,i){n=r?(r=!1,e):t(n,e,o,i)})),n}function Ut(e,t){for(var n,r=-1,i=e.length;++r<i;){var a=t(e[r]);a!==o&&(n=n===o?a:n+a)}return n}function Ft(e,t){for(var n=-1,r=Array(e);++n<e;)r[n]=t(n);return r}function Ht(e){return e?e.slice(0,un(e)+1).replace(re,""):e}function Vt(e){return function(t){return e(t)}}function Xt(e,t){return kt(t,(function(t){return e[t]}))}function Wt(e,t){return e.has(t)}function Yt(e,t){for(var n=-1,r=e.length;++n<r&&Dt(t,e[n],0)>-1;);return n}function $t(e,t){for(var n=e.length;n--&&Dt(t,e[n],0)>-1;);return n}function Zt(e,t){for(var n=e.length,r=0;n--;)e[n]===t&&++r;return r}var qt=It({À:"A",Á:"A",Â:"A",Ã:"A",Ä:"A",Å:"A",à:"a",á:"a",â:"a",ã:"a",ä:"a",å:"a",Ç:"C",ç:"c",Ð:"D",ð:"d",È:"E",É:"E",Ê:"E",Ë:"E",è:"e",é:"e",ê:"e",ë:"e",Ì:"I",Í:"I",Î:"I",Ï:"I",ì:"i",í:"i",î:"i",ï:"i",Ñ:"N",ñ:"n",Ò:"O",Ó:"O",Ô:"O",Õ:"O",Ö:"O",Ø:"O",ò:"o",ó:"o",ô:"o",õ:"o",ö:"o",ø:"o",Ù:"U",Ú:"U",Û:"U",Ü:"U",ù:"u",ú:"u",û:"u",ü:"u",Ý:"Y",ý:"y",ÿ:"y",Æ:"Ae",æ:"ae",Þ:"Th",þ:"th",ß:"ss",Ā:"A",Ă:"A",Ą:"A",ā:"a",ă:"a",ą:"a",Ć:"C",Ĉ:"C",Ċ:"C",Č:"C",ć:"c",ĉ:"c",ċ:"c",č:"c",Ď:"D",Đ:"D",ď:"d",đ:"d",Ē:"E",Ĕ:"E",Ė:"E",Ę:"E",Ě:"E",ē:"e",ĕ:"e",ė:"e",ę:"e",ě:"e",Ĝ:"G",Ğ:"G",Ġ:"G",Ģ:"G",ĝ:"g",ğ:"g",ġ:"g",ģ:"g",Ĥ:"H",Ħ:"H",ĥ:"h",ħ:"h",Ĩ:"I",Ī:"I",Ĭ:"I",Į:"I",İ:"I",ĩ:"i",ī:"i",ĭ:"i",į:"i",ı:"i",Ĵ:"J",ĵ:"j",Ķ:"K",ķ:"k",ĸ:"k",Ĺ:"L",Ļ:"L",Ľ:"L",Ŀ:"L",Ł:"L",ĺ:"l",ļ:"l",ľ:"l",ŀ:"l",ł:"l",Ń:"N",Ņ:"N",Ň:"N",Ŋ:"N",ń:"n",ņ:"n",ň:"n",ŋ:"n",Ō:"O",Ŏ:"O",Ő:"O",ō:"o",ŏ:"o",ő:"o",Ŕ:"R",Ŗ:"R",Ř:"R",ŕ:"r",ŗ:"r",ř:"r",Ś:"S",Ŝ:"S",Ş:"S",Š:"S",ś:"s",ŝ:"s",ş:"s",š:"s",Ţ:"T",Ť:"T",Ŧ:"T",ţ:"t",ť:"t",ŧ:"t",Ũ:"U",Ū:"U",Ŭ:"U",Ů:"U",Ű:"U",Ų:"U",ũ:"u",ū:"u",ŭ:"u",ů:"u",ű:"u",ų:"u",Ŵ:"W",ŵ:"w",Ŷ:"Y",ŷ:"y",Ÿ:"Y",Ź:"Z",Ż:"Z",Ž:"Z",ź:"z",ż:"z",ž:"z",Ĳ:"IJ",ĳ:"ij",Œ:"Oe",œ:"oe",ŉ:"'n",ſ:"s"}),Gt=It({"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#39;"});function Kt(e){return"\\"+et[e]}function Qt(e){return Ze.test(e)}function Jt(e){var t=-1,n=Array(e.size);return e.forEach((function(e,r){n[++t]=[r,e]})),n}function en(e,t){return function(n){return e(t(n))}}function tn(e,t){for(var n=-1,r=e.length,o=0,i=[];++n<r;){var a=e[n];a!==t&&a!==u||(e[n]=u,i[o++]=n)}return i}function nn(e){var t=-1,n=Array(e.size);return e.forEach((function(e){n[++t]=e})),n}function rn(e){var t=-1,n=Array(e.size);return e.forEach((function(e){n[++t]=[e,e]})),n}function on(e){return Qt(e)?function(e){for(var t=Ye.lastIndex=0;Ye.test(e);)++t;return t}(e):Nt(e)}function an(e){return Qt(e)?function(e){return e.match(Ye)||[]}(e):function(e){return e.split("")}(e)}function un(e){for(var t=e.length;t--&&oe.test(e.charAt(t)););return t}var ln=It({"&amp;":"&","&lt;":"<","&gt;":">","&quot;":'"',"&#39;":"'"}),cn=function e(t){var n,r=(t=null==t?it:cn.defaults(it.Object(),t,cn.pick(it,Ge))).Array,oe=t.Date,_e=t.Error,Se=t.Function,xe=t.Math,Ee=t.Object,ke=t.RegExp,Oe=t.String,Pe=t.TypeError,Ce=r.prototype,Me=Se.prototype,Ne=Ee.prototype,Te=t["__core-js_shared__"],je=Me.toString,De=Ne.hasOwnProperty,Re=0,Ae=(n=/[^.]+$/.exec(Te&&Te.keys&&Te.keys.IE_PROTO||""))?"Symbol(src)_1."+n:"",Le=Ne.toString,ze=je.call(Ee),Ie=it._,Be=ke("^"+je.call(De).replace(te,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$"),Ue=lt?t.Buffer:o,Fe=t.Symbol,He=t.Uint8Array,Ve=Ue?Ue.allocUnsafe:o,Ye=en(Ee.getPrototypeOf,Ee),Ze=Ee.create,et=Ne.propertyIsEnumerable,rt=Ce.splice,ot=Fe?Fe.isConcatSpreadable:o,at=Fe?Fe.iterator:o,ut=Fe?Fe.toStringTag:o,ct=function(){try{var e=si(Ee,"defineProperty");return e({},"",{}),e}catch(e){}}(),st=t.clearTimeout!==it.clearTimeout&&t.clearTimeout,Nt=oe&&oe.now!==it.Date.now&&oe.now,It=t.setTimeout!==it.setTimeout&&t.setTimeout,sn=xe.ceil,fn=xe.floor,dn=Ee.getOwnPropertySymbols,pn=Ue?Ue.isBuffer:o,hn=t.isFinite,vn=Ce.join,yn=en(Ee.keys,Ee),gn=xe.max,mn=xe.min,bn=oe.now,wn=t.parseInt,_n=xe.random,Sn=Ce.reverse,xn=si(t,"DataView"),En=si(t,"Map"),kn=si(t,"Promise"),On=si(t,"Set"),Pn=si(t,"WeakMap"),Cn=si(Ee,"create"),Mn=Pn&&new Pn,Nn={},Tn=Bi(xn),jn=Bi(En),Dn=Bi(kn),Rn=Bi(On),An=Bi(Pn),Ln=Fe?Fe.prototype:o,zn=Ln?Ln.valueOf:o,In=Ln?Ln.toString:o;function Bn(e){if(nu(e)&&!Wa(e)&&!(e instanceof Vn)){if(e instanceof Hn)return e;if(De.call(e,"__wrapped__"))return Ui(e)}return new Hn(e)}var Un=function(){function e(){}return function(t){if(!tu(t))return{};if(Ze)return Ze(t);e.prototype=t;var n=new e;return e.prototype=o,n}}();function Fn(){}function Hn(e,t){this.__wrapped__=e,this.__actions__=[],this.__chain__=!!t,this.__index__=0,this.__values__=o}function Vn(e){this.__wrapped__=e,this.__actions__=[],this.__dir__=1,this.__filtered__=!1,this.__iteratees__=[],this.__takeCount__=p,this.__views__=[]}function Xn(e){var t=-1,n=null==e?0:e.length;for(this.clear();++t<n;){var r=e[t];this.set(r[0],r[1])}}function Wn(e){var t=-1,n=null==e?0:e.length;for(this.clear();++t<n;){var r=e[t];this.set(r[0],r[1])}}function Yn(e){var t=-1,n=null==e?0:e.length;for(this.clear();++t<n;){var r=e[t];this.set(r[0],r[1])}}function $n(e){var t=-1,n=null==e?0:e.length;for(this.__data__=new Yn;++t<n;)this.add(e[t])}function Zn(e){var t=this.__data__=new Wn(e);this.size=t.size}function qn(e,t){var n=Wa(e),r=!n&&Xa(e),o=!n&&!r&&qa(e),i=!n&&!r&&!o&&su(e),a=n||r||o||i,u=a?Ft(e.length,Oe):[],l=u.length;for(var c in e)!t&&!De.call(e,c)||a&&("length"==c||o&&("offset"==c||"parent"==c)||i&&("buffer"==c||"byteLength"==c||"byteOffset"==c)||gi(c,l))||u.push(c);return u}function Gn(e){var t=e.length;return t?e[Yr(0,t-1)]:o}function Kn(e,t){return Ri(Co(e),ar(t,0,e.length))}function Qn(e){return Ri(Co(e))}function Jn(e,t,n){(n!==o&&!Fa(e[t],n)||n===o&&!(t in e))&&or(e,t,n)}function er(e,t,n){var r=e[t];De.call(e,t)&&Fa(r,n)&&(n!==o||t in e)||or(e,t,n)}function tr(e,t){for(var n=e.length;n--;)if(Fa(e[n][0],t))return n;return-1}function nr(e,t,n,r){return fr(e,(function(e,o,i){t(r,e,n(e),i)})),r}function rr(e,t){return e&&Mo(t,ju(t),e)}function or(e,t,n){"__proto__"==t&&ct?ct(e,t,{configurable:!0,enumerable:!0,value:n,writable:!0}):e[t]=n}function ir(e,t){for(var n=-1,i=t.length,a=r(i),u=null==e;++n<i;)a[n]=u?o:Pu(e,t[n]);return a}function ar(e,t,n){return e==e&&(n!==o&&(e=e<=n?e:n),t!==o&&(e=e>=t?e:t)),e}function ur(e,t,n,r,i,a){var u,l=1&t,c=2&t,s=4&t;if(n&&(u=i?n(e,r,i,a):n(e)),u!==o)return u;if(!tu(e))return e;var f=Wa(e);if(f){if(u=function(e){var t=e.length,n=new e.constructor(t);return t&&"string"==typeof e[0]&&De.call(e,"index")&&(n.index=e.index,n.input=e.input),n}(e),!l)return Co(e,u)}else{var d=pi(e),p=d==w||d==_;if(qa(e))return So(e,l);if(d==E||d==v||p&&!i){if(u=c||p?{}:vi(e),!l)return c?function(e,t){return Mo(e,di(e),t)}(e,function(e,t){return e&&Mo(t,Du(t),e)}(u,e)):function(e,t){return Mo(e,fi(e),t)}(e,rr(u,e))}else{if(!Je[d])return i?e:{};u=function(e,t,n){var r,o=e.constructor;switch(t){case T:return xo(e);case g:case m:return new o(+e);case j:return function(e,t){var n=t?xo(e.buffer):e.buffer;return new e.constructor(n,e.byteOffset,e.byteLength)}(e,n);case D:case R:case A:case L:case z:case I:case B:case U:case F:return Eo(e,n);case S:return new o;case x:case C:return new o(e);case O:return function(e){var t=new e.constructor(e.source,de.exec(e));return t.lastIndex=e.lastIndex,t}(e);case P:return new o;case M:return r=e,zn?Ee(zn.call(r)):{}}}(e,d,l)}}a||(a=new Zn);var h=a.get(e);if(h)return h;a.set(e,u),uu(e)?e.forEach((function(r){u.add(ur(r,t,n,r,e,a))})):ru(e)&&e.forEach((function(r,o){u.set(o,ur(r,t,n,o,e,a))}));var y=f?o:(s?c?ri:ni:c?Du:ju)(e);return bt(y||e,(function(r,o){y&&(r=e[o=r]),er(u,o,ur(r,t,n,o,e,a))})),u}function lr(e,t,n){var r=n.length;if(null==e)return!r;for(e=Ee(e);r--;){var i=n[r],a=t[i],u=e[i];if(u===o&&!(i in e)||!a(u))return!1}return!0}function cr(e,t,n){if("function"!=typeof e)throw new Pe(i);return Ni((function(){e.apply(o,n)}),t)}function sr(e,t,n,r){var o=-1,i=xt,a=!0,u=e.length,l=[],c=t.length;if(!u)return l;n&&(t=kt(t,Vt(n))),r?(i=Et,a=!1):t.length>=200&&(i=Wt,a=!1,t=new $n(t));e:for(;++o<u;){var s=e[o],f=null==n?s:n(s);if(s=r||0!==s?s:0,a&&f==f){for(var d=c;d--;)if(t[d]===f)continue e;l.push(s)}else i(t,f,r)||l.push(s)}return l}Bn.templateSettings={escape:q,evaluate:G,interpolate:K,variable:"",imports:{_:Bn}},Bn.prototype=Fn.prototype,Bn.prototype.constructor=Bn,Hn.prototype=Un(Fn.prototype),Hn.prototype.constructor=Hn,Vn.prototype=Un(Fn.prototype),Vn.prototype.constructor=Vn,Xn.prototype.clear=function(){this.__data__=Cn?Cn(null):{},this.size=0},Xn.prototype.delete=function(e){var t=this.has(e)&&delete this.__data__[e];return this.size-=t?1:0,t},Xn.prototype.get=function(e){var t=this.__data__;if(Cn){var n=t[e];return n===a?o:n}return De.call(t,e)?t[e]:o},Xn.prototype.has=function(e){var t=this.__data__;return Cn?t[e]!==o:De.call(t,e)},Xn.prototype.set=function(e,t){var n=this.__data__;return this.size+=this.has(e)?0:1,n[e]=Cn&&t===o?a:t,this},Wn.prototype.clear=function(){this.__data__=[],this.size=0},Wn.prototype.delete=function(e){var t=this.__data__,n=tr(t,e);return!(n<0||(n==t.length-1?t.pop():rt.call(t,n,1),--this.size,0))},Wn.prototype.get=function(e){var t=this.__data__,n=tr(t,e);return n<0?o:t[n][1]},Wn.prototype.has=function(e){return tr(this.__data__,e)>-1},Wn.prototype.set=function(e,t){var n=this.__data__,r=tr(n,e);return r<0?(++this.size,n.push([e,t])):n[r][1]=t,this},Yn.prototype.clear=function(){this.size=0,this.__data__={hash:new Xn,map:new(En||Wn),string:new Xn}},Yn.prototype.delete=function(e){var t=li(this,e).delete(e);return this.size-=t?1:0,t},Yn.prototype.get=function(e){return li(this,e).get(e)},Yn.prototype.has=function(e){return li(this,e).has(e)},Yn.prototype.set=function(e,t){var n=li(this,e),r=n.size;return n.set(e,t),this.size+=n.size==r?0:1,this},$n.prototype.add=$n.prototype.push=function(e){return this.__data__.set(e,a),this},$n.prototype.has=function(e){return this.__data__.has(e)},Zn.prototype.clear=function(){this.__data__=new Wn,this.size=0},Zn.prototype.delete=function(e){var t=this.__data__,n=t.delete(e);return this.size=t.size,n},Zn.prototype.get=function(e){return this.__data__.get(e)},Zn.prototype.has=function(e){return this.__data__.has(e)},Zn.prototype.set=function(e,t){var n=this.__data__;if(n instanceof Wn){var r=n.__data__;if(!En||r.length<199)return r.push([e,t]),this.size=++n.size,this;n=this.__data__=new Yn(r)}return n.set(e,t),this.size=n.size,this};var fr=jo(br),dr=jo(wr,!0);function pr(e,t){var n=!0;return fr(e,(function(e,r,o){return n=!!t(e,r,o)})),n}function hr(e,t,n){for(var r=-1,i=e.length;++r<i;){var a=e[r],u=t(a);if(null!=u&&(l===o?u==u&&!cu(u):n(u,l)))var l=u,c=a}return c}function vr(e,t){var n=[];return fr(e,(function(e,r,o){t(e,r,o)&&n.push(e)})),n}function yr(e,t,n,r,o){var i=-1,a=e.length;for(n||(n=yi),o||(o=[]);++i<a;){var u=e[i];t>0&&n(u)?t>1?yr(u,t-1,n,r,o):Ot(o,u):r||(o[o.length]=u)}return o}var gr=Do(),mr=Do(!0);function br(e,t){return e&&gr(e,t,ju)}function wr(e,t){return e&&mr(e,t,ju)}function _r(e,t){return St(t,(function(t){return Qa(e[t])}))}function Sr(e,t){for(var n=0,r=(t=mo(t,e)).length;null!=e&&n<r;)e=e[Ii(t[n++])];return n&&n==r?e:o}function xr(e,t,n){var r=t(e);return Wa(e)?r:Ot(r,n(e))}function Er(e){return null==e?e===o?"[object Undefined]":"[object Null]":ut&&ut in Ee(e)?function(e){var t=De.call(e,ut),n=e[ut];try{e[ut]=o;var r=!0}catch(e){}var i=Le.call(e);return r&&(t?e[ut]=n:delete e[ut]),i}(e):function(e){return Le.call(e)}(e)}function kr(e,t){return e>t}function Or(e,t){return null!=e&&De.call(e,t)}function Pr(e,t){return null!=e&&t in Ee(e)}function Cr(e,t,n){for(var i=n?Et:xt,a=e[0].length,u=e.length,l=u,c=r(u),s=1/0,f=[];l--;){var d=e[l];l&&t&&(d=kt(d,Vt(t))),s=mn(d.length,s),c[l]=!n&&(t||a>=120&&d.length>=120)?new $n(l&&d):o}d=e[0];var p=-1,h=c[0];e:for(;++p<a&&f.length<s;){var v=d[p],y=t?t(v):v;if(v=n||0!==v?v:0,!(h?Wt(h,y):i(f,y,n))){for(l=u;--l;){var g=c[l];if(!(g?Wt(g,y):i(e[l],y,n)))continue e}h&&h.push(y),f.push(v)}}return f}function Mr(e,t,n){var r=null==(e=Oi(e,t=mo(t,e)))?e:e[Ii(Ki(t))];return null==r?o:gt(r,e,n)}function Nr(e){return nu(e)&&Er(e)==v}function Tr(e,t,n,r,i){return e===t||(null==e||null==t||!nu(e)&&!nu(t)?e!=e&&t!=t:function(e,t,n,r,i,a){var u=Wa(e),l=Wa(t),c=u?y:pi(e),s=l?y:pi(t),f=(c=c==v?E:c)==E,d=(s=s==v?E:s)==E,p=c==s;if(p&&qa(e)){if(!qa(t))return!1;u=!0,f=!1}if(p&&!f)return a||(a=new Zn),u||su(e)?ei(e,t,n,r,i,a):function(e,t,n,r,o,i,a){switch(n){case j:if(e.byteLength!=t.byteLength||e.byteOffset!=t.byteOffset)return!1;e=e.buffer,t=t.buffer;case T:return!(e.byteLength!=t.byteLength||!i(new He(e),new He(t)));case g:case m:case x:return Fa(+e,+t);case b:return e.name==t.name&&e.message==t.message;case O:case C:return e==t+"";case S:var u=Jt;case P:var l=1&r;if(u||(u=nn),e.size!=t.size&&!l)return!1;var c=a.get(e);if(c)return c==t;r|=2,a.set(e,t);var s=ei(u(e),u(t),r,o,i,a);return a.delete(e),s;case M:if(zn)return zn.call(e)==zn.call(t)}return!1}(e,t,c,n,r,i,a);if(!(1&n)){var h=f&&De.call(e,"__wrapped__"),w=d&&De.call(t,"__wrapped__");if(h||w){var _=h?e.value():e,k=w?t.value():t;return a||(a=new Zn),i(_,k,n,r,a)}}return!!p&&(a||(a=new Zn),function(e,t,n,r,i,a){var u=1&n,l=ni(e),c=l.length;if(c!=ni(t).length&&!u)return!1;for(var s=c;s--;){var f=l[s];if(!(u?f in t:De.call(t,f)))return!1}var d=a.get(e),p=a.get(t);if(d&&p)return d==t&&p==e;var h=!0;a.set(e,t),a.set(t,e);for(var v=u;++s<c;){var y=e[f=l[s]],g=t[f];if(r)var m=u?r(g,y,f,t,e,a):r(y,g,f,e,t,a);if(!(m===o?y===g||i(y,g,n,r,a):m)){h=!1;break}v||(v="constructor"==f)}if(h&&!v){var b=e.constructor,w=t.constructor;b==w||!("constructor"in e)||!("constructor"in t)||"function"==typeof b&&b instanceof b&&"function"==typeof w&&w instanceof w||(h=!1)}return a.delete(e),a.delete(t),h}(e,t,n,r,i,a))}(e,t,n,r,Tr,i))}function jr(e,t,n,r){var i=n.length,a=i,u=!r;if(null==e)return!a;for(e=Ee(e);i--;){var l=n[i];if(u&&l[2]?l[1]!==e[l[0]]:!(l[0]in e))return!1}for(;++i<a;){var c=(l=n[i])[0],s=e[c],f=l[1];if(u&&l[2]){if(s===o&&!(c in e))return!1}else{var d=new Zn;if(r)var p=r(s,f,c,e,t,d);if(!(p===o?Tr(f,s,3,r,d):p))return!1}}return!0}function Dr(e){return!(!tu(e)||(t=e,Ae&&Ae in t))&&(Qa(e)?Be:ve).test(Bi(e));var t}function Rr(e){return"function"==typeof e?e:null==e?ol:"object"==typeof e?Wa(e)?Br(e[0],e[1]):Ir(e):pl(e)}function Ar(e){if(!Si(e))return yn(e);var t=[];for(var n in Ee(e))De.call(e,n)&&"constructor"!=n&&t.push(n);return t}function Lr(e,t){return e<t}function zr(e,t){var n=-1,o=$a(e)?r(e.length):[];return fr(e,(function(e,r,i){o[++n]=t(e,r,i)})),o}function Ir(e){var t=ci(e);return 1==t.length&&t[0][2]?Ei(t[0][0],t[0][1]):function(n){return n===e||jr(n,e,t)}}function Br(e,t){return bi(e)&&xi(t)?Ei(Ii(e),t):function(n){var r=Pu(n,e);return r===o&&r===t?Cu(n,e):Tr(t,r,3)}}function Ur(e,t,n,r,i){e!==t&&gr(t,(function(a,u){if(i||(i=new Zn),tu(a))!function(e,t,n,r,i,a,u){var l=Ci(e,n),c=Ci(t,n),s=u.get(c);if(s)Jn(e,n,s);else{var f=a?a(l,c,n+"",e,t,u):o,d=f===o;if(d){var p=Wa(c),h=!p&&qa(c),v=!p&&!h&&su(c);f=c,p||h||v?Wa(l)?f=l:Za(l)?f=Co(l):h?(d=!1,f=So(c,!0)):v?(d=!1,f=Eo(c,!0)):f=[]:iu(c)||Xa(c)?(f=l,Xa(l)?f=mu(l):tu(l)&&!Qa(l)||(f=vi(c))):d=!1}d&&(u.set(c,f),i(f,c,r,a,u),u.delete(c)),Jn(e,n,f)}}(e,t,u,n,Ur,r,i);else{var l=r?r(Ci(e,u),a,u+"",e,t,i):o;l===o&&(l=a),Jn(e,u,l)}}),Du)}function Fr(e,t){var n=e.length;if(n)return gi(t+=t<0?n:0,n)?e[t]:o}function Hr(e,t,n){t=t.length?kt(t,(function(e){return Wa(e)?function(t){return Sr(t,1===e.length?e[0]:e)}:e})):[ol];var r=-1;return t=kt(t,Vt(ui())),function(e,t){var r=e.length;for(e.sort((function(e,t){return function(e,t,n){for(var r=-1,o=e.criteria,i=t.criteria,a=o.length,u=n.length;++r<a;){var l=ko(o[r],i[r]);if(l)return r>=u?l:l*("desc"==n[r]?-1:1)}return e.index-t.index}(e,t,n)}));r--;)e[r]=e[r].value;return e}(zr(e,(function(e,n,o){return{criteria:kt(t,(function(t){return t(e)})),index:++r,value:e}})))}function Vr(e,t,n){for(var r=-1,o=t.length,i={};++r<o;){var a=t[r],u=Sr(e,a);n(u,a)&&Kr(i,mo(a,e),u)}return i}function Xr(e,t,n,r){var o=r?Rt:Dt,i=-1,a=t.length,u=e;for(e===t&&(t=Co(t)),n&&(u=kt(e,Vt(n)));++i<a;)for(var l=0,c=t[i],s=n?n(c):c;(l=o(u,s,l,r))>-1;)u!==e&&rt.call(u,l,1),rt.call(e,l,1);return e}function Wr(e,t){for(var n=e?t.length:0,r=n-1;n--;){var o=t[n];if(n==r||o!==i){var i=o;gi(o)?rt.call(e,o,1):co(e,o)}}return e}function Yr(e,t){return e+fn(_n()*(t-e+1))}function $r(e,t){var n="";if(!e||t<1||t>f)return n;do{t%2&&(n+=e),(t=fn(t/2))&&(e+=e)}while(t);return n}function Zr(e,t){return Ti(ki(e,t,ol),e+"")}function qr(e){return Gn(Fu(e))}function Gr(e,t){var n=Fu(e);return Ri(n,ar(t,0,n.length))}function Kr(e,t,n,r){if(!tu(e))return e;for(var i=-1,a=(t=mo(t,e)).length,u=a-1,l=e;null!=l&&++i<a;){var c=Ii(t[i]),s=n;if("__proto__"===c||"constructor"===c||"prototype"===c)return e;if(i!=u){var f=l[c];(s=r?r(f,c,l):o)===o&&(s=tu(f)?f:gi(t[i+1])?[]:{})}er(l,c,s),l=l[c]}return e}var Qr=Mn?function(e,t){return Mn.set(e,t),e}:ol,Jr=ct?function(e,t){return ct(e,"toString",{configurable:!0,enumerable:!1,value:tl(t),writable:!0})}:ol;function eo(e){return Ri(Fu(e))}function to(e,t,n){var o=-1,i=e.length;t<0&&(t=-t>i?0:i+t),(n=n>i?i:n)<0&&(n+=i),i=t>n?0:n-t>>>0,t>>>=0;for(var a=r(i);++o<i;)a[o]=e[o+t];return a}function no(e,t){var n;return fr(e,(function(e,r,o){return!(n=t(e,r,o))})),!!n}function ro(e,t,n){var r=0,o=null==e?r:e.length;if("number"==typeof t&&t==t&&o<=2147483647){for(;r<o;){var i=r+o>>>1,a=e[i];null!==a&&!cu(a)&&(n?a<=t:a<t)?r=i+1:o=i}return o}return oo(e,t,ol,n)}function oo(e,t,n,r){var i=0,a=null==e?0:e.length;if(0===a)return 0;for(var u=(t=n(t))!=t,l=null===t,c=cu(t),s=t===o;i<a;){var f=fn((i+a)/2),d=n(e[f]),p=d!==o,h=null===d,v=d==d,y=cu(d);if(u)var g=r||v;else g=s?v&&(r||p):l?v&&p&&(r||!h):c?v&&p&&!h&&(r||!y):!h&&!y&&(r?d<=t:d<t);g?i=f+1:a=f}return mn(a,4294967294)}function io(e,t){for(var n=-1,r=e.length,o=0,i=[];++n<r;){var a=e[n],u=t?t(a):a;if(!n||!Fa(u,l)){var l=u;i[o++]=0===a?0:a}}return i}function ao(e){return"number"==typeof e?e:cu(e)?d:+e}function uo(e){if("string"==typeof e)return e;if(Wa(e))return kt(e,uo)+"";if(cu(e))return In?In.call(e):"";var t=e+"";return"0"==t&&1/e==-1/0?"-0":t}function lo(e,t,n){var r=-1,o=xt,i=e.length,a=!0,u=[],l=u;if(n)a=!1,o=Et;else if(i>=200){var c=t?null:Zo(e);if(c)return nn(c);a=!1,o=Wt,l=new $n}else l=t?[]:u;e:for(;++r<i;){var s=e[r],f=t?t(s):s;if(s=n||0!==s?s:0,a&&f==f){for(var d=l.length;d--;)if(l[d]===f)continue e;t&&l.push(f),u.push(s)}else o(l,f,n)||(l!==u&&l.push(f),u.push(s))}return u}function co(e,t){return null==(e=Oi(e,t=mo(t,e)))||delete e[Ii(Ki(t))]}function so(e,t,n,r){return Kr(e,t,n(Sr(e,t)),r)}function fo(e,t,n,r){for(var o=e.length,i=r?o:-1;(r?i--:++i<o)&&t(e[i],i,e););return n?to(e,r?0:i,r?i+1:o):to(e,r?i+1:0,r?o:i)}function po(e,t){var n=e;return n instanceof Vn&&(n=n.value()),Pt(t,(function(e,t){return t.func.apply(t.thisArg,Ot([e],t.args))}),n)}function ho(e,t,n){var o=e.length;if(o<2)return o?lo(e[0]):[];for(var i=-1,a=r(o);++i<o;)for(var u=e[i],l=-1;++l<o;)l!=i&&(a[i]=sr(a[i]||u,e[l],t,n));return lo(yr(a,1),t,n)}function vo(e,t,n){for(var r=-1,i=e.length,a=t.length,u={};++r<i;){var l=r<a?t[r]:o;n(u,e[r],l)}return u}function yo(e){return Za(e)?e:[]}function go(e){return"function"==typeof e?e:ol}function mo(e,t){return Wa(e)?e:bi(e,t)?[e]:zi(bu(e))}var bo=Zr;function wo(e,t,n){var r=e.length;return n=n===o?r:n,!t&&n>=r?e:to(e,t,n)}var _o=st||function(e){return it.clearTimeout(e)};function So(e,t){if(t)return e.slice();var n=e.length,r=Ve?Ve(n):new e.constructor(n);return e.copy(r),r}function xo(e){var t=new e.constructor(e.byteLength);return new He(t).set(new He(e)),t}function Eo(e,t){var n=t?xo(e.buffer):e.buffer;return new e.constructor(n,e.byteOffset,e.length)}function ko(e,t){if(e!==t){var n=e!==o,r=null===e,i=e==e,a=cu(e),u=t!==o,l=null===t,c=t==t,s=cu(t);if(!l&&!s&&!a&&e>t||a&&u&&c&&!l&&!s||r&&u&&c||!n&&c||!i)return 1;if(!r&&!a&&!s&&e<t||s&&n&&i&&!r&&!a||l&&n&&i||!u&&i||!c)return-1}return 0}function Oo(e,t,n,o){for(var i=-1,a=e.length,u=n.length,l=-1,c=t.length,s=gn(a-u,0),f=r(c+s),d=!o;++l<c;)f[l]=t[l];for(;++i<u;)(d||i<a)&&(f[n[i]]=e[i]);for(;s--;)f[l++]=e[i++];return f}function Po(e,t,n,o){for(var i=-1,a=e.length,u=-1,l=n.length,c=-1,s=t.length,f=gn(a-l,0),d=r(f+s),p=!o;++i<f;)d[i]=e[i];for(var h=i;++c<s;)d[h+c]=t[c];for(;++u<l;)(p||i<a)&&(d[h+n[u]]=e[i++]);return d}function Co(e,t){var n=-1,o=e.length;for(t||(t=r(o));++n<o;)t[n]=e[n];return t}function Mo(e,t,n,r){var i=!n;n||(n={});for(var a=-1,u=t.length;++a<u;){var l=t[a],c=r?r(n[l],e[l],l,n,e):o;c===o&&(c=e[l]),i?or(n,l,c):er(n,l,c)}return n}function No(e,t){return function(n,r){var o=Wa(n)?mt:nr,i=t?t():{};return o(n,e,ui(r,2),i)}}function To(e){return Zr((function(t,n){var r=-1,i=n.length,a=i>1?n[i-1]:o,u=i>2?n[2]:o;for(a=e.length>3&&"function"==typeof a?(i--,a):o,u&&mi(n[0],n[1],u)&&(a=i<3?o:a,i=1),t=Ee(t);++r<i;){var l=n[r];l&&e(t,l,r,a)}return t}))}function jo(e,t){return function(n,r){if(null==n)return n;if(!$a(n))return e(n,r);for(var o=n.length,i=t?o:-1,a=Ee(n);(t?i--:++i<o)&&!1!==r(a[i],i,a););return n}}function Do(e){return function(t,n,r){for(var o=-1,i=Ee(t),a=r(t),u=a.length;u--;){var l=a[e?u:++o];if(!1===n(i[l],l,i))break}return t}}function Ro(e){return function(t){var n=Qt(t=bu(t))?an(t):o,r=n?n[0]:t.charAt(0),i=n?wo(n,1).join(""):t.slice(1);return r[e]()+i}}function Ao(e){return function(t){return Pt(Qu(Xu(t).replace(Xe,"")),e,"")}}function Lo(e){return function(){var t=arguments;switch(t.length){case 0:return new e;case 1:return new e(t[0]);case 2:return new e(t[0],t[1]);case 3:return new e(t[0],t[1],t[2]);case 4:return new e(t[0],t[1],t[2],t[3]);case 5:return new e(t[0],t[1],t[2],t[3],t[4]);case 6:return new e(t[0],t[1],t[2],t[3],t[4],t[5]);case 7:return new e(t[0],t[1],t[2],t[3],t[4],t[5],t[6])}var n=Un(e.prototype),r=e.apply(n,t);return tu(r)?r:n}}function zo(e){return function(t,n,r){var i=Ee(t);if(!$a(t)){var a=ui(n,3);t=ju(t),n=function(e){return a(i[e],e,i)}}var u=e(t,n,r);return u>-1?i[a?t[u]:u]:o}}function Io(e){return ti((function(t){var n=t.length,r=n,a=Hn.prototype.thru;for(e&&t.reverse();r--;){var u=t[r];if("function"!=typeof u)throw new Pe(i);if(a&&!l&&"wrapper"==ii(u))var l=new Hn([],!0)}for(r=l?r:n;++r<n;){var c=ii(u=t[r]),s="wrapper"==c?oi(u):o;l=s&&wi(s[0])&&424==s[1]&&!s[4].length&&1==s[9]?l[ii(s[0])].apply(l,s[3]):1==u.length&&wi(u)?l[c]():l.thru(u)}return function(){var e=arguments,r=e[0];if(l&&1==e.length&&Wa(r))return l.plant(r).value();for(var o=0,i=n?t[o].apply(this,e):r;++o<n;)i=t[o].call(this,i);return i}}))}function Bo(e,t,n,i,a,u,l,s,f,d){var p=t&c,h=1&t,v=2&t,y=24&t,g=512&t,m=v?o:Lo(e);return function o(){for(var c=arguments.length,b=r(c),w=c;w--;)b[w]=arguments[w];if(y)var _=ai(o),S=Zt(b,_);if(i&&(b=Oo(b,i,a,y)),u&&(b=Po(b,u,l,y)),c-=S,y&&c<d){var x=tn(b,_);return Yo(e,t,Bo,o.placeholder,n,b,x,s,f,d-c)}var E=h?n:this,k=v?E[e]:e;return c=b.length,s?b=Pi(b,s):g&&c>1&&b.reverse(),p&&f<c&&(b.length=f),this&&this!==it&&this instanceof o&&(k=m||Lo(k)),k.apply(E,b)}}function Uo(e,t){return function(n,r){return function(e,t,n,r){return br(e,(function(e,o,i){t(r,n(e),o,i)})),r}(n,e,t(r),{})}}function Fo(e,t){return function(n,r){var i;if(n===o&&r===o)return t;if(n!==o&&(i=n),r!==o){if(i===o)return r;"string"==typeof n||"string"==typeof r?(n=uo(n),r=uo(r)):(n=ao(n),r=ao(r)),i=e(n,r)}return i}}function Ho(e){return ti((function(t){return t=kt(t,Vt(ui())),Zr((function(n){var r=this;return e(t,(function(e){return gt(e,r,n)}))}))}))}function Vo(e,t){var n=(t=t===o?" ":uo(t)).length;if(n<2)return n?$r(t,e):t;var r=$r(t,sn(e/on(t)));return Qt(t)?wo(an(r),0,e).join(""):r.slice(0,e)}function Xo(e){return function(t,n,i){return i&&"number"!=typeof i&&mi(t,n,i)&&(n=i=o),t=hu(t),n===o?(n=t,t=0):n=hu(n),function(e,t,n,o){for(var i=-1,a=gn(sn((t-e)/(n||1)),0),u=r(a);a--;)u[o?a:++i]=e,e+=n;return u}(t,n,i=i===o?t<n?1:-1:hu(i),e)}}function Wo(e){return function(t,n){return"string"==typeof t&&"string"==typeof n||(t=gu(t),n=gu(n)),e(t,n)}}function Yo(e,t,n,r,i,a,u,c,s,f){var d=8&t;t|=d?l:64,4&(t&=~(d?64:l))||(t&=-4);var p=[e,t,i,d?a:o,d?u:o,d?o:a,d?o:u,c,s,f],h=n.apply(o,p);return wi(e)&&Mi(h,p),h.placeholder=r,ji(h,e,t)}function $o(e){var t=xe[e];return function(e,n){if(e=gu(e),(n=null==n?0:mn(vu(n),292))&&hn(e)){var r=(bu(e)+"e").split("e");return+((r=(bu(t(r[0]+"e"+(+r[1]+n)))+"e").split("e"))[0]+"e"+(+r[1]-n))}return t(e)}}var Zo=On&&1/nn(new On([,-0]))[1]==s?function(e){return new On(e)}:cl;function qo(e){return function(t){var n=pi(t);return n==S?Jt(t):n==P?rn(t):function(e,t){return kt(t,(function(t){return[t,e[t]]}))}(t,e(t))}}function Go(e,t,n,a,s,f,d,p){var h=2&t;if(!h&&"function"!=typeof e)throw new Pe(i);var v=a?a.length:0;if(v||(t&=-97,a=s=o),d=d===o?d:gn(vu(d),0),p=p===o?p:vu(p),v-=s?s.length:0,64&t){var y=a,g=s;a=s=o}var m=h?o:oi(e),b=[e,t,n,a,s,y,g,f,d,p];if(m&&function(e,t){var n=e[1],r=t[1],o=n|r,i=o<131,a=r==c&&8==n||r==c&&256==n&&e[7].length<=t[8]||384==r&&t[7].length<=t[8]&&8==n;if(!i&&!a)return e;1&r&&(e[2]=t[2],o|=1&n?0:4);var l=t[3];if(l){var s=e[3];e[3]=s?Oo(s,l,t[4]):l,e[4]=s?tn(e[3],u):t[4]}(l=t[5])&&(s=e[5],e[5]=s?Po(s,l,t[6]):l,e[6]=s?tn(e[5],u):t[6]),(l=t[7])&&(e[7]=l),r&c&&(e[8]=null==e[8]?t[8]:mn(e[8],t[8])),null==e[9]&&(e[9]=t[9]),e[0]=t[0],e[1]=o}(b,m),e=b[0],t=b[1],n=b[2],a=b[3],s=b[4],!(p=b[9]=b[9]===o?h?0:e.length:gn(b[9]-v,0))&&24&t&&(t&=-25),t&&1!=t)w=8==t||16==t?function(e,t,n){var i=Lo(e);return function a(){for(var u=arguments.length,l=r(u),c=u,s=ai(a);c--;)l[c]=arguments[c];var f=u<3&&l[0]!==s&&l[u-1]!==s?[]:tn(l,s);return(u-=f.length)<n?Yo(e,t,Bo,a.placeholder,o,l,f,o,o,n-u):gt(this&&this!==it&&this instanceof a?i:e,this,l)}}(e,t,p):t!=l&&33!=t||s.length?Bo.apply(o,b):function(e,t,n,o){var i=1&t,a=Lo(e);return function t(){for(var u=-1,l=arguments.length,c=-1,s=o.length,f=r(s+l),d=this&&this!==it&&this instanceof t?a:e;++c<s;)f[c]=o[c];for(;l--;)f[c++]=arguments[++u];return gt(d,i?n:this,f)}}(e,t,n,a);else var w=function(e,t,n){var r=1&t,o=Lo(e);return function t(){return(this&&this!==it&&this instanceof t?o:e).apply(r?n:this,arguments)}}(e,t,n);return ji((m?Qr:Mi)(w,b),e,t)}function Ko(e,t,n,r){return e===o||Fa(e,Ne[n])&&!De.call(r,n)?t:e}function Qo(e,t,n,r,i,a){return tu(e)&&tu(t)&&(a.set(t,e),Ur(e,t,o,Qo,a),a.delete(t)),e}function Jo(e){return iu(e)?o:e}function ei(e,t,n,r,i,a){var u=1&n,l=e.length,c=t.length;if(l!=c&&!(u&&c>l))return!1;var s=a.get(e),f=a.get(t);if(s&&f)return s==t&&f==e;var d=-1,p=!0,h=2&n?new $n:o;for(a.set(e,t),a.set(t,e);++d<l;){var v=e[d],y=t[d];if(r)var g=u?r(y,v,d,t,e,a):r(v,y,d,e,t,a);if(g!==o){if(g)continue;p=!1;break}if(h){if(!Mt(t,(function(e,t){if(!Wt(h,t)&&(v===e||i(v,e,n,r,a)))return h.push(t)}))){p=!1;break}}else if(v!==y&&!i(v,y,n,r,a)){p=!1;break}}return a.delete(e),a.delete(t),p}function ti(e){return Ti(ki(e,o,Yi),e+"")}function ni(e){return xr(e,ju,fi)}function ri(e){return xr(e,Du,di)}var oi=Mn?function(e){return Mn.get(e)}:cl;function ii(e){for(var t=e.name+"",n=Nn[t],r=De.call(Nn,t)?n.length:0;r--;){var o=n[r],i=o.func;if(null==i||i==e)return o.name}return t}function ai(e){return(De.call(Bn,"placeholder")?Bn:e).placeholder}function ui(){var e=Bn.iteratee||il;return e=e===il?Rr:e,arguments.length?e(arguments[0],arguments[1]):e}function li(e,t){var n,r,o=e.__data__;return("string"==(r=typeof(n=t))||"number"==r||"symbol"==r||"boolean"==r?"__proto__"!==n:null===n)?o["string"==typeof t?"string":"hash"]:o.map}function ci(e){for(var t=ju(e),n=t.length;n--;){var r=t[n],o=e[r];t[n]=[r,o,xi(o)]}return t}function si(e,t){var n=function(e,t){return null==e?o:e[t]}(e,t);return Dr(n)?n:o}var fi=dn?function(e){return null==e?[]:(e=Ee(e),St(dn(e),(function(t){return et.call(e,t)})))}:yl,di=dn?function(e){for(var t=[];e;)Ot(t,fi(e)),e=Ye(e);return t}:yl,pi=Er;function hi(e,t,n){for(var r=-1,o=(t=mo(t,e)).length,i=!1;++r<o;){var a=Ii(t[r]);if(!(i=null!=e&&n(e,a)))break;e=e[a]}return i||++r!=o?i:!!(o=null==e?0:e.length)&&eu(o)&&gi(a,o)&&(Wa(e)||Xa(e))}function vi(e){return"function"!=typeof e.constructor||Si(e)?{}:Un(Ye(e))}function yi(e){return Wa(e)||Xa(e)||!!(ot&&e&&e[ot])}function gi(e,t){var n=typeof e;return!!(t=null==t?f:t)&&("number"==n||"symbol"!=n&&ge.test(e))&&e>-1&&e%1==0&&e<t}function mi(e,t,n){if(!tu(n))return!1;var r=typeof t;return!!("number"==r?$a(n)&&gi(t,n.length):"string"==r&&t in n)&&Fa(n[t],e)}function bi(e,t){if(Wa(e))return!1;var n=typeof e;return!("number"!=n&&"symbol"!=n&&"boolean"!=n&&null!=e&&!cu(e))||J.test(e)||!Q.test(e)||null!=t&&e in Ee(t)}function wi(e){var t=ii(e),n=Bn[t];if("function"!=typeof n||!(t in Vn.prototype))return!1;if(e===n)return!0;var r=oi(n);return!!r&&e===r[0]}(xn&&pi(new xn(new ArrayBuffer(1)))!=j||En&&pi(new En)!=S||kn&&pi(kn.resolve())!=k||On&&pi(new On)!=P||Pn&&pi(new Pn)!=N)&&(pi=function(e){var t=Er(e),n=t==E?e.constructor:o,r=n?Bi(n):"";if(r)switch(r){case Tn:return j;case jn:return S;case Dn:return k;case Rn:return P;case An:return N}return t});var _i=Te?Qa:gl;function Si(e){var t=e&&e.constructor;return e===("function"==typeof t&&t.prototype||Ne)}function xi(e){return e==e&&!tu(e)}function Ei(e,t){return function(n){return null!=n&&n[e]===t&&(t!==o||e in Ee(n))}}function ki(e,t,n){return t=gn(t===o?e.length-1:t,0),function(){for(var o=arguments,i=-1,a=gn(o.length-t,0),u=r(a);++i<a;)u[i]=o[t+i];i=-1;for(var l=r(t+1);++i<t;)l[i]=o[i];return l[t]=n(u),gt(e,this,l)}}function Oi(e,t){return t.length<2?e:Sr(e,to(t,0,-1))}function Pi(e,t){for(var n=e.length,r=mn(t.length,n),i=Co(e);r--;){var a=t[r];e[r]=gi(a,n)?i[a]:o}return e}function Ci(e,t){if(("constructor"!==t||"function"!=typeof e[t])&&"__proto__"!=t)return e[t]}var Mi=Di(Qr),Ni=It||function(e,t){return it.setTimeout(e,t)},Ti=Di(Jr);function ji(e,t,n){var r=t+"";return Ti(e,function(e,t){var n=t.length;if(!n)return e;var r=n-1;return t[r]=(n>1?"& ":"")+t[r],t=t.join(n>2?", ":" "),e.replace(ie,"{\n/* [wrapped with "+t+"] */\n")}(r,function(e,t){return bt(h,(function(n){var r="_."+n[0];t&n[1]&&!xt(e,r)&&e.push(r)})),e.sort()}(function(e){var t=e.match(ae);return t?t[1].split(ue):[]}(r),n)))}function Di(e){var t=0,n=0;return function(){var r=bn(),i=16-(r-n);if(n=r,i>0){if(++t>=800)return arguments[0]}else t=0;return e.apply(o,arguments)}}function Ri(e,t){var n=-1,r=e.length,i=r-1;for(t=t===o?r:t;++n<t;){var a=Yr(n,i),u=e[a];e[a]=e[n],e[n]=u}return e.length=t,e}var Ai,Li,zi=(Ai=Aa((function(e){var t=[];return 46===e.charCodeAt(0)&&t.push(""),e.replace(ee,(function(e,n,r,o){t.push(r?o.replace(se,"$1"):n||e)})),t}),(function(e){return 500===Li.size&&Li.clear(),e})),Li=Ai.cache,Ai);function Ii(e){if("string"==typeof e||cu(e))return e;var t=e+"";return"0"==t&&1/e==-1/0?"-0":t}function Bi(e){if(null!=e){try{return je.call(e)}catch(e){}try{return e+""}catch(e){}}return""}function Ui(e){if(e instanceof Vn)return e.clone();var t=new Hn(e.__wrapped__,e.__chain__);return t.__actions__=Co(e.__actions__),t.__index__=e.__index__,t.__values__=e.__values__,t}var Fi=Zr((function(e,t){return Za(e)?sr(e,yr(t,1,Za,!0)):[]})),Hi=Zr((function(e,t){var n=Ki(t);return Za(n)&&(n=o),Za(e)?sr(e,yr(t,1,Za,!0),ui(n,2)):[]})),Vi=Zr((function(e,t){var n=Ki(t);return Za(n)&&(n=o),Za(e)?sr(e,yr(t,1,Za,!0),o,n):[]}));function Xi(e,t,n){var r=null==e?0:e.length;if(!r)return-1;var o=null==n?0:vu(n);return o<0&&(o=gn(r+o,0)),jt(e,ui(t,3),o)}function Wi(e,t,n){var r=null==e?0:e.length;if(!r)return-1;var i=r-1;return n!==o&&(i=vu(n),i=n<0?gn(r+i,0):mn(i,r-1)),jt(e,ui(t,3),i,!0)}function Yi(e){return null!=e&&e.length?yr(e,1):[]}function $i(e){return e&&e.length?e[0]:o}var Zi=Zr((function(e){var t=kt(e,yo);return t.length&&t[0]===e[0]?Cr(t):[]})),qi=Zr((function(e){var t=Ki(e),n=kt(e,yo);return t===Ki(n)?t=o:n.pop(),n.length&&n[0]===e[0]?Cr(n,ui(t,2)):[]})),Gi=Zr((function(e){var t=Ki(e),n=kt(e,yo);return(t="function"==typeof t?t:o)&&n.pop(),n.length&&n[0]===e[0]?Cr(n,o,t):[]}));function Ki(e){var t=null==e?0:e.length;return t?e[t-1]:o}var Qi=Zr(Ji);function Ji(e,t){return e&&e.length&&t&&t.length?Xr(e,t):e}var ea=ti((function(e,t){var n=null==e?0:e.length,r=ir(e,t);return Wr(e,kt(t,(function(e){return gi(e,n)?+e:e})).sort(ko)),r}));function ta(e){return null==e?e:Sn.call(e)}var na=Zr((function(e){return lo(yr(e,1,Za,!0))})),ra=Zr((function(e){var t=Ki(e);return Za(t)&&(t=o),lo(yr(e,1,Za,!0),ui(t,2))})),oa=Zr((function(e){var t=Ki(e);return t="function"==typeof t?t:o,lo(yr(e,1,Za,!0),o,t)}));function ia(e){if(!e||!e.length)return[];var t=0;return e=St(e,(function(e){if(Za(e))return t=gn(e.length,t),!0})),Ft(t,(function(t){return kt(e,zt(t))}))}function aa(e,t){if(!e||!e.length)return[];var n=ia(e);return null==t?n:kt(n,(function(e){return gt(t,o,e)}))}var ua=Zr((function(e,t){return Za(e)?sr(e,t):[]})),la=Zr((function(e){return ho(St(e,Za))})),ca=Zr((function(e){var t=Ki(e);return Za(t)&&(t=o),ho(St(e,Za),ui(t,2))})),sa=Zr((function(e){var t=Ki(e);return t="function"==typeof t?t:o,ho(St(e,Za),o,t)})),fa=Zr(ia),da=Zr((function(e){var t=e.length,n=t>1?e[t-1]:o;return n="function"==typeof n?(e.pop(),n):o,aa(e,n)}));function pa(e){var t=Bn(e);return t.__chain__=!0,t}function ha(e,t){return t(e)}var va=ti((function(e){var t=e.length,n=t?e[0]:0,r=this.__wrapped__,i=function(t){return ir(t,e)};return!(t>1||this.__actions__.length)&&r instanceof Vn&&gi(n)?((r=r.slice(n,+n+(t?1:0))).__actions__.push({func:ha,args:[i],thisArg:o}),new Hn(r,this.__chain__).thru((function(e){return t&&!e.length&&e.push(o),e}))):this.thru(i)})),ya=No((function(e,t,n){De.call(e,n)?++e[n]:or(e,n,1)})),ga=zo(Xi),ma=zo(Wi);function ba(e,t){return(Wa(e)?bt:fr)(e,ui(t,3))}function wa(e,t){return(Wa(e)?wt:dr)(e,ui(t,3))}var _a=No((function(e,t,n){De.call(e,n)?e[n].push(t):or(e,n,[t])})),Sa=Zr((function(e,t,n){var o=-1,i="function"==typeof t,a=$a(e)?r(e.length):[];return fr(e,(function(e){a[++o]=i?gt(t,e,n):Mr(e,t,n)})),a})),xa=No((function(e,t,n){or(e,n,t)}));function Ea(e,t){return(Wa(e)?kt:zr)(e,ui(t,3))}var ka=No((function(e,t,n){e[n?0:1].push(t)}),(function(){return[[],[]]})),Oa=Zr((function(e,t){if(null==e)return[];var n=t.length;return n>1&&mi(e,t[0],t[1])?t=[]:n>2&&mi(t[0],t[1],t[2])&&(t=[t[0]]),Hr(e,yr(t,1),[])})),Pa=Nt||function(){return it.Date.now()};function Ca(e,t,n){return t=n?o:t,t=e&&null==t?e.length:t,Go(e,c,o,o,o,o,t)}function Ma(e,t){var n;if("function"!=typeof t)throw new Pe(i);return e=vu(e),function(){return--e>0&&(n=t.apply(this,arguments)),e<=1&&(t=o),n}}var Na=Zr((function(e,t,n){var r=1;if(n.length){var o=tn(n,ai(Na));r|=l}return Go(e,r,t,n,o)})),Ta=Zr((function(e,t,n){var r=3;if(n.length){var o=tn(n,ai(Ta));r|=l}return Go(t,r,e,n,o)}));function ja(e,t,n){var r,a,u,l,c,s,f=0,d=!1,p=!1,h=!0;if("function"!=typeof e)throw new Pe(i);function v(t){var n=r,i=a;return r=a=o,f=t,l=e.apply(i,n)}function y(e){return f=e,c=Ni(m,t),d?v(e):l}function g(e){var n=e-s;return s===o||n>=t||n<0||p&&e-f>=u}function m(){var e=Pa();if(g(e))return b(e);c=Ni(m,function(e){var n=t-(e-s);return p?mn(n,u-(e-f)):n}(e))}function b(e){return c=o,h&&r?v(e):(r=a=o,l)}function w(){var e=Pa(),n=g(e);if(r=arguments,a=this,s=e,n){if(c===o)return y(s);if(p)return _o(c),c=Ni(m,t),v(s)}return c===o&&(c=Ni(m,t)),l}return t=gu(t)||0,tu(n)&&(d=!!n.leading,u=(p="maxWait"in n)?gn(gu(n.maxWait)||0,t):u,h="trailing"in n?!!n.trailing:h),w.cancel=function(){c!==o&&_o(c),f=0,r=s=a=c=o},w.flush=function(){return c===o?l:b(Pa())},w}var Da=Zr((function(e,t){return cr(e,1,t)})),Ra=Zr((function(e,t,n){return cr(e,gu(t)||0,n)}));function Aa(e,t){if("function"!=typeof e||null!=t&&"function"!=typeof t)throw new Pe(i);var n=function(){var r=arguments,o=t?t.apply(this,r):r[0],i=n.cache;if(i.has(o))return i.get(o);var a=e.apply(this,r);return n.cache=i.set(o,a)||i,a};return n.cache=new(Aa.Cache||Yn),n}function La(e){if("function"!=typeof e)throw new Pe(i);return function(){var t=arguments;switch(t.length){case 0:return!e.call(this);case 1:return!e.call(this,t[0]);case 2:return!e.call(this,t[0],t[1]);case 3:return!e.call(this,t[0],t[1],t[2])}return!e.apply(this,t)}}Aa.Cache=Yn;var za=bo((function(e,t){var n=(t=1==t.length&&Wa(t[0])?kt(t[0],Vt(ui())):kt(yr(t,1),Vt(ui()))).length;return Zr((function(r){for(var o=-1,i=mn(r.length,n);++o<i;)r[o]=t[o].call(this,r[o]);return gt(e,this,r)}))})),Ia=Zr((function(e,t){var n=tn(t,ai(Ia));return Go(e,l,o,t,n)})),Ba=Zr((function(e,t){var n=tn(t,ai(Ba));return Go(e,64,o,t,n)})),Ua=ti((function(e,t){return Go(e,256,o,o,o,t)}));function Fa(e,t){return e===t||e!=e&&t!=t}var Ha=Wo(kr),Va=Wo((function(e,t){return e>=t})),Xa=Nr(function(){return arguments}())?Nr:function(e){return nu(e)&&De.call(e,"callee")&&!et.call(e,"callee")},Wa=r.isArray,Ya=ft?Vt(ft):function(e){return nu(e)&&Er(e)==T};function $a(e){return null!=e&&eu(e.length)&&!Qa(e)}function Za(e){return nu(e)&&$a(e)}var qa=pn||gl,Ga=dt?Vt(dt):function(e){return nu(e)&&Er(e)==m};function Ka(e){if(!nu(e))return!1;var t=Er(e);return t==b||"[object DOMException]"==t||"string"==typeof e.message&&"string"==typeof e.name&&!iu(e)}function Qa(e){if(!tu(e))return!1;var t=Er(e);return t==w||t==_||"[object AsyncFunction]"==t||"[object Proxy]"==t}function Ja(e){return"number"==typeof e&&e==vu(e)}function eu(e){return"number"==typeof e&&e>-1&&e%1==0&&e<=f}function tu(e){var t=typeof e;return null!=e&&("object"==t||"function"==t)}function nu(e){return null!=e&&"object"==typeof e}var ru=pt?Vt(pt):function(e){return nu(e)&&pi(e)==S};function ou(e){return"number"==typeof e||nu(e)&&Er(e)==x}function iu(e){if(!nu(e)||Er(e)!=E)return!1;var t=Ye(e);if(null===t)return!0;var n=De.call(t,"constructor")&&t.constructor;return"function"==typeof n&&n instanceof n&&je.call(n)==ze}var au=ht?Vt(ht):function(e){return nu(e)&&Er(e)==O},uu=vt?Vt(vt):function(e){return nu(e)&&pi(e)==P};function lu(e){return"string"==typeof e||!Wa(e)&&nu(e)&&Er(e)==C}function cu(e){return"symbol"==typeof e||nu(e)&&Er(e)==M}var su=yt?Vt(yt):function(e){return nu(e)&&eu(e.length)&&!!Qe[Er(e)]},fu=Wo(Lr),du=Wo((function(e,t){return e<=t}));function pu(e){if(!e)return[];if($a(e))return lu(e)?an(e):Co(e);if(at&&e[at])return function(e){for(var t,n=[];!(t=e.next()).done;)n.push(t.value);return n}(e[at]());var t=pi(e);return(t==S?Jt:t==P?nn:Fu)(e)}function hu(e){return e?(e=gu(e))===s||e===-1/0?17976931348623157e292*(e<0?-1:1):e==e?e:0:0===e?e:0}function vu(e){var t=hu(e),n=t%1;return t==t?n?t-n:t:0}function yu(e){return e?ar(vu(e),0,p):0}function gu(e){if("number"==typeof e)return e;if(cu(e))return d;if(tu(e)){var t="function"==typeof e.valueOf?e.valueOf():e;e=tu(t)?t+"":t}if("string"!=typeof e)return 0===e?e:+e;e=Ht(e);var n=he.test(e);return n||ye.test(e)?nt(e.slice(2),n?2:8):pe.test(e)?d:+e}function mu(e){return Mo(e,Du(e))}function bu(e){return null==e?"":uo(e)}var wu=To((function(e,t){if(Si(t)||$a(t))Mo(t,ju(t),e);else for(var n in t)De.call(t,n)&&er(e,n,t[n])})),_u=To((function(e,t){Mo(t,Du(t),e)})),Su=To((function(e,t,n,r){Mo(t,Du(t),e,r)})),xu=To((function(e,t,n,r){Mo(t,ju(t),e,r)})),Eu=ti(ir),ku=Zr((function(e,t){e=Ee(e);var n=-1,r=t.length,i=r>2?t[2]:o;for(i&&mi(t[0],t[1],i)&&(r=1);++n<r;)for(var a=t[n],u=Du(a),l=-1,c=u.length;++l<c;){var s=u[l],f=e[s];(f===o||Fa(f,Ne[s])&&!De.call(e,s))&&(e[s]=a[s])}return e})),Ou=Zr((function(e){return e.push(o,Qo),gt(Au,o,e)}));function Pu(e,t,n){var r=null==e?o:Sr(e,t);return r===o?n:r}function Cu(e,t){return null!=e&&hi(e,t,Pr)}var Mu=Uo((function(e,t,n){null!=t&&"function"!=typeof t.toString&&(t=Le.call(t)),e[t]=n}),tl(ol)),Nu=Uo((function(e,t,n){null!=t&&"function"!=typeof t.toString&&(t=Le.call(t)),De.call(e,t)?e[t].push(n):e[t]=[n]}),ui),Tu=Zr(Mr);function ju(e){return $a(e)?qn(e):Ar(e)}function Du(e){return $a(e)?qn(e,!0):function(e){if(!tu(e))return function(e){var t=[];if(null!=e)for(var n in Ee(e))t.push(n);return t}(e);var t=Si(e),n=[];for(var r in e)("constructor"!=r||!t&&De.call(e,r))&&n.push(r);return n}(e)}var Ru=To((function(e,t,n){Ur(e,t,n)})),Au=To((function(e,t,n,r){Ur(e,t,n,r)})),Lu=ti((function(e,t){var n={};if(null==e)return n;var r=!1;t=kt(t,(function(t){return t=mo(t,e),r||(r=t.length>1),t})),Mo(e,ri(e),n),r&&(n=ur(n,7,Jo));for(var o=t.length;o--;)co(n,t[o]);return n})),zu=ti((function(e,t){return null==e?{}:function(e,t){return Vr(e,t,(function(t,n){return Cu(e,n)}))}(e,t)}));function Iu(e,t){if(null==e)return{};var n=kt(ri(e),(function(e){return[e]}));return t=ui(t),Vr(e,n,(function(e,n){return t(e,n[0])}))}var Bu=qo(ju),Uu=qo(Du);function Fu(e){return null==e?[]:Xt(e,ju(e))}var Hu=Ao((function(e,t,n){return t=t.toLowerCase(),e+(n?Vu(t):t)}));function Vu(e){return Ku(bu(e).toLowerCase())}function Xu(e){return(e=bu(e))&&e.replace(me,qt).replace(We,"")}var Wu=Ao((function(e,t,n){return e+(n?"-":"")+t.toLowerCase()})),Yu=Ao((function(e,t,n){return e+(n?" ":"")+t.toLowerCase()})),$u=Ro("toLowerCase"),Zu=Ao((function(e,t,n){return e+(n?"_":"")+t.toLowerCase()})),qu=Ao((function(e,t,n){return e+(n?" ":"")+Ku(t)})),Gu=Ao((function(e,t,n){return e+(n?" ":"")+t.toUpperCase()})),Ku=Ro("toUpperCase");function Qu(e,t,n){return e=bu(e),(t=n?o:t)===o?function(e){return qe.test(e)}(e)?function(e){return e.match($e)||[]}(e):function(e){return e.match(le)||[]}(e):e.match(t)||[]}var Ju=Zr((function(e,t){try{return gt(e,o,t)}catch(e){return Ka(e)?e:new _e(e)}})),el=ti((function(e,t){return bt(t,(function(t){t=Ii(t),or(e,t,Na(e[t],e))})),e}));function tl(e){return function(){return e}}var nl=Io(),rl=Io(!0);function ol(e){return e}function il(e){return Rr("function"==typeof e?e:ur(e,1))}var al=Zr((function(e,t){return function(n){return Mr(n,e,t)}})),ul=Zr((function(e,t){return function(n){return Mr(e,n,t)}}));function ll(e,t,n){var r=ju(t),o=_r(t,r);null!=n||tu(t)&&(o.length||!r.length)||(n=t,t=e,e=this,o=_r(t,ju(t)));var i=!(tu(n)&&"chain"in n&&!n.chain),a=Qa(e);return bt(o,(function(n){var r=t[n];e[n]=r,a&&(e.prototype[n]=function(){var t=this.__chain__;if(i||t){var n=e(this.__wrapped__),o=n.__actions__=Co(this.__actions__);return o.push({func:r,args:arguments,thisArg:e}),n.__chain__=t,n}return r.apply(e,Ot([this.value()],arguments))})})),e}function cl(){}var sl=Ho(kt),fl=Ho(_t),dl=Ho(Mt);function pl(e){return bi(e)?zt(Ii(e)):function(e){return function(t){return Sr(t,e)}}(e)}var hl=Xo(),vl=Xo(!0);function yl(){return[]}function gl(){return!1}var ml,bl=Fo((function(e,t){return e+t}),0),wl=$o("ceil"),_l=Fo((function(e,t){return e/t}),1),Sl=$o("floor"),xl=Fo((function(e,t){return e*t}),1),El=$o("round"),kl=Fo((function(e,t){return e-t}),0);return Bn.after=function(e,t){if("function"!=typeof t)throw new Pe(i);return e=vu(e),function(){if(--e<1)return t.apply(this,arguments)}},Bn.ary=Ca,Bn.assign=wu,Bn.assignIn=_u,Bn.assignInWith=Su,Bn.assignWith=xu,Bn.at=Eu,Bn.before=Ma,Bn.bind=Na,Bn.bindAll=el,Bn.bindKey=Ta,Bn.castArray=function(){if(!arguments.length)return[];var e=arguments[0];return Wa(e)?e:[e]},Bn.chain=pa,Bn.chunk=function(e,t,n){t=(n?mi(e,t,n):t===o)?1:gn(vu(t),0);var i=null==e?0:e.length;if(!i||t<1)return[];for(var a=0,u=0,l=r(sn(i/t));a<i;)l[u++]=to(e,a,a+=t);return l},Bn.compact=function(e){for(var t=-1,n=null==e?0:e.length,r=0,o=[];++t<n;){var i=e[t];i&&(o[r++]=i)}return o},Bn.concat=function(){var e=arguments.length;if(!e)return[];for(var t=r(e-1),n=arguments[0],o=e;o--;)t[o-1]=arguments[o];return Ot(Wa(n)?Co(n):[n],yr(t,1))},Bn.cond=function(e){var t=null==e?0:e.length,n=ui();return e=t?kt(e,(function(e){if("function"!=typeof e[1])throw new Pe(i);return[n(e[0]),e[1]]})):[],Zr((function(n){for(var r=-1;++r<t;){var o=e[r];if(gt(o[0],this,n))return gt(o[1],this,n)}}))},Bn.conforms=function(e){return function(e){var t=ju(e);return function(n){return lr(n,e,t)}}(ur(e,1))},Bn.constant=tl,Bn.countBy=ya,Bn.create=function(e,t){var n=Un(e);return null==t?n:rr(n,t)},Bn.curry=function e(t,n,r){var i=Go(t,8,o,o,o,o,o,n=r?o:n);return i.placeholder=e.placeholder,i},Bn.curryRight=function e(t,n,r){var i=Go(t,16,o,o,o,o,o,n=r?o:n);return i.placeholder=e.placeholder,i},Bn.debounce=ja,Bn.defaults=ku,Bn.defaultsDeep=Ou,Bn.defer=Da,Bn.delay=Ra,Bn.difference=Fi,Bn.differenceBy=Hi,Bn.differenceWith=Vi,Bn.drop=function(e,t,n){var r=null==e?0:e.length;return r?to(e,(t=n||t===o?1:vu(t))<0?0:t,r):[]},Bn.dropRight=function(e,t,n){var r=null==e?0:e.length;return r?to(e,0,(t=r-(t=n||t===o?1:vu(t)))<0?0:t):[]},Bn.dropRightWhile=function(e,t){return e&&e.length?fo(e,ui(t,3),!0,!0):[]},Bn.dropWhile=function(e,t){return e&&e.length?fo(e,ui(t,3),!0):[]},Bn.fill=function(e,t,n,r){var i=null==e?0:e.length;return i?(n&&"number"!=typeof n&&mi(e,t,n)&&(n=0,r=i),function(e,t,n,r){var i=e.length;for((n=vu(n))<0&&(n=-n>i?0:i+n),(r=r===o||r>i?i:vu(r))<0&&(r+=i),r=n>r?0:yu(r);n<r;)e[n++]=t;return e}(e,t,n,r)):[]},Bn.filter=function(e,t){return(Wa(e)?St:vr)(e,ui(t,3))},Bn.flatMap=function(e,t){return yr(Ea(e,t),1)},Bn.flatMapDeep=function(e,t){return yr(Ea(e,t),s)},Bn.flatMapDepth=function(e,t,n){return n=n===o?1:vu(n),yr(Ea(e,t),n)},Bn.flatten=Yi,Bn.flattenDeep=function(e){return null!=e&&e.length?yr(e,s):[]},Bn.flattenDepth=function(e,t){return null!=e&&e.length?yr(e,t=t===o?1:vu(t)):[]},Bn.flip=function(e){return Go(e,512)},Bn.flow=nl,Bn.flowRight=rl,Bn.fromPairs=function(e){for(var t=-1,n=null==e?0:e.length,r={};++t<n;){var o=e[t];r[o[0]]=o[1]}return r},Bn.functions=function(e){return null==e?[]:_r(e,ju(e))},Bn.functionsIn=function(e){return null==e?[]:_r(e,Du(e))},Bn.groupBy=_a,Bn.initial=function(e){return null!=e&&e.length?to(e,0,-1):[]},Bn.intersection=Zi,Bn.intersectionBy=qi,Bn.intersectionWith=Gi,Bn.invert=Mu,Bn.invertBy=Nu,Bn.invokeMap=Sa,Bn.iteratee=il,Bn.keyBy=xa,Bn.keys=ju,Bn.keysIn=Du,Bn.map=Ea,Bn.mapKeys=function(e,t){var n={};return t=ui(t,3),br(e,(function(e,r,o){or(n,t(e,r,o),e)})),n},Bn.mapValues=function(e,t){var n={};return t=ui(t,3),br(e,(function(e,r,o){or(n,r,t(e,r,o))})),n},Bn.matches=function(e){return Ir(ur(e,1))},Bn.matchesProperty=function(e,t){return Br(e,ur(t,1))},Bn.memoize=Aa,Bn.merge=Ru,Bn.mergeWith=Au,Bn.method=al,Bn.methodOf=ul,Bn.mixin=ll,Bn.negate=La,Bn.nthArg=function(e){return e=vu(e),Zr((function(t){return Fr(t,e)}))},Bn.omit=Lu,Bn.omitBy=function(e,t){return Iu(e,La(ui(t)))},Bn.once=function(e){return Ma(2,e)},Bn.orderBy=function(e,t,n,r){return null==e?[]:(Wa(t)||(t=null==t?[]:[t]),Wa(n=r?o:n)||(n=null==n?[]:[n]),Hr(e,t,n))},Bn.over=sl,Bn.overArgs=za,Bn.overEvery=fl,Bn.overSome=dl,Bn.partial=Ia,Bn.partialRight=Ba,Bn.partition=ka,Bn.pick=zu,Bn.pickBy=Iu,Bn.property=pl,Bn.propertyOf=function(e){return function(t){return null==e?o:Sr(e,t)}},Bn.pull=Qi,Bn.pullAll=Ji,Bn.pullAllBy=function(e,t,n){return e&&e.length&&t&&t.length?Xr(e,t,ui(n,2)):e},Bn.pullAllWith=function(e,t,n){return e&&e.length&&t&&t.length?Xr(e,t,o,n):e},Bn.pullAt=ea,Bn.range=hl,Bn.rangeRight=vl,Bn.rearg=Ua,Bn.reject=function(e,t){return(Wa(e)?St:vr)(e,La(ui(t,3)))},Bn.remove=function(e,t){var n=[];if(!e||!e.length)return n;var r=-1,o=[],i=e.length;for(t=ui(t,3);++r<i;){var a=e[r];t(a,r,e)&&(n.push(a),o.push(r))}return Wr(e,o),n},Bn.rest=function(e,t){if("function"!=typeof e)throw new Pe(i);return Zr(e,t=t===o?t:vu(t))},Bn.reverse=ta,Bn.sampleSize=function(e,t,n){return t=(n?mi(e,t,n):t===o)?1:vu(t),(Wa(e)?Kn:Gr)(e,t)},Bn.set=function(e,t,n){return null==e?e:Kr(e,t,n)},Bn.setWith=function(e,t,n,r){return r="function"==typeof r?r:o,null==e?e:Kr(e,t,n,r)},Bn.shuffle=function(e){return(Wa(e)?Qn:eo)(e)},Bn.slice=function(e,t,n){var r=null==e?0:e.length;return r?(n&&"number"!=typeof n&&mi(e,t,n)?(t=0,n=r):(t=null==t?0:vu(t),n=n===o?r:vu(n)),to(e,t,n)):[]},Bn.sortBy=Oa,Bn.sortedUniq=function(e){return e&&e.length?io(e):[]},Bn.sortedUniqBy=function(e,t){return e&&e.length?io(e,ui(t,2)):[]},Bn.split=function(e,t,n){return n&&"number"!=typeof n&&mi(e,t,n)&&(t=n=o),(n=n===o?p:n>>>0)?(e=bu(e))&&("string"==typeof t||null!=t&&!au(t))&&!(t=uo(t))&&Qt(e)?wo(an(e),0,n):e.split(t,n):[]},Bn.spread=function(e,t){if("function"!=typeof e)throw new Pe(i);return t=null==t?0:gn(vu(t),0),Zr((function(n){var r=n[t],o=wo(n,0,t);return r&&Ot(o,r),gt(e,this,o)}))},Bn.tail=function(e){var t=null==e?0:e.length;return t?to(e,1,t):[]},Bn.take=function(e,t,n){return e&&e.length?to(e,0,(t=n||t===o?1:vu(t))<0?0:t):[]},Bn.takeRight=function(e,t,n){var r=null==e?0:e.length;return r?to(e,(t=r-(t=n||t===o?1:vu(t)))<0?0:t,r):[]},Bn.takeRightWhile=function(e,t){return e&&e.length?fo(e,ui(t,3),!1,!0):[]},Bn.takeWhile=function(e,t){return e&&e.length?fo(e,ui(t,3)):[]},Bn.tap=function(e,t){return t(e),e},Bn.throttle=function(e,t,n){var r=!0,o=!0;if("function"!=typeof e)throw new Pe(i);return tu(n)&&(r="leading"in n?!!n.leading:r,o="trailing"in n?!!n.trailing:o),ja(e,t,{leading:r,maxWait:t,trailing:o})},Bn.thru=ha,Bn.toArray=pu,Bn.toPairs=Bu,Bn.toPairsIn=Uu,Bn.toPath=function(e){return Wa(e)?kt(e,Ii):cu(e)?[e]:Co(zi(bu(e)))},Bn.toPlainObject=mu,Bn.transform=function(e,t,n){var r=Wa(e),o=r||qa(e)||su(e);if(t=ui(t,4),null==n){var i=e&&e.constructor;n=o?r?new i:[]:tu(e)&&Qa(i)?Un(Ye(e)):{}}return(o?bt:br)(e,(function(e,r,o){return t(n,e,r,o)})),n},Bn.unary=function(e){return Ca(e,1)},Bn.union=na,Bn.unionBy=ra,Bn.unionWith=oa,Bn.uniq=function(e){return e&&e.length?lo(e):[]},Bn.uniqBy=function(e,t){return e&&e.length?lo(e,ui(t,2)):[]},Bn.uniqWith=function(e,t){return t="function"==typeof t?t:o,e&&e.length?lo(e,o,t):[]},Bn.unset=function(e,t){return null==e||co(e,t)},Bn.unzip=ia,Bn.unzipWith=aa,Bn.update=function(e,t,n){return null==e?e:so(e,t,go(n))},Bn.updateWith=function(e,t,n,r){return r="function"==typeof r?r:o,null==e?e:so(e,t,go(n),r)},Bn.values=Fu,Bn.valuesIn=function(e){return null==e?[]:Xt(e,Du(e))},Bn.without=ua,Bn.words=Qu,Bn.wrap=function(e,t){return Ia(go(t),e)},Bn.xor=la,Bn.xorBy=ca,Bn.xorWith=sa,Bn.zip=fa,Bn.zipObject=function(e,t){return vo(e||[],t||[],er)},Bn.zipObjectDeep=function(e,t){return vo(e||[],t||[],Kr)},Bn.zipWith=da,Bn.entries=Bu,Bn.entriesIn=Uu,Bn.extend=_u,Bn.extendWith=Su,ll(Bn,Bn),Bn.add=bl,Bn.attempt=Ju,Bn.camelCase=Hu,Bn.capitalize=Vu,Bn.ceil=wl,Bn.clamp=function(e,t,n){return n===o&&(n=t,t=o),n!==o&&(n=(n=gu(n))==n?n:0),t!==o&&(t=(t=gu(t))==t?t:0),ar(gu(e),t,n)},Bn.clone=function(e){return ur(e,4)},Bn.cloneDeep=function(e){return ur(e,5)},Bn.cloneDeepWith=function(e,t){return ur(e,5,t="function"==typeof t?t:o)},Bn.cloneWith=function(e,t){return ur(e,4,t="function"==typeof t?t:o)},Bn.conformsTo=function(e,t){return null==t||lr(e,t,ju(t))},Bn.deburr=Xu,Bn.defaultTo=function(e,t){return null==e||e!=e?t:e},Bn.divide=_l,Bn.endsWith=function(e,t,n){e=bu(e),t=uo(t);var r=e.length,i=n=n===o?r:ar(vu(n),0,r);return(n-=t.length)>=0&&e.slice(n,i)==t},Bn.eq=Fa,Bn.escape=function(e){return(e=bu(e))&&Z.test(e)?e.replace(Y,Gt):e},Bn.escapeRegExp=function(e){return(e=bu(e))&&ne.test(e)?e.replace(te,"\\$&"):e},Bn.every=function(e,t,n){var r=Wa(e)?_t:pr;return n&&mi(e,t,n)&&(t=o),r(e,ui(t,3))},Bn.find=ga,Bn.findIndex=Xi,Bn.findKey=function(e,t){return Tt(e,ui(t,3),br)},Bn.findLast=ma,Bn.findLastIndex=Wi,Bn.findLastKey=function(e,t){return Tt(e,ui(t,3),wr)},Bn.floor=Sl,Bn.forEach=ba,Bn.forEachRight=wa,Bn.forIn=function(e,t){return null==e?e:gr(e,ui(t,3),Du)},Bn.forInRight=function(e,t){return null==e?e:mr(e,ui(t,3),Du)},Bn.forOwn=function(e,t){return e&&br(e,ui(t,3))},Bn.forOwnRight=function(e,t){return e&&wr(e,ui(t,3))},Bn.get=Pu,Bn.gt=Ha,Bn.gte=Va,Bn.has=function(e,t){return null!=e&&hi(e,t,Or)},Bn.hasIn=Cu,Bn.head=$i,Bn.identity=ol,Bn.includes=function(e,t,n,r){e=$a(e)?e:Fu(e),n=n&&!r?vu(n):0;var o=e.length;return n<0&&(n=gn(o+n,0)),lu(e)?n<=o&&e.indexOf(t,n)>-1:!!o&&Dt(e,t,n)>-1},Bn.indexOf=function(e,t,n){var r=null==e?0:e.length;if(!r)return-1;var o=null==n?0:vu(n);return o<0&&(o=gn(r+o,0)),Dt(e,t,o)},Bn.inRange=function(e,t,n){return t=hu(t),n===o?(n=t,t=0):n=hu(n),function(e,t,n){return e>=mn(t,n)&&e<gn(t,n)}(e=gu(e),t,n)},Bn.invoke=Tu,Bn.isArguments=Xa,Bn.isArray=Wa,Bn.isArrayBuffer=Ya,Bn.isArrayLike=$a,Bn.isArrayLikeObject=Za,Bn.isBoolean=function(e){return!0===e||!1===e||nu(e)&&Er(e)==g},Bn.isBuffer=qa,Bn.isDate=Ga,Bn.isElement=function(e){return nu(e)&&1===e.nodeType&&!iu(e)},Bn.isEmpty=function(e){if(null==e)return!0;if($a(e)&&(Wa(e)||"string"==typeof e||"function"==typeof e.splice||qa(e)||su(e)||Xa(e)))return!e.length;var t=pi(e);if(t==S||t==P)return!e.size;if(Si(e))return!Ar(e).length;for(var n in e)if(De.call(e,n))return!1;return!0},Bn.isEqual=function(e,t){return Tr(e,t)},Bn.isEqualWith=function(e,t,n){var r=(n="function"==typeof n?n:o)?n(e,t):o;return r===o?Tr(e,t,o,n):!!r},Bn.isError=Ka,Bn.isFinite=function(e){return"number"==typeof e&&hn(e)},Bn.isFunction=Qa,Bn.isInteger=Ja,Bn.isLength=eu,Bn.isMap=ru,Bn.isMatch=function(e,t){return e===t||jr(e,t,ci(t))},Bn.isMatchWith=function(e,t,n){return n="function"==typeof n?n:o,jr(e,t,ci(t),n)},Bn.isNaN=function(e){return ou(e)&&e!=+e},Bn.isNative=function(e){if(_i(e))throw new _e("Unsupported core-js use. Try https://npms.io/search?q=ponyfill.");return Dr(e)},Bn.isNil=function(e){return null==e},Bn.isNull=function(e){return null===e},Bn.isNumber=ou,Bn.isObject=tu,Bn.isObjectLike=nu,Bn.isPlainObject=iu,Bn.isRegExp=au,Bn.isSafeInteger=function(e){return Ja(e)&&e>=-9007199254740991&&e<=f},Bn.isSet=uu,Bn.isString=lu,Bn.isSymbol=cu,Bn.isTypedArray=su,Bn.isUndefined=function(e){return e===o},Bn.isWeakMap=function(e){return nu(e)&&pi(e)==N},Bn.isWeakSet=function(e){return nu(e)&&"[object WeakSet]"==Er(e)},Bn.join=function(e,t){return null==e?"":vn.call(e,t)},Bn.kebabCase=Wu,Bn.last=Ki,Bn.lastIndexOf=function(e,t,n){var r=null==e?0:e.length;if(!r)return-1;var i=r;return n!==o&&(i=(i=vu(n))<0?gn(r+i,0):mn(i,r-1)),t==t?function(e,t,n){for(var r=n+1;r--;)if(e[r]===t)return r;return r}(e,t,i):jt(e,At,i,!0)},Bn.lowerCase=Yu,Bn.lowerFirst=$u,Bn.lt=fu,Bn.lte=du,Bn.max=function(e){return e&&e.length?hr(e,ol,kr):o},Bn.maxBy=function(e,t){return e&&e.length?hr(e,ui(t,2),kr):o},Bn.mean=function(e){return Lt(e,ol)},Bn.meanBy=function(e,t){return Lt(e,ui(t,2))},Bn.min=function(e){return e&&e.length?hr(e,ol,Lr):o},Bn.minBy=function(e,t){return e&&e.length?hr(e,ui(t,2),Lr):o},Bn.stubArray=yl,Bn.stubFalse=gl,Bn.stubObject=function(){return{}},Bn.stubString=function(){return""},Bn.stubTrue=function(){return!0},Bn.multiply=xl,Bn.nth=function(e,t){return e&&e.length?Fr(e,vu(t)):o},Bn.noConflict=function(){return it._===this&&(it._=Ie),this},Bn.noop=cl,Bn.now=Pa,Bn.pad=function(e,t,n){e=bu(e);var r=(t=vu(t))?on(e):0;if(!t||r>=t)return e;var o=(t-r)/2;return Vo(fn(o),n)+e+Vo(sn(o),n)},Bn.padEnd=function(e,t,n){e=bu(e);var r=(t=vu(t))?on(e):0;return t&&r<t?e+Vo(t-r,n):e},Bn.padStart=function(e,t,n){e=bu(e);var r=(t=vu(t))?on(e):0;return t&&r<t?Vo(t-r,n)+e:e},Bn.parseInt=function(e,t,n){return n||null==t?t=0:t&&(t=+t),wn(bu(e).replace(re,""),t||0)},Bn.random=function(e,t,n){if(n&&"boolean"!=typeof n&&mi(e,t,n)&&(t=n=o),n===o&&("boolean"==typeof t?(n=t,t=o):"boolean"==typeof e&&(n=e,e=o)),e===o&&t===o?(e=0,t=1):(e=hu(e),t===o?(t=e,e=0):t=hu(t)),e>t){var r=e;e=t,t=r}if(n||e%1||t%1){var i=_n();return mn(e+i*(t-e+tt("1e-"+((i+"").length-1))),t)}return Yr(e,t)},Bn.reduce=function(e,t,n){var r=Wa(e)?Pt:Bt,o=arguments.length<3;return r(e,ui(t,4),n,o,fr)},Bn.reduceRight=function(e,t,n){var r=Wa(e)?Ct:Bt,o=arguments.length<3;return r(e,ui(t,4),n,o,dr)},Bn.repeat=function(e,t,n){return t=(n?mi(e,t,n):t===o)?1:vu(t),$r(bu(e),t)},Bn.replace=function(){var e=arguments,t=bu(e[0]);return e.length<3?t:t.replace(e[1],e[2])},Bn.result=function(e,t,n){var r=-1,i=(t=mo(t,e)).length;for(i||(i=1,e=o);++r<i;){var a=null==e?o:e[Ii(t[r])];a===o&&(r=i,a=n),e=Qa(a)?a.call(e):a}return e},Bn.round=El,Bn.runInContext=e,Bn.sample=function(e){return(Wa(e)?Gn:qr)(e)},Bn.size=function(e){if(null==e)return 0;if($a(e))return lu(e)?on(e):e.length;var t=pi(e);return t==S||t==P?e.size:Ar(e).length},Bn.snakeCase=Zu,Bn.some=function(e,t,n){var r=Wa(e)?Mt:no;return n&&mi(e,t,n)&&(t=o),r(e,ui(t,3))},Bn.sortedIndex=function(e,t){return ro(e,t)},Bn.sortedIndexBy=function(e,t,n){return oo(e,t,ui(n,2))},Bn.sortedIndexOf=function(e,t){var n=null==e?0:e.length;if(n){var r=ro(e,t);if(r<n&&Fa(e[r],t))return r}return-1},Bn.sortedLastIndex=function(e,t){return ro(e,t,!0)},Bn.sortedLastIndexBy=function(e,t,n){return oo(e,t,ui(n,2),!0)},Bn.sortedLastIndexOf=function(e,t){if(null!=e&&e.length){var n=ro(e,t,!0)-1;if(Fa(e[n],t))return n}return-1},Bn.startCase=qu,Bn.startsWith=function(e,t,n){return e=bu(e),n=null==n?0:ar(vu(n),0,e.length),t=uo(t),e.slice(n,n+t.length)==t},Bn.subtract=kl,Bn.sum=function(e){return e&&e.length?Ut(e,ol):0},Bn.sumBy=function(e,t){return e&&e.length?Ut(e,ui(t,2)):0},Bn.template=function(e,t,n){var r=Bn.templateSettings;n&&mi(e,t,n)&&(t=o),e=bu(e),t=Su({},t,r,Ko);var i,a,u=Su({},t.imports,r.imports,Ko),l=ju(u),c=Xt(u,l),s=0,f=t.interpolate||be,d="__p += '",p=ke((t.escape||be).source+"|"+f.source+"|"+(f===K?fe:be).source+"|"+(t.evaluate||be).source+"|$","g"),h="//# sourceURL="+(De.call(t,"sourceURL")?(t.sourceURL+"").replace(/\s/g," "):"lodash.templateSources["+ ++Ke+"]")+"\n";e.replace(p,(function(t,n,r,o,u,l){return r||(r=o),d+=e.slice(s,l).replace(we,Kt),n&&(i=!0,d+="' +\n__e("+n+") +\n'"),u&&(a=!0,d+="';\n"+u+";\n__p += '"),r&&(d+="' +\n((__t = ("+r+")) == null ? '' : __t) +\n'"),s=l+t.length,t})),d+="';\n";var v=De.call(t,"variable")&&t.variable;if(v){if(ce.test(v))throw new _e("Invalid `variable` option passed into `_.template`")}else d="with (obj) {\n"+d+"\n}\n";d=(a?d.replace(H,""):d).replace(V,"$1").replace(X,"$1;"),d="function("+(v||"obj")+") {\n"+(v?"":"obj || (obj = {});\n")+"var __t, __p = ''"+(i?", __e = _.escape":"")+(a?", __j = Array.prototype.join;\nfunction print() { __p += __j.call(arguments, '') }\n":";\n")+d+"return __p\n}";var y=Ju((function(){return Se(l,h+"return "+d).apply(o,c)}));if(y.source=d,Ka(y))throw y;return y},Bn.times=function(e,t){if((e=vu(e))<1||e>f)return[];var n=p,r=mn(e,p);t=ui(t),e-=p;for(var o=Ft(r,t);++n<e;)t(n);return o},Bn.toFinite=hu,Bn.toInteger=vu,Bn.toLength=yu,Bn.toLower=function(e){return bu(e).toLowerCase()},Bn.toNumber=gu,Bn.toSafeInteger=function(e){return e?ar(vu(e),-9007199254740991,f):0===e?e:0},Bn.toString=bu,Bn.toUpper=function(e){return bu(e).toUpperCase()},Bn.trim=function(e,t,n){if((e=bu(e))&&(n||t===o))return Ht(e);if(!e||!(t=uo(t)))return e;var r=an(e),i=an(t);return wo(r,Yt(r,i),$t(r,i)+1).join("")},Bn.trimEnd=function(e,t,n){if((e=bu(e))&&(n||t===o))return e.slice(0,un(e)+1);if(!e||!(t=uo(t)))return e;var r=an(e);return wo(r,0,$t(r,an(t))+1).join("")},Bn.trimStart=function(e,t,n){if((e=bu(e))&&(n||t===o))return e.replace(re,"");if(!e||!(t=uo(t)))return e;var r=an(e);return wo(r,Yt(r,an(t))).join("")},Bn.truncate=function(e,t){var n=30,r="...";if(tu(t)){var i="separator"in t?t.separator:i;n="length"in t?vu(t.length):n,r="omission"in t?uo(t.omission):r}var a=(e=bu(e)).length;if(Qt(e)){var u=an(e);a=u.length}if(n>=a)return e;var l=n-on(r);if(l<1)return r;var c=u?wo(u,0,l).join(""):e.slice(0,l);if(i===o)return c+r;if(u&&(l+=c.length-l),au(i)){if(e.slice(l).search(i)){var s,f=c;for(i.global||(i=ke(i.source,bu(de.exec(i))+"g")),i.lastIndex=0;s=i.exec(f);)var d=s.index;c=c.slice(0,d===o?l:d)}}else if(e.indexOf(uo(i),l)!=l){var p=c.lastIndexOf(i);p>-1&&(c=c.slice(0,p))}return c+r},Bn.unescape=function(e){return(e=bu(e))&&$.test(e)?e.replace(W,ln):e},Bn.uniqueId=function(e){var t=++Re;return bu(e)+t},Bn.upperCase=Gu,Bn.upperFirst=Ku,Bn.each=ba,Bn.eachRight=wa,Bn.first=$i,ll(Bn,(ml={},br(Bn,(function(e,t){De.call(Bn.prototype,t)||(ml[t]=e)})),ml),{chain:!1}),Bn.VERSION="4.17.21",bt(["bind","bindKey","curry","curryRight","partial","partialRight"],(function(e){Bn[e].placeholder=Bn})),bt(["drop","take"],(function(e,t){Vn.prototype[e]=function(n){n=n===o?1:gn(vu(n),0);var r=this.__filtered__&&!t?new Vn(this):this.clone();return r.__filtered__?r.__takeCount__=mn(n,r.__takeCount__):r.__views__.push({size:mn(n,p),type:e+(r.__dir__<0?"Right":"")}),r},Vn.prototype[e+"Right"]=function(t){return this.reverse()[e](t).reverse()}})),bt(["filter","map","takeWhile"],(function(e,t){var n=t+1,r=1==n||3==n;Vn.prototype[e]=function(e){var t=this.clone();return t.__iteratees__.push({iteratee:ui(e,3),type:n}),t.__filtered__=t.__filtered__||r,t}})),bt(["head","last"],(function(e,t){var n="take"+(t?"Right":"");Vn.prototype[e]=function(){return this[n](1).value()[0]}})),bt(["initial","tail"],(function(e,t){var n="drop"+(t?"":"Right");Vn.prototype[e]=function(){return this.__filtered__?new Vn(this):this[n](1)}})),Vn.prototype.compact=function(){return this.filter(ol)},Vn.prototype.find=function(e){return this.filter(e).head()},Vn.prototype.findLast=function(e){return this.reverse().find(e)},Vn.prototype.invokeMap=Zr((function(e,t){return"function"==typeof e?new Vn(this):this.map((function(n){return Mr(n,e,t)}))})),Vn.prototype.reject=function(e){return this.filter(La(ui(e)))},Vn.prototype.slice=function(e,t){e=vu(e);var n=this;return n.__filtered__&&(e>0||t<0)?new Vn(n):(e<0?n=n.takeRight(-e):e&&(n=n.drop(e)),t!==o&&(n=(t=vu(t))<0?n.dropRight(-t):n.take(t-e)),n)},Vn.prototype.takeRightWhile=function(e){return this.reverse().takeWhile(e).reverse()},Vn.prototype.toArray=function(){return this.take(p)},br(Vn.prototype,(function(e,t){var n=/^(?:filter|find|map|reject)|While$/.test(t),r=/^(?:head|last)$/.test(t),i=Bn[r?"take"+("last"==t?"Right":""):t],a=r||/^find/.test(t);i&&(Bn.prototype[t]=function(){var t=this.__wrapped__,u=r?[1]:arguments,l=t instanceof Vn,c=u[0],s=l||Wa(t),f=function(e){var t=i.apply(Bn,Ot([e],u));return r&&d?t[0]:t};s&&n&&"function"==typeof c&&1!=c.length&&(l=s=!1);var d=this.__chain__,p=!!this.__actions__.length,h=a&&!d,v=l&&!p;if(!a&&s){t=v?t:new Vn(this);var y=e.apply(t,u);return y.__actions__.push({func:ha,args:[f],thisArg:o}),new Hn(y,d)}return h&&v?e.apply(this,u):(y=this.thru(f),h?r?y.value()[0]:y.value():y)})})),bt(["pop","push","shift","sort","splice","unshift"],(function(e){var t=Ce[e],n=/^(?:push|sort|unshift)$/.test(e)?"tap":"thru",r=/^(?:pop|shift)$/.test(e);Bn.prototype[e]=function(){var e=arguments;if(r&&!this.__chain__){var o=this.value();return t.apply(Wa(o)?o:[],e)}return this[n]((function(n){return t.apply(Wa(n)?n:[],e)}))}})),br(Vn.prototype,(function(e,t){var n=Bn[t];if(n){var r=n.name+"";De.call(Nn,r)||(Nn[r]=[]),Nn[r].push({name:t,func:n})}})),Nn[Bo(o,2).name]=[{name:"wrapper",func:o}],Vn.prototype.clone=function(){var e=new Vn(this.__wrapped__);return e.__actions__=Co(this.__actions__),e.__dir__=this.__dir__,e.__filtered__=this.__filtered__,e.__iteratees__=Co(this.__iteratees__),e.__takeCount__=this.__takeCount__,e.__views__=Co(this.__views__),e},Vn.prototype.reverse=function(){if(this.__filtered__){var e=new Vn(this);e.__dir__=-1,e.__filtered__=!0}else(e=this.clone()).__dir__*=-1;return e},Vn.prototype.value=function(){var e=this.__wrapped__.value(),t=this.__dir__,n=Wa(e),r=t<0,o=n?e.length:0,i=function(e,t,n){for(var r=-1,o=n.length;++r<o;){var i=n[r],a=i.size;switch(i.type){case"drop":e+=a;break;case"dropRight":t-=a;break;case"take":t=mn(t,e+a);break;case"takeRight":e=gn(e,t-a)}}return{start:e,end:t}}(0,o,this.__views__),a=i.start,u=i.end,l=u-a,c=r?u:a-1,s=this.__iteratees__,f=s.length,d=0,p=mn(l,this.__takeCount__);if(!n||!r&&o==l&&p==l)return po(e,this.__actions__);var h=[];e:for(;l--&&d<p;){for(var v=-1,y=e[c+=t];++v<f;){var g=s[v],m=g.iteratee,b=g.type,w=m(y);if(2==b)y=w;else if(!w){if(1==b)continue e;break e}}h[d++]=y}return h},Bn.prototype.at=va,Bn.prototype.chain=function(){return pa(this)},Bn.prototype.commit=function(){return new Hn(this.value(),this.__chain__)},Bn.prototype.next=function(){this.__values__===o&&(this.__values__=pu(this.value()));var e=this.__index__>=this.__values__.length;return{done:e,value:e?o:this.__values__[this.__index__++]}},Bn.prototype.plant=function(e){for(var t,n=this;n instanceof Fn;){var r=Ui(n);r.__index__=0,r.__values__=o,t?i.__wrapped__=r:t=r;var i=r;n=n.__wrapped__}return i.__wrapped__=e,t},Bn.prototype.reverse=function(){var e=this.__wrapped__;if(e instanceof Vn){var t=e;return this.__actions__.length&&(t=new Vn(this)),(t=t.reverse()).__actions__.push({func:ha,args:[ta],thisArg:o}),new Hn(t,this.__chain__)}return this.thru(ta)},Bn.prototype.toJSON=Bn.prototype.valueOf=Bn.prototype.value=function(){return po(this.__wrapped__,this.__actions__)},Bn.prototype.first=Bn.prototype.head,at&&(Bn.prototype[at]=function(){return this}),Bn}();it._=cn,(r=function(){return cn}.call(t,n,t,e))===o||(e.exports=r)}.call(this)},418:e=>{"use strict";var t=Object.getOwnPropertySymbols,n=Object.prototype.hasOwnProperty,r=Object.prototype.propertyIsEnumerable;function o(e){if(null==e)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(e)}e.exports=function(){try{if(!Object.assign)return!1;var e=new String("abc");if(e[5]="de","5"===Object.getOwnPropertyNames(e)[0])return!1;for(var t={},n=0;n<10;n++)t["_"+String.fromCharCode(n)]=n;if("0123456789"!==Object.getOwnPropertyNames(t).map((function(e){return t[e]})).join(""))return!1;var r={};return"abcdefghijklmnopqrst".split("").forEach((function(e){r[e]=e})),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},r)).join("")}catch(e){return!1}}()?Object.assign:function(e,i){for(var a,u,l=o(e),c=1;c<arguments.length;c++){for(var s in a=Object(arguments[c]))n.call(a,s)&&(l[s]=a[s]);if(t){u=t(a);for(var f=0;f<u.length;f++)r.call(a,u[f])&&(l[u[f]]=a[u[f]])}}return l}},779:(e,t,n)=>{var r=n(826);e.exports=function e(t,n,o){return r(n)||(o=n||o,n=[]),o=o||{},t instanceof RegExp?function(e,t){var n=e.source.match(/\((?!\?)/g);if(n)for(var r=0;r<n.length;r++)t.push({name:r,prefix:null,delimiter:null,optional:!1,repeat:!1,partial:!1,asterisk:!1,pattern:null});return s(e,t)}(t,n):r(t)?function(t,n,r){for(var o=[],i=0;i<t.length;i++)o.push(e(t[i],n,r).source);return s(new RegExp("(?:"+o.join("|")+")",f(r)),n)}(t,n,o):function(e,t,n){return d(i(e,n),t,n)}(t,n,o)},e.exports.parse=i,e.exports.compile=function(e,t){return u(i(e,t),t)},e.exports.tokensToFunction=u,e.exports.tokensToRegExp=d;var o=new RegExp(["(\\\\.)","([\\/.])?(?:(?:\\:(\\w+)(?:\\(((?:\\\\.|[^\\\\()])+)\\))?|\\(((?:\\\\.|[^\\\\()])+)\\))([+*?])?|(\\*))"].join("|"),"g");function i(e,t){for(var n,r=[],i=0,a=0,u="",s=t&&t.delimiter||"/";null!=(n=o.exec(e));){var f=n[0],d=n[1],p=n.index;if(u+=e.slice(a,p),a=p+f.length,d)u+=d[1];else{var h=e[a],v=n[2],y=n[3],g=n[4],m=n[5],b=n[6],w=n[7];u&&(r.push(u),u="");var _=null!=v&&null!=h&&h!==v,S="+"===b||"*"===b,x="?"===b||"*"===b,E=n[2]||s,k=g||m;r.push({name:y||i++,prefix:v||"",delimiter:E,optional:x,repeat:S,partial:_,asterisk:!!w,pattern:k?c(k):w?".*":"[^"+l(E)+"]+?"})}}return a<e.length&&(u+=e.substr(a)),u&&r.push(u),r}function a(e){return encodeURI(e).replace(/[\/?#]/g,(function(e){return"%"+e.charCodeAt(0).toString(16).toUpperCase()}))}function u(e,t){for(var n=new Array(e.length),o=0;o<e.length;o++)"object"==typeof e[o]&&(n[o]=new RegExp("^(?:"+e[o].pattern+")$",f(t)));return function(t,o){for(var i="",u=t||{},l=(o||{}).pretty?a:encodeURIComponent,c=0;c<e.length;c++){var s=e[c];if("string"!=typeof s){var f,d=u[s.name];if(null==d){if(s.optional){s.partial&&(i+=s.prefix);continue}throw new TypeError('Expected "'+s.name+'" to be defined')}if(r(d)){if(!s.repeat)throw new TypeError('Expected "'+s.name+'" to not repeat, but received `'+JSON.stringify(d)+"`");if(0===d.length){if(s.optional)continue;throw new TypeError('Expected "'+s.name+'" to not be empty')}for(var p=0;p<d.length;p++){if(f=l(d[p]),!n[c].test(f))throw new TypeError('Expected all "'+s.name+'" to match "'+s.pattern+'", but received `'+JSON.stringify(f)+"`");i+=(0===p?s.prefix:s.delimiter)+f}}else{if(f=s.asterisk?encodeURI(d).replace(/[?#]/g,(function(e){return"%"+e.charCodeAt(0).toString(16).toUpperCase()})):l(d),!n[c].test(f))throw new TypeError('Expected "'+s.name+'" to match "'+s.pattern+'", but received "'+f+'"');i+=s.prefix+f}}else i+=s}return i}}function l(e){return e.replace(/([.+*?=^!:${}()[\]|\/\\])/g,"\\$1")}function c(e){return e.replace(/([=!:$\/()])/g,"\\$1")}function s(e,t){return e.keys=t,e}function f(e){return e&&e.sensitive?"":"i"}function d(e,t,n){r(t)||(n=t||n,t=[]);for(var o=(n=n||{}).strict,i=!1!==n.end,a="",u=0;u<e.length;u++){var c=e[u];if("string"==typeof c)a+=l(c);else{var d=l(c.prefix),p="(?:"+c.pattern+")";t.push(c),c.repeat&&(p+="(?:"+d+p+")*"),a+=p=c.optional?c.partial?d+"("+p+")?":"(?:"+d+"("+p+"))?":d+"("+p+")"}}var h=l(n.delimiter||"/"),v=a.slice(-h.length)===h;return o||(a=(v?a.slice(0,-h.length):a)+"(?:"+h+"(?=$))?"),a+=i?"$":o&&v?"":"(?="+h+"|$)",s(new RegExp("^"+a,f(n)),t)}},703:(e,t,n)=>{"use strict";var r=n(414);function o(){}function i(){}i.resetWarningCache=o,e.exports=function(){function e(e,t,n,o,i,a){if(a!==r){var u=new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types");throw u.name="Invariant Violation",u}}function t(){return e}e.isRequired=e;var n={array:e,bool:e,func:e,number:e,object:e,string:e,symbol:e,any:e,arrayOf:t,element:e,elementType:e,instanceOf:t,node:e,objectOf:t,oneOf:t,oneOfType:t,shape:t,exact:t,checkPropTypes:i,resetWarningCache:o};return n.PropTypes=n,n}},697:(e,t,n)=>{e.exports=n(703)()},414:e=>{"use strict";e.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},448:(e,t,n)=>{"use strict";var r=n(294),o=n(418),i=n(840);function a(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}if(!r)throw Error(a(227));var u=new Set,l={};function c(e,t){s(e,t),s(e+"Capture",t)}function s(e,t){for(l[e]=t,e=0;e<t.length;e++)u.add(t[e])}var f=!("undefined"==typeof window||void 0===window.document||void 0===window.document.createElement),d=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,p=Object.prototype.hasOwnProperty,h={},v={};function y(e,t,n,r,o,i,a){this.acceptsBooleans=2===t||3===t||4===t,this.attributeName=r,this.attributeNamespace=o,this.mustUseProperty=n,this.propertyName=e,this.type=t,this.sanitizeURL=i,this.removeEmptyString=a}var g={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach((function(e){g[e]=new y(e,0,!1,e,null,!1,!1)})),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach((function(e){var t=e[0];g[t]=new y(t,1,!1,e[1],null,!1,!1)})),["contentEditable","draggable","spellCheck","value"].forEach((function(e){g[e]=new y(e,2,!1,e.toLowerCase(),null,!1,!1)})),["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach((function(e){g[e]=new y(e,2,!1,e,null,!1,!1)})),"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach((function(e){g[e]=new y(e,3,!1,e.toLowerCase(),null,!1,!1)})),["checked","multiple","muted","selected"].forEach((function(e){g[e]=new y(e,3,!0,e,null,!1,!1)})),["capture","download"].forEach((function(e){g[e]=new y(e,4,!1,e,null,!1,!1)})),["cols","rows","size","span"].forEach((function(e){g[e]=new y(e,6,!1,e,null,!1,!1)})),["rowSpan","start"].forEach((function(e){g[e]=new y(e,5,!1,e.toLowerCase(),null,!1,!1)}));var m=/[\-:]([a-z])/g;function b(e){return e[1].toUpperCase()}function w(e,t,n,r){var o=g.hasOwnProperty(t)?g[t]:null;(null!==o?0===o.type:!r&&2<t.length&&("o"===t[0]||"O"===t[0])&&("n"===t[1]||"N"===t[1]))||(function(e,t,n,r){if(null==t||function(e,t,n,r){if(null!==n&&0===n.type)return!1;switch(typeof t){case"function":case"symbol":return!0;case"boolean":return!r&&(null!==n?!n.acceptsBooleans:"data-"!==(e=e.toLowerCase().slice(0,5))&&"aria-"!==e);default:return!1}}(e,t,n,r))return!0;if(r)return!1;if(null!==n)switch(n.type){case 3:return!t;case 4:return!1===t;case 5:return isNaN(t);case 6:return isNaN(t)||1>t}return!1}(t,n,o,r)&&(n=null),r||null===o?function(e){return!!p.call(v,e)||!p.call(h,e)&&(d.test(e)?v[e]=!0:(h[e]=!0,!1))}(t)&&(null===n?e.removeAttribute(t):e.setAttribute(t,""+n)):o.mustUseProperty?e[o.propertyName]=null===n?3!==o.type&&"":n:(t=o.attributeName,r=o.attributeNamespace,null===n?e.removeAttribute(t):(n=3===(o=o.type)||4===o&&!0===n?"":""+n,r?e.setAttributeNS(r,t,n):e.setAttribute(t,n))))}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach((function(e){var t=e.replace(m,b);g[t]=new y(t,1,!1,e,null,!1,!1)})),"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach((function(e){var t=e.replace(m,b);g[t]=new y(t,1,!1,e,"http://www.w3.org/1999/xlink",!1,!1)})),["xml:base","xml:lang","xml:space"].forEach((function(e){var t=e.replace(m,b);g[t]=new y(t,1,!1,e,"http://www.w3.org/XML/1998/namespace",!1,!1)})),["tabIndex","crossOrigin"].forEach((function(e){g[e]=new y(e,1,!1,e.toLowerCase(),null,!1,!1)})),g.xlinkHref=new y("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0,!1),["src","href","action","formAction"].forEach((function(e){g[e]=new y(e,1,!1,e.toLowerCase(),null,!0,!0)}));var _=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,S=60103,x=60106,E=60107,k=60108,O=60114,P=60109,C=60110,M=60112,N=60113,T=60120,j=60115,D=60116,R=60121,A=60128,L=60129,z=60130,I=60131;if("function"==typeof Symbol&&Symbol.for){var B=Symbol.for;S=B("react.element"),x=B("react.portal"),E=B("react.fragment"),k=B("react.strict_mode"),O=B("react.profiler"),P=B("react.provider"),C=B("react.context"),M=B("react.forward_ref"),N=B("react.suspense"),T=B("react.suspense_list"),j=B("react.memo"),D=B("react.lazy"),R=B("react.block"),B("react.scope"),A=B("react.opaque.id"),L=B("react.debug_trace_mode"),z=B("react.offscreen"),I=B("react.legacy_hidden")}var U,F="function"==typeof Symbol&&Symbol.iterator;function H(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=F&&e[F]||e["@@iterator"])?e:null}function V(e){if(void 0===U)try{throw Error()}catch(e){var t=e.stack.trim().match(/\n( *(at )?)/);U=t&&t[1]||""}return"\n"+U+e}var X=!1;function W(e,t){if(!e||X)return"";X=!0;var n=Error.prepareStackTrace;Error.prepareStackTrace=void 0;try{if(t)if(t=function(){throw Error()},Object.defineProperty(t.prototype,"props",{set:function(){throw Error()}}),"object"==typeof Reflect&&Reflect.construct){try{Reflect.construct(t,[])}catch(e){var r=e}Reflect.construct(e,[],t)}else{try{t.call()}catch(e){r=e}e.call(t.prototype)}else{try{throw Error()}catch(e){r=e}e()}}catch(e){if(e&&r&&"string"==typeof e.stack){for(var o=e.stack.split("\n"),i=r.stack.split("\n"),a=o.length-1,u=i.length-1;1<=a&&0<=u&&o[a]!==i[u];)u--;for(;1<=a&&0<=u;a--,u--)if(o[a]!==i[u]){if(1!==a||1!==u)do{if(a--,0>--u||o[a]!==i[u])return"\n"+o[a].replace(" at new "," at ")}while(1<=a&&0<=u);break}}}finally{X=!1,Error.prepareStackTrace=n}return(e=e?e.displayName||e.name:"")?V(e):""}function Y(e){switch(e.tag){case 5:return V(e.type);case 16:return V("Lazy");case 13:return V("Suspense");case 19:return V("SuspenseList");case 0:case 2:case 15:return W(e.type,!1);case 11:return W(e.type.render,!1);case 22:return W(e.type._render,!1);case 1:return W(e.type,!0);default:return""}}function $(e){if(null==e)return null;if("function"==typeof e)return e.displayName||e.name||null;if("string"==typeof e)return e;switch(e){case E:return"Fragment";case x:return"Portal";case O:return"Profiler";case k:return"StrictMode";case N:return"Suspense";case T:return"SuspenseList"}if("object"==typeof e)switch(e.$$typeof){case C:return(e.displayName||"Context")+".Consumer";case P:return(e._context.displayName||"Context")+".Provider";case M:var t=e.render;return t=t.displayName||t.name||"",e.displayName||(""!==t?"ForwardRef("+t+")":"ForwardRef");case j:return $(e.type);case R:return $(e._render);case D:t=e._payload,e=e._init;try{return $(e(t))}catch(e){}}return null}function Z(e){switch(typeof e){case"boolean":case"number":case"object":case"string":case"undefined":return e;default:return""}}function q(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function G(e){e._valueTracker||(e._valueTracker=function(e){var t=q(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),r=""+e[t];if(!e.hasOwnProperty(t)&&void 0!==n&&"function"==typeof n.get&&"function"==typeof n.set){var o=n.get,i=n.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return o.call(this)},set:function(e){r=""+e,i.call(this,e)}}),Object.defineProperty(e,t,{enumerable:n.enumerable}),{getValue:function(){return r},setValue:function(e){r=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}}(e))}function K(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var n=t.getValue(),r="";return e&&(r=q(e)?e.checked?"true":"false":e.value),(e=r)!==n&&(t.setValue(e),!0)}function Q(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}function J(e,t){var n=t.checked;return o({},t,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=n?n:e._wrapperState.initialChecked})}function ee(e,t){var n=null==t.defaultValue?"":t.defaultValue,r=null!=t.checked?t.checked:t.defaultChecked;n=Z(null!=t.value?t.value:n),e._wrapperState={initialChecked:r,initialValue:n,controlled:"checkbox"===t.type||"radio"===t.type?null!=t.checked:null!=t.value}}function te(e,t){null!=(t=t.checked)&&w(e,"checked",t,!1)}function ne(e,t){te(e,t);var n=Z(t.value),r=t.type;if(null!=n)"number"===r?(0===n&&""===e.value||e.value!=n)&&(e.value=""+n):e.value!==""+n&&(e.value=""+n);else if("submit"===r||"reset"===r)return void e.removeAttribute("value");t.hasOwnProperty("value")?oe(e,t.type,n):t.hasOwnProperty("defaultValue")&&oe(e,t.type,Z(t.defaultValue)),null==t.checked&&null!=t.defaultChecked&&(e.defaultChecked=!!t.defaultChecked)}function re(e,t,n){if(t.hasOwnProperty("value")||t.hasOwnProperty("defaultValue")){var r=t.type;if(!("submit"!==r&&"reset"!==r||void 0!==t.value&&null!==t.value))return;t=""+e._wrapperState.initialValue,n||t===e.value||(e.value=t),e.defaultValue=t}""!==(n=e.name)&&(e.name=""),e.defaultChecked=!!e._wrapperState.initialChecked,""!==n&&(e.name=n)}function oe(e,t,n){"number"===t&&Q(e.ownerDocument)===e||(null==n?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+n&&(e.defaultValue=""+n))}function ie(e,t){return e=o({children:void 0},t),(t=function(e){var t="";return r.Children.forEach(e,(function(e){null!=e&&(t+=e)})),t}(t.children))&&(e.children=t),e}function ae(e,t,n,r){if(e=e.options,t){t={};for(var o=0;o<n.length;o++)t["$"+n[o]]=!0;for(n=0;n<e.length;n++)o=t.hasOwnProperty("$"+e[n].value),e[n].selected!==o&&(e[n].selected=o),o&&r&&(e[n].defaultSelected=!0)}else{for(n=""+Z(n),t=null,o=0;o<e.length;o++){if(e[o].value===n)return e[o].selected=!0,void(r&&(e[o].defaultSelected=!0));null!==t||e[o].disabled||(t=e[o])}null!==t&&(t.selected=!0)}}function ue(e,t){if(null!=t.dangerouslySetInnerHTML)throw Error(a(91));return o({},t,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function le(e,t){var n=t.value;if(null==n){if(n=t.children,t=t.defaultValue,null!=n){if(null!=t)throw Error(a(92));if(Array.isArray(n)){if(!(1>=n.length))throw Error(a(93));n=n[0]}t=n}null==t&&(t=""),n=t}e._wrapperState={initialValue:Z(n)}}function ce(e,t){var n=Z(t.value),r=Z(t.defaultValue);null!=n&&((n=""+n)!==e.value&&(e.value=n),null==t.defaultValue&&e.defaultValue!==n&&(e.defaultValue=n)),null!=r&&(e.defaultValue=""+r)}function se(e){var t=e.textContent;t===e._wrapperState.initialValue&&""!==t&&null!==t&&(e.value=t)}var fe="http://www.w3.org/1999/xhtml";function de(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function pe(e,t){return null==e||"http://www.w3.org/1999/xhtml"===e?de(t):"http://www.w3.org/2000/svg"===e&&"foreignObject"===t?"http://www.w3.org/1999/xhtml":e}var he,ve,ye=(ve=function(e,t){if("http://www.w3.org/2000/svg"!==e.namespaceURI||"innerHTML"in e)e.innerHTML=t;else{for((he=he||document.createElement("div")).innerHTML="<svg>"+t.valueOf().toString()+"</svg>",t=he.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;t.firstChild;)e.appendChild(t.firstChild)}},"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(e,t,n,r){MSApp.execUnsafeLocalFunction((function(){return ve(e,t)}))}:ve);function ge(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&3===n.nodeType)return void(n.nodeValue=t)}e.textContent=t}var me={animationIterationCount:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},be=["Webkit","ms","Moz","O"];function we(e,t,n){return null==t||"boolean"==typeof t||""===t?"":n||"number"!=typeof t||0===t||me.hasOwnProperty(e)&&me[e]?(""+t).trim():t+"px"}function _e(e,t){for(var n in e=e.style,t)if(t.hasOwnProperty(n)){var r=0===n.indexOf("--"),o=we(n,t[n],r);"float"===n&&(n="cssFloat"),r?e.setProperty(n,o):e[n]=o}}Object.keys(me).forEach((function(e){be.forEach((function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),me[t]=me[e]}))}));var Se=o({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function xe(e,t){if(t){if(Se[e]&&(null!=t.children||null!=t.dangerouslySetInnerHTML))throw Error(a(137,e));if(null!=t.dangerouslySetInnerHTML){if(null!=t.children)throw Error(a(60));if("object"!=typeof t.dangerouslySetInnerHTML||!("__html"in t.dangerouslySetInnerHTML))throw Error(a(61))}if(null!=t.style&&"object"!=typeof t.style)throw Error(a(62))}}function Ee(e,t){if(-1===e.indexOf("-"))return"string"==typeof t.is;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}function ke(e){return(e=e.target||e.srcElement||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}var Oe=null,Pe=null,Ce=null;function Me(e){if(e=Jr(e)){if("function"!=typeof Oe)throw Error(a(280));var t=e.stateNode;t&&(t=to(t),Oe(e.stateNode,e.type,t))}}function Ne(e){Pe?Ce?Ce.push(e):Ce=[e]:Pe=e}function Te(){if(Pe){var e=Pe,t=Ce;if(Ce=Pe=null,Me(e),t)for(e=0;e<t.length;e++)Me(t[e])}}function je(e,t){return e(t)}function De(e,t,n,r,o){return e(t,n,r,o)}function Re(){}var Ae=je,Le=!1,ze=!1;function Ie(){null===Pe&&null===Ce||(Re(),Te())}function Be(e,t){var n=e.stateNode;if(null===n)return null;var r=to(n);if(null===r)return null;n=r[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":case"onMouseEnter":(r=!r.disabled)||(r=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!r;break e;default:e=!1}if(e)return null;if(n&&"function"!=typeof n)throw Error(a(231,t,typeof n));return n}var Ue=!1;if(f)try{var Fe={};Object.defineProperty(Fe,"passive",{get:function(){Ue=!0}}),window.addEventListener("test",Fe,Fe),window.removeEventListener("test",Fe,Fe)}catch(ve){Ue=!1}function He(e,t,n,r,o,i,a,u,l){var c=Array.prototype.slice.call(arguments,3);try{t.apply(n,c)}catch(e){this.onError(e)}}var Ve=!1,Xe=null,We=!1,Ye=null,$e={onError:function(e){Ve=!0,Xe=e}};function Ze(e,t,n,r,o,i,a,u,l){Ve=!1,Xe=null,He.apply($e,arguments)}function qe(e){var t=e,n=e;if(e.alternate)for(;t.return;)t=t.return;else{e=t;do{0!=(1026&(t=e).flags)&&(n=t.return),e=t.return}while(e)}return 3===t.tag?n:null}function Ge(e){if(13===e.tag){var t=e.memoizedState;if(null===t&&null!==(e=e.alternate)&&(t=e.memoizedState),null!==t)return t.dehydrated}return null}function Ke(e){if(qe(e)!==e)throw Error(a(188))}function Qe(e){if(!(e=function(e){var t=e.alternate;if(!t){if(null===(t=qe(e)))throw Error(a(188));return t!==e?null:e}for(var n=e,r=t;;){var o=n.return;if(null===o)break;var i=o.alternate;if(null===i){if(null!==(r=o.return)){n=r;continue}break}if(o.child===i.child){for(i=o.child;i;){if(i===n)return Ke(o),e;if(i===r)return Ke(o),t;i=i.sibling}throw Error(a(188))}if(n.return!==r.return)n=o,r=i;else{for(var u=!1,l=o.child;l;){if(l===n){u=!0,n=o,r=i;break}if(l===r){u=!0,r=o,n=i;break}l=l.sibling}if(!u){for(l=i.child;l;){if(l===n){u=!0,n=i,r=o;break}if(l===r){u=!0,r=i,n=o;break}l=l.sibling}if(!u)throw Error(a(189))}}if(n.alternate!==r)throw Error(a(190))}if(3!==n.tag)throw Error(a(188));return n.stateNode.current===n?e:t}(e)))return null;for(var t=e;;){if(5===t.tag||6===t.tag)return t;if(t.child)t.child.return=t,t=t.child;else{if(t===e)break;for(;!t.sibling;){if(!t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}}return null}function Je(e,t){for(var n=e.alternate;null!==t;){if(t===e||t===n)return!0;t=t.return}return!1}var et,tt,nt,rt,ot=!1,it=[],at=null,ut=null,lt=null,ct=new Map,st=new Map,ft=[],dt="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset submit".split(" ");function pt(e,t,n,r,o){return{blockedOn:e,domEventName:t,eventSystemFlags:16|n,nativeEvent:o,targetContainers:[r]}}function ht(e,t){switch(e){case"focusin":case"focusout":at=null;break;case"dragenter":case"dragleave":ut=null;break;case"mouseover":case"mouseout":lt=null;break;case"pointerover":case"pointerout":ct.delete(t.pointerId);break;case"gotpointercapture":case"lostpointercapture":st.delete(t.pointerId)}}function vt(e,t,n,r,o,i){return null===e||e.nativeEvent!==i?(e=pt(t,n,r,o,i),null!==t&&null!==(t=Jr(t))&&tt(t),e):(e.eventSystemFlags|=r,t=e.targetContainers,null!==o&&-1===t.indexOf(o)&&t.push(o),e)}function yt(e){var t=Qr(e.target);if(null!==t){var n=qe(t);if(null!==n)if(13===(t=n.tag)){if(null!==(t=Ge(n)))return e.blockedOn=t,void rt(e.lanePriority,(function(){i.unstable_runWithPriority(e.priority,(function(){nt(n)}))}))}else if(3===t&&n.stateNode.hydrate)return void(e.blockedOn=3===n.tag?n.stateNode.containerInfo:null)}e.blockedOn=null}function gt(e){if(null!==e.blockedOn)return!1;for(var t=e.targetContainers;0<t.length;){var n=Qt(e.domEventName,e.eventSystemFlags,t[0],e.nativeEvent);if(null!==n)return null!==(t=Jr(n))&&tt(t),e.blockedOn=n,!1;t.shift()}return!0}function mt(e,t,n){gt(e)&&n.delete(t)}function bt(){for(ot=!1;0<it.length;){var e=it[0];if(null!==e.blockedOn){null!==(e=Jr(e.blockedOn))&&et(e);break}for(var t=e.targetContainers;0<t.length;){var n=Qt(e.domEventName,e.eventSystemFlags,t[0],e.nativeEvent);if(null!==n){e.blockedOn=n;break}t.shift()}null===e.blockedOn&&it.shift()}null!==at&&gt(at)&&(at=null),null!==ut&&gt(ut)&&(ut=null),null!==lt&&gt(lt)&&(lt=null),ct.forEach(mt),st.forEach(mt)}function wt(e,t){e.blockedOn===t&&(e.blockedOn=null,ot||(ot=!0,i.unstable_scheduleCallback(i.unstable_NormalPriority,bt)))}function _t(e){function t(t){return wt(t,e)}if(0<it.length){wt(it[0],e);for(var n=1;n<it.length;n++){var r=it[n];r.blockedOn===e&&(r.blockedOn=null)}}for(null!==at&&wt(at,e),null!==ut&&wt(ut,e),null!==lt&&wt(lt,e),ct.forEach(t),st.forEach(t),n=0;n<ft.length;n++)(r=ft[n]).blockedOn===e&&(r.blockedOn=null);for(;0<ft.length&&null===(n=ft[0]).blockedOn;)yt(n),null===n.blockedOn&&ft.shift()}function St(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n}var xt={animationend:St("Animation","AnimationEnd"),animationiteration:St("Animation","AnimationIteration"),animationstart:St("Animation","AnimationStart"),transitionend:St("Transition","TransitionEnd")},Et={},kt={};function Ot(e){if(Et[e])return Et[e];if(!xt[e])return e;var t,n=xt[e];for(t in n)if(n.hasOwnProperty(t)&&t in kt)return Et[e]=n[t];return e}f&&(kt=document.createElement("div").style,"AnimationEvent"in window||(delete xt.animationend.animation,delete xt.animationiteration.animation,delete xt.animationstart.animation),"TransitionEvent"in window||delete xt.transitionend.transition);var Pt=Ot("animationend"),Ct=Ot("animationiteration"),Mt=Ot("animationstart"),Nt=Ot("transitionend"),Tt=new Map,jt=new Map,Dt=["abort","abort",Pt,"animationEnd",Ct,"animationIteration",Mt,"animationStart","canplay","canPlay","canplaythrough","canPlayThrough","durationchange","durationChange","emptied","emptied","encrypted","encrypted","ended","ended","error","error","gotpointercapture","gotPointerCapture","load","load","loadeddata","loadedData","loadedmetadata","loadedMetadata","loadstart","loadStart","lostpointercapture","lostPointerCapture","playing","playing","progress","progress","seeking","seeking","stalled","stalled","suspend","suspend","timeupdate","timeUpdate",Nt,"transitionEnd","waiting","waiting"];function Rt(e,t){for(var n=0;n<e.length;n+=2){var r=e[n],o=e[n+1];o="on"+(o[0].toUpperCase()+o.slice(1)),jt.set(r,t),Tt.set(r,o),c(o,[r])}}(0,i.unstable_now)();var At=8;function Lt(e){if(0!=(1&e))return At=15,1;if(0!=(2&e))return At=14,2;if(0!=(4&e))return At=13,4;var t=24&e;return 0!==t?(At=12,t):0!=(32&e)?(At=11,32):0!=(t=192&e)?(At=10,t):0!=(256&e)?(At=9,256):0!=(t=3584&e)?(At=8,t):0!=(4096&e)?(At=7,4096):0!=(t=4186112&e)?(At=6,t):0!=(t=62914560&e)?(At=5,t):67108864&e?(At=4,67108864):0!=(134217728&e)?(At=3,134217728):0!=(t=805306368&e)?(At=2,t):0!=(1073741824&e)?(At=1,1073741824):(At=8,e)}function zt(e,t){var n=e.pendingLanes;if(0===n)return At=0;var r=0,o=0,i=e.expiredLanes,a=e.suspendedLanes,u=e.pingedLanes;if(0!==i)r=i,o=At=15;else if(0!=(i=134217727&n)){var l=i&~a;0!==l?(r=Lt(l),o=At):0!=(u&=i)&&(r=Lt(u),o=At)}else 0!=(i=n&~a)?(r=Lt(i),o=At):0!==u&&(r=Lt(u),o=At);if(0===r)return 0;if(r=n&((0>(r=31-Vt(r))?0:1<<r)<<1)-1,0!==t&&t!==r&&0==(t&a)){if(Lt(t),o<=At)return t;At=o}if(0!==(t=e.entangledLanes))for(e=e.entanglements,t&=r;0<t;)o=1<<(n=31-Vt(t)),r|=e[n],t&=~o;return r}function It(e){return 0!=(e=-1073741825&e.pendingLanes)?e:1073741824&e?1073741824:0}function Bt(e,t){switch(e){case 15:return 1;case 14:return 2;case 12:return 0===(e=Ut(24&~t))?Bt(10,t):e;case 10:return 0===(e=Ut(192&~t))?Bt(8,t):e;case 8:return 0===(e=Ut(3584&~t))&&0===(e=Ut(4186112&~t))&&(e=512),e;case 2:return 0===(t=Ut(805306368&~t))&&(t=268435456),t}throw Error(a(358,e))}function Ut(e){return e&-e}function Ft(e){for(var t=[],n=0;31>n;n++)t.push(e);return t}function Ht(e,t,n){e.pendingLanes|=t;var r=t-1;e.suspendedLanes&=r,e.pingedLanes&=r,(e=e.eventTimes)[t=31-Vt(t)]=n}var Vt=Math.clz32?Math.clz32:function(e){return 0===e?32:31-(Xt(e)/Wt|0)|0},Xt=Math.log,Wt=Math.LN2,Yt=i.unstable_UserBlockingPriority,$t=i.unstable_runWithPriority,Zt=!0;function qt(e,t,n,r){Le||Re();var o=Kt,i=Le;Le=!0;try{De(o,e,t,n,r)}finally{(Le=i)||Ie()}}function Gt(e,t,n,r){$t(Yt,Kt.bind(null,e,t,n,r))}function Kt(e,t,n,r){var o;if(Zt)if((o=0==(4&t))&&0<it.length&&-1<dt.indexOf(e))e=pt(null,e,t,n,r),it.push(e);else{var i=Qt(e,t,n,r);if(null===i)o&&ht(e,r);else{if(o){if(-1<dt.indexOf(e))return e=pt(i,e,t,n,r),void it.push(e);if(function(e,t,n,r,o){switch(t){case"focusin":return at=vt(at,e,t,n,r,o),!0;case"dragenter":return ut=vt(ut,e,t,n,r,o),!0;case"mouseover":return lt=vt(lt,e,t,n,r,o),!0;case"pointerover":var i=o.pointerId;return ct.set(i,vt(ct.get(i)||null,e,t,n,r,o)),!0;case"gotpointercapture":return i=o.pointerId,st.set(i,vt(st.get(i)||null,e,t,n,r,o)),!0}return!1}(i,e,t,n,r))return;ht(e,r)}Tr(e,t,r,null,n)}}}function Qt(e,t,n,r){var o=ke(r);if(null!==(o=Qr(o))){var i=qe(o);if(null===i)o=null;else{var a=i.tag;if(13===a){if(null!==(o=Ge(i)))return o;o=null}else if(3===a){if(i.stateNode.hydrate)return 3===i.tag?i.stateNode.containerInfo:null;o=null}else i!==o&&(o=null)}}return Tr(e,t,r,o,n),null}var Jt=null,en=null,tn=null;function nn(){if(tn)return tn;var e,t,n=en,r=n.length,o="value"in Jt?Jt.value:Jt.textContent,i=o.length;for(e=0;e<r&&n[e]===o[e];e++);var a=r-e;for(t=1;t<=a&&n[r-t]===o[i-t];t++);return tn=o.slice(e,1<t?1-t:void 0)}function rn(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,10===e&&(e=13),32<=e||13===e?e:0}function on(){return!0}function an(){return!1}function un(e){function t(t,n,r,o,i){for(var a in this._reactName=t,this._targetInst=r,this.type=n,this.nativeEvent=o,this.target=i,this.currentTarget=null,e)e.hasOwnProperty(a)&&(t=e[a],this[a]=t?t(o):o[a]);return this.isDefaultPrevented=(null!=o.defaultPrevented?o.defaultPrevented:!1===o.returnValue)?on:an,this.isPropagationStopped=an,this}return o(t.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=on)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=on)},persist:function(){},isPersistent:on}),t}var ln,cn,sn,fn={eventPhase:0,bubbles:0,cancelable:0,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:0,isTrusted:0},dn=un(fn),pn=o({},fn,{view:0,detail:0}),hn=un(pn),vn=o({},pn,{screenX:0,screenY:0,clientX:0,clientY:0,pageX:0,pageY:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,getModifierState:On,button:0,buttons:0,relatedTarget:function(e){return void 0===e.relatedTarget?e.fromElement===e.srcElement?e.toElement:e.fromElement:e.relatedTarget},movementX:function(e){return"movementX"in e?e.movementX:(e!==sn&&(sn&&"mousemove"===e.type?(ln=e.screenX-sn.screenX,cn=e.screenY-sn.screenY):cn=ln=0,sn=e),ln)},movementY:function(e){return"movementY"in e?e.movementY:cn}}),yn=un(vn),gn=un(o({},vn,{dataTransfer:0})),mn=un(o({},pn,{relatedTarget:0})),bn=un(o({},fn,{animationName:0,elapsedTime:0,pseudoElement:0})),wn=un(o({},fn,{clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}})),_n=un(o({},fn,{data:0})),Sn={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},xn={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},En={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function kn(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=En[e])&&!!t[e]}function On(){return kn}var Pn=un(o({},pn,{key:function(e){if(e.key){var t=Sn[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?13===(e=rn(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?xn[e.keyCode]||"Unidentified":""},code:0,location:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,repeat:0,locale:0,getModifierState:On,charCode:function(e){return"keypress"===e.type?rn(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?rn(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}})),Cn=un(o({},vn,{pointerId:0,width:0,height:0,pressure:0,tangentialPressure:0,tiltX:0,tiltY:0,twist:0,pointerType:0,isPrimary:0})),Mn=un(o({},pn,{touches:0,targetTouches:0,changedTouches:0,altKey:0,metaKey:0,ctrlKey:0,shiftKey:0,getModifierState:On})),Nn=un(o({},fn,{propertyName:0,elapsedTime:0,pseudoElement:0})),Tn=un(o({},vn,{deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:0,deltaMode:0})),jn=[9,13,27,32],Dn=f&&"CompositionEvent"in window,Rn=null;f&&"documentMode"in document&&(Rn=document.documentMode);var An=f&&"TextEvent"in window&&!Rn,Ln=f&&(!Dn||Rn&&8<Rn&&11>=Rn),zn=String.fromCharCode(32),In=!1;function Bn(e,t){switch(e){case"keyup":return-1!==jn.indexOf(t.keyCode);case"keydown":return 229!==t.keyCode;case"keypress":case"mousedown":case"focusout":return!0;default:return!1}}function Un(e){return"object"==typeof(e=e.detail)&&"data"in e?e.data:null}var Fn=!1,Hn={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function Vn(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!Hn[e.type]:"textarea"===t}function Xn(e,t,n,r){Ne(r),0<(t=Dr(t,"onChange")).length&&(n=new dn("onChange","change",null,n,r),e.push({event:n,listeners:t}))}var Wn=null,Yn=null;function $n(e){kr(e,0)}function Zn(e){if(K(eo(e)))return e}function qn(e,t){if("change"===e)return t}var Gn=!1;if(f){var Kn;if(f){var Qn="oninput"in document;if(!Qn){var Jn=document.createElement("div");Jn.setAttribute("oninput","return;"),Qn="function"==typeof Jn.oninput}Kn=Qn}else Kn=!1;Gn=Kn&&(!document.documentMode||9<document.documentMode)}function er(){Wn&&(Wn.detachEvent("onpropertychange",tr),Yn=Wn=null)}function tr(e){if("value"===e.propertyName&&Zn(Yn)){var t=[];if(Xn(t,Yn,e,ke(e)),e=$n,Le)e(t);else{Le=!0;try{je(e,t)}finally{Le=!1,Ie()}}}}function nr(e,t,n){"focusin"===e?(er(),Yn=n,(Wn=t).attachEvent("onpropertychange",tr)):"focusout"===e&&er()}function rr(e){if("selectionchange"===e||"keyup"===e||"keydown"===e)return Zn(Yn)}function or(e,t){if("click"===e)return Zn(t)}function ir(e,t){if("input"===e||"change"===e)return Zn(t)}var ar="function"==typeof Object.is?Object.is:function(e,t){return e===t&&(0!==e||1/e==1/t)||e!=e&&t!=t},ur=Object.prototype.hasOwnProperty;function lr(e,t){if(ar(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(r=0;r<n.length;r++)if(!ur.call(t,n[r])||!ar(e[n[r]],t[n[r]]))return!1;return!0}function cr(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function sr(e,t){var n,r=cr(e);for(e=0;r;){if(3===r.nodeType){if(n=e+r.textContent.length,e<=t&&n>=t)return{node:r,offset:t-e};e=n}e:{for(;r;){if(r.nextSibling){r=r.nextSibling;break e}r=r.parentNode}r=void 0}r=cr(r)}}function fr(e,t){return!(!e||!t)&&(e===t||(!e||3!==e.nodeType)&&(t&&3===t.nodeType?fr(e,t.parentNode):"contains"in e?e.contains(t):!!e.compareDocumentPosition&&!!(16&e.compareDocumentPosition(t))))}function dr(){for(var e=window,t=Q();t instanceof e.HTMLIFrameElement;){try{var n="string"==typeof t.contentWindow.location.href}catch(e){n=!1}if(!n)break;t=Q((e=t.contentWindow).document)}return t}function pr(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&("text"===e.type||"search"===e.type||"tel"===e.type||"url"===e.type||"password"===e.type)||"textarea"===t||"true"===e.contentEditable)}var hr=f&&"documentMode"in document&&11>=document.documentMode,vr=null,yr=null,gr=null,mr=!1;function br(e,t,n){var r=n.window===n?n.document:9===n.nodeType?n:n.ownerDocument;mr||null==vr||vr!==Q(r)||(r="selectionStart"in(r=vr)&&pr(r)?{start:r.selectionStart,end:r.selectionEnd}:{anchorNode:(r=(r.ownerDocument&&r.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:r.anchorOffset,focusNode:r.focusNode,focusOffset:r.focusOffset},gr&&lr(gr,r)||(gr=r,0<(r=Dr(yr,"onSelect")).length&&(t=new dn("onSelect","select",null,t,n),e.push({event:t,listeners:r}),t.target=vr)))}Rt("cancel cancel click click close close contextmenu contextMenu copy copy cut cut auxclick auxClick dblclick doubleClick dragend dragEnd dragstart dragStart drop drop focusin focus focusout blur input input invalid invalid keydown keyDown keypress keyPress keyup keyUp mousedown mouseDown mouseup mouseUp paste paste pause pause play play pointercancel pointerCancel pointerdown pointerDown pointerup pointerUp ratechange rateChange reset reset seeked seeked submit submit touchcancel touchCancel touchend touchEnd touchstart touchStart volumechange volumeChange".split(" "),0),Rt("drag drag dragenter dragEnter dragexit dragExit dragleave dragLeave dragover dragOver mousemove mouseMove mouseout mouseOut mouseover mouseOver pointermove pointerMove pointerout pointerOut pointerover pointerOver scroll scroll toggle toggle touchmove touchMove wheel wheel".split(" "),1),Rt(Dt,2);for(var wr="change selectionchange textInput compositionstart compositionend compositionupdate".split(" "),_r=0;_r<wr.length;_r++)jt.set(wr[_r],0);s("onMouseEnter",["mouseout","mouseover"]),s("onMouseLeave",["mouseout","mouseover"]),s("onPointerEnter",["pointerout","pointerover"]),s("onPointerLeave",["pointerout","pointerover"]),c("onChange","change click focusin focusout input keydown keyup selectionchange".split(" ")),c("onSelect","focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" ")),c("onBeforeInput",["compositionend","keypress","textInput","paste"]),c("onCompositionEnd","compositionend focusout keydown keypress keyup mousedown".split(" ")),c("onCompositionStart","compositionstart focusout keydown keypress keyup mousedown".split(" ")),c("onCompositionUpdate","compositionupdate focusout keydown keypress keyup mousedown".split(" "));var Sr="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),xr=new Set("cancel close invalid load scroll toggle".split(" ").concat(Sr));function Er(e,t,n){var r=e.type||"unknown-event";e.currentTarget=n,function(e,t,n,r,o,i,u,l,c){if(Ze.apply(this,arguments),Ve){if(!Ve)throw Error(a(198));var s=Xe;Ve=!1,Xe=null,We||(We=!0,Ye=s)}}(r,t,void 0,e),e.currentTarget=null}function kr(e,t){t=0!=(4&t);for(var n=0;n<e.length;n++){var r=e[n],o=r.event;r=r.listeners;e:{var i=void 0;if(t)for(var a=r.length-1;0<=a;a--){var u=r[a],l=u.instance,c=u.currentTarget;if(u=u.listener,l!==i&&o.isPropagationStopped())break e;Er(o,u,c),i=l}else for(a=0;a<r.length;a++){if(l=(u=r[a]).instance,c=u.currentTarget,u=u.listener,l!==i&&o.isPropagationStopped())break e;Er(o,u,c),i=l}}}if(We)throw e=Ye,We=!1,Ye=null,e}function Or(e,t){var n=no(t),r=e+"__bubble";n.has(r)||(Nr(t,e,2,!1),n.add(r))}var Pr="_reactListening"+Math.random().toString(36).slice(2);function Cr(e){e[Pr]||(e[Pr]=!0,u.forEach((function(t){xr.has(t)||Mr(t,!1,e,null),Mr(t,!0,e,null)})))}function Mr(e,t,n,r){var o=4<arguments.length&&void 0!==arguments[4]?arguments[4]:0,i=n;if("selectionchange"===e&&9!==n.nodeType&&(i=n.ownerDocument),null!==r&&!t&&xr.has(e)){if("scroll"!==e)return;o|=2,i=r}var a=no(i),u=e+"__"+(t?"capture":"bubble");a.has(u)||(t&&(o|=4),Nr(i,e,o,t),a.add(u))}function Nr(e,t,n,r){var o=jt.get(t);switch(void 0===o?2:o){case 0:o=qt;break;case 1:o=Gt;break;default:o=Kt}n=o.bind(null,t,n,e),o=void 0,!Ue||"touchstart"!==t&&"touchmove"!==t&&"wheel"!==t||(o=!0),r?void 0!==o?e.addEventListener(t,n,{capture:!0,passive:o}):e.addEventListener(t,n,!0):void 0!==o?e.addEventListener(t,n,{passive:o}):e.addEventListener(t,n,!1)}function Tr(e,t,n,r,o){var i=r;if(0==(1&t)&&0==(2&t)&&null!==r)e:for(;;){if(null===r)return;var a=r.tag;if(3===a||4===a){var u=r.stateNode.containerInfo;if(u===o||8===u.nodeType&&u.parentNode===o)break;if(4===a)for(a=r.return;null!==a;){var l=a.tag;if((3===l||4===l)&&((l=a.stateNode.containerInfo)===o||8===l.nodeType&&l.parentNode===o))return;a=a.return}for(;null!==u;){if(null===(a=Qr(u)))return;if(5===(l=a.tag)||6===l){r=i=a;continue e}u=u.parentNode}}r=r.return}!function(e,t,n){if(ze)return e();ze=!0;try{Ae(e,t,n)}finally{ze=!1,Ie()}}((function(){var r=i,o=ke(n),a=[];e:{var u=Tt.get(e);if(void 0!==u){var l=dn,c=e;switch(e){case"keypress":if(0===rn(n))break e;case"keydown":case"keyup":l=Pn;break;case"focusin":c="focus",l=mn;break;case"focusout":c="blur",l=mn;break;case"beforeblur":case"afterblur":l=mn;break;case"click":if(2===n.button)break e;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":l=yn;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":l=gn;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":l=Mn;break;case Pt:case Ct:case Mt:l=bn;break;case Nt:l=Nn;break;case"scroll":l=hn;break;case"wheel":l=Tn;break;case"copy":case"cut":case"paste":l=wn;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":l=Cn}var s=0!=(4&t),f=!s&&"scroll"===e,d=s?null!==u?u+"Capture":null:u;s=[];for(var p,h=r;null!==h;){var v=(p=h).stateNode;if(5===p.tag&&null!==v&&(p=v,null!==d&&null!=(v=Be(h,d))&&s.push(jr(h,v,p))),f)break;h=h.return}0<s.length&&(u=new l(u,c,null,n,o),a.push({event:u,listeners:s}))}}if(0==(7&t)){if(l="mouseout"===e||"pointerout"===e,(!(u="mouseover"===e||"pointerover"===e)||0!=(16&t)||!(c=n.relatedTarget||n.fromElement)||!Qr(c)&&!c[Gr])&&(l||u)&&(u=o.window===o?o:(u=o.ownerDocument)?u.defaultView||u.parentWindow:window,l?(l=r,null!==(c=(c=n.relatedTarget||n.toElement)?Qr(c):null)&&(c!==(f=qe(c))||5!==c.tag&&6!==c.tag)&&(c=null)):(l=null,c=r),l!==c)){if(s=yn,v="onMouseLeave",d="onMouseEnter",h="mouse","pointerout"!==e&&"pointerover"!==e||(s=Cn,v="onPointerLeave",d="onPointerEnter",h="pointer"),f=null==l?u:eo(l),p=null==c?u:eo(c),(u=new s(v,h+"leave",l,n,o)).target=f,u.relatedTarget=p,v=null,Qr(o)===r&&((s=new s(d,h+"enter",c,n,o)).target=p,s.relatedTarget=f,v=s),f=v,l&&c)e:{for(d=c,h=0,p=s=l;p;p=Rr(p))h++;for(p=0,v=d;v;v=Rr(v))p++;for(;0<h-p;)s=Rr(s),h--;for(;0<p-h;)d=Rr(d),p--;for(;h--;){if(s===d||null!==d&&s===d.alternate)break e;s=Rr(s),d=Rr(d)}s=null}else s=null;null!==l&&Ar(a,u,l,s,!1),null!==c&&null!==f&&Ar(a,f,c,s,!0)}if("select"===(l=(u=r?eo(r):window).nodeName&&u.nodeName.toLowerCase())||"input"===l&&"file"===u.type)var y=qn;else if(Vn(u))if(Gn)y=ir;else{y=rr;var g=nr}else(l=u.nodeName)&&"input"===l.toLowerCase()&&("checkbox"===u.type||"radio"===u.type)&&(y=or);switch(y&&(y=y(e,r))?Xn(a,y,n,o):(g&&g(e,u,r),"focusout"===e&&(g=u._wrapperState)&&g.controlled&&"number"===u.type&&oe(u,"number",u.value)),g=r?eo(r):window,e){case"focusin":(Vn(g)||"true"===g.contentEditable)&&(vr=g,yr=r,gr=null);break;case"focusout":gr=yr=vr=null;break;case"mousedown":mr=!0;break;case"contextmenu":case"mouseup":case"dragend":mr=!1,br(a,n,o);break;case"selectionchange":if(hr)break;case"keydown":case"keyup":br(a,n,o)}var m;if(Dn)e:{switch(e){case"compositionstart":var b="onCompositionStart";break e;case"compositionend":b="onCompositionEnd";break e;case"compositionupdate":b="onCompositionUpdate";break e}b=void 0}else Fn?Bn(e,n)&&(b="onCompositionEnd"):"keydown"===e&&229===n.keyCode&&(b="onCompositionStart");b&&(Ln&&"ko"!==n.locale&&(Fn||"onCompositionStart"!==b?"onCompositionEnd"===b&&Fn&&(m=nn()):(en="value"in(Jt=o)?Jt.value:Jt.textContent,Fn=!0)),0<(g=Dr(r,b)).length&&(b=new _n(b,e,null,n,o),a.push({event:b,listeners:g}),(m||null!==(m=Un(n)))&&(b.data=m))),(m=An?function(e,t){switch(e){case"compositionend":return Un(t);case"keypress":return 32!==t.which?null:(In=!0,zn);case"textInput":return(e=t.data)===zn&&In?null:e;default:return null}}(e,n):function(e,t){if(Fn)return"compositionend"===e||!Dn&&Bn(e,t)?(e=nn(),tn=en=Jt=null,Fn=!1,e):null;switch(e){case"paste":return null;case"keypress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return Ln&&"ko"!==t.locale?null:t.data;default:return null}}(e,n))&&0<(r=Dr(r,"onBeforeInput")).length&&(o=new _n("onBeforeInput","beforeinput",null,n,o),a.push({event:o,listeners:r}),o.data=m)}kr(a,t)}))}function jr(e,t,n){return{instance:e,listener:t,currentTarget:n}}function Dr(e,t){for(var n=t+"Capture",r=[];null!==e;){var o=e,i=o.stateNode;5===o.tag&&null!==i&&(o=i,null!=(i=Be(e,n))&&r.unshift(jr(e,i,o)),null!=(i=Be(e,t))&&r.push(jr(e,i,o))),e=e.return}return r}function Rr(e){if(null===e)return null;do{e=e.return}while(e&&5!==e.tag);return e||null}function Ar(e,t,n,r,o){for(var i=t._reactName,a=[];null!==n&&n!==r;){var u=n,l=u.alternate,c=u.stateNode;if(null!==l&&l===r)break;5===u.tag&&null!==c&&(u=c,o?null!=(l=Be(n,i))&&a.unshift(jr(n,l,u)):o||null!=(l=Be(n,i))&&a.push(jr(n,l,u))),n=n.return}0!==a.length&&e.push({event:t,listeners:a})}function Lr(){}var zr=null,Ir=null;function Br(e,t){switch(e){case"button":case"input":case"select":case"textarea":return!!t.autoFocus}return!1}function Ur(e,t){return"textarea"===e||"option"===e||"noscript"===e||"string"==typeof t.children||"number"==typeof t.children||"object"==typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&null!=t.dangerouslySetInnerHTML.__html}var Fr="function"==typeof setTimeout?setTimeout:void 0,Hr="function"==typeof clearTimeout?clearTimeout:void 0;function Vr(e){(1===e.nodeType||9===e.nodeType&&null!=(e=e.body))&&(e.textContent="")}function Xr(e){for(;null!=e;e=e.nextSibling){var t=e.nodeType;if(1===t||3===t)break}return e}function Wr(e){e=e.previousSibling;for(var t=0;e;){if(8===e.nodeType){var n=e.data;if("$"===n||"$!"===n||"$?"===n){if(0===t)return e;t--}else"/$"===n&&t++}e=e.previousSibling}return null}var Yr=0,$r=Math.random().toString(36).slice(2),Zr="__reactFiber$"+$r,qr="__reactProps$"+$r,Gr="__reactContainer$"+$r,Kr="__reactEvents$"+$r;function Qr(e){var t=e[Zr];if(t)return t;for(var n=e.parentNode;n;){if(t=n[Gr]||n[Zr]){if(n=t.alternate,null!==t.child||null!==n&&null!==n.child)for(e=Wr(e);null!==e;){if(n=e[Zr])return n;e=Wr(e)}return t}n=(e=n).parentNode}return null}function Jr(e){return!(e=e[Zr]||e[Gr])||5!==e.tag&&6!==e.tag&&13!==e.tag&&3!==e.tag?null:e}function eo(e){if(5===e.tag||6===e.tag)return e.stateNode;throw Error(a(33))}function to(e){return e[qr]||null}function no(e){var t=e[Kr];return void 0===t&&(t=e[Kr]=new Set),t}var ro=[],oo=-1;function io(e){return{current:e}}function ao(e){0>oo||(e.current=ro[oo],ro[oo]=null,oo--)}function uo(e,t){oo++,ro[oo]=e.current,e.current=t}var lo={},co=io(lo),so=io(!1),fo=lo;function po(e,t){var n=e.type.contextTypes;if(!n)return lo;var r=e.stateNode;if(r&&r.__reactInternalMemoizedUnmaskedChildContext===t)return r.__reactInternalMemoizedMaskedChildContext;var o,i={};for(o in n)i[o]=t[o];return r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=i),i}function ho(e){return null!=e.childContextTypes}function vo(){ao(so),ao(co)}function yo(e,t,n){if(co.current!==lo)throw Error(a(168));uo(co,t),uo(so,n)}function go(e,t,n){var r=e.stateNode;if(e=t.childContextTypes,"function"!=typeof r.getChildContext)return n;for(var i in r=r.getChildContext())if(!(i in e))throw Error(a(108,$(t)||"Unknown",i));return o({},n,r)}function mo(e){return e=(e=e.stateNode)&&e.__reactInternalMemoizedMergedChildContext||lo,fo=co.current,uo(co,e),uo(so,so.current),!0}function bo(e,t,n){var r=e.stateNode;if(!r)throw Error(a(169));n?(e=go(e,t,fo),r.__reactInternalMemoizedMergedChildContext=e,ao(so),ao(co),uo(co,e)):ao(so),uo(so,n)}var wo=null,_o=null,So=i.unstable_runWithPriority,xo=i.unstable_scheduleCallback,Eo=i.unstable_cancelCallback,ko=i.unstable_shouldYield,Oo=i.unstable_requestPaint,Po=i.unstable_now,Co=i.unstable_getCurrentPriorityLevel,Mo=i.unstable_ImmediatePriority,No=i.unstable_UserBlockingPriority,To=i.unstable_NormalPriority,jo=i.unstable_LowPriority,Do=i.unstable_IdlePriority,Ro={},Ao=void 0!==Oo?Oo:function(){},Lo=null,zo=null,Io=!1,Bo=Po(),Uo=1e4>Bo?Po:function(){return Po()-Bo};function Fo(){switch(Co()){case Mo:return 99;case No:return 98;case To:return 97;case jo:return 96;case Do:return 95;default:throw Error(a(332))}}function Ho(e){switch(e){case 99:return Mo;case 98:return No;case 97:return To;case 96:return jo;case 95:return Do;default:throw Error(a(332))}}function Vo(e,t){return e=Ho(e),So(e,t)}function Xo(e,t,n){return e=Ho(e),xo(e,t,n)}function Wo(){if(null!==zo){var e=zo;zo=null,Eo(e)}Yo()}function Yo(){if(!Io&&null!==Lo){Io=!0;var e=0;try{var t=Lo;Vo(99,(function(){for(;e<t.length;e++){var n=t[e];do{n=n(!0)}while(null!==n)}})),Lo=null}catch(t){throw null!==Lo&&(Lo=Lo.slice(e+1)),xo(Mo,Wo),t}finally{Io=!1}}}var $o=_.ReactCurrentBatchConfig;function Zo(e,t){if(e&&e.defaultProps){for(var n in t=o({},t),e=e.defaultProps)void 0===t[n]&&(t[n]=e[n]);return t}return t}var qo=io(null),Go=null,Ko=null,Qo=null;function Jo(){Qo=Ko=Go=null}function ei(e){var t=qo.current;ao(qo),e.type._context._currentValue=t}function ti(e,t){for(;null!==e;){var n=e.alternate;if((e.childLanes&t)===t){if(null===n||(n.childLanes&t)===t)break;n.childLanes|=t}else e.childLanes|=t,null!==n&&(n.childLanes|=t);e=e.return}}function ni(e,t){Go=e,Qo=Ko=null,null!==(e=e.dependencies)&&null!==e.firstContext&&(0!=(e.lanes&t)&&(Da=!0),e.firstContext=null)}function ri(e,t){if(Qo!==e&&!1!==t&&0!==t)if("number"==typeof t&&1073741823!==t||(Qo=e,t=1073741823),t={context:e,observedBits:t,next:null},null===Ko){if(null===Go)throw Error(a(308));Ko=t,Go.dependencies={lanes:0,firstContext:t,responders:null}}else Ko=Ko.next=t;return e._currentValue}var oi=!1;function ii(e){e.updateQueue={baseState:e.memoizedState,firstBaseUpdate:null,lastBaseUpdate:null,shared:{pending:null},effects:null}}function ai(e,t){e=e.updateQueue,t.updateQueue===e&&(t.updateQueue={baseState:e.baseState,firstBaseUpdate:e.firstBaseUpdate,lastBaseUpdate:e.lastBaseUpdate,shared:e.shared,effects:e.effects})}function ui(e,t){return{eventTime:e,lane:t,tag:0,payload:null,callback:null,next:null}}function li(e,t){if(null!==(e=e.updateQueue)){var n=(e=e.shared).pending;null===n?t.next=t:(t.next=n.next,n.next=t),e.pending=t}}function ci(e,t){var n=e.updateQueue,r=e.alternate;if(null!==r&&n===(r=r.updateQueue)){var o=null,i=null;if(null!==(n=n.firstBaseUpdate)){do{var a={eventTime:n.eventTime,lane:n.lane,tag:n.tag,payload:n.payload,callback:n.callback,next:null};null===i?o=i=a:i=i.next=a,n=n.next}while(null!==n);null===i?o=i=t:i=i.next=t}else o=i=t;return n={baseState:r.baseState,firstBaseUpdate:o,lastBaseUpdate:i,shared:r.shared,effects:r.effects},void(e.updateQueue=n)}null===(e=n.lastBaseUpdate)?n.firstBaseUpdate=t:e.next=t,n.lastBaseUpdate=t}function si(e,t,n,r){var i=e.updateQueue;oi=!1;var a=i.firstBaseUpdate,u=i.lastBaseUpdate,l=i.shared.pending;if(null!==l){i.shared.pending=null;var c=l,s=c.next;c.next=null,null===u?a=s:u.next=s,u=c;var f=e.alternate;if(null!==f){var d=(f=f.updateQueue).lastBaseUpdate;d!==u&&(null===d?f.firstBaseUpdate=s:d.next=s,f.lastBaseUpdate=c)}}if(null!==a){for(d=i.baseState,u=0,f=s=c=null;;){l=a.lane;var p=a.eventTime;if((r&l)===l){null!==f&&(f=f.next={eventTime:p,lane:0,tag:a.tag,payload:a.payload,callback:a.callback,next:null});e:{var h=e,v=a;switch(l=t,p=n,v.tag){case 1:if("function"==typeof(h=v.payload)){d=h.call(p,d,l);break e}d=h;break e;case 3:h.flags=-4097&h.flags|64;case 0:if(null==(l="function"==typeof(h=v.payload)?h.call(p,d,l):h))break e;d=o({},d,l);break e;case 2:oi=!0}}null!==a.callback&&(e.flags|=32,null===(l=i.effects)?i.effects=[a]:l.push(a))}else p={eventTime:p,lane:l,tag:a.tag,payload:a.payload,callback:a.callback,next:null},null===f?(s=f=p,c=d):f=f.next=p,u|=l;if(null===(a=a.next)){if(null===(l=i.shared.pending))break;a=l.next,l.next=null,i.lastBaseUpdate=l,i.shared.pending=null}}null===f&&(c=d),i.baseState=c,i.firstBaseUpdate=s,i.lastBaseUpdate=f,Au|=u,e.lanes=u,e.memoizedState=d}}function fi(e,t,n){if(e=t.effects,t.effects=null,null!==e)for(t=0;t<e.length;t++){var r=e[t],o=r.callback;if(null!==o){if(r.callback=null,r=n,"function"!=typeof o)throw Error(a(191,o));o.call(r)}}}var di=(new r.Component).refs;function pi(e,t,n,r){n=null==(n=n(r,t=e.memoizedState))?t:o({},t,n),e.memoizedState=n,0===e.lanes&&(e.updateQueue.baseState=n)}var hi={isMounted:function(e){return!!(e=e._reactInternals)&&qe(e)===e},enqueueSetState:function(e,t,n){e=e._reactInternals;var r=al(),o=ul(e),i=ui(r,o);i.payload=t,null!=n&&(i.callback=n),li(e,i),ll(e,o,r)},enqueueReplaceState:function(e,t,n){e=e._reactInternals;var r=al(),o=ul(e),i=ui(r,o);i.tag=1,i.payload=t,null!=n&&(i.callback=n),li(e,i),ll(e,o,r)},enqueueForceUpdate:function(e,t){e=e._reactInternals;var n=al(),r=ul(e),o=ui(n,r);o.tag=2,null!=t&&(o.callback=t),li(e,o),ll(e,r,n)}};function vi(e,t,n,r,o,i,a){return"function"==typeof(e=e.stateNode).shouldComponentUpdate?e.shouldComponentUpdate(r,i,a):!(t.prototype&&t.prototype.isPureReactComponent&&lr(n,r)&&lr(o,i))}function yi(e,t,n){var r=!1,o=lo,i=t.contextType;return"object"==typeof i&&null!==i?i=ri(i):(o=ho(t)?fo:co.current,i=(r=null!=(r=t.contextTypes))?po(e,o):lo),t=new t(n,i),e.memoizedState=null!==t.state&&void 0!==t.state?t.state:null,t.updater=hi,e.stateNode=t,t._reactInternals=e,r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=o,e.__reactInternalMemoizedMaskedChildContext=i),t}function gi(e,t,n,r){e=t.state,"function"==typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(n,r),"function"==typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(n,r),t.state!==e&&hi.enqueueReplaceState(t,t.state,null)}function mi(e,t,n,r){var o=e.stateNode;o.props=n,o.state=e.memoizedState,o.refs=di,ii(e);var i=t.contextType;"object"==typeof i&&null!==i?o.context=ri(i):(i=ho(t)?fo:co.current,o.context=po(e,i)),si(e,n,o,r),o.state=e.memoizedState,"function"==typeof(i=t.getDerivedStateFromProps)&&(pi(e,t,i,n),o.state=e.memoizedState),"function"==typeof t.getDerivedStateFromProps||"function"==typeof o.getSnapshotBeforeUpdate||"function"!=typeof o.UNSAFE_componentWillMount&&"function"!=typeof o.componentWillMount||(t=o.state,"function"==typeof o.componentWillMount&&o.componentWillMount(),"function"==typeof o.UNSAFE_componentWillMount&&o.UNSAFE_componentWillMount(),t!==o.state&&hi.enqueueReplaceState(o,o.state,null),si(e,n,o,r),o.state=e.memoizedState),"function"==typeof o.componentDidMount&&(e.flags|=4)}var bi=Array.isArray;function wi(e,t,n){if(null!==(e=n.ref)&&"function"!=typeof e&&"object"!=typeof e){if(n._owner){if(n=n._owner){if(1!==n.tag)throw Error(a(309));var r=n.stateNode}if(!r)throw Error(a(147,e));var o=""+e;return null!==t&&null!==t.ref&&"function"==typeof t.ref&&t.ref._stringRef===o?t.ref:((t=function(e){var t=r.refs;t===di&&(t=r.refs={}),null===e?delete t[o]:t[o]=e})._stringRef=o,t)}if("string"!=typeof e)throw Error(a(284));if(!n._owner)throw Error(a(290,e))}return e}function _i(e,t){if("textarea"!==e.type)throw Error(a(31,"[object Object]"===Object.prototype.toString.call(t)?"object with keys {"+Object.keys(t).join(", ")+"}":t))}function Si(e){function t(t,n){if(e){var r=t.lastEffect;null!==r?(r.nextEffect=n,t.lastEffect=n):t.firstEffect=t.lastEffect=n,n.nextEffect=null,n.flags=8}}function n(n,r){if(!e)return null;for(;null!==r;)t(n,r),r=r.sibling;return null}function r(e,t){for(e=new Map;null!==t;)null!==t.key?e.set(t.key,t):e.set(t.index,t),t=t.sibling;return e}function o(e,t){return(e=Ul(e,t)).index=0,e.sibling=null,e}function i(t,n,r){return t.index=r,e?null!==(r=t.alternate)?(r=r.index)<n?(t.flags=2,n):r:(t.flags=2,n):n}function u(t){return e&&null===t.alternate&&(t.flags=2),t}function l(e,t,n,r){return null===t||6!==t.tag?((t=Xl(n,e.mode,r)).return=e,t):((t=o(t,n)).return=e,t)}function c(e,t,n,r){return null!==t&&t.elementType===n.type?((r=o(t,n.props)).ref=wi(e,t,n),r.return=e,r):((r=Fl(n.type,n.key,n.props,null,e.mode,r)).ref=wi(e,t,n),r.return=e,r)}function s(e,t,n,r){return null===t||4!==t.tag||t.stateNode.containerInfo!==n.containerInfo||t.stateNode.implementation!==n.implementation?((t=Wl(n,e.mode,r)).return=e,t):((t=o(t,n.children||[])).return=e,t)}function f(e,t,n,r,i){return null===t||7!==t.tag?((t=Hl(n,e.mode,r,i)).return=e,t):((t=o(t,n)).return=e,t)}function d(e,t,n){if("string"==typeof t||"number"==typeof t)return(t=Xl(""+t,e.mode,n)).return=e,t;if("object"==typeof t&&null!==t){switch(t.$$typeof){case S:return(n=Fl(t.type,t.key,t.props,null,e.mode,n)).ref=wi(e,null,t),n.return=e,n;case x:return(t=Wl(t,e.mode,n)).return=e,t}if(bi(t)||H(t))return(t=Hl(t,e.mode,n,null)).return=e,t;_i(e,t)}return null}function p(e,t,n,r){var o=null!==t?t.key:null;if("string"==typeof n||"number"==typeof n)return null!==o?null:l(e,t,""+n,r);if("object"==typeof n&&null!==n){switch(n.$$typeof){case S:return n.key===o?n.type===E?f(e,t,n.props.children,r,o):c(e,t,n,r):null;case x:return n.key===o?s(e,t,n,r):null}if(bi(n)||H(n))return null!==o?null:f(e,t,n,r,null);_i(e,n)}return null}function h(e,t,n,r,o){if("string"==typeof r||"number"==typeof r)return l(t,e=e.get(n)||null,""+r,o);if("object"==typeof r&&null!==r){switch(r.$$typeof){case S:return e=e.get(null===r.key?n:r.key)||null,r.type===E?f(t,e,r.props.children,o,r.key):c(t,e,r,o);case x:return s(t,e=e.get(null===r.key?n:r.key)||null,r,o)}if(bi(r)||H(r))return f(t,e=e.get(n)||null,r,o,null);_i(t,r)}return null}function v(o,a,u,l){for(var c=null,s=null,f=a,v=a=0,y=null;null!==f&&v<u.length;v++){f.index>v?(y=f,f=null):y=f.sibling;var g=p(o,f,u[v],l);if(null===g){null===f&&(f=y);break}e&&f&&null===g.alternate&&t(o,f),a=i(g,a,v),null===s?c=g:s.sibling=g,s=g,f=y}if(v===u.length)return n(o,f),c;if(null===f){for(;v<u.length;v++)null!==(f=d(o,u[v],l))&&(a=i(f,a,v),null===s?c=f:s.sibling=f,s=f);return c}for(f=r(o,f);v<u.length;v++)null!==(y=h(f,o,v,u[v],l))&&(e&&null!==y.alternate&&f.delete(null===y.key?v:y.key),a=i(y,a,v),null===s?c=y:s.sibling=y,s=y);return e&&f.forEach((function(e){return t(o,e)})),c}function y(o,u,l,c){var s=H(l);if("function"!=typeof s)throw Error(a(150));if(null==(l=s.call(l)))throw Error(a(151));for(var f=s=null,v=u,y=u=0,g=null,m=l.next();null!==v&&!m.done;y++,m=l.next()){v.index>y?(g=v,v=null):g=v.sibling;var b=p(o,v,m.value,c);if(null===b){null===v&&(v=g);break}e&&v&&null===b.alternate&&t(o,v),u=i(b,u,y),null===f?s=b:f.sibling=b,f=b,v=g}if(m.done)return n(o,v),s;if(null===v){for(;!m.done;y++,m=l.next())null!==(m=d(o,m.value,c))&&(u=i(m,u,y),null===f?s=m:f.sibling=m,f=m);return s}for(v=r(o,v);!m.done;y++,m=l.next())null!==(m=h(v,o,y,m.value,c))&&(e&&null!==m.alternate&&v.delete(null===m.key?y:m.key),u=i(m,u,y),null===f?s=m:f.sibling=m,f=m);return e&&v.forEach((function(e){return t(o,e)})),s}return function(e,r,i,l){var c="object"==typeof i&&null!==i&&i.type===E&&null===i.key;c&&(i=i.props.children);var s="object"==typeof i&&null!==i;if(s)switch(i.$$typeof){case S:e:{for(s=i.key,c=r;null!==c;){if(c.key===s){switch(c.tag){case 7:if(i.type===E){n(e,c.sibling),(r=o(c,i.props.children)).return=e,e=r;break e}break;default:if(c.elementType===i.type){n(e,c.sibling),(r=o(c,i.props)).ref=wi(e,c,i),r.return=e,e=r;break e}}n(e,c);break}t(e,c),c=c.sibling}i.type===E?((r=Hl(i.props.children,e.mode,l,i.key)).return=e,e=r):((l=Fl(i.type,i.key,i.props,null,e.mode,l)).ref=wi(e,r,i),l.return=e,e=l)}return u(e);case x:e:{for(c=i.key;null!==r;){if(r.key===c){if(4===r.tag&&r.stateNode.containerInfo===i.containerInfo&&r.stateNode.implementation===i.implementation){n(e,r.sibling),(r=o(r,i.children||[])).return=e,e=r;break e}n(e,r);break}t(e,r),r=r.sibling}(r=Wl(i,e.mode,l)).return=e,e=r}return u(e)}if("string"==typeof i||"number"==typeof i)return i=""+i,null!==r&&6===r.tag?(n(e,r.sibling),(r=o(r,i)).return=e,e=r):(n(e,r),(r=Xl(i,e.mode,l)).return=e,e=r),u(e);if(bi(i))return v(e,r,i,l);if(H(i))return y(e,r,i,l);if(s&&_i(e,i),void 0===i&&!c)switch(e.tag){case 1:case 22:case 0:case 11:case 15:throw Error(a(152,$(e.type)||"Component"))}return n(e,r)}}var xi=Si(!0),Ei=Si(!1),ki={},Oi=io(ki),Pi=io(ki),Ci=io(ki);function Mi(e){if(e===ki)throw Error(a(174));return e}function Ni(e,t){switch(uo(Ci,t),uo(Pi,e),uo(Oi,ki),e=t.nodeType){case 9:case 11:t=(t=t.documentElement)?t.namespaceURI:pe(null,"");break;default:t=pe(t=(e=8===e?t.parentNode:t).namespaceURI||null,e=e.tagName)}ao(Oi),uo(Oi,t)}function Ti(){ao(Oi),ao(Pi),ao(Ci)}function ji(e){Mi(Ci.current);var t=Mi(Oi.current),n=pe(t,e.type);t!==n&&(uo(Pi,e),uo(Oi,n))}function Di(e){Pi.current===e&&(ao(Oi),ao(Pi))}var Ri=io(0);function Ai(e){for(var t=e;null!==t;){if(13===t.tag){var n=t.memoizedState;if(null!==n&&(null===(n=n.dehydrated)||"$?"===n.data||"$!"===n.data))return t}else if(19===t.tag&&void 0!==t.memoizedProps.revealOrder){if(0!=(64&t.flags))return t}else if(null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}return null}var Li=null,zi=null,Ii=!1;function Bi(e,t){var n=Il(5,null,null,0);n.elementType="DELETED",n.type="DELETED",n.stateNode=t,n.return=e,n.flags=8,null!==e.lastEffect?(e.lastEffect.nextEffect=n,e.lastEffect=n):e.firstEffect=e.lastEffect=n}function Ui(e,t){switch(e.tag){case 5:var n=e.type;return null!==(t=1!==t.nodeType||n.toLowerCase()!==t.nodeName.toLowerCase()?null:t)&&(e.stateNode=t,!0);case 6:return null!==(t=""===e.pendingProps||3!==t.nodeType?null:t)&&(e.stateNode=t,!0);case 13:default:return!1}}function Fi(e){if(Ii){var t=zi;if(t){var n=t;if(!Ui(e,t)){if(!(t=Xr(n.nextSibling))||!Ui(e,t))return e.flags=-1025&e.flags|2,Ii=!1,void(Li=e);Bi(Li,n)}Li=e,zi=Xr(t.firstChild)}else e.flags=-1025&e.flags|2,Ii=!1,Li=e}}function Hi(e){for(e=e.return;null!==e&&5!==e.tag&&3!==e.tag&&13!==e.tag;)e=e.return;Li=e}function Vi(e){if(e!==Li)return!1;if(!Ii)return Hi(e),Ii=!0,!1;var t=e.type;if(5!==e.tag||"head"!==t&&"body"!==t&&!Ur(t,e.memoizedProps))for(t=zi;t;)Bi(e,t),t=Xr(t.nextSibling);if(Hi(e),13===e.tag){if(!(e=null!==(e=e.memoizedState)?e.dehydrated:null))throw Error(a(317));e:{for(e=e.nextSibling,t=0;e;){if(8===e.nodeType){var n=e.data;if("/$"===n){if(0===t){zi=Xr(e.nextSibling);break e}t--}else"$"!==n&&"$!"!==n&&"$?"!==n||t++}e=e.nextSibling}zi=null}}else zi=Li?Xr(e.stateNode.nextSibling):null;return!0}function Xi(){zi=Li=null,Ii=!1}var Wi=[];function Yi(){for(var e=0;e<Wi.length;e++)Wi[e]._workInProgressVersionPrimary=null;Wi.length=0}var $i=_.ReactCurrentDispatcher,Zi=_.ReactCurrentBatchConfig,qi=0,Gi=null,Ki=null,Qi=null,Ji=!1,ea=!1;function ta(){throw Error(a(321))}function na(e,t){if(null===t)return!1;for(var n=0;n<t.length&&n<e.length;n++)if(!ar(e[n],t[n]))return!1;return!0}function ra(e,t,n,r,o,i){if(qi=i,Gi=t,t.memoizedState=null,t.updateQueue=null,t.lanes=0,$i.current=null===e||null===e.memoizedState?Ma:Na,e=n(r,o),ea){i=0;do{if(ea=!1,!(25>i))throw Error(a(301));i+=1,Qi=Ki=null,t.updateQueue=null,$i.current=Ta,e=n(r,o)}while(ea)}if($i.current=Ca,t=null!==Ki&&null!==Ki.next,qi=0,Qi=Ki=Gi=null,Ji=!1,t)throw Error(a(300));return e}function oa(){var e={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};return null===Qi?Gi.memoizedState=Qi=e:Qi=Qi.next=e,Qi}function ia(){if(null===Ki){var e=Gi.alternate;e=null!==e?e.memoizedState:null}else e=Ki.next;var t=null===Qi?Gi.memoizedState:Qi.next;if(null!==t)Qi=t,Ki=e;else{if(null===e)throw Error(a(310));e={memoizedState:(Ki=e).memoizedState,baseState:Ki.baseState,baseQueue:Ki.baseQueue,queue:Ki.queue,next:null},null===Qi?Gi.memoizedState=Qi=e:Qi=Qi.next=e}return Qi}function aa(e,t){return"function"==typeof t?t(e):t}function ua(e){var t=ia(),n=t.queue;if(null===n)throw Error(a(311));n.lastRenderedReducer=e;var r=Ki,o=r.baseQueue,i=n.pending;if(null!==i){if(null!==o){var u=o.next;o.next=i.next,i.next=u}r.baseQueue=o=i,n.pending=null}if(null!==o){o=o.next,r=r.baseState;var l=u=i=null,c=o;do{var s=c.lane;if((qi&s)===s)null!==l&&(l=l.next={lane:0,action:c.action,eagerReducer:c.eagerReducer,eagerState:c.eagerState,next:null}),r=c.eagerReducer===e?c.eagerState:e(r,c.action);else{var f={lane:s,action:c.action,eagerReducer:c.eagerReducer,eagerState:c.eagerState,next:null};null===l?(u=l=f,i=r):l=l.next=f,Gi.lanes|=s,Au|=s}c=c.next}while(null!==c&&c!==o);null===l?i=r:l.next=u,ar(r,t.memoizedState)||(Da=!0),t.memoizedState=r,t.baseState=i,t.baseQueue=l,n.lastRenderedState=r}return[t.memoizedState,n.dispatch]}function la(e){var t=ia(),n=t.queue;if(null===n)throw Error(a(311));n.lastRenderedReducer=e;var r=n.dispatch,o=n.pending,i=t.memoizedState;if(null!==o){n.pending=null;var u=o=o.next;do{i=e(i,u.action),u=u.next}while(u!==o);ar(i,t.memoizedState)||(Da=!0),t.memoizedState=i,null===t.baseQueue&&(t.baseState=i),n.lastRenderedState=i}return[i,r]}function ca(e,t,n){var r=t._getVersion;r=r(t._source);var o=t._workInProgressVersionPrimary;if(null!==o?e=o===r:(e=e.mutableReadLanes,(e=(qi&e)===e)&&(t._workInProgressVersionPrimary=r,Wi.push(t))),e)return n(t._source);throw Wi.push(t),Error(a(350))}function sa(e,t,n,r){var o=Pu;if(null===o)throw Error(a(349));var i=t._getVersion,u=i(t._source),l=$i.current,c=l.useState((function(){return ca(o,t,n)})),s=c[1],f=c[0];c=Qi;var d=e.memoizedState,p=d.refs,h=p.getSnapshot,v=d.source;d=d.subscribe;var y=Gi;return e.memoizedState={refs:p,source:t,subscribe:r},l.useEffect((function(){p.getSnapshot=n,p.setSnapshot=s;var e=i(t._source);if(!ar(u,e)){e=n(t._source),ar(f,e)||(s(e),e=ul(y),o.mutableReadLanes|=e&o.pendingLanes),e=o.mutableReadLanes,o.entangledLanes|=e;for(var r=o.entanglements,a=e;0<a;){var l=31-Vt(a),c=1<<l;r[l]|=e,a&=~c}}}),[n,t,r]),l.useEffect((function(){return r(t._source,(function(){var e=p.getSnapshot,n=p.setSnapshot;try{n(e(t._source));var r=ul(y);o.mutableReadLanes|=r&o.pendingLanes}catch(e){n((function(){throw e}))}}))}),[t,r]),ar(h,n)&&ar(v,t)&&ar(d,r)||((e={pending:null,dispatch:null,lastRenderedReducer:aa,lastRenderedState:f}).dispatch=s=Pa.bind(null,Gi,e),c.queue=e,c.baseQueue=null,f=ca(o,t,n),c.memoizedState=c.baseState=f),f}function fa(e,t,n){return sa(ia(),e,t,n)}function da(e){var t=oa();return"function"==typeof e&&(e=e()),t.memoizedState=t.baseState=e,e=(e=t.queue={pending:null,dispatch:null,lastRenderedReducer:aa,lastRenderedState:e}).dispatch=Pa.bind(null,Gi,e),[t.memoizedState,e]}function pa(e,t,n,r){return e={tag:e,create:t,destroy:n,deps:r,next:null},null===(t=Gi.updateQueue)?(t={lastEffect:null},Gi.updateQueue=t,t.lastEffect=e.next=e):null===(n=t.lastEffect)?t.lastEffect=e.next=e:(r=n.next,n.next=e,e.next=r,t.lastEffect=e),e}function ha(e){return e={current:e},oa().memoizedState=e}function va(){return ia().memoizedState}function ya(e,t,n,r){var o=oa();Gi.flags|=e,o.memoizedState=pa(1|t,n,void 0,void 0===r?null:r)}function ga(e,t,n,r){var o=ia();r=void 0===r?null:r;var i=void 0;if(null!==Ki){var a=Ki.memoizedState;if(i=a.destroy,null!==r&&na(r,a.deps))return void pa(t,n,i,r)}Gi.flags|=e,o.memoizedState=pa(1|t,n,i,r)}function ma(e,t){return ya(516,4,e,t)}function ba(e,t){return ga(516,4,e,t)}function wa(e,t){return ga(4,2,e,t)}function _a(e,t){return"function"==typeof t?(e=e(),t(e),function(){t(null)}):null!=t?(e=e(),t.current=e,function(){t.current=null}):void 0}function Sa(e,t,n){return n=null!=n?n.concat([e]):null,ga(4,2,_a.bind(null,t,e),n)}function xa(){}function Ea(e,t){var n=ia();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&na(t,r[1])?r[0]:(n.memoizedState=[e,t],e)}function ka(e,t){var n=ia();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&na(t,r[1])?r[0]:(e=e(),n.memoizedState=[e,t],e)}function Oa(e,t){var n=Fo();Vo(98>n?98:n,(function(){e(!0)})),Vo(97<n?97:n,(function(){var n=Zi.transition;Zi.transition=1;try{e(!1),t()}finally{Zi.transition=n}}))}function Pa(e,t,n){var r=al(),o=ul(e),i={lane:o,action:n,eagerReducer:null,eagerState:null,next:null},a=t.pending;if(null===a?i.next=i:(i.next=a.next,a.next=i),t.pending=i,a=e.alternate,e===Gi||null!==a&&a===Gi)ea=Ji=!0;else{if(0===e.lanes&&(null===a||0===a.lanes)&&null!==(a=t.lastRenderedReducer))try{var u=t.lastRenderedState,l=a(u,n);if(i.eagerReducer=a,i.eagerState=l,ar(l,u))return}catch(e){}ll(e,o,r)}}var Ca={readContext:ri,useCallback:ta,useContext:ta,useEffect:ta,useImperativeHandle:ta,useLayoutEffect:ta,useMemo:ta,useReducer:ta,useRef:ta,useState:ta,useDebugValue:ta,useDeferredValue:ta,useTransition:ta,useMutableSource:ta,useOpaqueIdentifier:ta,unstable_isNewReconciler:!1},Ma={readContext:ri,useCallback:function(e,t){return oa().memoizedState=[e,void 0===t?null:t],e},useContext:ri,useEffect:ma,useImperativeHandle:function(e,t,n){return n=null!=n?n.concat([e]):null,ya(4,2,_a.bind(null,t,e),n)},useLayoutEffect:function(e,t){return ya(4,2,e,t)},useMemo:function(e,t){var n=oa();return t=void 0===t?null:t,e=e(),n.memoizedState=[e,t],e},useReducer:function(e,t,n){var r=oa();return t=void 0!==n?n(t):t,r.memoizedState=r.baseState=t,e=(e=r.queue={pending:null,dispatch:null,lastRenderedReducer:e,lastRenderedState:t}).dispatch=Pa.bind(null,Gi,e),[r.memoizedState,e]},useRef:ha,useState:da,useDebugValue:xa,useDeferredValue:function(e){var t=da(e),n=t[0],r=t[1];return ma((function(){var t=Zi.transition;Zi.transition=1;try{r(e)}finally{Zi.transition=t}}),[e]),n},useTransition:function(){var e=da(!1),t=e[0];return ha(e=Oa.bind(null,e[1])),[e,t]},useMutableSource:function(e,t,n){var r=oa();return r.memoizedState={refs:{getSnapshot:t,setSnapshot:null},source:e,subscribe:n},sa(r,e,t,n)},useOpaqueIdentifier:function(){if(Ii){var e=!1,t=function(e){return{$$typeof:A,toString:e,valueOf:e}}((function(){throw e||(e=!0,n("r:"+(Yr++).toString(36))),Error(a(355))})),n=da(t)[1];return 0==(2&Gi.mode)&&(Gi.flags|=516,pa(5,(function(){n("r:"+(Yr++).toString(36))}),void 0,null)),t}return da(t="r:"+(Yr++).toString(36)),t},unstable_isNewReconciler:!1},Na={readContext:ri,useCallback:Ea,useContext:ri,useEffect:ba,useImperativeHandle:Sa,useLayoutEffect:wa,useMemo:ka,useReducer:ua,useRef:va,useState:function(){return ua(aa)},useDebugValue:xa,useDeferredValue:function(e){var t=ua(aa),n=t[0],r=t[1];return ba((function(){var t=Zi.transition;Zi.transition=1;try{r(e)}finally{Zi.transition=t}}),[e]),n},useTransition:function(){var e=ua(aa)[0];return[va().current,e]},useMutableSource:fa,useOpaqueIdentifier:function(){return ua(aa)[0]},unstable_isNewReconciler:!1},Ta={readContext:ri,useCallback:Ea,useContext:ri,useEffect:ba,useImperativeHandle:Sa,useLayoutEffect:wa,useMemo:ka,useReducer:la,useRef:va,useState:function(){return la(aa)},useDebugValue:xa,useDeferredValue:function(e){var t=la(aa),n=t[0],r=t[1];return ba((function(){var t=Zi.transition;Zi.transition=1;try{r(e)}finally{Zi.transition=t}}),[e]),n},useTransition:function(){var e=la(aa)[0];return[va().current,e]},useMutableSource:fa,useOpaqueIdentifier:function(){return la(aa)[0]},unstable_isNewReconciler:!1},ja=_.ReactCurrentOwner,Da=!1;function Ra(e,t,n,r){t.child=null===e?Ei(t,null,n,r):xi(t,e.child,n,r)}function Aa(e,t,n,r,o){n=n.render;var i=t.ref;return ni(t,o),r=ra(e,t,n,r,i,o),null===e||Da?(t.flags|=1,Ra(e,t,r,o),t.child):(t.updateQueue=e.updateQueue,t.flags&=-517,e.lanes&=~o,Ja(e,t,o))}function La(e,t,n,r,o,i){if(null===e){var a=n.type;return"function"!=typeof a||Bl(a)||void 0!==a.defaultProps||null!==n.compare||void 0!==n.defaultProps?((e=Fl(n.type,null,r,t,t.mode,i)).ref=t.ref,e.return=t,t.child=e):(t.tag=15,t.type=a,za(e,t,a,r,o,i))}return a=e.child,0==(o&i)&&(o=a.memoizedProps,(n=null!==(n=n.compare)?n:lr)(o,r)&&e.ref===t.ref)?Ja(e,t,i):(t.flags|=1,(e=Ul(a,r)).ref=t.ref,e.return=t,t.child=e)}function za(e,t,n,r,o,i){if(null!==e&&lr(e.memoizedProps,r)&&e.ref===t.ref){if(Da=!1,0==(i&o))return t.lanes=e.lanes,Ja(e,t,i);0!=(16384&e.flags)&&(Da=!0)}return Ua(e,t,n,r,i)}function Ia(e,t,n){var r=t.pendingProps,o=r.children,i=null!==e?e.memoizedState:null;if("hidden"===r.mode||"unstable-defer-without-hiding"===r.mode)if(0==(4&t.mode))t.memoizedState={baseLanes:0},yl(0,n);else{if(0==(1073741824&n))return e=null!==i?i.baseLanes|n:n,t.lanes=t.childLanes=1073741824,t.memoizedState={baseLanes:e},yl(0,e),null;t.memoizedState={baseLanes:0},yl(0,null!==i?i.baseLanes:n)}else null!==i?(r=i.baseLanes|n,t.memoizedState=null):r=n,yl(0,r);return Ra(e,t,o,n),t.child}function Ba(e,t){var n=t.ref;(null===e&&null!==n||null!==e&&e.ref!==n)&&(t.flags|=128)}function Ua(e,t,n,r,o){var i=ho(n)?fo:co.current;return i=po(t,i),ni(t,o),n=ra(e,t,n,r,i,o),null===e||Da?(t.flags|=1,Ra(e,t,n,o),t.child):(t.updateQueue=e.updateQueue,t.flags&=-517,e.lanes&=~o,Ja(e,t,o))}function Fa(e,t,n,r,o){if(ho(n)){var i=!0;mo(t)}else i=!1;if(ni(t,o),null===t.stateNode)null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),yi(t,n,r),mi(t,n,r,o),r=!0;else if(null===e){var a=t.stateNode,u=t.memoizedProps;a.props=u;var l=a.context,c=n.contextType;c="object"==typeof c&&null!==c?ri(c):po(t,c=ho(n)?fo:co.current);var s=n.getDerivedStateFromProps,f="function"==typeof s||"function"==typeof a.getSnapshotBeforeUpdate;f||"function"!=typeof a.UNSAFE_componentWillReceiveProps&&"function"!=typeof a.componentWillReceiveProps||(u!==r||l!==c)&&gi(t,a,r,c),oi=!1;var d=t.memoizedState;a.state=d,si(t,r,a,o),l=t.memoizedState,u!==r||d!==l||so.current||oi?("function"==typeof s&&(pi(t,n,s,r),l=t.memoizedState),(u=oi||vi(t,n,u,r,d,l,c))?(f||"function"!=typeof a.UNSAFE_componentWillMount&&"function"!=typeof a.componentWillMount||("function"==typeof a.componentWillMount&&a.componentWillMount(),"function"==typeof a.UNSAFE_componentWillMount&&a.UNSAFE_componentWillMount()),"function"==typeof a.componentDidMount&&(t.flags|=4)):("function"==typeof a.componentDidMount&&(t.flags|=4),t.memoizedProps=r,t.memoizedState=l),a.props=r,a.state=l,a.context=c,r=u):("function"==typeof a.componentDidMount&&(t.flags|=4),r=!1)}else{a=t.stateNode,ai(e,t),u=t.memoizedProps,c=t.type===t.elementType?u:Zo(t.type,u),a.props=c,f=t.pendingProps,d=a.context,l="object"==typeof(l=n.contextType)&&null!==l?ri(l):po(t,l=ho(n)?fo:co.current);var p=n.getDerivedStateFromProps;(s="function"==typeof p||"function"==typeof a.getSnapshotBeforeUpdate)||"function"!=typeof a.UNSAFE_componentWillReceiveProps&&"function"!=typeof a.componentWillReceiveProps||(u!==f||d!==l)&&gi(t,a,r,l),oi=!1,d=t.memoizedState,a.state=d,si(t,r,a,o);var h=t.memoizedState;u!==f||d!==h||so.current||oi?("function"==typeof p&&(pi(t,n,p,r),h=t.memoizedState),(c=oi||vi(t,n,c,r,d,h,l))?(s||"function"!=typeof a.UNSAFE_componentWillUpdate&&"function"!=typeof a.componentWillUpdate||("function"==typeof a.componentWillUpdate&&a.componentWillUpdate(r,h,l),"function"==typeof a.UNSAFE_componentWillUpdate&&a.UNSAFE_componentWillUpdate(r,h,l)),"function"==typeof a.componentDidUpdate&&(t.flags|=4),"function"==typeof a.getSnapshotBeforeUpdate&&(t.flags|=256)):("function"!=typeof a.componentDidUpdate||u===e.memoizedProps&&d===e.memoizedState||(t.flags|=4),"function"!=typeof a.getSnapshotBeforeUpdate||u===e.memoizedProps&&d===e.memoizedState||(t.flags|=256),t.memoizedProps=r,t.memoizedState=h),a.props=r,a.state=h,a.context=l,r=c):("function"!=typeof a.componentDidUpdate||u===e.memoizedProps&&d===e.memoizedState||(t.flags|=4),"function"!=typeof a.getSnapshotBeforeUpdate||u===e.memoizedProps&&d===e.memoizedState||(t.flags|=256),r=!1)}return Ha(e,t,n,r,i,o)}function Ha(e,t,n,r,o,i){Ba(e,t);var a=0!=(64&t.flags);if(!r&&!a)return o&&bo(t,n,!1),Ja(e,t,i);r=t.stateNode,ja.current=t;var u=a&&"function"!=typeof n.getDerivedStateFromError?null:r.render();return t.flags|=1,null!==e&&a?(t.child=xi(t,e.child,null,i),t.child=xi(t,null,u,i)):Ra(e,t,u,i),t.memoizedState=r.state,o&&bo(t,n,!0),t.child}function Va(e){var t=e.stateNode;t.pendingContext?yo(0,t.pendingContext,t.pendingContext!==t.context):t.context&&yo(0,t.context,!1),Ni(e,t.containerInfo)}var Xa,Wa,Ya,$a={dehydrated:null,retryLane:0};function Za(e,t,n){var r,o=t.pendingProps,i=Ri.current,a=!1;return(r=0!=(64&t.flags))||(r=(null===e||null!==e.memoizedState)&&0!=(2&i)),r?(a=!0,t.flags&=-65):null!==e&&null===e.memoizedState||void 0===o.fallback||!0===o.unstable_avoidThisFallback||(i|=1),uo(Ri,1&i),null===e?(void 0!==o.fallback&&Fi(t),e=o.children,i=o.fallback,a?(e=qa(t,e,i,n),t.child.memoizedState={baseLanes:n},t.memoizedState=$a,e):"number"==typeof o.unstable_expectedLoadTime?(e=qa(t,e,i,n),t.child.memoizedState={baseLanes:n},t.memoizedState=$a,t.lanes=33554432,e):((n=Vl({mode:"visible",children:e},t.mode,n,null)).return=t,t.child=n)):(e.memoizedState,a?(o=function(e,t,n,r,o){var i=t.mode,a=e.child;e=a.sibling;var u={mode:"hidden",children:n};return 0==(2&i)&&t.child!==a?((n=t.child).childLanes=0,n.pendingProps=u,null!==(a=n.lastEffect)?(t.firstEffect=n.firstEffect,t.lastEffect=a,a.nextEffect=null):t.firstEffect=t.lastEffect=null):n=Ul(a,u),null!==e?r=Ul(e,r):(r=Hl(r,i,o,null)).flags|=2,r.return=t,n.return=t,n.sibling=r,t.child=n,r}(e,t,o.children,o.fallback,n),a=t.child,i=e.child.memoizedState,a.memoizedState=null===i?{baseLanes:n}:{baseLanes:i.baseLanes|n},a.childLanes=e.childLanes&~n,t.memoizedState=$a,o):(n=function(e,t,n,r){var o=e.child;return e=o.sibling,n=Ul(o,{mode:"visible",children:n}),0==(2&t.mode)&&(n.lanes=r),n.return=t,n.sibling=null,null!==e&&(e.nextEffect=null,e.flags=8,t.firstEffect=t.lastEffect=e),t.child=n}(e,t,o.children,n),t.memoizedState=null,n))}function qa(e,t,n,r){var o=e.mode,i=e.child;return t={mode:"hidden",children:t},0==(2&o)&&null!==i?(i.childLanes=0,i.pendingProps=t):i=Vl(t,o,0,null),n=Hl(n,o,r,null),i.return=e,n.return=e,i.sibling=n,e.child=i,n}function Ga(e,t){e.lanes|=t;var n=e.alternate;null!==n&&(n.lanes|=t),ti(e.return,t)}function Ka(e,t,n,r,o,i){var a=e.memoizedState;null===a?e.memoizedState={isBackwards:t,rendering:null,renderingStartTime:0,last:r,tail:n,tailMode:o,lastEffect:i}:(a.isBackwards=t,a.rendering=null,a.renderingStartTime=0,a.last=r,a.tail=n,a.tailMode=o,a.lastEffect=i)}function Qa(e,t,n){var r=t.pendingProps,o=r.revealOrder,i=r.tail;if(Ra(e,t,r.children,n),0!=(2&(r=Ri.current)))r=1&r|2,t.flags|=64;else{if(null!==e&&0!=(64&e.flags))e:for(e=t.child;null!==e;){if(13===e.tag)null!==e.memoizedState&&Ga(e,n);else if(19===e.tag)Ga(e,n);else if(null!==e.child){e.child.return=e,e=e.child;continue}if(e===t)break e;for(;null===e.sibling;){if(null===e.return||e.return===t)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}r&=1}if(uo(Ri,r),0==(2&t.mode))t.memoizedState=null;else switch(o){case"forwards":for(n=t.child,o=null;null!==n;)null!==(e=n.alternate)&&null===Ai(e)&&(o=n),n=n.sibling;null===(n=o)?(o=t.child,t.child=null):(o=n.sibling,n.sibling=null),Ka(t,!1,o,n,i,t.lastEffect);break;case"backwards":for(n=null,o=t.child,t.child=null;null!==o;){if(null!==(e=o.alternate)&&null===Ai(e)){t.child=o;break}e=o.sibling,o.sibling=n,n=o,o=e}Ka(t,!0,n,null,i,t.lastEffect);break;case"together":Ka(t,!1,null,null,void 0,t.lastEffect);break;default:t.memoizedState=null}return t.child}function Ja(e,t,n){if(null!==e&&(t.dependencies=e.dependencies),Au|=t.lanes,0!=(n&t.childLanes)){if(null!==e&&t.child!==e.child)throw Error(a(153));if(null!==t.child){for(n=Ul(e=t.child,e.pendingProps),t.child=n,n.return=t;null!==e.sibling;)e=e.sibling,(n=n.sibling=Ul(e,e.pendingProps)).return=t;n.sibling=null}return t.child}return null}function eu(e,t){if(!Ii)switch(e.tailMode){case"hidden":t=e.tail;for(var n=null;null!==t;)null!==t.alternate&&(n=t),t=t.sibling;null===n?e.tail=null:n.sibling=null;break;case"collapsed":n=e.tail;for(var r=null;null!==n;)null!==n.alternate&&(r=n),n=n.sibling;null===r?t||null===e.tail?e.tail=null:e.tail.sibling=null:r.sibling=null}}function tu(e,t,n){var r=t.pendingProps;switch(t.tag){case 2:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return null;case 1:return ho(t.type)&&vo(),null;case 3:return Ti(),ao(so),ao(co),Yi(),(r=t.stateNode).pendingContext&&(r.context=r.pendingContext,r.pendingContext=null),null!==e&&null!==e.child||(Vi(t)?t.flags|=4:r.hydrate||(t.flags|=256)),null;case 5:Di(t);var i=Mi(Ci.current);if(n=t.type,null!==e&&null!=t.stateNode)Wa(e,t,n,r),e.ref!==t.ref&&(t.flags|=128);else{if(!r){if(null===t.stateNode)throw Error(a(166));return null}if(e=Mi(Oi.current),Vi(t)){r=t.stateNode,n=t.type;var u=t.memoizedProps;switch(r[Zr]=t,r[qr]=u,n){case"dialog":Or("cancel",r),Or("close",r);break;case"iframe":case"object":case"embed":Or("load",r);break;case"video":case"audio":for(e=0;e<Sr.length;e++)Or(Sr[e],r);break;case"source":Or("error",r);break;case"img":case"image":case"link":Or("error",r),Or("load",r);break;case"details":Or("toggle",r);break;case"input":ee(r,u),Or("invalid",r);break;case"select":r._wrapperState={wasMultiple:!!u.multiple},Or("invalid",r);break;case"textarea":le(r,u),Or("invalid",r)}for(var c in xe(n,u),e=null,u)u.hasOwnProperty(c)&&(i=u[c],"children"===c?"string"==typeof i?r.textContent!==i&&(e=["children",i]):"number"==typeof i&&r.textContent!==""+i&&(e=["children",""+i]):l.hasOwnProperty(c)&&null!=i&&"onScroll"===c&&Or("scroll",r));switch(n){case"input":G(r),re(r,u,!0);break;case"textarea":G(r),se(r);break;case"select":case"option":break;default:"function"==typeof u.onClick&&(r.onclick=Lr)}r=e,t.updateQueue=r,null!==r&&(t.flags|=4)}else{switch(c=9===i.nodeType?i:i.ownerDocument,e===fe&&(e=de(n)),e===fe?"script"===n?((e=c.createElement("div")).innerHTML="<script><\/script>",e=e.removeChild(e.firstChild)):"string"==typeof r.is?e=c.createElement(n,{is:r.is}):(e=c.createElement(n),"select"===n&&(c=e,r.multiple?c.multiple=!0:r.size&&(c.size=r.size))):e=c.createElementNS(e,n),e[Zr]=t,e[qr]=r,Xa(e,t),t.stateNode=e,c=Ee(n,r),n){case"dialog":Or("cancel",e),Or("close",e),i=r;break;case"iframe":case"object":case"embed":Or("load",e),i=r;break;case"video":case"audio":for(i=0;i<Sr.length;i++)Or(Sr[i],e);i=r;break;case"source":Or("error",e),i=r;break;case"img":case"image":case"link":Or("error",e),Or("load",e),i=r;break;case"details":Or("toggle",e),i=r;break;case"input":ee(e,r),i=J(e,r),Or("invalid",e);break;case"option":i=ie(e,r);break;case"select":e._wrapperState={wasMultiple:!!r.multiple},i=o({},r,{value:void 0}),Or("invalid",e);break;case"textarea":le(e,r),i=ue(e,r),Or("invalid",e);break;default:i=r}xe(n,i);var s=i;for(u in s)if(s.hasOwnProperty(u)){var f=s[u];"style"===u?_e(e,f):"dangerouslySetInnerHTML"===u?null!=(f=f?f.__html:void 0)&&ye(e,f):"children"===u?"string"==typeof f?("textarea"!==n||""!==f)&&ge(e,f):"number"==typeof f&&ge(e,""+f):"suppressContentEditableWarning"!==u&&"suppressHydrationWarning"!==u&&"autoFocus"!==u&&(l.hasOwnProperty(u)?null!=f&&"onScroll"===u&&Or("scroll",e):null!=f&&w(e,u,f,c))}switch(n){case"input":G(e),re(e,r,!1);break;case"textarea":G(e),se(e);break;case"option":null!=r.value&&e.setAttribute("value",""+Z(r.value));break;case"select":e.multiple=!!r.multiple,null!=(u=r.value)?ae(e,!!r.multiple,u,!1):null!=r.defaultValue&&ae(e,!!r.multiple,r.defaultValue,!0);break;default:"function"==typeof i.onClick&&(e.onclick=Lr)}Br(n,r)&&(t.flags|=4)}null!==t.ref&&(t.flags|=128)}return null;case 6:if(e&&null!=t.stateNode)Ya(0,t,e.memoizedProps,r);else{if("string"!=typeof r&&null===t.stateNode)throw Error(a(166));n=Mi(Ci.current),Mi(Oi.current),Vi(t)?(r=t.stateNode,n=t.memoizedProps,r[Zr]=t,r.nodeValue!==n&&(t.flags|=4)):((r=(9===n.nodeType?n:n.ownerDocument).createTextNode(r))[Zr]=t,t.stateNode=r)}return null;case 13:return ao(Ri),r=t.memoizedState,0!=(64&t.flags)?(t.lanes=n,t):(r=null!==r,n=!1,null===e?void 0!==t.memoizedProps.fallback&&Vi(t):n=null!==e.memoizedState,r&&!n&&0!=(2&t.mode)&&(null===e&&!0!==t.memoizedProps.unstable_avoidThisFallback||0!=(1&Ri.current)?0===ju&&(ju=3):(0!==ju&&3!==ju||(ju=4),null===Pu||0==(134217727&Au)&&0==(134217727&Lu)||dl(Pu,Mu))),(r||n)&&(t.flags|=4),null);case 4:return Ti(),null===e&&Cr(t.stateNode.containerInfo),null;case 10:return ei(t),null;case 17:return ho(t.type)&&vo(),null;case 19:if(ao(Ri),null===(r=t.memoizedState))return null;if(u=0!=(64&t.flags),null===(c=r.rendering))if(u)eu(r,!1);else{if(0!==ju||null!==e&&0!=(64&e.flags))for(e=t.child;null!==e;){if(null!==(c=Ai(e))){for(t.flags|=64,eu(r,!1),null!==(u=c.updateQueue)&&(t.updateQueue=u,t.flags|=4),null===r.lastEffect&&(t.firstEffect=null),t.lastEffect=r.lastEffect,r=n,n=t.child;null!==n;)e=r,(u=n).flags&=2,u.nextEffect=null,u.firstEffect=null,u.lastEffect=null,null===(c=u.alternate)?(u.childLanes=0,u.lanes=e,u.child=null,u.memoizedProps=null,u.memoizedState=null,u.updateQueue=null,u.dependencies=null,u.stateNode=null):(u.childLanes=c.childLanes,u.lanes=c.lanes,u.child=c.child,u.memoizedProps=c.memoizedProps,u.memoizedState=c.memoizedState,u.updateQueue=c.updateQueue,u.type=c.type,e=c.dependencies,u.dependencies=null===e?null:{lanes:e.lanes,firstContext:e.firstContext}),n=n.sibling;return uo(Ri,1&Ri.current|2),t.child}e=e.sibling}null!==r.tail&&Uo()>Uu&&(t.flags|=64,u=!0,eu(r,!1),t.lanes=33554432)}else{if(!u)if(null!==(e=Ai(c))){if(t.flags|=64,u=!0,null!==(n=e.updateQueue)&&(t.updateQueue=n,t.flags|=4),eu(r,!0),null===r.tail&&"hidden"===r.tailMode&&!c.alternate&&!Ii)return null!==(t=t.lastEffect=r.lastEffect)&&(t.nextEffect=null),null}else 2*Uo()-r.renderingStartTime>Uu&&1073741824!==n&&(t.flags|=64,u=!0,eu(r,!1),t.lanes=33554432);r.isBackwards?(c.sibling=t.child,t.child=c):(null!==(n=r.last)?n.sibling=c:t.child=c,r.last=c)}return null!==r.tail?(n=r.tail,r.rendering=n,r.tail=n.sibling,r.lastEffect=t.lastEffect,r.renderingStartTime=Uo(),n.sibling=null,t=Ri.current,uo(Ri,u?1&t|2:1&t),n):null;case 23:case 24:return gl(),null!==e&&null!==e.memoizedState!=(null!==t.memoizedState)&&"unstable-defer-without-hiding"!==r.mode&&(t.flags|=4),null}throw Error(a(156,t.tag))}function nu(e){switch(e.tag){case 1:ho(e.type)&&vo();var t=e.flags;return 4096&t?(e.flags=-4097&t|64,e):null;case 3:if(Ti(),ao(so),ao(co),Yi(),0!=(64&(t=e.flags)))throw Error(a(285));return e.flags=-4097&t|64,e;case 5:return Di(e),null;case 13:return ao(Ri),4096&(t=e.flags)?(e.flags=-4097&t|64,e):null;case 19:return ao(Ri),null;case 4:return Ti(),null;case 10:return ei(e),null;case 23:case 24:return gl(),null;default:return null}}function ru(e,t){try{var n="",r=t;do{n+=Y(r),r=r.return}while(r);var o=n}catch(e){o="\nError generating stack: "+e.message+"\n"+e.stack}return{value:e,source:t,stack:o}}function ou(e,t){try{console.error(t.value)}catch(e){setTimeout((function(){throw e}))}}Xa=function(e,t){for(var n=t.child;null!==n;){if(5===n.tag||6===n.tag)e.appendChild(n.stateNode);else if(4!==n.tag&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===t)break;for(;null===n.sibling;){if(null===n.return||n.return===t)return;n=n.return}n.sibling.return=n.return,n=n.sibling}},Wa=function(e,t,n,r){var i=e.memoizedProps;if(i!==r){e=t.stateNode,Mi(Oi.current);var a,u=null;switch(n){case"input":i=J(e,i),r=J(e,r),u=[];break;case"option":i=ie(e,i),r=ie(e,r),u=[];break;case"select":i=o({},i,{value:void 0}),r=o({},r,{value:void 0}),u=[];break;case"textarea":i=ue(e,i),r=ue(e,r),u=[];break;default:"function"!=typeof i.onClick&&"function"==typeof r.onClick&&(e.onclick=Lr)}for(f in xe(n,r),n=null,i)if(!r.hasOwnProperty(f)&&i.hasOwnProperty(f)&&null!=i[f])if("style"===f){var c=i[f];for(a in c)c.hasOwnProperty(a)&&(n||(n={}),n[a]="")}else"dangerouslySetInnerHTML"!==f&&"children"!==f&&"suppressContentEditableWarning"!==f&&"suppressHydrationWarning"!==f&&"autoFocus"!==f&&(l.hasOwnProperty(f)?u||(u=[]):(u=u||[]).push(f,null));for(f in r){var s=r[f];if(c=null!=i?i[f]:void 0,r.hasOwnProperty(f)&&s!==c&&(null!=s||null!=c))if("style"===f)if(c){for(a in c)!c.hasOwnProperty(a)||s&&s.hasOwnProperty(a)||(n||(n={}),n[a]="");for(a in s)s.hasOwnProperty(a)&&c[a]!==s[a]&&(n||(n={}),n[a]=s[a])}else n||(u||(u=[]),u.push(f,n)),n=s;else"dangerouslySetInnerHTML"===f?(s=s?s.__html:void 0,c=c?c.__html:void 0,null!=s&&c!==s&&(u=u||[]).push(f,s)):"children"===f?"string"!=typeof s&&"number"!=typeof s||(u=u||[]).push(f,""+s):"suppressContentEditableWarning"!==f&&"suppressHydrationWarning"!==f&&(l.hasOwnProperty(f)?(null!=s&&"onScroll"===f&&Or("scroll",e),u||c===s||(u=[])):"object"==typeof s&&null!==s&&s.$$typeof===A?s.toString():(u=u||[]).push(f,s))}n&&(u=u||[]).push("style",n);var f=u;(t.updateQueue=f)&&(t.flags|=4)}},Ya=function(e,t,n,r){n!==r&&(t.flags|=4)};var iu="function"==typeof WeakMap?WeakMap:Map;function au(e,t,n){(n=ui(-1,n)).tag=3,n.payload={element:null};var r=t.value;return n.callback=function(){Xu||(Xu=!0,Wu=r),ou(0,t)},n}function uu(e,t,n){(n=ui(-1,n)).tag=3;var r=e.type.getDerivedStateFromError;if("function"==typeof r){var o=t.value;n.payload=function(){return ou(0,t),r(o)}}var i=e.stateNode;return null!==i&&"function"==typeof i.componentDidCatch&&(n.callback=function(){"function"!=typeof r&&(null===Yu?Yu=new Set([this]):Yu.add(this),ou(0,t));var e=t.stack;this.componentDidCatch(t.value,{componentStack:null!==e?e:""})}),n}var lu="function"==typeof WeakSet?WeakSet:Set;function cu(e){var t=e.ref;if(null!==t)if("function"==typeof t)try{t(null)}catch(t){Rl(e,t)}else t.current=null}function su(e,t){switch(t.tag){case 0:case 11:case 15:case 22:return;case 1:if(256&t.flags&&null!==e){var n=e.memoizedProps,r=e.memoizedState;t=(e=t.stateNode).getSnapshotBeforeUpdate(t.elementType===t.type?n:Zo(t.type,n),r),e.__reactInternalSnapshotBeforeUpdate=t}return;case 3:return void(256&t.flags&&Vr(t.stateNode.containerInfo));case 5:case 6:case 4:case 17:return}throw Error(a(163))}function fu(e,t,n){switch(n.tag){case 0:case 11:case 15:case 22:if(null!==(t=null!==(t=n.updateQueue)?t.lastEffect:null)){e=t=t.next;do{if(3==(3&e.tag)){var r=e.create;e.destroy=r()}e=e.next}while(e!==t)}if(null!==(t=null!==(t=n.updateQueue)?t.lastEffect:null)){e=t=t.next;do{var o=e;r=o.next,0!=(4&(o=o.tag))&&0!=(1&o)&&(Tl(n,e),Nl(n,e)),e=r}while(e!==t)}return;case 1:return e=n.stateNode,4&n.flags&&(null===t?e.componentDidMount():(r=n.elementType===n.type?t.memoizedProps:Zo(n.type,t.memoizedProps),e.componentDidUpdate(r,t.memoizedState,e.__reactInternalSnapshotBeforeUpdate))),void(null!==(t=n.updateQueue)&&fi(n,t,e));case 3:if(null!==(t=n.updateQueue)){if(e=null,null!==n.child)switch(n.child.tag){case 5:e=n.child.stateNode;break;case 1:e=n.child.stateNode}fi(n,t,e)}return;case 5:return e=n.stateNode,void(null===t&&4&n.flags&&Br(n.type,n.memoizedProps)&&e.focus());case 6:case 4:case 12:return;case 13:return void(null===n.memoizedState&&(n=n.alternate,null!==n&&(n=n.memoizedState,null!==n&&(n=n.dehydrated,null!==n&&_t(n)))));case 19:case 17:case 20:case 21:case 23:case 24:return}throw Error(a(163))}function du(e,t){for(var n=e;;){if(5===n.tag){var r=n.stateNode;if(t)"function"==typeof(r=r.style).setProperty?r.setProperty("display","none","important"):r.display="none";else{r=n.stateNode;var o=n.memoizedProps.style;o=null!=o&&o.hasOwnProperty("display")?o.display:null,r.style.display=we("display",o)}}else if(6===n.tag)n.stateNode.nodeValue=t?"":n.memoizedProps;else if((23!==n.tag&&24!==n.tag||null===n.memoizedState||n===e)&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===e)break;for(;null===n.sibling;){if(null===n.return||n.return===e)return;n=n.return}n.sibling.return=n.return,n=n.sibling}}function pu(e,t){if(_o&&"function"==typeof _o.onCommitFiberUnmount)try{_o.onCommitFiberUnmount(wo,t)}catch(e){}switch(t.tag){case 0:case 11:case 14:case 15:case 22:if(null!==(e=t.updateQueue)&&null!==(e=e.lastEffect)){var n=e=e.next;do{var r=n,o=r.destroy;if(r=r.tag,void 0!==o)if(0!=(4&r))Tl(t,n);else{r=t;try{o()}catch(e){Rl(r,e)}}n=n.next}while(n!==e)}break;case 1:if(cu(t),"function"==typeof(e=t.stateNode).componentWillUnmount)try{e.props=t.memoizedProps,e.state=t.memoizedState,e.componentWillUnmount()}catch(e){Rl(t,e)}break;case 5:cu(t);break;case 4:bu(e,t)}}function hu(e){e.alternate=null,e.child=null,e.dependencies=null,e.firstEffect=null,e.lastEffect=null,e.memoizedProps=null,e.memoizedState=null,e.pendingProps=null,e.return=null,e.updateQueue=null}function vu(e){return 5===e.tag||3===e.tag||4===e.tag}function yu(e){e:{for(var t=e.return;null!==t;){if(vu(t))break e;t=t.return}throw Error(a(160))}var n=t;switch(t=n.stateNode,n.tag){case 5:var r=!1;break;case 3:case 4:t=t.containerInfo,r=!0;break;default:throw Error(a(161))}16&n.flags&&(ge(t,""),n.flags&=-17);e:t:for(n=e;;){for(;null===n.sibling;){if(null===n.return||vu(n.return)){n=null;break e}n=n.return}for(n.sibling.return=n.return,n=n.sibling;5!==n.tag&&6!==n.tag&&18!==n.tag;){if(2&n.flags)continue t;if(null===n.child||4===n.tag)continue t;n.child.return=n,n=n.child}if(!(2&n.flags)){n=n.stateNode;break e}}r?gu(e,n,t):mu(e,n,t)}function gu(e,t,n){var r=e.tag,o=5===r||6===r;if(o)e=o?e.stateNode:e.stateNode.instance,t?8===n.nodeType?n.parentNode.insertBefore(e,t):n.insertBefore(e,t):(8===n.nodeType?(t=n.parentNode).insertBefore(e,n):(t=n).appendChild(e),null!=(n=n._reactRootContainer)||null!==t.onclick||(t.onclick=Lr));else if(4!==r&&null!==(e=e.child))for(gu(e,t,n),e=e.sibling;null!==e;)gu(e,t,n),e=e.sibling}function mu(e,t,n){var r=e.tag,o=5===r||6===r;if(o)e=o?e.stateNode:e.stateNode.instance,t?n.insertBefore(e,t):n.appendChild(e);else if(4!==r&&null!==(e=e.child))for(mu(e,t,n),e=e.sibling;null!==e;)mu(e,t,n),e=e.sibling}function bu(e,t){for(var n,r,o=t,i=!1;;){if(!i){i=o.return;e:for(;;){if(null===i)throw Error(a(160));switch(n=i.stateNode,i.tag){case 5:r=!1;break e;case 3:case 4:n=n.containerInfo,r=!0;break e}i=i.return}i=!0}if(5===o.tag||6===o.tag){e:for(var u=e,l=o,c=l;;)if(pu(u,c),null!==c.child&&4!==c.tag)c.child.return=c,c=c.child;else{if(c===l)break e;for(;null===c.sibling;){if(null===c.return||c.return===l)break e;c=c.return}c.sibling.return=c.return,c=c.sibling}r?(u=n,l=o.stateNode,8===u.nodeType?u.parentNode.removeChild(l):u.removeChild(l)):n.removeChild(o.stateNode)}else if(4===o.tag){if(null!==o.child){n=o.stateNode.containerInfo,r=!0,o.child.return=o,o=o.child;continue}}else if(pu(e,o),null!==o.child){o.child.return=o,o=o.child;continue}if(o===t)break;for(;null===o.sibling;){if(null===o.return||o.return===t)return;4===(o=o.return).tag&&(i=!1)}o.sibling.return=o.return,o=o.sibling}}function wu(e,t){switch(t.tag){case 0:case 11:case 14:case 15:case 22:var n=t.updateQueue;if(null!==(n=null!==n?n.lastEffect:null)){var r=n=n.next;do{3==(3&r.tag)&&(e=r.destroy,r.destroy=void 0,void 0!==e&&e()),r=r.next}while(r!==n)}return;case 1:return;case 5:if(null!=(n=t.stateNode)){r=t.memoizedProps;var o=null!==e?e.memoizedProps:r;e=t.type;var i=t.updateQueue;if(t.updateQueue=null,null!==i){for(n[qr]=r,"input"===e&&"radio"===r.type&&null!=r.name&&te(n,r),Ee(e,o),t=Ee(e,r),o=0;o<i.length;o+=2){var u=i[o],l=i[o+1];"style"===u?_e(n,l):"dangerouslySetInnerHTML"===u?ye(n,l):"children"===u?ge(n,l):w(n,u,l,t)}switch(e){case"input":ne(n,r);break;case"textarea":ce(n,r);break;case"select":e=n._wrapperState.wasMultiple,n._wrapperState.wasMultiple=!!r.multiple,null!=(i=r.value)?ae(n,!!r.multiple,i,!1):e!==!!r.multiple&&(null!=r.defaultValue?ae(n,!!r.multiple,r.defaultValue,!0):ae(n,!!r.multiple,r.multiple?[]:"",!1))}}}return;case 6:if(null===t.stateNode)throw Error(a(162));return void(t.stateNode.nodeValue=t.memoizedProps);case 3:return void((n=t.stateNode).hydrate&&(n.hydrate=!1,_t(n.containerInfo)));case 12:return;case 13:return null!==t.memoizedState&&(Bu=Uo(),du(t.child,!0)),void _u(t);case 19:return void _u(t);case 17:return;case 23:case 24:return void du(t,null!==t.memoizedState)}throw Error(a(163))}function _u(e){var t=e.updateQueue;if(null!==t){e.updateQueue=null;var n=e.stateNode;null===n&&(n=e.stateNode=new lu),t.forEach((function(t){var r=Ll.bind(null,e,t);n.has(t)||(n.add(t),t.then(r,r))}))}}function Su(e,t){return null!==e&&(null===(e=e.memoizedState)||null!==e.dehydrated)&&null!==(t=t.memoizedState)&&null===t.dehydrated}var xu=Math.ceil,Eu=_.ReactCurrentDispatcher,ku=_.ReactCurrentOwner,Ou=0,Pu=null,Cu=null,Mu=0,Nu=0,Tu=io(0),ju=0,Du=null,Ru=0,Au=0,Lu=0,zu=0,Iu=null,Bu=0,Uu=1/0;function Fu(){Uu=Uo()+500}var Hu,Vu=null,Xu=!1,Wu=null,Yu=null,$u=!1,Zu=null,qu=90,Gu=[],Ku=[],Qu=null,Ju=0,el=null,tl=-1,nl=0,rl=0,ol=null,il=!1;function al(){return 0!=(48&Ou)?Uo():-1!==tl?tl:tl=Uo()}function ul(e){if(0==(2&(e=e.mode)))return 1;if(0==(4&e))return 99===Fo()?1:2;if(0===nl&&(nl=Ru),0!==$o.transition){0!==rl&&(rl=null!==Iu?Iu.pendingLanes:0),e=nl;var t=4186112&~rl;return 0==(t&=-t)&&0==(t=(e=4186112&~e)&-e)&&(t=8192),t}return e=Fo(),e=Bt(0!=(4&Ou)&&98===e?12:e=function(e){switch(e){case 99:return 15;case 98:return 10;case 97:case 96:return 8;case 95:return 2;default:return 0}}(e),nl)}function ll(e,t,n){if(50<Ju)throw Ju=0,el=null,Error(a(185));if(null===(e=cl(e,t)))return null;Ht(e,t,n),e===Pu&&(Lu|=t,4===ju&&dl(e,Mu));var r=Fo();1===t?0!=(8&Ou)&&0==(48&Ou)?pl(e):(sl(e,n),0===Ou&&(Fu(),Wo())):(0==(4&Ou)||98!==r&&99!==r||(null===Qu?Qu=new Set([e]):Qu.add(e)),sl(e,n)),Iu=e}function cl(e,t){e.lanes|=t;var n=e.alternate;for(null!==n&&(n.lanes|=t),n=e,e=e.return;null!==e;)e.childLanes|=t,null!==(n=e.alternate)&&(n.childLanes|=t),n=e,e=e.return;return 3===n.tag?n.stateNode:null}function sl(e,t){for(var n=e.callbackNode,r=e.suspendedLanes,o=e.pingedLanes,i=e.expirationTimes,u=e.pendingLanes;0<u;){var l=31-Vt(u),c=1<<l,s=i[l];if(-1===s){if(0==(c&r)||0!=(c&o)){s=t,Lt(c);var f=At;i[l]=10<=f?s+250:6<=f?s+5e3:-1}}else s<=t&&(e.expiredLanes|=c);u&=~c}if(r=zt(e,e===Pu?Mu:0),t=At,0===r)null!==n&&(n!==Ro&&Eo(n),e.callbackNode=null,e.callbackPriority=0);else{if(null!==n){if(e.callbackPriority===t)return;n!==Ro&&Eo(n)}15===t?(n=pl.bind(null,e),null===Lo?(Lo=[n],zo=xo(Mo,Yo)):Lo.push(n),n=Ro):n=14===t?Xo(99,pl.bind(null,e)):Xo(n=function(e){switch(e){case 15:case 14:return 99;case 13:case 12:case 11:case 10:return 98;case 9:case 8:case 7:case 6:case 4:case 5:return 97;case 3:case 2:case 1:return 95;case 0:return 90;default:throw Error(a(358,e))}}(t),fl.bind(null,e)),e.callbackPriority=t,e.callbackNode=n}}function fl(e){if(tl=-1,rl=nl=0,0!=(48&Ou))throw Error(a(327));var t=e.callbackNode;if(Ml()&&e.callbackNode!==t)return null;var n=zt(e,e===Pu?Mu:0);if(0===n)return null;var r=n,o=Ou;Ou|=16;var i=wl();for(Pu===e&&Mu===r||(Fu(),ml(e,r));;)try{xl();break}catch(t){bl(e,t)}if(Jo(),Eu.current=i,Ou=o,null!==Cu?r=0:(Pu=null,Mu=0,r=ju),0!=(Ru&Lu))ml(e,0);else if(0!==r){if(2===r&&(Ou|=64,e.hydrate&&(e.hydrate=!1,Vr(e.containerInfo)),0!==(n=It(e))&&(r=_l(e,n))),1===r)throw t=Du,ml(e,0),dl(e,n),sl(e,Uo()),t;switch(e.finishedWork=e.current.alternate,e.finishedLanes=n,r){case 0:case 1:throw Error(a(345));case 2:Ol(e);break;case 3:if(dl(e,n),(62914560&n)===n&&10<(r=Bu+500-Uo())){if(0!==zt(e,0))break;if(((o=e.suspendedLanes)&n)!==n){al(),e.pingedLanes|=e.suspendedLanes&o;break}e.timeoutHandle=Fr(Ol.bind(null,e),r);break}Ol(e);break;case 4:if(dl(e,n),(4186112&n)===n)break;for(r=e.eventTimes,o=-1;0<n;){var u=31-Vt(n);i=1<<u,(u=r[u])>o&&(o=u),n&=~i}if(n=o,10<(n=(120>(n=Uo()-n)?120:480>n?480:1080>n?1080:1920>n?1920:3e3>n?3e3:4320>n?4320:1960*xu(n/1960))-n)){e.timeoutHandle=Fr(Ol.bind(null,e),n);break}Ol(e);break;case 5:Ol(e);break;default:throw Error(a(329))}}return sl(e,Uo()),e.callbackNode===t?fl.bind(null,e):null}function dl(e,t){for(t&=~zu,t&=~Lu,e.suspendedLanes|=t,e.pingedLanes&=~t,e=e.expirationTimes;0<t;){var n=31-Vt(t),r=1<<n;e[n]=-1,t&=~r}}function pl(e){if(0!=(48&Ou))throw Error(a(327));if(Ml(),e===Pu&&0!=(e.expiredLanes&Mu)){var t=Mu,n=_l(e,t);0!=(Ru&Lu)&&(n=_l(e,t=zt(e,t)))}else n=_l(e,t=zt(e,0));if(0!==e.tag&&2===n&&(Ou|=64,e.hydrate&&(e.hydrate=!1,Vr(e.containerInfo)),0!==(t=It(e))&&(n=_l(e,t))),1===n)throw n=Du,ml(e,0),dl(e,t),sl(e,Uo()),n;return e.finishedWork=e.current.alternate,e.finishedLanes=t,Ol(e),sl(e,Uo()),null}function hl(e,t){var n=Ou;Ou|=1;try{return e(t)}finally{0===(Ou=n)&&(Fu(),Wo())}}function vl(e,t){var n=Ou;Ou&=-2,Ou|=8;try{return e(t)}finally{0===(Ou=n)&&(Fu(),Wo())}}function yl(e,t){uo(Tu,Nu),Nu|=t,Ru|=t}function gl(){Nu=Tu.current,ao(Tu)}function ml(e,t){e.finishedWork=null,e.finishedLanes=0;var n=e.timeoutHandle;if(-1!==n&&(e.timeoutHandle=-1,Hr(n)),null!==Cu)for(n=Cu.return;null!==n;){var r=n;switch(r.tag){case 1:null!=(r=r.type.childContextTypes)&&vo();break;case 3:Ti(),ao(so),ao(co),Yi();break;case 5:Di(r);break;case 4:Ti();break;case 13:case 19:ao(Ri);break;case 10:ei(r);break;case 23:case 24:gl()}n=n.return}Pu=e,Cu=Ul(e.current,null),Mu=Nu=Ru=t,ju=0,Du=null,zu=Lu=Au=0}function bl(e,t){for(;;){var n=Cu;try{if(Jo(),$i.current=Ca,Ji){for(var r=Gi.memoizedState;null!==r;){var o=r.queue;null!==o&&(o.pending=null),r=r.next}Ji=!1}if(qi=0,Qi=Ki=Gi=null,ea=!1,ku.current=null,null===n||null===n.return){ju=1,Du=t,Cu=null;break}e:{var i=e,a=n.return,u=n,l=t;if(t=Mu,u.flags|=2048,u.firstEffect=u.lastEffect=null,null!==l&&"object"==typeof l&&"function"==typeof l.then){var c=l;if(0==(2&u.mode)){var s=u.alternate;s?(u.updateQueue=s.updateQueue,u.memoizedState=s.memoizedState,u.lanes=s.lanes):(u.updateQueue=null,u.memoizedState=null)}var f=0!=(1&Ri.current),d=a;do{var p;if(p=13===d.tag){var h=d.memoizedState;if(null!==h)p=null!==h.dehydrated;else{var v=d.memoizedProps;p=void 0!==v.fallback&&(!0!==v.unstable_avoidThisFallback||!f)}}if(p){var y=d.updateQueue;if(null===y){var g=new Set;g.add(c),d.updateQueue=g}else y.add(c);if(0==(2&d.mode)){if(d.flags|=64,u.flags|=16384,u.flags&=-2981,1===u.tag)if(null===u.alternate)u.tag=17;else{var m=ui(-1,1);m.tag=2,li(u,m)}u.lanes|=1;break e}l=void 0,u=t;var b=i.pingCache;if(null===b?(b=i.pingCache=new iu,l=new Set,b.set(c,l)):void 0===(l=b.get(c))&&(l=new Set,b.set(c,l)),!l.has(u)){l.add(u);var w=Al.bind(null,i,c,u);c.then(w,w)}d.flags|=4096,d.lanes=t;break e}d=d.return}while(null!==d);l=Error(($(u.type)||"A React component")+" suspended while rendering, but no fallback UI was specified.\n\nAdd a <Suspense fallback=...> component higher in the tree to provide a loading indicator or placeholder to display.")}5!==ju&&(ju=2),l=ru(l,u),d=a;do{switch(d.tag){case 3:i=l,d.flags|=4096,t&=-t,d.lanes|=t,ci(d,au(0,i,t));break e;case 1:i=l;var _=d.type,S=d.stateNode;if(0==(64&d.flags)&&("function"==typeof _.getDerivedStateFromError||null!==S&&"function"==typeof S.componentDidCatch&&(null===Yu||!Yu.has(S)))){d.flags|=4096,t&=-t,d.lanes|=t,ci(d,uu(d,i,t));break e}}d=d.return}while(null!==d)}kl(n)}catch(e){t=e,Cu===n&&null!==n&&(Cu=n=n.return);continue}break}}function wl(){var e=Eu.current;return Eu.current=Ca,null===e?Ca:e}function _l(e,t){var n=Ou;Ou|=16;var r=wl();for(Pu===e&&Mu===t||ml(e,t);;)try{Sl();break}catch(t){bl(e,t)}if(Jo(),Ou=n,Eu.current=r,null!==Cu)throw Error(a(261));return Pu=null,Mu=0,ju}function Sl(){for(;null!==Cu;)El(Cu)}function xl(){for(;null!==Cu&&!ko();)El(Cu)}function El(e){var t=Hu(e.alternate,e,Nu);e.memoizedProps=e.pendingProps,null===t?kl(e):Cu=t,ku.current=null}function kl(e){var t=e;do{var n=t.alternate;if(e=t.return,0==(2048&t.flags)){if(null!==(n=tu(n,t,Nu)))return void(Cu=n);if(24!==(n=t).tag&&23!==n.tag||null===n.memoizedState||0!=(1073741824&Nu)||0==(4&n.mode)){for(var r=0,o=n.child;null!==o;)r|=o.lanes|o.childLanes,o=o.sibling;n.childLanes=r}null!==e&&0==(2048&e.flags)&&(null===e.firstEffect&&(e.firstEffect=t.firstEffect),null!==t.lastEffect&&(null!==e.lastEffect&&(e.lastEffect.nextEffect=t.firstEffect),e.lastEffect=t.lastEffect),1<t.flags&&(null!==e.lastEffect?e.lastEffect.nextEffect=t:e.firstEffect=t,e.lastEffect=t))}else{if(null!==(n=nu(t)))return n.flags&=2047,void(Cu=n);null!==e&&(e.firstEffect=e.lastEffect=null,e.flags|=2048)}if(null!==(t=t.sibling))return void(Cu=t);Cu=t=e}while(null!==t);0===ju&&(ju=5)}function Ol(e){var t=Fo();return Vo(99,Pl.bind(null,e,t)),null}function Pl(e,t){do{Ml()}while(null!==Zu);if(0!=(48&Ou))throw Error(a(327));var n=e.finishedWork;if(null===n)return null;if(e.finishedWork=null,e.finishedLanes=0,n===e.current)throw Error(a(177));e.callbackNode=null;var r=n.lanes|n.childLanes,o=r,i=e.pendingLanes&~o;e.pendingLanes=o,e.suspendedLanes=0,e.pingedLanes=0,e.expiredLanes&=o,e.mutableReadLanes&=o,e.entangledLanes&=o,o=e.entanglements;for(var u=e.eventTimes,l=e.expirationTimes;0<i;){var c=31-Vt(i),s=1<<c;o[c]=0,u[c]=-1,l[c]=-1,i&=~s}if(null!==Qu&&0==(24&r)&&Qu.has(e)&&Qu.delete(e),e===Pu&&(Cu=Pu=null,Mu=0),1<n.flags?null!==n.lastEffect?(n.lastEffect.nextEffect=n,r=n.firstEffect):r=n:r=n.firstEffect,null!==r){if(o=Ou,Ou|=32,ku.current=null,zr=Zt,pr(u=dr())){if("selectionStart"in u)l={start:u.selectionStart,end:u.selectionEnd};else e:if(l=(l=u.ownerDocument)&&l.defaultView||window,(s=l.getSelection&&l.getSelection())&&0!==s.rangeCount){l=s.anchorNode,i=s.anchorOffset,c=s.focusNode,s=s.focusOffset;try{l.nodeType,c.nodeType}catch(e){l=null;break e}var f=0,d=-1,p=-1,h=0,v=0,y=u,g=null;t:for(;;){for(var m;y!==l||0!==i&&3!==y.nodeType||(d=f+i),y!==c||0!==s&&3!==y.nodeType||(p=f+s),3===y.nodeType&&(f+=y.nodeValue.length),null!==(m=y.firstChild);)g=y,y=m;for(;;){if(y===u)break t;if(g===l&&++h===i&&(d=f),g===c&&++v===s&&(p=f),null!==(m=y.nextSibling))break;g=(y=g).parentNode}y=m}l=-1===d||-1===p?null:{start:d,end:p}}else l=null;l=l||{start:0,end:0}}else l=null;Ir={focusedElem:u,selectionRange:l},Zt=!1,ol=null,il=!1,Vu=r;do{try{Cl()}catch(e){if(null===Vu)throw Error(a(330));Rl(Vu,e),Vu=Vu.nextEffect}}while(null!==Vu);ol=null,Vu=r;do{try{for(u=e;null!==Vu;){var b=Vu.flags;if(16&b&&ge(Vu.stateNode,""),128&b){var w=Vu.alternate;if(null!==w){var _=w.ref;null!==_&&("function"==typeof _?_(null):_.current=null)}}switch(1038&b){case 2:yu(Vu),Vu.flags&=-3;break;case 6:yu(Vu),Vu.flags&=-3,wu(Vu.alternate,Vu);break;case 1024:Vu.flags&=-1025;break;case 1028:Vu.flags&=-1025,wu(Vu.alternate,Vu);break;case 4:wu(Vu.alternate,Vu);break;case 8:bu(u,l=Vu);var S=l.alternate;hu(l),null!==S&&hu(S)}Vu=Vu.nextEffect}}catch(e){if(null===Vu)throw Error(a(330));Rl(Vu,e),Vu=Vu.nextEffect}}while(null!==Vu);if(_=Ir,w=dr(),b=_.focusedElem,u=_.selectionRange,w!==b&&b&&b.ownerDocument&&fr(b.ownerDocument.documentElement,b)){null!==u&&pr(b)&&(w=u.start,void 0===(_=u.end)&&(_=w),"selectionStart"in b?(b.selectionStart=w,b.selectionEnd=Math.min(_,b.value.length)):(_=(w=b.ownerDocument||document)&&w.defaultView||window).getSelection&&(_=_.getSelection(),l=b.textContent.length,S=Math.min(u.start,l),u=void 0===u.end?S:Math.min(u.end,l),!_.extend&&S>u&&(l=u,u=S,S=l),l=sr(b,S),i=sr(b,u),l&&i&&(1!==_.rangeCount||_.anchorNode!==l.node||_.anchorOffset!==l.offset||_.focusNode!==i.node||_.focusOffset!==i.offset)&&((w=w.createRange()).setStart(l.node,l.offset),_.removeAllRanges(),S>u?(_.addRange(w),_.extend(i.node,i.offset)):(w.setEnd(i.node,i.offset),_.addRange(w))))),w=[];for(_=b;_=_.parentNode;)1===_.nodeType&&w.push({element:_,left:_.scrollLeft,top:_.scrollTop});for("function"==typeof b.focus&&b.focus(),b=0;b<w.length;b++)(_=w[b]).element.scrollLeft=_.left,_.element.scrollTop=_.top}Zt=!!zr,Ir=zr=null,e.current=n,Vu=r;do{try{for(b=e;null!==Vu;){var x=Vu.flags;if(36&x&&fu(b,Vu.alternate,Vu),128&x){w=void 0;var E=Vu.ref;if(null!==E){var k=Vu.stateNode;switch(Vu.tag){case 5:w=k;break;default:w=k}"function"==typeof E?E(w):E.current=w}}Vu=Vu.nextEffect}}catch(e){if(null===Vu)throw Error(a(330));Rl(Vu,e),Vu=Vu.nextEffect}}while(null!==Vu);Vu=null,Ao(),Ou=o}else e.current=n;if($u)$u=!1,Zu=e,qu=t;else for(Vu=r;null!==Vu;)t=Vu.nextEffect,Vu.nextEffect=null,8&Vu.flags&&((x=Vu).sibling=null,x.stateNode=null),Vu=t;if(0===(r=e.pendingLanes)&&(Yu=null),1===r?e===el?Ju++:(Ju=0,el=e):Ju=0,n=n.stateNode,_o&&"function"==typeof _o.onCommitFiberRoot)try{_o.onCommitFiberRoot(wo,n,void 0,64==(64&n.current.flags))}catch(e){}if(sl(e,Uo()),Xu)throw Xu=!1,e=Wu,Wu=null,e;return 0!=(8&Ou)||Wo(),null}function Cl(){for(;null!==Vu;){var e=Vu.alternate;il||null===ol||(0!=(8&Vu.flags)?Je(Vu,ol)&&(il=!0):13===Vu.tag&&Su(e,Vu)&&Je(Vu,ol)&&(il=!0));var t=Vu.flags;0!=(256&t)&&su(e,Vu),0==(512&t)||$u||($u=!0,Xo(97,(function(){return Ml(),null}))),Vu=Vu.nextEffect}}function Ml(){if(90!==qu){var e=97<qu?97:qu;return qu=90,Vo(e,jl)}return!1}function Nl(e,t){Gu.push(t,e),$u||($u=!0,Xo(97,(function(){return Ml(),null})))}function Tl(e,t){Ku.push(t,e),$u||($u=!0,Xo(97,(function(){return Ml(),null})))}function jl(){if(null===Zu)return!1;var e=Zu;if(Zu=null,0!=(48&Ou))throw Error(a(331));var t=Ou;Ou|=32;var n=Ku;Ku=[];for(var r=0;r<n.length;r+=2){var o=n[r],i=n[r+1],u=o.destroy;if(o.destroy=void 0,"function"==typeof u)try{u()}catch(e){if(null===i)throw Error(a(330));Rl(i,e)}}for(n=Gu,Gu=[],r=0;r<n.length;r+=2){o=n[r],i=n[r+1];try{var l=o.create;o.destroy=l()}catch(e){if(null===i)throw Error(a(330));Rl(i,e)}}for(l=e.current.firstEffect;null!==l;)e=l.nextEffect,l.nextEffect=null,8&l.flags&&(l.sibling=null,l.stateNode=null),l=e;return Ou=t,Wo(),!0}function Dl(e,t,n){li(e,t=au(0,t=ru(n,t),1)),t=al(),null!==(e=cl(e,1))&&(Ht(e,1,t),sl(e,t))}function Rl(e,t){if(3===e.tag)Dl(e,e,t);else for(var n=e.return;null!==n;){if(3===n.tag){Dl(n,e,t);break}if(1===n.tag){var r=n.stateNode;if("function"==typeof n.type.getDerivedStateFromError||"function"==typeof r.componentDidCatch&&(null===Yu||!Yu.has(r))){var o=uu(n,e=ru(t,e),1);if(li(n,o),o=al(),null!==(n=cl(n,1)))Ht(n,1,o),sl(n,o);else if("function"==typeof r.componentDidCatch&&(null===Yu||!Yu.has(r)))try{r.componentDidCatch(t,e)}catch(e){}break}}n=n.return}}function Al(e,t,n){var r=e.pingCache;null!==r&&r.delete(t),t=al(),e.pingedLanes|=e.suspendedLanes&n,Pu===e&&(Mu&n)===n&&(4===ju||3===ju&&(62914560&Mu)===Mu&&500>Uo()-Bu?ml(e,0):zu|=n),sl(e,t)}function Ll(e,t){var n=e.stateNode;null!==n&&n.delete(t),0==(t=0)&&(0==(2&(t=e.mode))?t=1:0==(4&t)?t=99===Fo()?1:2:(0===nl&&(nl=Ru),0===(t=Ut(62914560&~nl))&&(t=4194304))),n=al(),null!==(e=cl(e,t))&&(Ht(e,t,n),sl(e,n))}function zl(e,t,n,r){this.tag=e,this.key=n,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=t,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.flags=0,this.lastEffect=this.firstEffect=this.nextEffect=null,this.childLanes=this.lanes=0,this.alternate=null}function Il(e,t,n,r){return new zl(e,t,n,r)}function Bl(e){return!(!(e=e.prototype)||!e.isReactComponent)}function Ul(e,t){var n=e.alternate;return null===n?((n=Il(e.tag,t,e.key,e.mode)).elementType=e.elementType,n.type=e.type,n.stateNode=e.stateNode,n.alternate=e,e.alternate=n):(n.pendingProps=t,n.type=e.type,n.flags=0,n.nextEffect=null,n.firstEffect=null,n.lastEffect=null),n.childLanes=e.childLanes,n.lanes=e.lanes,n.child=e.child,n.memoizedProps=e.memoizedProps,n.memoizedState=e.memoizedState,n.updateQueue=e.updateQueue,t=e.dependencies,n.dependencies=null===t?null:{lanes:t.lanes,firstContext:t.firstContext},n.sibling=e.sibling,n.index=e.index,n.ref=e.ref,n}function Fl(e,t,n,r,o,i){var u=2;if(r=e,"function"==typeof e)Bl(e)&&(u=1);else if("string"==typeof e)u=5;else e:switch(e){case E:return Hl(n.children,o,i,t);case L:u=8,o|=16;break;case k:u=8,o|=1;break;case O:return(e=Il(12,n,t,8|o)).elementType=O,e.type=O,e.lanes=i,e;case N:return(e=Il(13,n,t,o)).type=N,e.elementType=N,e.lanes=i,e;case T:return(e=Il(19,n,t,o)).elementType=T,e.lanes=i,e;case z:return Vl(n,o,i,t);case I:return(e=Il(24,n,t,o)).elementType=I,e.lanes=i,e;default:if("object"==typeof e&&null!==e)switch(e.$$typeof){case P:u=10;break e;case C:u=9;break e;case M:u=11;break e;case j:u=14;break e;case D:u=16,r=null;break e;case R:u=22;break e}throw Error(a(130,null==e?e:typeof e,""))}return(t=Il(u,n,t,o)).elementType=e,t.type=r,t.lanes=i,t}function Hl(e,t,n,r){return(e=Il(7,e,r,t)).lanes=n,e}function Vl(e,t,n,r){return(e=Il(23,e,r,t)).elementType=z,e.lanes=n,e}function Xl(e,t,n){return(e=Il(6,e,null,t)).lanes=n,e}function Wl(e,t,n){return(t=Il(4,null!==e.children?e.children:[],e.key,t)).lanes=n,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}function Yl(e,t,n){this.tag=t,this.containerInfo=e,this.finishedWork=this.pingCache=this.current=this.pendingChildren=null,this.timeoutHandle=-1,this.pendingContext=this.context=null,this.hydrate=n,this.callbackNode=null,this.callbackPriority=0,this.eventTimes=Ft(0),this.expirationTimes=Ft(-1),this.entangledLanes=this.finishedLanes=this.mutableReadLanes=this.expiredLanes=this.pingedLanes=this.suspendedLanes=this.pendingLanes=0,this.entanglements=Ft(0),this.mutableSourceEagerHydrationData=null}function $l(e,t,n){var r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:x,key:null==r?null:""+r,children:e,containerInfo:t,implementation:n}}function Zl(e,t,n,r){var o=t.current,i=al(),u=ul(o);e:if(n){t:{if(qe(n=n._reactInternals)!==n||1!==n.tag)throw Error(a(170));var l=n;do{switch(l.tag){case 3:l=l.stateNode.context;break t;case 1:if(ho(l.type)){l=l.stateNode.__reactInternalMemoizedMergedChildContext;break t}}l=l.return}while(null!==l);throw Error(a(171))}if(1===n.tag){var c=n.type;if(ho(c)){n=go(n,c,l);break e}}n=l}else n=lo;return null===t.context?t.context=n:t.pendingContext=n,(t=ui(i,u)).payload={element:e},null!==(r=void 0===r?null:r)&&(t.callback=r),li(o,t),ll(o,u,i),u}function ql(e){if(!(e=e.current).child)return null;switch(e.child.tag){case 5:default:return e.child.stateNode}}function Gl(e,t){if(null!==(e=e.memoizedState)&&null!==e.dehydrated){var n=e.retryLane;e.retryLane=0!==n&&n<t?n:t}}function Kl(e,t){Gl(e,t),(e=e.alternate)&&Gl(e,t)}function Ql(e,t,n){var r=null!=n&&null!=n.hydrationOptions&&n.hydrationOptions.mutableSources||null;if(n=new Yl(e,t,null!=n&&!0===n.hydrate),t=Il(3,null,null,2===t?7:1===t?3:0),n.current=t,t.stateNode=n,ii(t),e[Gr]=n.current,Cr(8===e.nodeType?e.parentNode:e),r)for(e=0;e<r.length;e++){var o=(t=r[e])._getVersion;o=o(t._source),null==n.mutableSourceEagerHydrationData?n.mutableSourceEagerHydrationData=[t,o]:n.mutableSourceEagerHydrationData.push(t,o)}this._internalRoot=n}function Jl(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType&&(8!==e.nodeType||" react-mount-point-unstable "!==e.nodeValue))}function ec(e,t,n,r,o){var i=n._reactRootContainer;if(i){var a=i._internalRoot;if("function"==typeof o){var u=o;o=function(){var e=ql(a);u.call(e)}}Zl(t,a,e,o)}else{if(i=n._reactRootContainer=function(e,t){if(t||(t=!(!(t=e?9===e.nodeType?e.documentElement:e.firstChild:null)||1!==t.nodeType||!t.hasAttribute("data-reactroot"))),!t)for(var n;n=e.lastChild;)e.removeChild(n);return new Ql(e,0,t?{hydrate:!0}:void 0)}(n,r),a=i._internalRoot,"function"==typeof o){var l=o;o=function(){var e=ql(a);l.call(e)}}vl((function(){Zl(t,a,e,o)}))}return ql(a)}function tc(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;if(!Jl(t))throw Error(a(200));return $l(e,t,null,n)}Hu=function(e,t,n){var r=t.lanes;if(null!==e)if(e.memoizedProps!==t.pendingProps||so.current)Da=!0;else{if(0==(n&r)){switch(Da=!1,t.tag){case 3:Va(t),Xi();break;case 5:ji(t);break;case 1:ho(t.type)&&mo(t);break;case 4:Ni(t,t.stateNode.containerInfo);break;case 10:r=t.memoizedProps.value;var o=t.type._context;uo(qo,o._currentValue),o._currentValue=r;break;case 13:if(null!==t.memoizedState)return 0!=(n&t.child.childLanes)?Za(e,t,n):(uo(Ri,1&Ri.current),null!==(t=Ja(e,t,n))?t.sibling:null);uo(Ri,1&Ri.current);break;case 19:if(r=0!=(n&t.childLanes),0!=(64&e.flags)){if(r)return Qa(e,t,n);t.flags|=64}if(null!==(o=t.memoizedState)&&(o.rendering=null,o.tail=null,o.lastEffect=null),uo(Ri,Ri.current),r)break;return null;case 23:case 24:return t.lanes=0,Ia(e,t,n)}return Ja(e,t,n)}Da=0!=(16384&e.flags)}else Da=!1;switch(t.lanes=0,t.tag){case 2:if(r=t.type,null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),e=t.pendingProps,o=po(t,co.current),ni(t,n),o=ra(null,t,r,e,o,n),t.flags|=1,"object"==typeof o&&null!==o&&"function"==typeof o.render&&void 0===o.$$typeof){if(t.tag=1,t.memoizedState=null,t.updateQueue=null,ho(r)){var i=!0;mo(t)}else i=!1;t.memoizedState=null!==o.state&&void 0!==o.state?o.state:null,ii(t);var u=r.getDerivedStateFromProps;"function"==typeof u&&pi(t,r,u,e),o.updater=hi,t.stateNode=o,o._reactInternals=t,mi(t,r,e,n),t=Ha(null,t,r,!0,i,n)}else t.tag=0,Ra(null,t,o,n),t=t.child;return t;case 16:o=t.elementType;e:{switch(null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),e=t.pendingProps,o=(i=o._init)(o._payload),t.type=o,i=t.tag=function(e){if("function"==typeof e)return Bl(e)?1:0;if(null!=e){if((e=e.$$typeof)===M)return 11;if(e===j)return 14}return 2}(o),e=Zo(o,e),i){case 0:t=Ua(null,t,o,e,n);break e;case 1:t=Fa(null,t,o,e,n);break e;case 11:t=Aa(null,t,o,e,n);break e;case 14:t=La(null,t,o,Zo(o.type,e),r,n);break e}throw Error(a(306,o,""))}return t;case 0:return r=t.type,o=t.pendingProps,Ua(e,t,r,o=t.elementType===r?o:Zo(r,o),n);case 1:return r=t.type,o=t.pendingProps,Fa(e,t,r,o=t.elementType===r?o:Zo(r,o),n);case 3:if(Va(t),r=t.updateQueue,null===e||null===r)throw Error(a(282));if(r=t.pendingProps,o=null!==(o=t.memoizedState)?o.element:null,ai(e,t),si(t,r,null,n),(r=t.memoizedState.element)===o)Xi(),t=Ja(e,t,n);else{if((i=(o=t.stateNode).hydrate)&&(zi=Xr(t.stateNode.containerInfo.firstChild),Li=t,i=Ii=!0),i){if(null!=(e=o.mutableSourceEagerHydrationData))for(o=0;o<e.length;o+=2)(i=e[o])._workInProgressVersionPrimary=e[o+1],Wi.push(i);for(n=Ei(t,null,r,n),t.child=n;n;)n.flags=-3&n.flags|1024,n=n.sibling}else Ra(e,t,r,n),Xi();t=t.child}return t;case 5:return ji(t),null===e&&Fi(t),r=t.type,o=t.pendingProps,i=null!==e?e.memoizedProps:null,u=o.children,Ur(r,o)?u=null:null!==i&&Ur(r,i)&&(t.flags|=16),Ba(e,t),Ra(e,t,u,n),t.child;case 6:return null===e&&Fi(t),null;case 13:return Za(e,t,n);case 4:return Ni(t,t.stateNode.containerInfo),r=t.pendingProps,null===e?t.child=xi(t,null,r,n):Ra(e,t,r,n),t.child;case 11:return r=t.type,o=t.pendingProps,Aa(e,t,r,o=t.elementType===r?o:Zo(r,o),n);case 7:return Ra(e,t,t.pendingProps,n),t.child;case 8:case 12:return Ra(e,t,t.pendingProps.children,n),t.child;case 10:e:{r=t.type._context,o=t.pendingProps,u=t.memoizedProps,i=o.value;var l=t.type._context;if(uo(qo,l._currentValue),l._currentValue=i,null!==u)if(l=u.value,0==(i=ar(l,i)?0:0|("function"==typeof r._calculateChangedBits?r._calculateChangedBits(l,i):1073741823))){if(u.children===o.children&&!so.current){t=Ja(e,t,n);break e}}else for(null!==(l=t.child)&&(l.return=t);null!==l;){var c=l.dependencies;if(null!==c){u=l.child;for(var s=c.firstContext;null!==s;){if(s.context===r&&0!=(s.observedBits&i)){1===l.tag&&((s=ui(-1,n&-n)).tag=2,li(l,s)),l.lanes|=n,null!==(s=l.alternate)&&(s.lanes|=n),ti(l.return,n),c.lanes|=n;break}s=s.next}}else u=10===l.tag&&l.type===t.type?null:l.child;if(null!==u)u.return=l;else for(u=l;null!==u;){if(u===t){u=null;break}if(null!==(l=u.sibling)){l.return=u.return,u=l;break}u=u.return}l=u}Ra(e,t,o.children,n),t=t.child}return t;case 9:return o=t.type,r=(i=t.pendingProps).children,ni(t,n),r=r(o=ri(o,i.unstable_observedBits)),t.flags|=1,Ra(e,t,r,n),t.child;case 14:return i=Zo(o=t.type,t.pendingProps),La(e,t,o,i=Zo(o.type,i),r,n);case 15:return za(e,t,t.type,t.pendingProps,r,n);case 17:return r=t.type,o=t.pendingProps,o=t.elementType===r?o:Zo(r,o),null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),t.tag=1,ho(r)?(e=!0,mo(t)):e=!1,ni(t,n),yi(t,r,o),mi(t,r,o,n),Ha(null,t,r,!0,e,n);case 19:return Qa(e,t,n);case 23:case 24:return Ia(e,t,n)}throw Error(a(156,t.tag))},Ql.prototype.render=function(e){Zl(e,this._internalRoot,null,null)},Ql.prototype.unmount=function(){var e=this._internalRoot,t=e.containerInfo;Zl(null,e,null,(function(){t[Gr]=null}))},et=function(e){13===e.tag&&(ll(e,4,al()),Kl(e,4))},tt=function(e){13===e.tag&&(ll(e,67108864,al()),Kl(e,67108864))},nt=function(e){if(13===e.tag){var t=al(),n=ul(e);ll(e,n,t),Kl(e,n)}},rt=function(e,t){return t()},Oe=function(e,t,n){switch(t){case"input":if(ne(e,n),t=n.name,"radio"===n.type&&null!=t){for(n=e;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll("input[name="+JSON.stringify(""+t)+'][type="radio"]'),t=0;t<n.length;t++){var r=n[t];if(r!==e&&r.form===e.form){var o=to(r);if(!o)throw Error(a(90));K(r),ne(r,o)}}}break;case"textarea":ce(e,n);break;case"select":null!=(t=n.value)&&ae(e,!!n.multiple,t,!1)}},je=hl,De=function(e,t,n,r,o){var i=Ou;Ou|=4;try{return Vo(98,e.bind(null,t,n,r,o))}finally{0===(Ou=i)&&(Fu(),Wo())}},Re=function(){0==(49&Ou)&&(function(){if(null!==Qu){var e=Qu;Qu=null,e.forEach((function(e){e.expiredLanes|=24&e.pendingLanes,sl(e,Uo())}))}Wo()}(),Ml())},Ae=function(e,t){var n=Ou;Ou|=2;try{return e(t)}finally{0===(Ou=n)&&(Fu(),Wo())}};var nc={Events:[Jr,eo,to,Ne,Te,Ml,{current:!1}]},rc={findFiberByHostInstance:Qr,bundleType:0,version:"17.0.2",rendererPackageName:"react-dom"},oc={bundleType:rc.bundleType,version:rc.version,rendererPackageName:rc.rendererPackageName,rendererConfig:rc.rendererConfig,overrideHookState:null,overrideHookStateDeletePath:null,overrideHookStateRenamePath:null,overrideProps:null,overridePropsDeletePath:null,overridePropsRenamePath:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:_.ReactCurrentDispatcher,findHostInstanceByFiber:function(e){return null===(e=Qe(e))?null:e.stateNode},findFiberByHostInstance:rc.findFiberByHostInstance||function(){return null},findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null};if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__){var ic=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(!ic.isDisabled&&ic.supportsFiber)try{wo=ic.inject(oc),_o=ic}catch(ve){}}t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=nc,t.createPortal=tc,t.findDOMNode=function(e){if(null==e)return null;if(1===e.nodeType)return e;var t=e._reactInternals;if(void 0===t){if("function"==typeof e.render)throw Error(a(188));throw Error(a(268,Object.keys(e)))}return null===(e=Qe(t))?null:e.stateNode},t.flushSync=function(e,t){var n=Ou;if(0!=(48&n))return e(t);Ou|=1;try{if(e)return Vo(99,e.bind(null,t))}finally{Ou=n,Wo()}},t.hydrate=function(e,t,n){if(!Jl(t))throw Error(a(200));return ec(null,e,t,!0,n)},t.render=function(e,t,n){if(!Jl(t))throw Error(a(200));return ec(null,e,t,!1,n)},t.unmountComponentAtNode=function(e){if(!Jl(e))throw Error(a(40));return!!e._reactRootContainer&&(vl((function(){ec(null,null,e,!1,(function(){e._reactRootContainer=null,e[Gr]=null}))})),!0)},t.unstable_batchedUpdates=hl,t.unstable_createPortal=function(e,t){return tc(e,t,2<arguments.length&&void 0!==arguments[2]?arguments[2]:null)},t.unstable_renderSubtreeIntoContainer=function(e,t,n,r){if(!Jl(n))throw Error(a(200));if(null==e||void 0===e._reactInternals)throw Error(a(38));return ec(e,t,n,!1,r)},t.version="17.0.2"},935:(e,t,n)=>{"use strict";!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}(),e.exports=n(448)},668:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"DraggableCore",{enumerable:!0,get:function(){return s.default}}),t.default=void 0;var r=function(e){if(e&&e.__esModule)return e;if(null===e||"object"!==h(e)&&"function"!=typeof e)return{default:e};var t=p();if(t&&t.has(e))return t.get(e);var n={},r=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var o in e)if(Object.prototype.hasOwnProperty.call(e,o)){var i=r?Object.getOwnPropertyDescriptor(e,o):null;i&&(i.get||i.set)?Object.defineProperty(n,o,i):n[o]=e[o]}return n.default=e,t&&t.set(e,n),n}(n(294)),o=d(n(697)),i=d(n(935)),a=d(n(184)),u=n(825),l=n(849),c=n(280),s=d(n(783)),f=d(n(904));function d(e){return e&&e.__esModule?e:{default:e}}function p(){if("function"!=typeof WeakMap)return null;var e=new WeakMap;return p=function(){return e},e}function h(e){return(h="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function v(){return(v=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function y(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function g(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function m(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?g(Object(n),!0).forEach((function(t){k(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):g(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function b(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function w(e,t,n){return t&&b(e.prototype,t),n&&b(e,n),e}function _(e,t){return(_=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function S(e,t){return!t||"object"!==h(t)&&"function"!=typeof t?x(e):t}function x(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function E(e){return(E=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function k(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var O=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&_(e,t)}(c,e);var t,n,o=(t=c,n=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,r=E(t);if(n){var o=E(this).constructor;e=Reflect.construct(r,arguments,o)}else e=r.apply(this,arguments);return S(this,e)});function c(e){var t;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,c),k(x(t=o.call(this,e)),"onDragStart",(function(e,n){if((0,f.default)("Draggable: onDragStart: %j",n),!1===t.props.onStart(e,(0,l.createDraggableData)(x(t),n)))return!1;t.setState({dragging:!0,dragged:!0})})),k(x(t),"onDrag",(function(e,n){if(!t.state.dragging)return!1;(0,f.default)("Draggable: onDrag: %j",n);var r,o,i=(0,l.createDraggableData)(x(t),n),a={x:i.x,y:i.y};if(t.props.bounds){var u=a.x,c=a.y;a.x+=t.state.slackX,a.y+=t.state.slackY;var s=(r=(0,l.getBoundPosition)(x(t),a.x,a.y),o=2,function(e){if(Array.isArray(e))return e}(r)||function(e,t){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(e)){var n=[],r=!0,o=!1,i=void 0;try{for(var a,u=e[Symbol.iterator]();!(r=(a=u.next()).done)&&(n.push(a.value),!t||n.length!==t);r=!0);}catch(e){o=!0,i=e}finally{try{r||null==u.return||u.return()}finally{if(o)throw i}}return n}}(r,o)||function(e,t){if(e){if("string"==typeof e)return y(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?y(e,t):void 0}}(r,o)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),d=s[0],p=s[1];a.x=d,a.y=p,a.slackX=t.state.slackX+(u-a.x),a.slackY=t.state.slackY+(c-a.y),i.x=a.x,i.y=a.y,i.deltaX=a.x-t.state.x,i.deltaY=a.y-t.state.y}if(!1===t.props.onDrag(e,i))return!1;t.setState(a)})),k(x(t),"onDragStop",(function(e,n){if(!t.state.dragging)return!1;if(!1===t.props.onStop(e,(0,l.createDraggableData)(x(t),n)))return!1;(0,f.default)("Draggable: onDragStop: %j",n);var r={dragging:!1,slackX:0,slackY:0};if(Boolean(t.props.position)){var o=t.props.position,i=o.x,a=o.y;r.x=i,r.y=a}t.setState(r)})),t.state={dragging:!1,dragged:!1,x:e.position?e.position.x:e.defaultPosition.x,y:e.position?e.position.y:e.defaultPosition.y,prevPropsPosition:m({},e.position),slackX:0,slackY:0,isElementSVG:!1},!e.position||e.onDrag||e.onStop||console.warn("A `position` was applied to this <Draggable>, without drag handlers. This will make this component effectively undraggable. Please attach `onDrag` or `onStop` handlers so you can adjust the `position` of this element."),t}return w(c,null,[{key:"getDerivedStateFromProps",value:function(e,t){var n=e.position,r=t.prevPropsPosition;return!n||r&&n.x===r.x&&n.y===r.y?null:((0,f.default)("Draggable: getDerivedStateFromProps %j",{position:n,prevPropsPosition:r}),{x:n.x,y:n.y,prevPropsPosition:m({},n)})}}]),w(c,[{key:"componentDidMount",value:function(){void 0!==window.SVGElement&&this.findDOMNode()instanceof window.SVGElement&&this.setState({isElementSVG:!0})}},{key:"componentWillUnmount",value:function(){this.setState({dragging:!1})}},{key:"findDOMNode",value:function(){return this.props.nodeRef?this.props.nodeRef.current:i.default.findDOMNode(this)}},{key:"render",value:function(){var e,t=this.props,n=(t.axis,t.bounds,t.children),o=t.defaultPosition,i=t.defaultClassName,c=t.defaultClassNameDragging,f=t.defaultClassNameDragged,d=t.position,p=t.positionOffset,h=(t.scale,function(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}(t,["axis","bounds","children","defaultPosition","defaultClassName","defaultClassNameDragging","defaultClassNameDragged","position","positionOffset","scale"])),y={},g=null,b=!Boolean(d)||this.state.dragging,w=d||o,_={x:(0,l.canDragX)(this)&&b?this.state.x:w.x,y:(0,l.canDragY)(this)&&b?this.state.y:w.y};this.state.isElementSVG?g=(0,u.createSVGTransform)(_,p):y=(0,u.createCSSTransform)(_,p);var S=(0,a.default)(n.props.className||"",i,(k(e={},c,this.state.dragging),k(e,f,this.state.dragged),e));return r.createElement(s.default,v({},h,{onStart:this.onDragStart,onDrag:this.onDrag,onStop:this.onDragStop}),r.cloneElement(r.Children.only(n),{className:S,style:m(m({},n.props.style),y),transform:g}))}}]),c}(r.Component);t.default=O,k(O,"displayName","Draggable"),k(O,"propTypes",m(m({},s.default.propTypes),{},{axis:o.default.oneOf(["both","x","y","none"]),bounds:o.default.oneOfType([o.default.shape({left:o.default.number,right:o.default.number,top:o.default.number,bottom:o.default.number}),o.default.string,o.default.oneOf([!1])]),defaultClassName:o.default.string,defaultClassNameDragging:o.default.string,defaultClassNameDragged:o.default.string,defaultPosition:o.default.shape({x:o.default.number,y:o.default.number}),positionOffset:o.default.shape({x:o.default.oneOfType([o.default.number,o.default.string]),y:o.default.oneOfType([o.default.number,o.default.string])}),position:o.default.shape({x:o.default.number,y:o.default.number}),className:c.dontSetMe,style:c.dontSetMe,transform:c.dontSetMe})),k(O,"defaultProps",m(m({},s.default.defaultProps),{},{axis:"both",bounds:!1,defaultClassName:"react-draggable",defaultClassNameDragging:"react-draggable-dragging",defaultClassNameDragged:"react-draggable-dragged",defaultPosition:{x:0,y:0},position:null,scale:1}))},783:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r=function(e){if(e&&e.__esModule)return e;if(null===e||"object"!==d(e)&&"function"!=typeof e)return{default:e};var t=f();if(t&&t.has(e))return t.get(e);var n={},r=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var o in e)if(Object.prototype.hasOwnProperty.call(e,o)){var i=r?Object.getOwnPropertyDescriptor(e,o):null;i&&(i.get||i.set)?Object.defineProperty(n,o,i):n[o]=e[o]}return n.default=e,t&&t.set(e,n),n}(n(294)),o=s(n(697)),i=s(n(935)),a=n(825),u=n(849),l=n(280),c=s(n(904));function s(e){return e&&e.__esModule?e:{default:e}}function f(){if("function"!=typeof WeakMap)return null;var e=new WeakMap;return f=function(){return e},e}function d(e){return(d="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function p(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(e)){var n=[],r=!0,o=!1,i=void 0;try{for(var a,u=e[Symbol.iterator]();!(r=(a=u.next()).done)&&(n.push(a.value),!t||n.length!==t);r=!0);}catch(e){o=!0,i=e}finally{try{r||null==u.return||u.return()}finally{if(o)throw i}}return n}}(e,t)||function(e,t){if(e){if("string"==typeof e)return h(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?h(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function h(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function v(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function y(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function g(e,t){return(g=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function m(e,t){return!t||"object"!==d(t)&&"function"!=typeof t?b(e):t}function b(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function w(e){return(w=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function _(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var S={start:"touchstart",move:"touchmove",stop:"touchend"},x={start:"mousedown",move:"mousemove",stop:"mouseup"},E=x,k=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&g(e,t)}(f,e);var t,n,o,l,s=(o=f,l=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=w(o);if(l){var n=w(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return m(this,e)});function f(){var e;v(this,f);for(var t=arguments.length,n=new Array(t),r=0;r<t;r++)n[r]=arguments[r];return _(b(e=s.call.apply(s,[this].concat(n))),"state",{dragging:!1,lastX:NaN,lastY:NaN,touchIdentifier:null}),_(b(e),"mounted",!1),_(b(e),"handleDragStart",(function(t){if(e.props.onMouseDown(t),!e.props.allowAnyClick&&"number"==typeof t.button&&0!==t.button)return!1;var n=e.findDOMNode();if(!n||!n.ownerDocument||!n.ownerDocument.body)throw new Error("<DraggableCore> not mounted on DragStart!");var r=n.ownerDocument;if(!(e.props.disabled||!(t.target instanceof r.defaultView.Node)||e.props.handle&&!(0,a.matchesSelectorAndParentsTo)(t.target,e.props.handle,n)||e.props.cancel&&(0,a.matchesSelectorAndParentsTo)(t.target,e.props.cancel,n))){"touchstart"===t.type&&t.preventDefault();var o=(0,a.getTouchIdentifier)(t);e.setState({touchIdentifier:o});var i=(0,u.getControlPosition)(t,o,b(e));if(null!=i){var l=i.x,s=i.y,f=(0,u.createCoreData)(b(e),l,s);(0,c.default)("DraggableCore: handleDragStart: %j",f),(0,c.default)("calling",e.props.onStart),!1!==e.props.onStart(t,f)&&!1!==e.mounted&&(e.props.enableUserSelectHack&&(0,a.addUserSelectStyles)(r),e.setState({dragging:!0,lastX:l,lastY:s}),(0,a.addEvent)(r,E.move,e.handleDrag),(0,a.addEvent)(r,E.stop,e.handleDragStop))}}})),_(b(e),"handleDrag",(function(t){var n=(0,u.getControlPosition)(t,e.state.touchIdentifier,b(e));if(null!=n){var r=n.x,o=n.y;if(Array.isArray(e.props.grid)){var i=r-e.state.lastX,a=o-e.state.lastY,l=p((0,u.snapToGrid)(e.props.grid,i,a),2);if(i=l[0],a=l[1],!i&&!a)return;r=e.state.lastX+i,o=e.state.lastY+a}var s=(0,u.createCoreData)(b(e),r,o);if((0,c.default)("DraggableCore: handleDrag: %j",s),!1!==e.props.onDrag(t,s)&&!1!==e.mounted)e.setState({lastX:r,lastY:o});else try{e.handleDragStop(new MouseEvent("mouseup"))}catch(t){var f=document.createEvent("MouseEvents");f.initMouseEvent("mouseup",!0,!0,window,0,0,0,0,0,!1,!1,!1,!1,0,null),e.handleDragStop(f)}}})),_(b(e),"handleDragStop",(function(t){if(e.state.dragging){var n=(0,u.getControlPosition)(t,e.state.touchIdentifier,b(e));if(null!=n){var r=n.x,o=n.y,i=(0,u.createCoreData)(b(e),r,o);if(!1===e.props.onStop(t,i)||!1===e.mounted)return!1;var l=e.findDOMNode();l&&e.props.enableUserSelectHack&&(0,a.removeUserSelectStyles)(l.ownerDocument),(0,c.default)("DraggableCore: handleDragStop: %j",i),e.setState({dragging:!1,lastX:NaN,lastY:NaN}),l&&((0,c.default)("DraggableCore: Removing handlers"),(0,a.removeEvent)(l.ownerDocument,E.move,e.handleDrag),(0,a.removeEvent)(l.ownerDocument,E.stop,e.handleDragStop))}}})),_(b(e),"onMouseDown",(function(t){return E=x,e.handleDragStart(t)})),_(b(e),"onMouseUp",(function(t){return E=x,e.handleDragStop(t)})),_(b(e),"onTouchStart",(function(t){return E=S,e.handleDragStart(t)})),_(b(e),"onTouchEnd",(function(t){return E=S,e.handleDragStop(t)})),e}return t=f,(n=[{key:"componentDidMount",value:function(){this.mounted=!0;var e=this.findDOMNode();e&&(0,a.addEvent)(e,S.start,this.onTouchStart,{passive:!1})}},{key:"componentWillUnmount",value:function(){this.mounted=!1;var e=this.findDOMNode();if(e){var t=e.ownerDocument;(0,a.removeEvent)(t,x.move,this.handleDrag),(0,a.removeEvent)(t,S.move,this.handleDrag),(0,a.removeEvent)(t,x.stop,this.handleDragStop),(0,a.removeEvent)(t,S.stop,this.handleDragStop),(0,a.removeEvent)(e,S.start,this.onTouchStart,{passive:!1}),this.props.enableUserSelectHack&&(0,a.removeUserSelectStyles)(t)}}},{key:"findDOMNode",value:function(){return this.props.nodeRef?this.props.nodeRef.current:i.default.findDOMNode(this)}},{key:"render",value:function(){return r.cloneElement(r.Children.only(this.props.children),{onMouseDown:this.onMouseDown,onMouseUp:this.onMouseUp,onTouchEnd:this.onTouchEnd})}}])&&y(t.prototype,n),f}(r.Component);t.default=k,_(k,"displayName","DraggableCore"),_(k,"propTypes",{allowAnyClick:o.default.bool,disabled:o.default.bool,enableUserSelectHack:o.default.bool,offsetParent:function(e,t){if(e[t]&&1!==e[t].nodeType)throw new Error("Draggable's offsetParent must be a DOM Node.")},grid:o.default.arrayOf(o.default.number),handle:o.default.string,cancel:o.default.string,nodeRef:o.default.object,onStart:o.default.func,onDrag:o.default.func,onStop:o.default.func,onMouseDown:o.default.func,scale:o.default.number,className:l.dontSetMe,style:l.dontSetMe,transform:l.dontSetMe}),_(k,"defaultProps",{allowAnyClick:!1,cancel:null,disabled:!1,enableUserSelectHack:!0,offsetParent:null,handle:null,grid:null,transform:null,onStart:function(){},onDrag:function(){},onStop:function(){},onMouseDown:function(){},scale:1})},193:(e,t,n)=>{"use strict";var r=n(668),o=r.default,i=r.DraggableCore;e.exports=o,e.exports.default=o,e.exports.DraggableCore=i},825:(e,t,n)=>{"use strict";function r(e){return(r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}Object.defineProperty(t,"__esModule",{value:!0}),t.matchesSelector=f,t.matchesSelectorAndParentsTo=function(e,t,n){var r=e;do{if(f(r,t))return!0;if(r===n)return!1;r=r.parentNode}while(r);return!1},t.addEvent=function(e,t,n,r){if(e){var o=l({capture:!0},r);e.addEventListener?e.addEventListener(t,n,o):e.attachEvent?e.attachEvent("on"+t,n):e["on"+t]=n}},t.removeEvent=function(e,t,n,r){if(e){var o=l({capture:!0},r);e.removeEventListener?e.removeEventListener(t,n,o):e.detachEvent?e.detachEvent("on"+t,n):e["on"+t]=null}},t.outerHeight=function(e){var t=e.clientHeight,n=e.ownerDocument.defaultView.getComputedStyle(e);return(t+=(0,o.int)(n.borderTopWidth))+(0,o.int)(n.borderBottomWidth)},t.outerWidth=function(e){var t=e.clientWidth,n=e.ownerDocument.defaultView.getComputedStyle(e);return(t+=(0,o.int)(n.borderLeftWidth))+(0,o.int)(n.borderRightWidth)},t.innerHeight=function(e){var t=e.clientHeight,n=e.ownerDocument.defaultView.getComputedStyle(e);return(t-=(0,o.int)(n.paddingTop))-(0,o.int)(n.paddingBottom)},t.innerWidth=function(e){var t=e.clientWidth,n=e.ownerDocument.defaultView.getComputedStyle(e);return(t-=(0,o.int)(n.paddingLeft))-(0,o.int)(n.paddingRight)},t.offsetXYFromParent=function(e,t,n){var r=t===t.ownerDocument.body?{left:0,top:0}:t.getBoundingClientRect();return{x:(e.clientX+t.scrollLeft-r.left)/n,y:(e.clientY+t.scrollTop-r.top)/n}},t.createCSSTransform=function(e,t){var n=d(e,t,"px");return c({},(0,i.browserPrefixToKey)("transform",i.default),n)},t.createSVGTransform=function(e,t){return d(e,t,"")},t.getTranslation=d,t.getTouch=function(e,t){return e.targetTouches&&(0,o.findInArray)(e.targetTouches,(function(e){return t===e.identifier}))||e.changedTouches&&(0,o.findInArray)(e.changedTouches,(function(e){return t===e.identifier}))},t.getTouchIdentifier=function(e){return e.targetTouches&&e.targetTouches[0]?e.targetTouches[0].identifier:e.changedTouches&&e.changedTouches[0]?e.changedTouches[0].identifier:void 0},t.addUserSelectStyles=function(e){if(e){var t=e.getElementById("react-draggable-style-el");t||((t=e.createElement("style")).type="text/css",t.id="react-draggable-style-el",t.innerHTML=".react-draggable-transparent-selection *::-moz-selection {all: inherit;}\n",t.innerHTML+=".react-draggable-transparent-selection *::selection {all: inherit;}\n",e.getElementsByTagName("head")[0].appendChild(t)),e.body&&p(e.body,"react-draggable-transparent-selection")}},t.removeUserSelectStyles=function(e){if(e)try{if(e.body&&h(e.body,"react-draggable-transparent-selection"),e.selection)e.selection.empty();else{var t=(e.defaultView||window).getSelection();t&&"Caret"!==t.type&&t.removeAllRanges()}}catch(e){}},t.addClassName=p,t.removeClassName=h;var o=n(280),i=function(e){if(e&&e.__esModule)return e;if(null===e||"object"!==r(e)&&"function"!=typeof e)return{default:e};var t=a();if(t&&t.has(e))return t.get(e);var n={},o=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var i in e)if(Object.prototype.hasOwnProperty.call(e,i)){var u=o?Object.getOwnPropertyDescriptor(e,i):null;u&&(u.get||u.set)?Object.defineProperty(n,i,u):n[i]=e[i]}return n.default=e,t&&t.set(e,n),n}(n(650));function a(){if("function"!=typeof WeakMap)return null;var e=new WeakMap;return a=function(){return e},e}function u(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?u(Object(n),!0).forEach((function(t){c(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):u(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var s="";function f(e,t){return s||(s=(0,o.findInArray)(["matches","webkitMatchesSelector","mozMatchesSelector","msMatchesSelector","oMatchesSelector"],(function(t){return(0,o.isFunction)(e[t])}))),!!(0,o.isFunction)(e[s])&&e[s](t)}function d(e,t,n){var r=e.x,o=e.y,i="translate(".concat(r).concat(n,",").concat(o).concat(n,")");if(t){var a="".concat("string"==typeof t.x?t.x:t.x+n),u="".concat("string"==typeof t.y?t.y:t.y+n);i="translate(".concat(a,", ").concat(u,")")+i}return i}function p(e,t){e.classList?e.classList.add(t):e.className.match(new RegExp("(?:^|\\s)".concat(t,"(?!\\S)")))||(e.className+=" ".concat(t))}function h(e,t){e.classList?e.classList.remove(t):e.className=e.className.replace(new RegExp("(?:^|\\s)".concat(t,"(?!\\S)"),"g"),"")}},650:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.getPrefix=r,t.browserPrefixToKey=o,t.browserPrefixToStyle=function(e,t){return t?"-".concat(t.toLowerCase(),"-").concat(e):e},t.default=void 0;var n=["Moz","Webkit","O","ms"];function r(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"transform";if("undefined"==typeof window||void 0===window.document)return"";var t=window.document.documentElement.style;if(e in t)return"";for(var r=0;r<n.length;r++)if(o(e,n[r])in t)return n[r];return""}function o(e,t){return t?"".concat(t).concat(function(e){for(var t="",n=!0,r=0;r<e.length;r++)n?(t+=e[r].toUpperCase(),n=!1):"-"===e[r]?n=!0:t+=e[r];return t}(e)):e}var i=r();t.default=i},904:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(){}},849:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.getBoundPosition=function(e,t,n){if(!e.props.bounds)return[t,n];var a=e.props.bounds;a="string"==typeof a?a:function(e){return{left:e.left,top:e.top,right:e.right,bottom:e.bottom}}(a);var u=i(e);if("string"==typeof a){var l,c=u.ownerDocument,s=c.defaultView;if(!((l="parent"===a?u.parentNode:c.querySelector(a))instanceof s.HTMLElement))throw new Error('Bounds selector "'+a+'" could not find an element.');var f=s.getComputedStyle(u),d=s.getComputedStyle(l);a={left:-u.offsetLeft+(0,r.int)(d.paddingLeft)+(0,r.int)(f.marginLeft),top:-u.offsetTop+(0,r.int)(d.paddingTop)+(0,r.int)(f.marginTop),right:(0,o.innerWidth)(l)-(0,o.outerWidth)(u)-u.offsetLeft+(0,r.int)(d.paddingRight)-(0,r.int)(f.marginRight),bottom:(0,o.innerHeight)(l)-(0,o.outerHeight)(u)-u.offsetTop+(0,r.int)(d.paddingBottom)-(0,r.int)(f.marginBottom)}}return(0,r.isNum)(a.right)&&(t=Math.min(t,a.right)),(0,r.isNum)(a.bottom)&&(n=Math.min(n,a.bottom)),(0,r.isNum)(a.left)&&(t=Math.max(t,a.left)),(0,r.isNum)(a.top)&&(n=Math.max(n,a.top)),[t,n]},t.snapToGrid=function(e,t,n){return[Math.round(t/e[0])*e[0],Math.round(n/e[1])*e[1]]},t.canDragX=function(e){return"both"===e.props.axis||"x"===e.props.axis},t.canDragY=function(e){return"both"===e.props.axis||"y"===e.props.axis},t.getControlPosition=function(e,t,n){var r="number"==typeof t?(0,o.getTouch)(e,t):null;if("number"==typeof t&&!r)return null;var a=i(n),u=n.props.offsetParent||a.offsetParent||a.ownerDocument.body;return(0,o.offsetXYFromParent)(r||e,u,n.props.scale)},t.createCoreData=function(e,t,n){var o=e.state,a=!(0,r.isNum)(o.lastX),u=i(e);return a?{node:u,deltaX:0,deltaY:0,lastX:t,lastY:n,x:t,y:n}:{node:u,deltaX:t-o.lastX,deltaY:n-o.lastY,lastX:o.lastX,lastY:o.lastY,x:t,y:n}},t.createDraggableData=function(e,t){var n=e.props.scale;return{node:t.node,x:e.state.x+t.deltaX/n,y:e.state.y+t.deltaY/n,deltaX:t.deltaX/n,deltaY:t.deltaY/n,lastX:e.state.x,lastY:e.state.y}};var r=n(280),o=n(825);function i(e){var t=e.findDOMNode();if(!t)throw new Error("<DraggableCore>: Unmounted during event!");return t}},280:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.findInArray=function(e,t){for(var n=0,r=e.length;n<r;n++)if(t.apply(t,[e[n],n,e]))return e[n]},t.isFunction=function(e){return"function"==typeof e||"[object Function]"===Object.prototype.toString.call(e)},t.isNum=function(e){return"number"==typeof e&&!isNaN(e)},t.int=function(e){return parseInt(e,10)},t.dontSetMe=function(e,t,n){if(e[t])return new Error("Invalid prop ".concat(t," passed to ").concat(n," - do not set this, set it on the child."))}},362:(e,t,n)=>{"use strict";var r=n(294),o=n(935);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}function u(e){if("string"==typeof e||"number"==typeof e)return""+e;let t="";if(Array.isArray(e))for(let n,r=0;r<e.length;r++)""!==(n=u(e[r]))&&(t+=(t&&" ")+n);else for(let n in e)e[n]&&(t+=(t&&" ")+n);return t}function l(e){return"Minified Redux error #"+e+"; visit https://redux.js.org/Errors?code="+e+" for the full message or use the non-minified dev environment for full errors. "}var c="function"==typeof Symbol&&Symbol.observable||"@@observable",s=function(){return Math.random().toString(36).substring(7).split("").join(".")},f={INIT:"@@redux/INIT"+s(),REPLACE:"@@redux/REPLACE"+s(),PROBE_UNKNOWN_ACTION:function(){return"@@redux/PROBE_UNKNOWN_ACTION"+s()}};function d(e){if("object"!=typeof e||null===e)return!1;for(var t=e;null!==Object.getPrototypeOf(t);)t=Object.getPrototypeOf(t);return Object.getPrototypeOf(e)===t}function p(e,t,n){var r;if("function"==typeof t&&"function"==typeof n||"function"==typeof n&&"function"==typeof arguments[3])throw new Error(l(0));if("function"==typeof t&&void 0===n&&(n=t,t=void 0),void 0!==n){if("function"!=typeof n)throw new Error(l(1));return n(p)(e,t)}if("function"!=typeof e)throw new Error(l(2));var o=e,i=t,a=[],u=a,s=!1;function h(){u===a&&(u=a.slice())}function v(){if(s)throw new Error(l(3));return i}function y(e){if("function"!=typeof e)throw new Error(l(4));if(s)throw new Error(l(5));var t=!0;return h(),u.push(e),function(){if(t){if(s)throw new Error(l(6));t=!1,h();var n=u.indexOf(e);u.splice(n,1),a=null}}}function g(e){if(!d(e))throw new Error(l(7));if(void 0===e.type)throw new Error(l(8));if(s)throw new Error(l(9));try{s=!0,i=o(i,e)}finally{s=!1}for(var t=a=u,n=0;n<t.length;n++)(0,t[n])();return e}function m(e){if("function"!=typeof e)throw new Error(l(10));o=e,g({type:f.REPLACE})}function b(){var e,t=y;return(e={subscribe:function(e){if("object"!=typeof e||null===e)throw new Error(l(11));function n(){e.next&&e.next(v())}return n(),{unsubscribe:t(n)}}})[c]=function(){return this},e}return g({type:f.INIT}),(r={dispatch:g,subscribe:y,getState:v,replaceReducer:m})[c]=b,r}function h(e,t){return function(){return t(e.apply(this,arguments))}}var v={exports:{}},y={exports:{}},g={},m="function"==typeof Symbol&&Symbol.for,b=m?Symbol.for("react.element"):60103,w=m?Symbol.for("react.portal"):60106,_=m?Symbol.for("react.fragment"):60107,S=m?Symbol.for("react.strict_mode"):60108,x=m?Symbol.for("react.profiler"):60114,E=m?Symbol.for("react.provider"):60109,k=m?Symbol.for("react.context"):60110,O=m?Symbol.for("react.async_mode"):60111,P=m?Symbol.for("react.concurrent_mode"):60111,C=m?Symbol.for("react.forward_ref"):60112,M=m?Symbol.for("react.suspense"):60113,N=m?Symbol.for("react.suspense_list"):60120,T=m?Symbol.for("react.memo"):60115,j=m?Symbol.for("react.lazy"):60116,D=m?Symbol.for("react.block"):60121,R=m?Symbol.for("react.fundamental"):60117,A=m?Symbol.for("react.responder"):60118,L=m?Symbol.for("react.scope"):60119;function z(e){if("object"==typeof e&&null!==e){var t=e.$$typeof;switch(t){case b:switch(e=e.type){case O:case P:case _:case x:case S:case M:return e;default:switch(e=e&&e.$$typeof){case k:case C:case j:case T:case E:return e;default:return t}}case w:return t}}}function I(e){return z(e)===P}g.AsyncMode=O,g.ConcurrentMode=P,g.ContextConsumer=k,g.ContextProvider=E,g.Element=b,g.ForwardRef=C,g.Fragment=_,g.Lazy=j,g.Memo=T,g.Portal=w,g.Profiler=x,g.StrictMode=S,g.Suspense=M,g.isAsyncMode=function(e){return I(e)||z(e)===O},g.isConcurrentMode=I,g.isContextConsumer=function(e){return z(e)===k},g.isContextProvider=function(e){return z(e)===E},g.isElement=function(e){return"object"==typeof e&&null!==e&&e.$$typeof===b},g.isForwardRef=function(e){return z(e)===C},g.isFragment=function(e){return z(e)===_},g.isLazy=function(e){return z(e)===j},g.isMemo=function(e){return z(e)===T},g.isPortal=function(e){return z(e)===w},g.isProfiler=function(e){return z(e)===x},g.isStrictMode=function(e){return z(e)===S},g.isSuspense=function(e){return z(e)===M},g.isValidElementType=function(e){return"string"==typeof e||"function"==typeof e||e===_||e===P||e===x||e===S||e===M||e===N||"object"==typeof e&&null!==e&&(e.$$typeof===j||e.$$typeof===T||e.$$typeof===E||e.$$typeof===k||e.$$typeof===C||e.$$typeof===R||e.$$typeof===A||e.$$typeof===L||e.$$typeof===D)},g.typeOf=z,y.exports=g;Object.getOwnPropertySymbols,Object.prototype.hasOwnProperty,Object.prototype.propertyIsEnumerable;function B(){}function U(){}(function(){try{if(!Object.assign)return!1;var e=new String("abc");if(e[5]="de","5"===Object.getOwnPropertyNames(e)[0])return!1;for(var t={},n=0;n<10;n++)t["_"+String.fromCharCode(n)]=n;if("0123456789"!==Object.getOwnPropertyNames(t).map((function(e){return t[e]})).join(""))return!1;var r={};return"abcdefghijklmnopqrst".split("").forEach((function(e){r[e]=e})),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},r)).join("")}catch(e){return!1}})()&&Object.assign,y.exports,Function.call.bind(Object.prototype.hasOwnProperty),U.resetWarningCache=B,v.exports=function(){function e(e,t,n,r,o,i){if("SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"!==i){var a=new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types");throw a.name="Invariant Violation",a}}function t(){return e}e.isRequired=e;var n={array:e,bool:e,func:e,number:e,object:e,string:e,symbol:e,any:e,arrayOf:t,element:e,elementType:e,instanceOf:t,node:e,objectOf:t,oneOf:t,oneOfType:t,shape:t,exact:t,checkPropTypes:U,resetWarningCache:B};return n.PropTypes=n,n}(),v.exports;var F=r.createContext(null),H=function(e){e()},V=function(){return H},X={notify:function(){}},W=function(){function e(e,t){this.store=e,this.parentSub=t,this.unsubscribe=null,this.listeners=X,this.handleChangeWrapper=this.handleChangeWrapper.bind(this)}var t=e.prototype;return t.addNestedSub=function(e){return this.trySubscribe(),this.listeners.subscribe(e)},t.notifyNestedSubs=function(){this.listeners.notify()},t.handleChangeWrapper=function(){this.onStateChange&&this.onStateChange()},t.isSubscribed=function(){return Boolean(this.unsubscribe)},t.trySubscribe=function(){this.unsubscribe||(this.unsubscribe=this.parentSub?this.parentSub.addNestedSub(this.handleChangeWrapper):this.store.subscribe(this.handleChangeWrapper),this.listeners=function(){var e=V(),t=null,n=null;return{clear:function(){t=null,n=null},notify:function(){e((function(){for(var e=t;e;)e.callback(),e=e.next}))},get:function(){for(var e=[],n=t;n;)e.push(n),n=n.next;return e},subscribe:function(e){var r=!0,o=n={callback:e,next:null,prev:n};return o.prev?o.prev.next=o:t=o,function(){r&&null!==t&&(r=!1,o.next?o.next.prev=o.prev:n=o.prev,o.prev?o.prev.next=o.next:t=o.next)}}}}())},t.tryUnsubscribe=function(){this.unsubscribe&&(this.unsubscribe(),this.unsubscribe=null,this.listeners.clear(),this.listeners=X)},e}(),Y="undefined"!=typeof window&&void 0!==window.document&&void 0!==window.document.createElement?r.useLayoutEffect:r.useEffect;function $(e){var t=e.store,n=e.context,o=e.children,i=(0,r.useMemo)((function(){var e=new W(t);return e.onStateChange=e.notifyNestedSubs,{store:t,subscription:e}}),[t]),a=(0,r.useMemo)((function(){return t.getState()}),[t]);Y((function(){var e=i.subscription;return e.trySubscribe(),a!==t.getState()&&e.notifyNestedSubs(),function(){e.tryUnsubscribe(),e.onStateChange=null}}),[i,a]);var u=n||F;return r.createElement(u.Provider,{value:i},o)}var Z=y.exports,q={};function G(){return(0,r.useContext)(F)}function K(e){void 0===e&&(e=F);var t=e===F?G:function(){return(0,r.useContext)(e)};return function(){return t().store}}q[Z.ForwardRef]={$$typeof:!0,render:!0,defaultProps:!0,displayName:!0,propTypes:!0},q[Z.Memo]={$$typeof:!0,compare:!0,defaultProps:!0,displayName:!0,propTypes:!0,type:!0};var Q=K();function J(e){void 0===e&&(e=F);var t=e===F?Q:K(e);return function(){return t().dispatch}}var ee=J(),te=function(e,t){return e===t};function ne(e){void 0===e&&(e=F);var t=e===F?G:function(){return(0,r.useContext)(e)};return function(e,n){void 0===n&&(n=te);var o=t(),i=function(e,t,n,o){var i,a=(0,r.useReducer)((function(e){return e+1}),0)[1],u=(0,r.useMemo)((function(){return new W(n,o)}),[n,o]),l=(0,r.useRef)(),c=(0,r.useRef)(),s=(0,r.useRef)(),f=(0,r.useRef)(),d=n.getState();try{if(e!==c.current||d!==s.current||l.current){var p=e(d);i=void 0!==f.current&&t(p,f.current)?f.current:p}else i=f.current}catch(e){throw l.current&&(e.message+="\nThe error may be correlated with this previous error:\n"+l.current.stack+"\n\n"),e}return Y((function(){c.current=e,s.current=d,f.current=i,l.current=void 0})),Y((function(){function e(){try{var e=n.getState(),r=c.current(e);if(t(r,f.current))return;f.current=r,s.current=e}catch(e){l.current=e}a()}return u.onStateChange=e,u.trySubscribe(),e(),function(){return u.tryUnsubscribe()}}),[n,u]),i}(e,n,o.store,o.subscription);return(0,r.useDebugValue)(i),i}}var re,oe=ne();function ie(e,t){return{type:e,payload:t}}re=o.unstable_batchedUpdates,H=re;var ae="SET_ON_CONNECT",ue="SET_ON_CONNECT_START",le="SET_ON_CONNECT_STOP",ce="SET_ON_CONNECT_END",se="SET_ELEMENTS",fe="UPDATE_NODE_DIMENSIONS",de="UPDATE_NODE_POS",pe="UPDATE_NODE_POS_DIFF",he="SET_USER_SELECTION",ve="UPDATE_USER_SELECTION",ye="UNSET_USER_SELECTION",ge="UNSET_NODES_SELECTION",me="SET_SELECTED_ELEMENTS",be="RESET_SELECTED_ELEMENTS",we="ADD_SELECTED_ELEMENTS",_e="UPDATE_TRANSFORM",Se="UPDATE_SIZE",xe="INIT_D3ZOOM",Ee="SET_MINZOOM",ke="SET_MAXZOOM",Oe="SET_TRANSLATEEXTENT",Pe="SET_CONNECTION_POSITION",Ce="SET_CONNECTION_NODEID",Me="SET_SNAPTOGRID",Ne="SET_SNAPGRID",Te="SET_INTERACTIVE",je="SET_NODES_DRAGGABLE",De="SET_NODES_CONNECTABLE",Re="SET_ELEMENTS_SELECTABLE",Ae="SET_MULTI_SELECTION_ACTIVE",Le="SET_CONNECTION_MODE",ze="SET_NODE_EXTENT",Ie=Object.freeze({__proto__:null,setOnConnect:function(e){return ie(ae,{onConnect:e})},setOnConnectStart:function(e){return ie(ue,{onConnectStart:e})},setOnConnectStop:function(e){return ie(le,{onConnectStop:e})},setOnConnectEnd:function(e){return ie(ce,{onConnectEnd:e})},setElements:function(e){return ie(se,e)},updateNodeDimensions:function(e){return ie(fe,e)},updateNodePos:function(e){return ie(de,e)},updateNodePosDiff:function(e){return ie(pe,e)},setUserSelection:function(e){return ie(he,e)},updateUserSelection:function(e){return ie(ve,e)},unsetUserSelection:function(){return ie(ye)},setSelection:function(e){return ie("SET_SELECTION",{selectionActive:e})},unsetNodesSelection:function(){return ie(ge,{nodesSelectionActive:!1})},resetSelectedElements:function(){return ie(be,{selectedElements:null})},setSelectedElements:function(e){return ie(me,e)},addSelectedElements:function(e){return ie(we,e)},updateTransform:function(e){return ie(_e,{transform:e})},updateSize:function(e){return ie(Se,{width:e.width||500,height:e.height||500})},initD3Zoom:function(e){return ie(xe,e)},setMinZoom:function(e){return ie(Ee,e)},setMaxZoom:function(e){return ie(ke,e)},setTranslateExtent:function(e){return ie(Oe,e)},setConnectionPosition:function(e){return ie(Pe,{connectionPosition:e})},setConnectionNodeId:function(e){return ie(Ce,e)},setSnapToGrid:function(e){return ie(Me,{snapToGrid:e})},setSnapGrid:function(e){return ie(Ne,{snapGrid:e})},setInteractive:function(e){return ie(Te,{nodesDraggable:e,nodesConnectable:e,elementsSelectable:e})},setNodesDraggable:function(e){return ie(je,{nodesDraggable:e})},setNodesConnectable:function(e){return ie(De,{nodesConnectable:e})},setElementsSelectable:function(e){return ie(Re,{elementsSelectable:e})},setMultiSelectionActive:function(e){return ie(Ae,{multiSelectionActive:e})},setConnectionMode:function(e){return ie(Le,{connectionMode:e})},setNodeExtent:function(e){return ie(ze,e)}});function Be(e){var t=ee(),n=e(Ie);return(0,r.useMemo)((function(){return function(e,t){if("function"==typeof e)return h(e,t);if("object"!=typeof e||null===e)throw new Error(l(16));var n={};for(var r in e){var o=e[r];"function"==typeof o&&(n[r]=h(o,t))}return n}(n,t)}),[t,n])}var Ue=oe,Fe=function(){return Q()};function He(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function Ve(e,t){if(e){if("string"==typeof e)return He(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?He(e,t):void 0}}function Xe(e){return function(e){if(Array.isArray(e))return He(e)}(e)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(e)||Ve(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function We(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,i=[],a=!0,u=!1;try{for(n=n.call(e);!(a=(r=n.next()).done)&&(i.push(r.value),!t||i.length!==t);a=!0);}catch(e){u=!0,o=e}finally{try{a||null==n.return||n.return()}finally{if(u)throw o}}return i}}(e,t)||Ve(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}var Ye=function(e){var t=null==e?void 0:e.target;return["INPUT","SELECT","TEXTAREA","BUTTON"].includes(null==t?void 0:t.nodeName)||(null==t?void 0:t.hasAttribute("contenteditable"))},$e=function(e){return{width:e.offsetWidth,height:e.offsetHeight}},Ze=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:1;return Math.min(Math.max(e,t),n)},qe=function(e,t){return{x:Ze(e.x,t[0][0],t[1][0]),y:Ze(e.y,t[0][1],t[1][1])}},Ge=function(e){var t=We((0,r.useState)(!1),2),n=t[0],o=t[1];return(0,r.useEffect)((function(){if(void 0!==e){var t=function(t){Ye(t)||t.key!==e&&t.keyCode!==e||(t.preventDefault(),o(!0))},n=function(t){Ye(t)||t.key!==e&&t.keyCode!==e||o(!1)},r=function(){return o(!1)};return window.addEventListener("keydown",t),window.addEventListener("keyup",n),window.addEventListener("blur",r),function(){window.removeEventListener("keydown",t),window.removeEventListener("keyup",n),window.removeEventListener("blur",r)}}}),[e,o]),n};function Ke(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Qe(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Ke(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Ke(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var Je=function(e){return"id"in e&&"source"in e&&"target"in e},et=function(e){return"id"in e&&!("source"in e)&&!("target"in e)},tt=function(e,t,n,r){var o=e.x,i=e.y,a=We(t,3),u=a[0],l=a[1],c=a[2],s=We(r,2),f=s[0],d=s[1],p={x:(o-u)/c,y:(i-l)/c};return n?{x:f*Math.round(p.x/f),y:d*Math.round(p.y/d)}:p},nt=function(e){return function(t){var n=e.getState(),r=n.transform,o=n.snapToGrid,i=n.snapGrid;return tt(t,r,o,i)}},rt=function(e,t){return Qe(Qe({},e),{},{id:e.id.toString(),type:e.type||"default",__rf:{position:qe(e.position,t),width:null,height:null,handleBounds:{},isDragging:!1}})},ot=function(e){return Qe(Qe({},e),{},{source:e.source.toString(),target:e.target.toString(),sourceHandle:e.sourceHandle?e.sourceHandle.toString():null,targetHandle:e.targetHandle?e.targetHandle.toString():null,id:e.id.toString(),type:e.type||"default"})},it=function(e,t){return{x:Math.min(e.x,t.x),y:Math.min(e.y,t.y),x2:Math.max(e.x2,t.x2),y2:Math.max(e.y2,t.y2)}},at=function(e){var t=e.x,n=e.y;return{x:t,y:n,x2:t+e.width,y2:n+e.height}},ut=function(e){var t=e.x,n=e.y;return{x:t,y:n,width:e.x2-t,height:e.y2-n}},lt=function(e){var t=e.reduce((function(e,t){var n=t.__rf,r=(n=void 0===n?{}:n).position,o=n.width,i=n.height;return it(e,at(Qe(Qe({},r),{},{width:o,height:i})))}),{x:1/0,y:1/0,x2:-1/0,y2:-1/0});return ut(t)},ct=function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:[0,0,1],r=We(n,3),o=r[0],i=r[1],a=r[2],u=arguments.length>3&&void 0!==arguments[3]&&arguments[3],l=at({x:(t.x-o)/a,y:(t.y-i)/a,width:t.width/a,height:t.height/a});return e.filter((function(e){var t=e.__rf,n=t.position,r=t.width,o=t.height,i=t.isDragging,a=at(Qe(Qe({},n),{},{width:r,height:o})),c=Math.max(0,Math.min(l.x2,a.x2)-Math.max(l.x,a.x)),s=Math.max(0,Math.min(l.y2,a.y2)-Math.max(l.y,a.y)),f=Math.ceil(c*s);return!(null!==r&&null!==o&&!i)||(u?f>0:f>=r*o)}))},st=function(e,t){var n=e.map((function(e){return e.id}));return t.filter((function(e){return n.includes(e.source)||n.includes(e.target)}))},ft=function(e,t){return[].concat(Xe(e.map((function(e){var t=Qe({},e);return t.position=t.__rf.position,delete t.__rf,t}))),Xe(t.map((function(e){return Qe({},e)}))))},dt=function(e){return function(){var t=e.getState(),n=t.nodes,r=void 0===n?[]:n,o=t.edges;return ft(r,void 0===o?[]:o)}},pt=function(e){return function(){var t=e.getState(),n=t.nodes,r=void 0===n?[]:n,o=t.edges,i=void 0===o?[]:o,a=t.transform;return{elements:ft(r,i),position:[a[0],a[1]],zoom:a[2]}}},ht=function(e,t,n,r,o){var i=arguments.length>5&&void 0!==arguments[5]?arguments[5]:.1,a=t/(e.width*(1+i)),u=n/(e.height*(1+i)),l=Math.min(a,u),c=Ze(l,r,o),s=e.x+e.width/2,f=e.y+e.height/2,d=t/2-s*c,p=n/2-f*c;return[d,p,c]},vt={value:()=>{}};function yt(){for(var e,t=0,n=arguments.length,r={};t<n;++t){if(!(e=arguments[t]+"")||e in r||/[\s.]/.test(e))throw new Error("illegal type: "+e);r[e]=[]}return new gt(r)}function gt(e){this._=e}function mt(e,t){return e.trim().split(/^|\s+/).map((function(e){var n="",r=e.indexOf(".");if(r>=0&&(n=e.slice(r+1),e=e.slice(0,r)),e&&!t.hasOwnProperty(e))throw new Error("unknown type: "+e);return{type:e,name:n}}))}function bt(e,t){for(var n,r=0,o=e.length;r<o;++r)if((n=e[r]).name===t)return n.value}function wt(e,t,n){for(var r=0,o=e.length;r<o;++r)if(e[r].name===t){e[r]=vt,e=e.slice(0,r).concat(e.slice(r+1));break}return null!=n&&e.push({name:t,value:n}),e}gt.prototype=yt.prototype={constructor:gt,on:function(e,t){var n,r=this._,o=mt(e+"",r),i=-1,a=o.length;if(!(arguments.length<2)){if(null!=t&&"function"!=typeof t)throw new Error("invalid callback: "+t);for(;++i<a;)if(n=(e=o[i]).type)r[n]=wt(r[n],e.name,t);else if(null==t)for(n in r)r[n]=wt(r[n],e.name,null);return this}for(;++i<a;)if((n=(e=o[i]).type)&&(n=bt(r[n],e.name)))return n},copy:function(){var e={},t=this._;for(var n in t)e[n]=t[n].slice();return new gt(e)},call:function(e,t){if((n=arguments.length-2)>0)for(var n,r,o=new Array(n),i=0;i<n;++i)o[i]=arguments[i+2];if(!this._.hasOwnProperty(e))throw new Error("unknown type: "+e);for(i=0,n=(r=this._[e]).length;i<n;++i)r[i].value.apply(t,o)},apply:function(e,t,n){if(!this._.hasOwnProperty(e))throw new Error("unknown type: "+e);for(var r=this._[e],o=0,i=r.length;o<i;++o)r[o].value.apply(t,n)}};var _t="http://www.w3.org/1999/xhtml",St={svg:"http://www.w3.org/2000/svg",xhtml:_t,xlink:"http://www.w3.org/1999/xlink",xml:"http://www.w3.org/XML/1998/namespace",xmlns:"http://www.w3.org/2000/xmlns/"};function xt(e){var t=e+="",n=t.indexOf(":");return n>=0&&"xmlns"!==(t=e.slice(0,n))&&(e=e.slice(n+1)),St.hasOwnProperty(t)?{space:St[t],local:e}:e}function Et(e){return function(){var t=this.ownerDocument,n=this.namespaceURI;return n===_t&&t.documentElement.namespaceURI===_t?t.createElement(e):t.createElementNS(n,e)}}function kt(e){return function(){return this.ownerDocument.createElementNS(e.space,e.local)}}function Ot(e){var t=xt(e);return(t.local?kt:Et)(t)}function Pt(){}function Ct(e){return null==e?Pt:function(){return this.querySelector(e)}}function Mt(e){return"object"==typeof e&&"length"in e?e:Array.from(e)}function Nt(){return[]}function Tt(e){return function(t){return t.matches(e)}}var jt=Array.prototype.find;function Dt(){return this.firstElementChild}var Rt=Array.prototype.filter;function At(){return this.children}function Lt(e){return new Array(e.length)}function zt(e,t){this.ownerDocument=e.ownerDocument,this.namespaceURI=e.namespaceURI,this._next=null,this._parent=e,this.__data__=t}function It(e){return function(){return e}}function Bt(e,t,n,r,o,i){for(var a,u=0,l=t.length,c=i.length;u<c;++u)(a=t[u])?(a.__data__=i[u],r[u]=a):n[u]=new zt(e,i[u]);for(;u<l;++u)(a=t[u])&&(o[u]=a)}function Ut(e,t,n,r,o,i,a){var u,l,c,s=new Map,f=t.length,d=i.length,p=new Array(f);for(u=0;u<f;++u)(l=t[u])&&(p[u]=c=a.call(l,l.__data__,u,t)+"",s.has(c)?o[u]=l:s.set(c,l));for(u=0;u<d;++u)c=a.call(e,i[u],u,i)+"",(l=s.get(c))?(r[u]=l,l.__data__=i[u],s.delete(c)):n[u]=new zt(e,i[u]);for(u=0;u<f;++u)(l=t[u])&&s.get(p[u])===l&&(o[u]=l)}function Ft(e){return e.__data__}function Ht(e,t){return e<t?-1:e>t?1:e>=t?0:NaN}function Vt(e){return function(){this.removeAttribute(e)}}function Xt(e){return function(){this.removeAttributeNS(e.space,e.local)}}function Wt(e,t){return function(){this.setAttribute(e,t)}}function Yt(e,t){return function(){this.setAttributeNS(e.space,e.local,t)}}function $t(e,t){return function(){var n=t.apply(this,arguments);null==n?this.removeAttribute(e):this.setAttribute(e,n)}}function Zt(e,t){return function(){var n=t.apply(this,arguments);null==n?this.removeAttributeNS(e.space,e.local):this.setAttributeNS(e.space,e.local,n)}}function qt(e){return e.ownerDocument&&e.ownerDocument.defaultView||e.document&&e||e.defaultView}function Gt(e){return function(){this.style.removeProperty(e)}}function Kt(e,t,n){return function(){this.style.setProperty(e,t,n)}}function Qt(e,t,n){return function(){var r=t.apply(this,arguments);null==r?this.style.removeProperty(e):this.style.setProperty(e,r,n)}}function Jt(e,t){return e.style.getPropertyValue(t)||qt(e).getComputedStyle(e,null).getPropertyValue(t)}function en(e){return function(){delete this[e]}}function tn(e,t){return function(){this[e]=t}}function nn(e,t){return function(){var n=t.apply(this,arguments);null==n?delete this[e]:this[e]=n}}function rn(e){return e.trim().split(/^|\s+/)}function on(e){return e.classList||new an(e)}function an(e){this._node=e,this._names=rn(e.getAttribute("class")||"")}function un(e,t){for(var n=on(e),r=-1,o=t.length;++r<o;)n.add(t[r])}function ln(e,t){for(var n=on(e),r=-1,o=t.length;++r<o;)n.remove(t[r])}function cn(e){return function(){un(this,e)}}function sn(e){return function(){ln(this,e)}}function fn(e,t){return function(){(t.apply(this,arguments)?un:ln)(this,e)}}function dn(){this.textContent=""}function pn(e){return function(){this.textContent=e}}function hn(e){return function(){var t=e.apply(this,arguments);this.textContent=null==t?"":t}}function vn(){this.innerHTML=""}function yn(e){return function(){this.innerHTML=e}}function gn(e){return function(){var t=e.apply(this,arguments);this.innerHTML=null==t?"":t}}function mn(){this.nextSibling&&this.parentNode.appendChild(this)}function bn(){this.previousSibling&&this.parentNode.insertBefore(this,this.parentNode.firstChild)}function wn(){return null}function _n(){var e=this.parentNode;e&&e.removeChild(this)}function Sn(){var e=this.cloneNode(!1),t=this.parentNode;return t?t.insertBefore(e,this.nextSibling):e}function xn(){var e=this.cloneNode(!0),t=this.parentNode;return t?t.insertBefore(e,this.nextSibling):e}function En(e){return e.trim().split(/^|\s+/).map((function(e){var t="",n=e.indexOf(".");return n>=0&&(t=e.slice(n+1),e=e.slice(0,n)),{type:e,name:t}}))}function kn(e){return function(){var t=this.__on;if(t){for(var n,r=0,o=-1,i=t.length;r<i;++r)n=t[r],e.type&&n.type!==e.type||n.name!==e.name?t[++o]=n:this.removeEventListener(n.type,n.listener,n.options);++o?t.length=o:delete this.__on}}}function On(e,t,n){return function(){var r,o=this.__on,i=function(e){return function(t){e.call(this,t,this.__data__)}}(t);if(o)for(var a=0,u=o.length;a<u;++a)if((r=o[a]).type===e.type&&r.name===e.name)return this.removeEventListener(r.type,r.listener,r.options),this.addEventListener(r.type,r.listener=i,r.options=n),void(r.value=t);this.addEventListener(e.type,i,n),r={type:e.type,name:e.name,value:t,listener:i,options:n},o?o.push(r):this.__on=[r]}}function Pn(e,t,n){var r=qt(e),o=r.CustomEvent;"function"==typeof o?o=new o(t,n):(o=r.document.createEvent("Event"),n?(o.initEvent(t,n.bubbles,n.cancelable),o.detail=n.detail):o.initEvent(t,!1,!1)),e.dispatchEvent(o)}function Cn(e,t){return function(){return Pn(this,e,t)}}function Mn(e,t){return function(){return Pn(this,e,t.apply(this,arguments))}}zt.prototype={constructor:zt,appendChild:function(e){return this._parent.insertBefore(e,this._next)},insertBefore:function(e,t){return this._parent.insertBefore(e,t)},querySelector:function(e){return this._parent.querySelector(e)},querySelectorAll:function(e){return this._parent.querySelectorAll(e)}},an.prototype={add:function(e){this._names.indexOf(e)<0&&(this._names.push(e),this._node.setAttribute("class",this._names.join(" ")))},remove:function(e){var t=this._names.indexOf(e);t>=0&&(this._names.splice(t,1),this._node.setAttribute("class",this._names.join(" ")))},contains:function(e){return this._names.indexOf(e)>=0}};var Nn=[null];function Tn(e,t){this._groups=e,this._parents=t}function jn(e){return"string"==typeof e?new Tn([[document.querySelector(e)]],[document.documentElement]):new Tn([[e]],Nn)}function Dn(e){e.preventDefault(),e.stopImmediatePropagation()}function Rn(e){var t=e.document.documentElement,n=jn(e).on("dragstart.drag",Dn,!0);"onselectstart"in t?n.on("selectstart.drag",Dn,!0):(t.__noselect=t.style.MozUserSelect,t.style.MozUserSelect="none")}function An(e,t){var n=e.document.documentElement,r=jn(e).on("dragstart.drag",null);t&&(r.on("click.drag",Dn,!0),setTimeout((function(){r.on("click.drag",null)}),0)),"onselectstart"in n?r.on("selectstart.drag",null):(n.style.MozUserSelect=n.__noselect,delete n.__noselect)}function Ln(e,t,n){e.prototype=t.prototype=n,n.constructor=e}function zn(e,t){var n=Object.create(e.prototype);for(var r in t)n[r]=t[r];return n}function In(){}Tn.prototype={constructor:Tn,select:function(e){"function"!=typeof e&&(e=Ct(e));for(var t=this._groups,n=t.length,r=new Array(n),o=0;o<n;++o)for(var i,a,u=t[o],l=u.length,c=r[o]=new Array(l),s=0;s<l;++s)(i=u[s])&&(a=e.call(i,i.__data__,s,u))&&("__data__"in i&&(a.__data__=i.__data__),c[s]=a);return new Tn(r,this._parents)},selectAll:function(e){e="function"==typeof e?function(e){return function(){var t=e.apply(this,arguments);return null==t?[]:Mt(t)}}(e):function(e){return null==e?Nt:function(){return this.querySelectorAll(e)}}(e);for(var t=this._groups,n=t.length,r=[],o=[],i=0;i<n;++i)for(var a,u=t[i],l=u.length,c=0;c<l;++c)(a=u[c])&&(r.push(e.call(a,a.__data__,c,u)),o.push(a));return new Tn(r,o)},selectChild:function(e){return this.select(null==e?Dt:function(e){return function(){return jt.call(this.children,e)}}("function"==typeof e?e:Tt(e)))},selectChildren:function(e){return this.selectAll(null==e?At:function(e){return function(){return Rt.call(this.children,e)}}("function"==typeof e?e:Tt(e)))},filter:function(e){"function"!=typeof e&&(e=function(e){return function(){return this.matches(e)}}(e));for(var t=this._groups,n=t.length,r=new Array(n),o=0;o<n;++o)for(var i,a=t[o],u=a.length,l=r[o]=[],c=0;c<u;++c)(i=a[c])&&e.call(i,i.__data__,c,a)&&l.push(i);return new Tn(r,this._parents)},data:function(e,t){if(!arguments.length)return Array.from(this,Ft);var n=t?Ut:Bt,r=this._parents,o=this._groups;"function"!=typeof e&&(e=It(e));for(var i=o.length,a=new Array(i),u=new Array(i),l=new Array(i),c=0;c<i;++c){var s=r[c],f=o[c],d=f.length,p=Mt(e.call(s,s&&s.__data__,c,r)),h=p.length,v=u[c]=new Array(h),y=a[c]=new Array(h),g=l[c]=new Array(d);n(s,f,v,y,g,p,t);for(var m,b,w=0,_=0;w<h;++w)if(m=v[w]){for(w>=_&&(_=w+1);!(b=y[_])&&++_<h;);m._next=b||null}}return(a=new Tn(a,r))._enter=u,a._exit=l,a},enter:function(){return new Tn(this._enter||this._groups.map(Lt),this._parents)},exit:function(){return new Tn(this._exit||this._groups.map(Lt),this._parents)},join:function(e,t,n){var r=this.enter(),o=this,i=this.exit();return r="function"==typeof e?e(r):r.append(e+""),null!=t&&(o=t(o)),null==n?i.remove():n(i),r&&o?r.merge(o).order():o},merge:function(e){if(!(e instanceof Tn))throw new Error("invalid merge");for(var t=this._groups,n=e._groups,r=t.length,o=n.length,i=Math.min(r,o),a=new Array(r),u=0;u<i;++u)for(var l,c=t[u],s=n[u],f=c.length,d=a[u]=new Array(f),p=0;p<f;++p)(l=c[p]||s[p])&&(d[p]=l);for(;u<r;++u)a[u]=t[u];return new Tn(a,this._parents)},selection:function(){return this},order:function(){for(var e=this._groups,t=-1,n=e.length;++t<n;)for(var r,o=e[t],i=o.length-1,a=o[i];--i>=0;)(r=o[i])&&(a&&4^r.compareDocumentPosition(a)&&a.parentNode.insertBefore(r,a),a=r);return this},sort:function(e){function t(t,n){return t&&n?e(t.__data__,n.__data__):!t-!n}e||(e=Ht);for(var n=this._groups,r=n.length,o=new Array(r),i=0;i<r;++i){for(var a,u=n[i],l=u.length,c=o[i]=new Array(l),s=0;s<l;++s)(a=u[s])&&(c[s]=a);c.sort(t)}return new Tn(o,this._parents).order()},call:function(){var e=arguments[0];return arguments[0]=this,e.apply(null,arguments),this},nodes:function(){return Array.from(this)},node:function(){for(var e=this._groups,t=0,n=e.length;t<n;++t)for(var r=e[t],o=0,i=r.length;o<i;++o){var a=r[o];if(a)return a}return null},size:function(){let e=0;for(const t of this)++e;return e},empty:function(){return!this.node()},each:function(e){for(var t=this._groups,n=0,r=t.length;n<r;++n)for(var o,i=t[n],a=0,u=i.length;a<u;++a)(o=i[a])&&e.call(o,o.__data__,a,i);return this},attr:function(e,t){var n=xt(e);if(arguments.length<2){var r=this.node();return n.local?r.getAttributeNS(n.space,n.local):r.getAttribute(n)}return this.each((null==t?n.local?Xt:Vt:"function"==typeof t?n.local?Zt:$t:n.local?Yt:Wt)(n,t))},style:function(e,t,n){return arguments.length>1?this.each((null==t?Gt:"function"==typeof t?Qt:Kt)(e,t,null==n?"":n)):Jt(this.node(),e)},property:function(e,t){return arguments.length>1?this.each((null==t?en:"function"==typeof t?nn:tn)(e,t)):this.node()[e]},classed:function(e,t){var n=rn(e+"");if(arguments.length<2){for(var r=on(this.node()),o=-1,i=n.length;++o<i;)if(!r.contains(n[o]))return!1;return!0}return this.each(("function"==typeof t?fn:t?cn:sn)(n,t))},text:function(e){return arguments.length?this.each(null==e?dn:("function"==typeof e?hn:pn)(e)):this.node().textContent},html:function(e){return arguments.length?this.each(null==e?vn:("function"==typeof e?gn:yn)(e)):this.node().innerHTML},raise:function(){return this.each(mn)},lower:function(){return this.each(bn)},append:function(e){var t="function"==typeof e?e:Ot(e);return this.select((function(){return this.appendChild(t.apply(this,arguments))}))},insert:function(e,t){var n="function"==typeof e?e:Ot(e),r=null==t?wn:"function"==typeof t?t:Ct(t);return this.select((function(){return this.insertBefore(n.apply(this,arguments),r.apply(this,arguments)||null)}))},remove:function(){return this.each(_n)},clone:function(e){return this.select(e?xn:Sn)},datum:function(e){return arguments.length?this.property("__data__",e):this.node().__data__},on:function(e,t,n){var r,o,i=En(e+""),a=i.length;if(!(arguments.length<2)){for(u=t?On:kn,r=0;r<a;++r)this.each(u(i[r],t,n));return this}var u=this.node().__on;if(u)for(var l,c=0,s=u.length;c<s;++c)for(r=0,l=u[c];r<a;++r)if((o=i[r]).type===l.type&&o.name===l.name)return l.value},dispatch:function(e,t){return this.each(("function"==typeof t?Mn:Cn)(e,t))},[Symbol.iterator]:function*(){for(var e=this._groups,t=0,n=e.length;t<n;++t)for(var r,o=e[t],i=0,a=o.length;i<a;++i)(r=o[i])&&(yield r)}};var Bn=.7,Un=1/Bn,Fn="\\s*([+-]?\\d+)\\s*",Hn="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)\\s*",Vn="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)%\\s*",Xn=/^#([0-9a-f]{3,8})$/,Wn=new RegExp("^rgb\\("+[Fn,Fn,Fn]+"\\)$"),Yn=new RegExp("^rgb\\("+[Vn,Vn,Vn]+"\\)$"),$n=new RegExp("^rgba\\("+[Fn,Fn,Fn,Hn]+"\\)$"),Zn=new RegExp("^rgba\\("+[Vn,Vn,Vn,Hn]+"\\)$"),qn=new RegExp("^hsl\\("+[Hn,Vn,Vn]+"\\)$"),Gn=new RegExp("^hsla\\("+[Hn,Vn,Vn,Hn]+"\\)$"),Kn={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074};function Qn(){return this.rgb().formatHex()}function Jn(){return this.rgb().formatRgb()}function er(e){var t,n;return e=(e+"").trim().toLowerCase(),(t=Xn.exec(e))?(n=t[1].length,t=parseInt(t[1],16),6===n?tr(t):3===n?new ir(t>>8&15|t>>4&240,t>>4&15|240&t,(15&t)<<4|15&t,1):8===n?nr(t>>24&255,t>>16&255,t>>8&255,(255&t)/255):4===n?nr(t>>12&15|t>>8&240,t>>8&15|t>>4&240,t>>4&15|240&t,((15&t)<<4|15&t)/255):null):(t=Wn.exec(e))?new ir(t[1],t[2],t[3],1):(t=Yn.exec(e))?new ir(255*t[1]/100,255*t[2]/100,255*t[3]/100,1):(t=$n.exec(e))?nr(t[1],t[2],t[3],t[4]):(t=Zn.exec(e))?nr(255*t[1]/100,255*t[2]/100,255*t[3]/100,t[4]):(t=qn.exec(e))?cr(t[1],t[2]/100,t[3]/100,1):(t=Gn.exec(e))?cr(t[1],t[2]/100,t[3]/100,t[4]):Kn.hasOwnProperty(e)?tr(Kn[e]):"transparent"===e?new ir(NaN,NaN,NaN,0):null}function tr(e){return new ir(e>>16&255,e>>8&255,255&e,1)}function nr(e,t,n,r){return r<=0&&(e=t=n=NaN),new ir(e,t,n,r)}function rr(e){return e instanceof In||(e=er(e)),e?new ir((e=e.rgb()).r,e.g,e.b,e.opacity):new ir}function or(e,t,n,r){return 1===arguments.length?rr(e):new ir(e,t,n,null==r?1:r)}function ir(e,t,n,r){this.r=+e,this.g=+t,this.b=+n,this.opacity=+r}function ar(){return"#"+lr(this.r)+lr(this.g)+lr(this.b)}function ur(){var e=this.opacity;return(1===(e=isNaN(e)?1:Math.max(0,Math.min(1,e)))?"rgb(":"rgba(")+Math.max(0,Math.min(255,Math.round(this.r)||0))+", "+Math.max(0,Math.min(255,Math.round(this.g)||0))+", "+Math.max(0,Math.min(255,Math.round(this.b)||0))+(1===e?")":", "+e+")")}function lr(e){return((e=Math.max(0,Math.min(255,Math.round(e)||0)))<16?"0":"")+e.toString(16)}function cr(e,t,n,r){return r<=0?e=t=n=NaN:n<=0||n>=1?e=t=NaN:t<=0&&(e=NaN),new fr(e,t,n,r)}function sr(e){if(e instanceof fr)return new fr(e.h,e.s,e.l,e.opacity);if(e instanceof In||(e=er(e)),!e)return new fr;if(e instanceof fr)return e;var t=(e=e.rgb()).r/255,n=e.g/255,r=e.b/255,o=Math.min(t,n,r),i=Math.max(t,n,r),a=NaN,u=i-o,l=(i+o)/2;return u?(a=t===i?(n-r)/u+6*(n<r):n===i?(r-t)/u+2:(t-n)/u+4,u/=l<.5?i+o:2-i-o,a*=60):u=l>0&&l<1?0:a,new fr(a,u,l,e.opacity)}function fr(e,t,n,r){this.h=+e,this.s=+t,this.l=+n,this.opacity=+r}function dr(e,t,n){return 255*(e<60?t+(n-t)*e/60:e<180?n:e<240?t+(n-t)*(240-e)/60:t)}Ln(In,er,{copy:function(e){return Object.assign(new this.constructor,this,e)},displayable:function(){return this.rgb().displayable()},hex:Qn,formatHex:Qn,formatHsl:function(){return sr(this).formatHsl()},formatRgb:Jn,toString:Jn}),Ln(ir,or,zn(In,{brighter:function(e){return e=null==e?Un:Math.pow(Un,e),new ir(this.r*e,this.g*e,this.b*e,this.opacity)},darker:function(e){return e=null==e?Bn:Math.pow(Bn,e),new ir(this.r*e,this.g*e,this.b*e,this.opacity)},rgb:function(){return this},displayable:function(){return-.5<=this.r&&this.r<255.5&&-.5<=this.g&&this.g<255.5&&-.5<=this.b&&this.b<255.5&&0<=this.opacity&&this.opacity<=1},hex:ar,formatHex:ar,formatRgb:ur,toString:ur})),Ln(fr,(function(e,t,n,r){return 1===arguments.length?sr(e):new fr(e,t,n,null==r?1:r)}),zn(In,{brighter:function(e){return e=null==e?Un:Math.pow(Un,e),new fr(this.h,this.s,this.l*e,this.opacity)},darker:function(e){return e=null==e?Bn:Math.pow(Bn,e),new fr(this.h,this.s,this.l*e,this.opacity)},rgb:function(){var e=this.h%360+360*(this.h<0),t=isNaN(e)||isNaN(this.s)?0:this.s,n=this.l,r=n+(n<.5?n:1-n)*t,o=2*n-r;return new ir(dr(e>=240?e-240:e+120,o,r),dr(e,o,r),dr(e<120?e+240:e-120,o,r),this.opacity)},displayable:function(){return(0<=this.s&&this.s<=1||isNaN(this.s))&&0<=this.l&&this.l<=1&&0<=this.opacity&&this.opacity<=1},formatHsl:function(){var e=this.opacity;return(1===(e=isNaN(e)?1:Math.max(0,Math.min(1,e)))?"hsl(":"hsla(")+(this.h||0)+", "+100*(this.s||0)+"%, "+100*(this.l||0)+"%"+(1===e?")":", "+e+")")}}));var pr=e=>()=>e;function hr(e,t){var n=t-e;return n?function(e,t){return function(n){return e+n*t}}(e,n):pr(isNaN(e)?t:e)}var vr=function e(t){var n=function(e){return 1==(e=+e)?hr:function(t,n){return n-t?function(e,t,n){return e=Math.pow(e,n),t=Math.pow(t,n)-e,n=1/n,function(r){return Math.pow(e+r*t,n)}}(t,n,e):pr(isNaN(t)?n:t)}}(t);function r(e,t){var r=n((e=or(e)).r,(t=or(t)).r),o=n(e.g,t.g),i=n(e.b,t.b),a=hr(e.opacity,t.opacity);return function(t){return e.r=r(t),e.g=o(t),e.b=i(t),e.opacity=a(t),e+""}}return r.gamma=e,r}(1);function yr(e,t){return e=+e,t=+t,function(n){return e*(1-n)+t*n}}var gr=/[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g,mr=new RegExp(gr.source,"g");function br(e,t){var n,r,o,i=gr.lastIndex=mr.lastIndex=0,a=-1,u=[],l=[];for(e+="",t+="";(n=gr.exec(e))&&(r=mr.exec(t));)(o=r.index)>i&&(o=t.slice(i,o),u[a]?u[a]+=o:u[++a]=o),(n=n[0])===(r=r[0])?u[a]?u[a]+=r:u[++a]=r:(u[++a]=null,l.push({i:a,x:yr(n,r)})),i=mr.lastIndex;return i<t.length&&(o=t.slice(i),u[a]?u[a]+=o:u[++a]=o),u.length<2?l[0]?function(e){return function(t){return e(t)+""}}(l[0].x):function(e){return function(){return e}}(t):(t=l.length,function(e){for(var n,r=0;r<t;++r)u[(n=l[r]).i]=n.x(e);return u.join("")})}var wr,_r=180/Math.PI,Sr={translateX:0,translateY:0,rotate:0,skewX:0,scaleX:1,scaleY:1};function xr(e,t,n,r,o,i){var a,u,l;return(a=Math.sqrt(e*e+t*t))&&(e/=a,t/=a),(l=e*n+t*r)&&(n-=e*l,r-=t*l),(u=Math.sqrt(n*n+r*r))&&(n/=u,r/=u,l/=u),e*r<t*n&&(e=-e,t=-t,l=-l,a=-a),{translateX:o,translateY:i,rotate:Math.atan2(t,e)*_r,skewX:Math.atan(l)*_r,scaleX:a,scaleY:u}}function Er(e,t,n,r){function o(e){return e.length?e.pop()+" ":""}return function(i,a){var u=[],l=[];return i=e(i),a=e(a),function(e,r,o,i,a,u){if(e!==o||r!==i){var l=a.push("translate(",null,t,null,n);u.push({i:l-4,x:yr(e,o)},{i:l-2,x:yr(r,i)})}else(o||i)&&a.push("translate("+o+t+i+n)}(i.translateX,i.translateY,a.translateX,a.translateY,u,l),function(e,t,n,i){e!==t?(e-t>180?t+=360:t-e>180&&(e+=360),i.push({i:n.push(o(n)+"rotate(",null,r)-2,x:yr(e,t)})):t&&n.push(o(n)+"rotate("+t+r)}(i.rotate,a.rotate,u,l),function(e,t,n,i){e!==t?i.push({i:n.push(o(n)+"skewX(",null,r)-2,x:yr(e,t)}):t&&n.push(o(n)+"skewX("+t+r)}(i.skewX,a.skewX,u,l),function(e,t,n,r,i,a){if(e!==n||t!==r){var u=i.push(o(i)+"scale(",null,",",null,")");a.push({i:u-4,x:yr(e,n)},{i:u-2,x:yr(t,r)})}else 1===n&&1===r||i.push(o(i)+"scale("+n+","+r+")")}(i.scaleX,i.scaleY,a.scaleX,a.scaleY,u,l),i=a=null,function(e){for(var t,n=-1,r=l.length;++n<r;)u[(t=l[n]).i]=t.x(e);return u.join("")}}}var kr=Er((function(e){const t=new("function"==typeof DOMMatrix?DOMMatrix:WebKitCSSMatrix)(e+"");return t.isIdentity?Sr:xr(t.a,t.b,t.c,t.d,t.e,t.f)}),"px, ","px)","deg)"),Or=Er((function(e){return null==e?Sr:(wr||(wr=document.createElementNS("http://www.w3.org/2000/svg","g")),wr.setAttribute("transform",e),(e=wr.transform.baseVal.consolidate())?xr((e=e.matrix).a,e.b,e.c,e.d,e.e,e.f):Sr)}),", ",")",")");function Pr(e){return((e=Math.exp(e))+1/e)/2}var Cr=function e(t,n,r){function o(e,o){var i,a,u=e[0],l=e[1],c=e[2],s=o[0],f=o[1],d=o[2],p=s-u,h=f-l,v=p*p+h*h;if(v<1e-12)a=Math.log(d/c)/t,i=function(e){return[u+e*p,l+e*h,c*Math.exp(t*e*a)]};else{var y=Math.sqrt(v),g=(d*d-c*c+r*v)/(2*c*n*y),m=(d*d-c*c-r*v)/(2*d*n*y),b=Math.log(Math.sqrt(g*g+1)-g),w=Math.log(Math.sqrt(m*m+1)-m);a=(w-b)/t,i=function(e){var r=e*a,o=Pr(b),i=c/(n*y)*(o*function(e){return((e=Math.exp(2*e))-1)/(e+1)}(t*r+b)-function(e){return((e=Math.exp(e))-1/e)/2}(b));return[u+i*p,l+i*h,c*o/Pr(t*r+b)]}}return i.duration=1e3*a*t/Math.SQRT2,i}return o.rho=function(t){var n=Math.max(.001,+t),r=n*n;return e(n,r,r*r)},o}(Math.SQRT2,2,4),Mr="http://www.w3.org/1999/xhtml",Nr={svg:"http://www.w3.org/2000/svg",xhtml:Mr,xlink:"http://www.w3.org/1999/xlink",xml:"http://www.w3.org/XML/1998/namespace",xmlns:"http://www.w3.org/2000/xmlns/"};function Tr(e){var t=e+="",n=t.indexOf(":");return n>=0&&"xmlns"!==(t=e.slice(0,n))&&(e=e.slice(n+1)),Nr.hasOwnProperty(t)?{space:Nr[t],local:e}:e}function jr(e){return function(){var t=this.ownerDocument,n=this.namespaceURI;return n===Mr&&t.documentElement.namespaceURI===Mr?t.createElement(e):t.createElementNS(n,e)}}function Dr(e){return function(){return this.ownerDocument.createElementNS(e.space,e.local)}}function Rr(e){var t=Tr(e);return(t.local?Dr:jr)(t)}function Ar(){}function Lr(e){return null==e?Ar:function(){return this.querySelector(e)}}function zr(e){return"object"==typeof e&&"length"in e?e:Array.from(e)}function Ir(){return[]}function Br(e){return function(t){return t.matches(e)}}var Ur=Array.prototype.find;function Fr(){return this.firstElementChild}var Hr=Array.prototype.filter;function Vr(){return this.children}function Xr(e){return new Array(e.length)}function Wr(e,t){this.ownerDocument=e.ownerDocument,this.namespaceURI=e.namespaceURI,this._next=null,this._parent=e,this.__data__=t}function Yr(e){return function(){return e}}function $r(e,t,n,r,o,i){for(var a,u=0,l=t.length,c=i.length;u<c;++u)(a=t[u])?(a.__data__=i[u],r[u]=a):n[u]=new Wr(e,i[u]);for(;u<l;++u)(a=t[u])&&(o[u]=a)}function Zr(e,t,n,r,o,i,a){var u,l,c,s=new Map,f=t.length,d=i.length,p=new Array(f);for(u=0;u<f;++u)(l=t[u])&&(p[u]=c=a.call(l,l.__data__,u,t)+"",s.has(c)?o[u]=l:s.set(c,l));for(u=0;u<d;++u)c=a.call(e,i[u],u,i)+"",(l=s.get(c))?(r[u]=l,l.__data__=i[u],s.delete(c)):n[u]=new Wr(e,i[u]);for(u=0;u<f;++u)(l=t[u])&&s.get(p[u])===l&&(o[u]=l)}function qr(e){return e.__data__}function Gr(e,t){return e<t?-1:e>t?1:e>=t?0:NaN}function Kr(e){return function(){this.removeAttribute(e)}}function Qr(e){return function(){this.removeAttributeNS(e.space,e.local)}}function Jr(e,t){return function(){this.setAttribute(e,t)}}function eo(e,t){return function(){this.setAttributeNS(e.space,e.local,t)}}function to(e,t){return function(){var n=t.apply(this,arguments);null==n?this.removeAttribute(e):this.setAttribute(e,n)}}function no(e,t){return function(){var n=t.apply(this,arguments);null==n?this.removeAttributeNS(e.space,e.local):this.setAttributeNS(e.space,e.local,n)}}function ro(e){return e.ownerDocument&&e.ownerDocument.defaultView||e.document&&e||e.defaultView}function oo(e){return function(){this.style.removeProperty(e)}}function io(e,t,n){return function(){this.style.setProperty(e,t,n)}}function ao(e,t,n){return function(){var r=t.apply(this,arguments);null==r?this.style.removeProperty(e):this.style.setProperty(e,r,n)}}function uo(e,t){return e.style.getPropertyValue(t)||ro(e).getComputedStyle(e,null).getPropertyValue(t)}function lo(e){return function(){delete this[e]}}function co(e,t){return function(){this[e]=t}}function so(e,t){return function(){var n=t.apply(this,arguments);null==n?delete this[e]:this[e]=n}}function fo(e){return e.trim().split(/^|\s+/)}function po(e){return e.classList||new ho(e)}function ho(e){this._node=e,this._names=fo(e.getAttribute("class")||"")}function vo(e,t){for(var n=po(e),r=-1,o=t.length;++r<o;)n.add(t[r])}function yo(e,t){for(var n=po(e),r=-1,o=t.length;++r<o;)n.remove(t[r])}function go(e){return function(){vo(this,e)}}function mo(e){return function(){yo(this,e)}}function bo(e,t){return function(){(t.apply(this,arguments)?vo:yo)(this,e)}}function wo(){this.textContent=""}function _o(e){return function(){this.textContent=e}}function So(e){return function(){var t=e.apply(this,arguments);this.textContent=null==t?"":t}}function xo(){this.innerHTML=""}function Eo(e){return function(){this.innerHTML=e}}function ko(e){return function(){var t=e.apply(this,arguments);this.innerHTML=null==t?"":t}}function Oo(){this.nextSibling&&this.parentNode.appendChild(this)}function Po(){this.previousSibling&&this.parentNode.insertBefore(this,this.parentNode.firstChild)}function Co(){return null}function Mo(){var e=this.parentNode;e&&e.removeChild(this)}function No(){var e=this.cloneNode(!1),t=this.parentNode;return t?t.insertBefore(e,this.nextSibling):e}function To(){var e=this.cloneNode(!0),t=this.parentNode;return t?t.insertBefore(e,this.nextSibling):e}function jo(e){return e.trim().split(/^|\s+/).map((function(e){var t="",n=e.indexOf(".");return n>=0&&(t=e.slice(n+1),e=e.slice(0,n)),{type:e,name:t}}))}function Do(e){return function(){var t=this.__on;if(t){for(var n,r=0,o=-1,i=t.length;r<i;++r)n=t[r],e.type&&n.type!==e.type||n.name!==e.name?t[++o]=n:this.removeEventListener(n.type,n.listener,n.options);++o?t.length=o:delete this.__on}}}function Ro(e,t,n){return function(){var r,o=this.__on,i=function(e){return function(t){e.call(this,t,this.__data__)}}(t);if(o)for(var a=0,u=o.length;a<u;++a)if((r=o[a]).type===e.type&&r.name===e.name)return this.removeEventListener(r.type,r.listener,r.options),this.addEventListener(r.type,r.listener=i,r.options=n),void(r.value=t);this.addEventListener(e.type,i,n),r={type:e.type,name:e.name,value:t,listener:i,options:n},o?o.push(r):this.__on=[r]}}function Ao(e,t,n){var r=ro(e),o=r.CustomEvent;"function"==typeof o?o=new o(t,n):(o=r.document.createEvent("Event"),n?(o.initEvent(t,n.bubbles,n.cancelable),o.detail=n.detail):o.initEvent(t,!1,!1)),e.dispatchEvent(o)}function Lo(e,t){return function(){return Ao(this,e,t)}}function zo(e,t){return function(){return Ao(this,e,t.apply(this,arguments))}}Wr.prototype={constructor:Wr,appendChild:function(e){return this._parent.insertBefore(e,this._next)},insertBefore:function(e,t){return this._parent.insertBefore(e,t)},querySelector:function(e){return this._parent.querySelector(e)},querySelectorAll:function(e){return this._parent.querySelectorAll(e)}},ho.prototype={add:function(e){this._names.indexOf(e)<0&&(this._names.push(e),this._node.setAttribute("class",this._names.join(" ")))},remove:function(e){var t=this._names.indexOf(e);t>=0&&(this._names.splice(t,1),this._node.setAttribute("class",this._names.join(" ")))},contains:function(e){return this._names.indexOf(e)>=0}};var Io=[null];function Bo(e,t){this._groups=e,this._parents=t}function Uo(e){return"string"==typeof e?new Bo([[document.querySelector(e)]],[document.documentElement]):new Bo([[e]],Io)}function Fo(e,t){if(e=function(e){let t;for(;t=e.sourceEvent;)e=t;return e}(e),void 0===t&&(t=e.currentTarget),t){var n=t.ownerSVGElement||t;if(n.createSVGPoint){var r=n.createSVGPoint();return r.x=e.clientX,r.y=e.clientY,[(r=r.matrixTransform(t.getScreenCTM().inverse())).x,r.y]}if(t.getBoundingClientRect){var o=t.getBoundingClientRect();return[e.clientX-o.left-t.clientLeft,e.clientY-o.top-t.clientTop]}}return[e.pageX,e.pageY]}Bo.prototype={constructor:Bo,select:function(e){"function"!=typeof e&&(e=Lr(e));for(var t=this._groups,n=t.length,r=new Array(n),o=0;o<n;++o)for(var i,a,u=t[o],l=u.length,c=r[o]=new Array(l),s=0;s<l;++s)(i=u[s])&&(a=e.call(i,i.__data__,s,u))&&("__data__"in i&&(a.__data__=i.__data__),c[s]=a);return new Bo(r,this._parents)},selectAll:function(e){e="function"==typeof e?function(e){return function(){var t=e.apply(this,arguments);return null==t?[]:zr(t)}}(e):function(e){return null==e?Ir:function(){return this.querySelectorAll(e)}}(e);for(var t=this._groups,n=t.length,r=[],o=[],i=0;i<n;++i)for(var a,u=t[i],l=u.length,c=0;c<l;++c)(a=u[c])&&(r.push(e.call(a,a.__data__,c,u)),o.push(a));return new Bo(r,o)},selectChild:function(e){return this.select(null==e?Fr:function(e){return function(){return Ur.call(this.children,e)}}("function"==typeof e?e:Br(e)))},selectChildren:function(e){return this.selectAll(null==e?Vr:function(e){return function(){return Hr.call(this.children,e)}}("function"==typeof e?e:Br(e)))},filter:function(e){"function"!=typeof e&&(e=function(e){return function(){return this.matches(e)}}(e));for(var t=this._groups,n=t.length,r=new Array(n),o=0;o<n;++o)for(var i,a=t[o],u=a.length,l=r[o]=[],c=0;c<u;++c)(i=a[c])&&e.call(i,i.__data__,c,a)&&l.push(i);return new Bo(r,this._parents)},data:function(e,t){if(!arguments.length)return Array.from(this,qr);var n=t?Zr:$r,r=this._parents,o=this._groups;"function"!=typeof e&&(e=Yr(e));for(var i=o.length,a=new Array(i),u=new Array(i),l=new Array(i),c=0;c<i;++c){var s=r[c],f=o[c],d=f.length,p=zr(e.call(s,s&&s.__data__,c,r)),h=p.length,v=u[c]=new Array(h),y=a[c]=new Array(h),g=l[c]=new Array(d);n(s,f,v,y,g,p,t);for(var m,b,w=0,_=0;w<h;++w)if(m=v[w]){for(w>=_&&(_=w+1);!(b=y[_])&&++_<h;);m._next=b||null}}return(a=new Bo(a,r))._enter=u,a._exit=l,a},enter:function(){return new Bo(this._enter||this._groups.map(Xr),this._parents)},exit:function(){return new Bo(this._exit||this._groups.map(Xr),this._parents)},join:function(e,t,n){var r=this.enter(),o=this,i=this.exit();return r="function"==typeof e?e(r):r.append(e+""),null!=t&&(o=t(o)),null==n?i.remove():n(i),r&&o?r.merge(o).order():o},merge:function(e){if(!(e instanceof Bo))throw new Error("invalid merge");for(var t=this._groups,n=e._groups,r=t.length,o=n.length,i=Math.min(r,o),a=new Array(r),u=0;u<i;++u)for(var l,c=t[u],s=n[u],f=c.length,d=a[u]=new Array(f),p=0;p<f;++p)(l=c[p]||s[p])&&(d[p]=l);for(;u<r;++u)a[u]=t[u];return new Bo(a,this._parents)},selection:function(){return this},order:function(){for(var e=this._groups,t=-1,n=e.length;++t<n;)for(var r,o=e[t],i=o.length-1,a=o[i];--i>=0;)(r=o[i])&&(a&&4^r.compareDocumentPosition(a)&&a.parentNode.insertBefore(r,a),a=r);return this},sort:function(e){function t(t,n){return t&&n?e(t.__data__,n.__data__):!t-!n}e||(e=Gr);for(var n=this._groups,r=n.length,o=new Array(r),i=0;i<r;++i){for(var a,u=n[i],l=u.length,c=o[i]=new Array(l),s=0;s<l;++s)(a=u[s])&&(c[s]=a);c.sort(t)}return new Bo(o,this._parents).order()},call:function(){var e=arguments[0];return arguments[0]=this,e.apply(null,arguments),this},nodes:function(){return Array.from(this)},node:function(){for(var e=this._groups,t=0,n=e.length;t<n;++t)for(var r=e[t],o=0,i=r.length;o<i;++o){var a=r[o];if(a)return a}return null},size:function(){let e=0;for(const t of this)++e;return e},empty:function(){return!this.node()},each:function(e){for(var t=this._groups,n=0,r=t.length;n<r;++n)for(var o,i=t[n],a=0,u=i.length;a<u;++a)(o=i[a])&&e.call(o,o.__data__,a,i);return this},attr:function(e,t){var n=Tr(e);if(arguments.length<2){var r=this.node();return n.local?r.getAttributeNS(n.space,n.local):r.getAttribute(n)}return this.each((null==t?n.local?Qr:Kr:"function"==typeof t?n.local?no:to:n.local?eo:Jr)(n,t))},style:function(e,t,n){return arguments.length>1?this.each((null==t?oo:"function"==typeof t?ao:io)(e,t,null==n?"":n)):uo(this.node(),e)},property:function(e,t){return arguments.length>1?this.each((null==t?lo:"function"==typeof t?so:co)(e,t)):this.node()[e]},classed:function(e,t){var n=fo(e+"");if(arguments.length<2){for(var r=po(this.node()),o=-1,i=n.length;++o<i;)if(!r.contains(n[o]))return!1;return!0}return this.each(("function"==typeof t?bo:t?go:mo)(n,t))},text:function(e){return arguments.length?this.each(null==e?wo:("function"==typeof e?So:_o)(e)):this.node().textContent},html:function(e){return arguments.length?this.each(null==e?xo:("function"==typeof e?ko:Eo)(e)):this.node().innerHTML},raise:function(){return this.each(Oo)},lower:function(){return this.each(Po)},append:function(e){var t="function"==typeof e?e:Rr(e);return this.select((function(){return this.appendChild(t.apply(this,arguments))}))},insert:function(e,t){var n="function"==typeof e?e:Rr(e),r=null==t?Co:"function"==typeof t?t:Lr(t);return this.select((function(){return this.insertBefore(n.apply(this,arguments),r.apply(this,arguments)||null)}))},remove:function(){return this.each(Mo)},clone:function(e){return this.select(e?To:No)},datum:function(e){return arguments.length?this.property("__data__",e):this.node().__data__},on:function(e,t,n){var r,o,i=jo(e+""),a=i.length;if(!(arguments.length<2)){for(u=t?Ro:Do,r=0;r<a;++r)this.each(u(i[r],t,n));return this}var u=this.node().__on;if(u)for(var l,c=0,s=u.length;c<s;++c)for(r=0,l=u[c];r<a;++r)if((o=i[r]).type===l.type&&o.name===l.name)return l.value},dispatch:function(e,t){return this.each(("function"==typeof t?zo:Lo)(e,t))},[Symbol.iterator]:function*(){for(var e=this._groups,t=0,n=e.length;t<n;++t)for(var r,o=e[t],i=0,a=o.length;i<a;++i)(r=o[i])&&(yield r)}};var Ho="http://www.w3.org/1999/xhtml",Vo={svg:"http://www.w3.org/2000/svg",xhtml:Ho,xlink:"http://www.w3.org/1999/xlink",xml:"http://www.w3.org/XML/1998/namespace",xmlns:"http://www.w3.org/2000/xmlns/"};function Xo(e){var t=e+="",n=t.indexOf(":");return n>=0&&"xmlns"!==(t=e.slice(0,n))&&(e=e.slice(n+1)),Vo.hasOwnProperty(t)?{space:Vo[t],local:e}:e}function Wo(e){return function(){var t=this.ownerDocument,n=this.namespaceURI;return n===Ho&&t.documentElement.namespaceURI===Ho?t.createElement(e):t.createElementNS(n,e)}}function Yo(e){return function(){return this.ownerDocument.createElementNS(e.space,e.local)}}function $o(e){var t=Xo(e);return(t.local?Yo:Wo)(t)}function Zo(){}function qo(e){return null==e?Zo:function(){return this.querySelector(e)}}function Go(e){return null==e?[]:Array.isArray(e)?e:Array.from(e)}function Ko(){return[]}function Qo(e){return null==e?Ko:function(){return this.querySelectorAll(e)}}function Jo(e){return function(){return this.matches(e)}}function ei(e){return function(t){return t.matches(e)}}var ti=Array.prototype.find;function ni(){return this.firstElementChild}var ri=Array.prototype.filter;function oi(){return Array.from(this.children)}function ii(e){return new Array(e.length)}function ai(e,t){this.ownerDocument=e.ownerDocument,this.namespaceURI=e.namespaceURI,this._next=null,this._parent=e,this.__data__=t}function ui(e){return function(){return e}}function li(e,t,n,r,o,i){for(var a,u=0,l=t.length,c=i.length;u<c;++u)(a=t[u])?(a.__data__=i[u],r[u]=a):n[u]=new ai(e,i[u]);for(;u<l;++u)(a=t[u])&&(o[u]=a)}function ci(e,t,n,r,o,i,a){var u,l,c,s=new Map,f=t.length,d=i.length,p=new Array(f);for(u=0;u<f;++u)(l=t[u])&&(p[u]=c=a.call(l,l.__data__,u,t)+"",s.has(c)?o[u]=l:s.set(c,l));for(u=0;u<d;++u)c=a.call(e,i[u],u,i)+"",(l=s.get(c))?(r[u]=l,l.__data__=i[u],s.delete(c)):n[u]=new ai(e,i[u]);for(u=0;u<f;++u)(l=t[u])&&s.get(p[u])===l&&(o[u]=l)}function si(e){return e.__data__}function fi(e){return"object"==typeof e&&"length"in e?e:Array.from(e)}function di(e,t){return e<t?-1:e>t?1:e>=t?0:NaN}function pi(e){return function(){this.removeAttribute(e)}}function hi(e){return function(){this.removeAttributeNS(e.space,e.local)}}function vi(e,t){return function(){this.setAttribute(e,t)}}function yi(e,t){return function(){this.setAttributeNS(e.space,e.local,t)}}function gi(e,t){return function(){var n=t.apply(this,arguments);null==n?this.removeAttribute(e):this.setAttribute(e,n)}}function mi(e,t){return function(){var n=t.apply(this,arguments);null==n?this.removeAttributeNS(e.space,e.local):this.setAttributeNS(e.space,e.local,n)}}function bi(e){return e.ownerDocument&&e.ownerDocument.defaultView||e.document&&e||e.defaultView}function wi(e){return function(){this.style.removeProperty(e)}}function _i(e,t,n){return function(){this.style.setProperty(e,t,n)}}function Si(e,t,n){return function(){var r=t.apply(this,arguments);null==r?this.style.removeProperty(e):this.style.setProperty(e,r,n)}}function xi(e,t){return e.style.getPropertyValue(t)||bi(e).getComputedStyle(e,null).getPropertyValue(t)}function Ei(e){return function(){delete this[e]}}function ki(e,t){return function(){this[e]=t}}function Oi(e,t){return function(){var n=t.apply(this,arguments);null==n?delete this[e]:this[e]=n}}function Pi(e){return e.trim().split(/^|\s+/)}function Ci(e){return e.classList||new Mi(e)}function Mi(e){this._node=e,this._names=Pi(e.getAttribute("class")||"")}function Ni(e,t){for(var n=Ci(e),r=-1,o=t.length;++r<o;)n.add(t[r])}function Ti(e,t){for(var n=Ci(e),r=-1,o=t.length;++r<o;)n.remove(t[r])}function ji(e){return function(){Ni(this,e)}}function Di(e){return function(){Ti(this,e)}}function Ri(e,t){return function(){(t.apply(this,arguments)?Ni:Ti)(this,e)}}function Ai(){this.textContent=""}function Li(e){return function(){this.textContent=e}}function zi(e){return function(){var t=e.apply(this,arguments);this.textContent=null==t?"":t}}function Ii(){this.innerHTML=""}function Bi(e){return function(){this.innerHTML=e}}function Ui(e){return function(){var t=e.apply(this,arguments);this.innerHTML=null==t?"":t}}function Fi(){this.nextSibling&&this.parentNode.appendChild(this)}function Hi(){this.previousSibling&&this.parentNode.insertBefore(this,this.parentNode.firstChild)}function Vi(){return null}function Xi(){var e=this.parentNode;e&&e.removeChild(this)}function Wi(){var e=this.cloneNode(!1),t=this.parentNode;return t?t.insertBefore(e,this.nextSibling):e}function Yi(){var e=this.cloneNode(!0),t=this.parentNode;return t?t.insertBefore(e,this.nextSibling):e}function $i(e){return e.trim().split(/^|\s+/).map((function(e){var t="",n=e.indexOf(".");return n>=0&&(t=e.slice(n+1),e=e.slice(0,n)),{type:e,name:t}}))}function Zi(e){return function(){var t=this.__on;if(t){for(var n,r=0,o=-1,i=t.length;r<i;++r)n=t[r],e.type&&n.type!==e.type||n.name!==e.name?t[++o]=n:this.removeEventListener(n.type,n.listener,n.options);++o?t.length=o:delete this.__on}}}function qi(e,t,n){return function(){var r,o=this.__on,i=function(e){return function(t){e.call(this,t,this.__data__)}}(t);if(o)for(var a=0,u=o.length;a<u;++a)if((r=o[a]).type===e.type&&r.name===e.name)return this.removeEventListener(r.type,r.listener,r.options),this.addEventListener(r.type,r.listener=i,r.options=n),void(r.value=t);this.addEventListener(e.type,i,n),r={type:e.type,name:e.name,value:t,listener:i,options:n},o?o.push(r):this.__on=[r]}}function Gi(e,t,n){var r=bi(e),o=r.CustomEvent;"function"==typeof o?o=new o(t,n):(o=r.document.createEvent("Event"),n?(o.initEvent(t,n.bubbles,n.cancelable),o.detail=n.detail):o.initEvent(t,!1,!1)),e.dispatchEvent(o)}function Ki(e,t){return function(){return Gi(this,e,t)}}function Qi(e,t){return function(){return Gi(this,e,t.apply(this,arguments))}}ai.prototype={constructor:ai,appendChild:function(e){return this._parent.insertBefore(e,this._next)},insertBefore:function(e,t){return this._parent.insertBefore(e,t)},querySelector:function(e){return this._parent.querySelector(e)},querySelectorAll:function(e){return this._parent.querySelectorAll(e)}},Mi.prototype={add:function(e){this._names.indexOf(e)<0&&(this._names.push(e),this._node.setAttribute("class",this._names.join(" ")))},remove:function(e){var t=this._names.indexOf(e);t>=0&&(this._names.splice(t,1),this._node.setAttribute("class",this._names.join(" ")))},contains:function(e){return this._names.indexOf(e)>=0}};var Ji=[null];function ea(e,t){this._groups=e,this._parents=t}function ta(){return new ea([[document.documentElement]],Ji)}ea.prototype=ta.prototype={constructor:ea,select:function(e){"function"!=typeof e&&(e=qo(e));for(var t=this._groups,n=t.length,r=new Array(n),o=0;o<n;++o)for(var i,a,u=t[o],l=u.length,c=r[o]=new Array(l),s=0;s<l;++s)(i=u[s])&&(a=e.call(i,i.__data__,s,u))&&("__data__"in i&&(a.__data__=i.__data__),c[s]=a);return new ea(r,this._parents)},selectAll:function(e){e="function"==typeof e?function(e){return function(){return Go(e.apply(this,arguments))}}(e):Qo(e);for(var t=this._groups,n=t.length,r=[],o=[],i=0;i<n;++i)for(var a,u=t[i],l=u.length,c=0;c<l;++c)(a=u[c])&&(r.push(e.call(a,a.__data__,c,u)),o.push(a));return new ea(r,o)},selectChild:function(e){return this.select(null==e?ni:function(e){return function(){return ti.call(this.children,e)}}("function"==typeof e?e:ei(e)))},selectChildren:function(e){return this.selectAll(null==e?oi:function(e){return function(){return ri.call(this.children,e)}}("function"==typeof e?e:ei(e)))},filter:function(e){"function"!=typeof e&&(e=Jo(e));for(var t=this._groups,n=t.length,r=new Array(n),o=0;o<n;++o)for(var i,a=t[o],u=a.length,l=r[o]=[],c=0;c<u;++c)(i=a[c])&&e.call(i,i.__data__,c,a)&&l.push(i);return new ea(r,this._parents)},data:function(e,t){if(!arguments.length)return Array.from(this,si);var n=t?ci:li,r=this._parents,o=this._groups;"function"!=typeof e&&(e=ui(e));for(var i=o.length,a=new Array(i),u=new Array(i),l=new Array(i),c=0;c<i;++c){var s=r[c],f=o[c],d=f.length,p=fi(e.call(s,s&&s.__data__,c,r)),h=p.length,v=u[c]=new Array(h),y=a[c]=new Array(h),g=l[c]=new Array(d);n(s,f,v,y,g,p,t);for(var m,b,w=0,_=0;w<h;++w)if(m=v[w]){for(w>=_&&(_=w+1);!(b=y[_])&&++_<h;);m._next=b||null}}return(a=new ea(a,r))._enter=u,a._exit=l,a},enter:function(){return new ea(this._enter||this._groups.map(ii),this._parents)},exit:function(){return new ea(this._exit||this._groups.map(ii),this._parents)},join:function(e,t,n){var r=this.enter(),o=this,i=this.exit();return"function"==typeof e?(r=e(r))&&(r=r.selection()):r=r.append(e+""),null!=t&&(o=t(o))&&(o=o.selection()),null==n?i.remove():n(i),r&&o?r.merge(o).order():o},merge:function(e){for(var t=e.selection?e.selection():e,n=this._groups,r=t._groups,o=n.length,i=r.length,a=Math.min(o,i),u=new Array(o),l=0;l<a;++l)for(var c,s=n[l],f=r[l],d=s.length,p=u[l]=new Array(d),h=0;h<d;++h)(c=s[h]||f[h])&&(p[h]=c);for(;l<o;++l)u[l]=n[l];return new ea(u,this._parents)},selection:function(){return this},order:function(){for(var e=this._groups,t=-1,n=e.length;++t<n;)for(var r,o=e[t],i=o.length-1,a=o[i];--i>=0;)(r=o[i])&&(a&&4^r.compareDocumentPosition(a)&&a.parentNode.insertBefore(r,a),a=r);return this},sort:function(e){function t(t,n){return t&&n?e(t.__data__,n.__data__):!t-!n}e||(e=di);for(var n=this._groups,r=n.length,o=new Array(r),i=0;i<r;++i){for(var a,u=n[i],l=u.length,c=o[i]=new Array(l),s=0;s<l;++s)(a=u[s])&&(c[s]=a);c.sort(t)}return new ea(o,this._parents).order()},call:function(){var e=arguments[0];return arguments[0]=this,e.apply(null,arguments),this},nodes:function(){return Array.from(this)},node:function(){for(var e=this._groups,t=0,n=e.length;t<n;++t)for(var r=e[t],o=0,i=r.length;o<i;++o){var a=r[o];if(a)return a}return null},size:function(){let e=0;for(const t of this)++e;return e},empty:function(){return!this.node()},each:function(e){for(var t=this._groups,n=0,r=t.length;n<r;++n)for(var o,i=t[n],a=0,u=i.length;a<u;++a)(o=i[a])&&e.call(o,o.__data__,a,i);return this},attr:function(e,t){var n=Xo(e);if(arguments.length<2){var r=this.node();return n.local?r.getAttributeNS(n.space,n.local):r.getAttribute(n)}return this.each((null==t?n.local?hi:pi:"function"==typeof t?n.local?mi:gi:n.local?yi:vi)(n,t))},style:function(e,t,n){return arguments.length>1?this.each((null==t?wi:"function"==typeof t?Si:_i)(e,t,null==n?"":n)):xi(this.node(),e)},property:function(e,t){return arguments.length>1?this.each((null==t?Ei:"function"==typeof t?Oi:ki)(e,t)):this.node()[e]},classed:function(e,t){var n=Pi(e+"");if(arguments.length<2){for(var r=Ci(this.node()),o=-1,i=n.length;++o<i;)if(!r.contains(n[o]))return!1;return!0}return this.each(("function"==typeof t?Ri:t?ji:Di)(n,t))},text:function(e){return arguments.length?this.each(null==e?Ai:("function"==typeof e?zi:Li)(e)):this.node().textContent},html:function(e){return arguments.length?this.each(null==e?Ii:("function"==typeof e?Ui:Bi)(e)):this.node().innerHTML},raise:function(){return this.each(Fi)},lower:function(){return this.each(Hi)},append:function(e){var t="function"==typeof e?e:$o(e);return this.select((function(){return this.appendChild(t.apply(this,arguments))}))},insert:function(e,t){var n="function"==typeof e?e:$o(e),r=null==t?Vi:"function"==typeof t?t:qo(t);return this.select((function(){return this.insertBefore(n.apply(this,arguments),r.apply(this,arguments)||null)}))},remove:function(){return this.each(Xi)},clone:function(e){return this.select(e?Yi:Wi)},datum:function(e){return arguments.length?this.property("__data__",e):this.node().__data__},on:function(e,t,n){var r,o,i=$i(e+""),a=i.length;if(!(arguments.length<2)){for(u=t?qi:Zi,r=0;r<a;++r)this.each(u(i[r],t,n));return this}var u=this.node().__on;if(u)for(var l,c=0,s=u.length;c<s;++c)for(r=0,l=u[c];r<a;++r)if((o=i[r]).type===l.type&&o.name===l.name)return l.value},dispatch:function(e,t){return this.each(("function"==typeof t?Qi:Ki)(e,t))},[Symbol.iterator]:function*(){for(var e=this._groups,t=0,n=e.length;t<n;++t)for(var r,o=e[t],i=0,a=o.length;i<a;++i)(r=o[i])&&(yield r)}};var na,ra,oa=0,ia=0,aa=0,ua=0,la=0,ca=0,sa="object"==typeof performance&&performance.now?performance:Date,fa="object"==typeof window&&window.requestAnimationFrame?window.requestAnimationFrame.bind(window):function(e){setTimeout(e,17)};function da(){return la||(fa(pa),la=sa.now()+ca)}function pa(){la=0}function ha(){this._call=this._time=this._next=null}function va(e,t,n){var r=new ha;return r.restart(e,t,n),r}function ya(){la=(ua=sa.now())+ca,oa=ia=0;try{!function(){da(),++oa;for(var e,t=na;t;)(e=la-t._time)>=0&&t._call.call(null,e),t=t._next;--oa}()}finally{oa=0,function(){for(var e,t,n=na,r=1/0;n;)n._call?(r>n._time&&(r=n._time),e=n,n=n._next):(t=n._next,n._next=null,n=e?e._next=t:na=t);ra=e,ma(r)}(),la=0}}function ga(){var e=sa.now(),t=e-ua;t>1e3&&(ca-=t,ua=e)}function ma(e){oa||(ia&&(ia=clearTimeout(ia)),e-la>24?(e<1/0&&(ia=setTimeout(ya,e-sa.now()-ca)),aa&&(aa=clearInterval(aa))):(aa||(ua=sa.now(),aa=setInterval(ga,1e3)),oa=1,fa(ya)))}function ba(e,t,n){var r=new ha;return t=null==t?0:+t,r.restart((n=>{r.stop(),e(n+t)}),t,n),r}ha.prototype=va.prototype={constructor:ha,restart:function(e,t,n){if("function"!=typeof e)throw new TypeError("callback is not a function");n=(null==n?da():+n)+(null==t?0:+t),this._next||ra===this||(ra?ra._next=this:na=this,ra=this),this._call=e,this._time=n,ma()},stop:function(){this._call&&(this._call=null,this._time=1/0,ma())}};var wa=yt("start","end","cancel","interrupt"),_a=[];function Sa(e,t,n,r,o,i){var a=e.__transition;if(a){if(n in a)return}else e.__transition={};!function(e,t,n){var r,o=e.__transition;function i(l){var c,s,f,d;if(1!==n.state)return u();for(c in o)if((d=o[c]).name===n.name){if(3===d.state)return ba(i);4===d.state?(d.state=6,d.timer.stop(),d.on.call("interrupt",e,e.__data__,d.index,d.group),delete o[c]):+c<t&&(d.state=6,d.timer.stop(),d.on.call("cancel",e,e.__data__,d.index,d.group),delete o[c])}if(ba((function(){3===n.state&&(n.state=4,n.timer.restart(a,n.delay,n.time),a(l))})),n.state=2,n.on.call("start",e,e.__data__,n.index,n.group),2===n.state){for(n.state=3,r=new Array(f=n.tween.length),c=0,s=-1;c<f;++c)(d=n.tween[c].value.call(e,e.__data__,n.index,n.group))&&(r[++s]=d);r.length=s+1}}function a(t){for(var o=t<n.duration?n.ease.call(null,t/n.duration):(n.timer.restart(u),n.state=5,1),i=-1,a=r.length;++i<a;)r[i].call(e,o);5===n.state&&(n.on.call("end",e,e.__data__,n.index,n.group),u())}function u(){for(var r in n.state=6,n.timer.stop(),delete o[t],o)return;delete e.__transition}o[t]=n,n.timer=va((function(e){n.state=1,n.timer.restart(i,n.delay,n.time),n.delay<=e&&i(e-n.delay)}),0,n.time)}(e,n,{name:t,index:r,group:o,on:wa,tween:_a,time:i.time,delay:i.delay,duration:i.duration,ease:i.ease,timer:null,state:0})}function xa(e,t){var n=ka(e,t);if(n.state>0)throw new Error("too late; already scheduled");return n}function Ea(e,t){var n=ka(e,t);if(n.state>3)throw new Error("too late; already running");return n}function ka(e,t){var n=e.__transition;if(!n||!(n=n[t]))throw new Error("transition not found");return n}function Oa(e,t){var n,r,o,i=e.__transition,a=!0;if(i){for(o in t=null==t?null:t+"",i)(n=i[o]).name===t?(r=n.state>2&&n.state<5,n.state=6,n.timer.stop(),n.on.call(r?"interrupt":"cancel",e,e.__data__,n.index,n.group),delete i[o]):a=!1;a&&delete e.__transition}}function Pa(e,t){var n,r;return function(){var o=Ea(this,e),i=o.tween;if(i!==n)for(var a=0,u=(r=n=i).length;a<u;++a)if(r[a].name===t){(r=r.slice()).splice(a,1);break}o.tween=r}}function Ca(e,t,n){var r,o;if("function"!=typeof n)throw new Error;return function(){var i=Ea(this,e),a=i.tween;if(a!==r){o=(r=a).slice();for(var u={name:t,value:n},l=0,c=o.length;l<c;++l)if(o[l].name===t){o[l]=u;break}l===c&&o.push(u)}i.tween=o}}function Ma(e,t,n){var r=e._id;return e.each((function(){var e=Ea(this,r);(e.value||(e.value={}))[t]=n.apply(this,arguments)})),function(e){return ka(e,r).value[t]}}function Na(e,t){var n;return("number"==typeof t?yr:t instanceof er?vr:(n=er(t))?(t=n,vr):br)(e,t)}function Ta(e){return function(){this.removeAttribute(e)}}function ja(e){return function(){this.removeAttributeNS(e.space,e.local)}}function Da(e,t,n){var r,o,i=n+"";return function(){var a=this.getAttribute(e);return a===i?null:a===r?o:o=t(r=a,n)}}function Ra(e,t,n){var r,o,i=n+"";return function(){var a=this.getAttributeNS(e.space,e.local);return a===i?null:a===r?o:o=t(r=a,n)}}function Aa(e,t,n){var r,o,i;return function(){var a,u,l=n(this);if(null!=l)return(a=this.getAttribute(e))===(u=l+"")?null:a===r&&u===o?i:(o=u,i=t(r=a,l));this.removeAttribute(e)}}function La(e,t,n){var r,o,i;return function(){var a,u,l=n(this);if(null!=l)return(a=this.getAttributeNS(e.space,e.local))===(u=l+"")?null:a===r&&u===o?i:(o=u,i=t(r=a,l));this.removeAttributeNS(e.space,e.local)}}function za(e,t){return function(n){this.setAttribute(e,t.call(this,n))}}function Ia(e,t){return function(n){this.setAttributeNS(e.space,e.local,t.call(this,n))}}function Ba(e,t){var n,r;function o(){var o=t.apply(this,arguments);return o!==r&&(n=(r=o)&&Ia(e,o)),n}return o._value=t,o}function Ua(e,t){var n,r;function o(){var o=t.apply(this,arguments);return o!==r&&(n=(r=o)&&za(e,o)),n}return o._value=t,o}function Fa(e,t){return function(){xa(this,e).delay=+t.apply(this,arguments)}}function Ha(e,t){return t=+t,function(){xa(this,e).delay=t}}function Va(e,t){return function(){Ea(this,e).duration=+t.apply(this,arguments)}}function Xa(e,t){return t=+t,function(){Ea(this,e).duration=t}}function Wa(e,t){if("function"!=typeof t)throw new Error;return function(){Ea(this,e).ease=t}}function Ya(e,t,n){var r,o,i=function(e){return(e+"").trim().split(/^|\s+/).every((function(e){var t=e.indexOf(".");return t>=0&&(e=e.slice(0,t)),!e||"start"===e}))}(t)?xa:Ea;return function(){var a=i(this,e),u=a.on;u!==r&&(o=(r=u).copy()).on(t,n),a.on=o}}var $a=ta.prototype.constructor;function Za(e){return function(){this.style.removeProperty(e)}}function qa(e,t,n){return function(r){this.style.setProperty(e,t.call(this,r),n)}}function Ga(e,t,n){var r,o;function i(){var i=t.apply(this,arguments);return i!==o&&(r=(o=i)&&qa(e,i,n)),r}return i._value=t,i}function Ka(e){return function(t){this.textContent=e.call(this,t)}}function Qa(e){var t,n;function r(){var r=e.apply(this,arguments);return r!==n&&(t=(n=r)&&Ka(r)),t}return r._value=e,r}var Ja=0;function eu(e,t,n,r){this._groups=e,this._parents=t,this._name=n,this._id=r}function tu(){return++Ja}var nu=ta.prototype;eu.prototype={constructor:eu,select:function(e){var t=this._name,n=this._id;"function"!=typeof e&&(e=qo(e));for(var r=this._groups,o=r.length,i=new Array(o),a=0;a<o;++a)for(var u,l,c=r[a],s=c.length,f=i[a]=new Array(s),d=0;d<s;++d)(u=c[d])&&(l=e.call(u,u.__data__,d,c))&&("__data__"in u&&(l.__data__=u.__data__),f[d]=l,Sa(f[d],t,n,d,f,ka(u,n)));return new eu(i,this._parents,t,n)},selectAll:function(e){var t=this._name,n=this._id;"function"!=typeof e&&(e=Qo(e));for(var r=this._groups,o=r.length,i=[],a=[],u=0;u<o;++u)for(var l,c=r[u],s=c.length,f=0;f<s;++f)if(l=c[f]){for(var d,p=e.call(l,l.__data__,f,c),h=ka(l,n),v=0,y=p.length;v<y;++v)(d=p[v])&&Sa(d,t,n,v,p,h);i.push(p),a.push(l)}return new eu(i,a,t,n)},filter:function(e){"function"!=typeof e&&(e=Jo(e));for(var t=this._groups,n=t.length,r=new Array(n),o=0;o<n;++o)for(var i,a=t[o],u=a.length,l=r[o]=[],c=0;c<u;++c)(i=a[c])&&e.call(i,i.__data__,c,a)&&l.push(i);return new eu(r,this._parents,this._name,this._id)},merge:function(e){if(e._id!==this._id)throw new Error;for(var t=this._groups,n=e._groups,r=t.length,o=n.length,i=Math.min(r,o),a=new Array(r),u=0;u<i;++u)for(var l,c=t[u],s=n[u],f=c.length,d=a[u]=new Array(f),p=0;p<f;++p)(l=c[p]||s[p])&&(d[p]=l);for(;u<r;++u)a[u]=t[u];return new eu(a,this._parents,this._name,this._id)},selection:function(){return new $a(this._groups,this._parents)},transition:function(){for(var e=this._name,t=this._id,n=tu(),r=this._groups,o=r.length,i=0;i<o;++i)for(var a,u=r[i],l=u.length,c=0;c<l;++c)if(a=u[c]){var s=ka(a,t);Sa(a,e,n,c,u,{time:s.time+s.delay+s.duration,delay:0,duration:s.duration,ease:s.ease})}return new eu(r,this._parents,e,n)},call:nu.call,nodes:nu.nodes,node:nu.node,size:nu.size,empty:nu.empty,each:nu.each,on:function(e,t){var n=this._id;return arguments.length<2?ka(this.node(),n).on.on(e):this.each(Ya(n,e,t))},attr:function(e,t){var n=Xo(e),r="transform"===n?Or:Na;return this.attrTween(e,"function"==typeof t?(n.local?La:Aa)(n,r,Ma(this,"attr."+e,t)):null==t?(n.local?ja:Ta)(n):(n.local?Ra:Da)(n,r,t))},attrTween:function(e,t){var n="attr."+e;if(arguments.length<2)return(n=this.tween(n))&&n._value;if(null==t)return this.tween(n,null);if("function"!=typeof t)throw new Error;var r=Xo(e);return this.tween(n,(r.local?Ba:Ua)(r,t))},style:function(e,t,n){var r="transform"==(e+="")?kr:Na;return null==t?this.styleTween(e,function(e,t){var n,r,o;return function(){var i=xi(this,e),a=(this.style.removeProperty(e),xi(this,e));return i===a?null:i===n&&a===r?o:o=t(n=i,r=a)}}(e,r)).on("end.style."+e,Za(e)):"function"==typeof t?this.styleTween(e,function(e,t,n){var r,o,i;return function(){var a=xi(this,e),u=n(this),l=u+"";return null==u&&(this.style.removeProperty(e),l=u=xi(this,e)),a===l?null:a===r&&l===o?i:(o=l,i=t(r=a,u))}}(e,r,Ma(this,"style."+e,t))).each(function(e,t){var n,r,o,i,a="style."+t,u="end."+a;return function(){var l=Ea(this,e),c=l.on,s=null==l.value[a]?i||(i=Za(t)):void 0;c===n&&o===s||(r=(n=c).copy()).on(u,o=s),l.on=r}}(this._id,e)):this.styleTween(e,function(e,t,n){var r,o,i=n+"";return function(){var a=xi(this,e);return a===i?null:a===r?o:o=t(r=a,n)}}(e,r,t),n).on("end.style."+e,null)},styleTween:function(e,t,n){var r="style."+(e+="");if(arguments.length<2)return(r=this.tween(r))&&r._value;if(null==t)return this.tween(r,null);if("function"!=typeof t)throw new Error;return this.tween(r,Ga(e,t,null==n?"":n))},text:function(e){return this.tween("text","function"==typeof e?function(e){return function(){var t=e(this);this.textContent=null==t?"":t}}(Ma(this,"text",e)):function(e){return function(){this.textContent=e}}(null==e?"":e+""))},textTween:function(e){var t="text";if(arguments.length<1)return(t=this.tween(t))&&t._value;if(null==e)return this.tween(t,null);if("function"!=typeof e)throw new Error;return this.tween(t,Qa(e))},remove:function(){return this.on("end.remove",function(e){return function(){var t=this.parentNode;for(var n in this.__transition)if(+n!==e)return;t&&t.removeChild(this)}}(this._id))},tween:function(e,t){var n=this._id;if(e+="",arguments.length<2){for(var r,o=ka(this.node(),n).tween,i=0,a=o.length;i<a;++i)if((r=o[i]).name===e)return r.value;return null}return this.each((null==t?Pa:Ca)(n,e,t))},delay:function(e){var t=this._id;return arguments.length?this.each(("function"==typeof e?Fa:Ha)(t,e)):ka(this.node(),t).delay},duration:function(e){var t=this._id;return arguments.length?this.each(("function"==typeof e?Va:Xa)(t,e)):ka(this.node(),t).duration},ease:function(e){var t=this._id;return arguments.length?this.each(Wa(t,e)):ka(this.node(),t).ease},easeVarying:function(e){if("function"!=typeof e)throw new Error;return this.each(function(e,t){return function(){var n=t.apply(this,arguments);if("function"!=typeof n)throw new Error;Ea(this,e).ease=n}}(this._id,e))},end:function(){var e,t,n=this,r=n._id,o=n.size();return new Promise((function(i,a){var u={value:a},l={value:function(){0==--o&&i()}};n.each((function(){var n=Ea(this,r),o=n.on;o!==e&&((t=(e=o).copy())._.cancel.push(u),t._.interrupt.push(u),t._.end.push(l)),n.on=t})),0===o&&i()}))},[Symbol.iterator]:nu[Symbol.iterator]};var ru={time:null,delay:0,duration:250,ease:function(e){return((e*=2)<=1?e*e*e:(e-=2)*e*e+2)/2}};function ou(e,t){for(var n;!(n=e.__transition)||!(n=n[t]);)if(!(e=e.parentNode))throw new Error(`transition ${t} not found`);return n}ta.prototype.interrupt=function(e){return this.each((function(){Oa(this,e)}))},ta.prototype.transition=function(e){var t,n;e instanceof eu?(t=e._id,e=e._name):(t=tu(),(n=ru).time=da(),e=null==e?null:e+"");for(var r=this._groups,o=r.length,i=0;i<o;++i)for(var a,u=r[i],l=u.length,c=0;c<l;++c)(a=u[c])&&Sa(a,e,t,c,u,n||ou(a,t));return new eu(r,this._parents,e,t)};var iu=e=>()=>e;function au(e,{sourceEvent:t,target:n,transform:r,dispatch:o}){Object.defineProperties(this,{type:{value:e,enumerable:!0,configurable:!0},sourceEvent:{value:t,enumerable:!0,configurable:!0},target:{value:n,enumerable:!0,configurable:!0},transform:{value:r,enumerable:!0,configurable:!0},_:{value:o}})}function uu(e,t,n){this.k=e,this.x=t,this.y=n}uu.prototype={constructor:uu,scale:function(e){return 1===e?this:new uu(this.k*e,this.x,this.y)},translate:function(e,t){return 0===e&0===t?this:new uu(this.k,this.x+this.k*e,this.y+this.k*t)},apply:function(e){return[e[0]*this.k+this.x,e[1]*this.k+this.y]},applyX:function(e){return e*this.k+this.x},applyY:function(e){return e*this.k+this.y},invert:function(e){return[(e[0]-this.x)/this.k,(e[1]-this.y)/this.k]},invertX:function(e){return(e-this.x)/this.k},invertY:function(e){return(e-this.y)/this.k},rescaleX:function(e){return e.copy().domain(e.range().map(this.invertX,this).map(e.invert,e))},rescaleY:function(e){return e.copy().domain(e.range().map(this.invertY,this).map(e.invert,e))},toString:function(){return"translate("+this.x+","+this.y+") scale("+this.k+")"}};var lu,cu,su,fu,du,pu,hu=new uu(1,0,0);function vu(e){e.stopImmediatePropagation()}function yu(e){e.preventDefault(),e.stopImmediatePropagation()}function gu(e){return!(e.ctrlKey&&"wheel"!==e.type||e.button)}function mu(){var e=this;return e instanceof SVGElement?(e=e.ownerSVGElement||e).hasAttribute("viewBox")?[[(e=e.viewBox.baseVal).x,e.y],[e.x+e.width,e.y+e.height]]:[[0,0],[e.width.baseVal.value,e.height.baseVal.value]]:[[0,0],[e.clientWidth,e.clientHeight]]}function bu(){return this.__zoom||hu}function wu(e){return-e.deltaY*(1===e.deltaMode?.05:e.deltaMode?1:.002)*(e.ctrlKey?10:1)}function _u(){return navigator.maxTouchPoints||"ontouchstart"in this}function Su(e,t,n){var r=e.invertX(t[0][0])-n[0][0],o=e.invertX(t[1][0])-n[1][0],i=e.invertY(t[0][1])-n[0][1],a=e.invertY(t[1][1])-n[1][1];return e.translate(o>r?(r+o)/2:Math.min(0,r)||Math.max(0,o),a>i?(i+a)/2:Math.min(0,i)||Math.max(0,a))}!function(e){e.Left="left",e.Top="top",e.Right="right",e.Bottom="bottom"}(lu||(lu={})),function(e){e.Arrow="arrow",e.ArrowClosed="arrowclosed"}(cu||(cu={})),function(e){e.Lines="lines",e.Dots="dots"}(su||(su={})),function(e){e.Strict="strict",e.Loose="loose"}(fu||(fu={})),function(e){e.Bezier="default",e.Straight="straight",e.Step="step",e.SmoothStep="smoothstep"}(du||(du={})),function(e){e.Free="free",e.Vertical="vertical",e.Horizontal="horizontal"}(pu||(pu={}));var xu=function(e,t){return e.x!==t.x||e.y!==t.y||e.zoom!==t.k},Eu=function(e){return{x:e.x,y:e.y,zoom:e.k}},ku=function(e){var t,n,o=e.onMove,i=e.onMoveStart,a=e.onMoveEnd,u=e.zoomOnScroll,l=void 0===u||u,c=e.zoomOnPinch,s=void 0===c||c,f=e.panOnScroll,d=void 0!==f&&f,p=e.panOnScrollSpeed,h=void 0===p?.5:p,v=e.panOnScrollMode,y=void 0===v?pu.Free:v,g=e.zoomOnDoubleClick,m=void 0===g||g,b=e.selectionKeyPressed,w=e.elementsSelectable,_=e.paneMoveable,S=void 0===_||_,x=e.defaultPosition,E=void 0===x?[0,0]:x,k=e.defaultZoom,O=void 0===k?1:k,P=e.translateExtent,C=e.zoomActivationKeyCode,M=e.children,N=(0,r.useRef)(null),T=(0,r.useRef)({x:0,y:0,zoom:0}),j=Fe(),D=Ue((function(e){return e.d3Zoom})),R=Ue((function(e){return e.d3Selection})),A=Ue((function(e){return e.d3ZoomHandler})),L=Be((function(e){return e.initD3Zoom})),z=Be((function(e){return e.updateTransform})),I=Ge(C);return t=N,n=Be((function(e){return e.updateSize})),(0,r.useEffect)((function(){var e,r=function(){if(t.current){var e=$e(t.current);0!==e.height&&0!==e.width||console.warn("The React Flow parent container needs a width and a height to render the graph."),n(e)}};return r(),window.onresize=r,t.current&&(e=new ResizeObserver((function(){return r()}))).observe(t.current),function(){window.onresize=null,e&&t.current&&e.unobserve(t.current)}}),[]),(0,r.useEffect)((function(){if(N.current){var e=j.getState(),t=void 0!==P?P:e.translateExtent,n=function(){var e,t,n,r=gu,o=mu,i=Su,a=wu,u=_u,l=[0,1/0],c=[[-1/0,-1/0],[1/0,1/0]],s=250,f=Cr,d=yt("start","zoom","end"),p=500,h=0,v=10;function y(e){e.property("__zoom",bu).on("wheel.zoom",x,{passive:!1}).on("mousedown.zoom",E).on("dblclick.zoom",k).filter(u).on("touchstart.zoom",O).on("touchmove.zoom",P).on("touchend.zoom touchcancel.zoom",C).style("-webkit-tap-highlight-color","rgba(0,0,0,0)")}function g(e,t){return(t=Math.max(l[0],Math.min(l[1],t)))===e.k?e:new uu(t,e.x,e.y)}function m(e,t,n){var r=t[0]-n[0]*e.k,o=t[1]-n[1]*e.k;return r===e.x&&o===e.y?e:new uu(e.k,r,o)}function b(e){return[(+e[0][0]+ +e[1][0])/2,(+e[0][1]+ +e[1][1])/2]}function w(e,t,n,r){e.on("start.zoom",(function(){_(this,arguments).event(r).start()})).on("interrupt.zoom end.zoom",(function(){_(this,arguments).event(r).end()})).tween("zoom",(function(){var e=this,i=arguments,a=_(e,i).event(r),u=o.apply(e,i),l=null==n?b(u):"function"==typeof n?n.apply(e,i):n,c=Math.max(u[1][0]-u[0][0],u[1][1]-u[0][1]),s=e.__zoom,d="function"==typeof t?t.apply(e,i):t,p=f(s.invert(l).concat(c/s.k),d.invert(l).concat(c/d.k));return function(e){if(1===e)e=d;else{var t=p(e),n=c/t[2];e=new uu(n,l[0]-t[0]*n,l[1]-t[1]*n)}a.zoom(null,e)}}))}function _(e,t,n){return!n&&e.__zooming||new S(e,t)}function S(e,t){this.that=e,this.args=t,this.active=0,this.sourceEvent=null,this.extent=o.apply(e,t),this.taps=0}function x(e,...t){if(r.apply(this,arguments)){var n=_(this,t).event(e),o=this.__zoom,u=Math.max(l[0],Math.min(l[1],o.k*Math.pow(2,a.apply(this,arguments)))),s=Fo(e);if(n.wheel)n.mouse[0][0]===s[0]&&n.mouse[0][1]===s[1]||(n.mouse[1]=o.invert(n.mouse[0]=s)),clearTimeout(n.wheel);else{if(o.k===u)return;n.mouse=[s,o.invert(s)],Oa(this),n.start()}yu(e),n.wheel=setTimeout(f,150),n.zoom("mouse",i(m(g(o,u),n.mouse[0],n.mouse[1]),n.extent,c))}function f(){n.wheel=null,n.end()}}function E(e,...t){if(!n&&r.apply(this,arguments)){var o=e.currentTarget,a=_(this,t,!0).event(e),u=Uo(e.view).on("mousemove.zoom",d,!0).on("mouseup.zoom",p,!0),l=Fo(e,o),s=e.clientX,f=e.clientY;Rn(e.view),vu(e),a.mouse=[l,this.__zoom.invert(l)],Oa(this),a.start()}function d(e){if(yu(e),!a.moved){var t=e.clientX-s,n=e.clientY-f;a.moved=t*t+n*n>h}a.event(e).zoom("mouse",i(m(a.that.__zoom,a.mouse[0]=Fo(e,o),a.mouse[1]),a.extent,c))}function p(e){u.on("mousemove.zoom mouseup.zoom",null),An(e.view,a.moved),yu(e),a.event(e).end()}}function k(e,...t){if(r.apply(this,arguments)){var n=this.__zoom,a=Fo(e.changedTouches?e.changedTouches[0]:e,this),u=n.invert(a),l=n.k*(e.shiftKey?.5:2),f=i(m(g(n,l),a,u),o.apply(this,t),c);yu(e),s>0?Uo(this).transition().duration(s).call(w,f,a,e):Uo(this).call(y.transform,f,a,e)}}function O(n,...o){if(r.apply(this,arguments)){var i,a,u,l,c=n.touches,s=c.length,f=_(this,o,n.changedTouches.length===s).event(n);for(vu(n),a=0;a<s;++a)l=[l=Fo(u=c[a],this),this.__zoom.invert(l),u.identifier],f.touch0?f.touch1||f.touch0[2]===l[2]||(f.touch1=l,f.taps=0):(f.touch0=l,i=!0,f.taps=1+!!e);e&&(e=clearTimeout(e)),i&&(f.taps<2&&(t=l[0],e=setTimeout((function(){e=null}),p)),Oa(this),f.start())}}function P(e,...t){if(this.__zooming){var n,r,o,a,u=_(this,t).event(e),l=e.changedTouches,s=l.length;for(yu(e),n=0;n<s;++n)o=Fo(r=l[n],this),u.touch0&&u.touch0[2]===r.identifier?u.touch0[0]=o:u.touch1&&u.touch1[2]===r.identifier&&(u.touch1[0]=o);if(r=u.that.__zoom,u.touch1){var f=u.touch0[0],d=u.touch0[1],p=u.touch1[0],h=u.touch1[1],v=(v=p[0]-f[0])*v+(v=p[1]-f[1])*v,y=(y=h[0]-d[0])*y+(y=h[1]-d[1])*y;r=g(r,Math.sqrt(v/y)),o=[(f[0]+p[0])/2,(f[1]+p[1])/2],a=[(d[0]+h[0])/2,(d[1]+h[1])/2]}else{if(!u.touch0)return;o=u.touch0[0],a=u.touch0[1]}u.zoom("touch",i(m(r,o,a),u.extent,c))}}function C(e,...r){if(this.__zooming){var o,i,a=_(this,r).event(e),u=e.changedTouches,l=u.length;for(vu(e),n&&clearTimeout(n),n=setTimeout((function(){n=null}),p),o=0;o<l;++o)i=u[o],a.touch0&&a.touch0[2]===i.identifier?delete a.touch0:a.touch1&&a.touch1[2]===i.identifier&&delete a.touch1;if(a.touch1&&!a.touch0&&(a.touch0=a.touch1,delete a.touch1),a.touch0)a.touch0[1]=this.__zoom.invert(a.touch0[0]);else if(a.end(),2===a.taps&&(i=Fo(i,this),Math.hypot(t[0]-i[0],t[1]-i[1])<v)){var c=Uo(this).on("dblclick.zoom");c&&c.apply(this,arguments)}}}return y.transform=function(e,t,n,r){var o=e.selection?e.selection():e;o.property("__zoom",bu),e!==o?w(e,t,n,r):o.interrupt().each((function(){_(this,arguments).event(r).start().zoom(null,"function"==typeof t?t.apply(this,arguments):t).end()}))},y.scaleBy=function(e,t,n,r){y.scaleTo(e,(function(){return this.__zoom.k*("function"==typeof t?t.apply(this,arguments):t)}),n,r)},y.scaleTo=function(e,t,n,r){y.transform(e,(function(){var e=o.apply(this,arguments),r=this.__zoom,a=null==n?b(e):"function"==typeof n?n.apply(this,arguments):n,u=r.invert(a),l="function"==typeof t?t.apply(this,arguments):t;return i(m(g(r,l),a,u),e,c)}),n,r)},y.translateBy=function(e,t,n,r){y.transform(e,(function(){return i(this.__zoom.translate("function"==typeof t?t.apply(this,arguments):t,"function"==typeof n?n.apply(this,arguments):n),o.apply(this,arguments),c)}),null,r)},y.translateTo=function(e,t,n,r,a){y.transform(e,(function(){var e=o.apply(this,arguments),a=this.__zoom,u=null==r?b(e):"function"==typeof r?r.apply(this,arguments):r;return i(hu.translate(u[0],u[1]).scale(a.k).translate("function"==typeof t?-t.apply(this,arguments):-t,"function"==typeof n?-n.apply(this,arguments):-n),e,c)}),r,a)},S.prototype={event:function(e){return e&&(this.sourceEvent=e),this},start:function(){return 1==++this.active&&(this.that.__zooming=this,this.emit("start")),this},zoom:function(e,t){return this.mouse&&"mouse"!==e&&(this.mouse[1]=t.invert(this.mouse[0])),this.touch0&&"touch"!==e&&(this.touch0[1]=t.invert(this.touch0[0])),this.touch1&&"touch"!==e&&(this.touch1[1]=t.invert(this.touch1[0])),this.that.__zoom=t,this.emit("zoom"),this},end:function(){return 0==--this.active&&(delete this.that.__zooming,this.emit("end")),this},emit:function(e){var t=Uo(this.that).datum();d.call(e,this.that,new au(e,{sourceEvent:this.sourceEvent,target:y,type:e,transform:this.that.__zoom,dispatch:d}),t)}},y.wheelDelta=function(e){return arguments.length?(a="function"==typeof e?e:iu(+e),y):a},y.filter=function(e){return arguments.length?(r="function"==typeof e?e:iu(!!e),y):r},y.touchable=function(e){return arguments.length?(u="function"==typeof e?e:iu(!!e),y):u},y.extent=function(e){return arguments.length?(o="function"==typeof e?e:iu([[+e[0][0],+e[0][1]],[+e[1][0],+e[1][1]]]),y):o},y.scaleExtent=function(e){return arguments.length?(l[0]=+e[0],l[1]=+e[1],y):[l[0],l[1]]},y.translateExtent=function(e){return arguments.length?(c[0][0]=+e[0][0],c[1][0]=+e[1][0],c[0][1]=+e[0][1],c[1][1]=+e[1][1],y):[[c[0][0],c[0][1]],[c[1][0],c[1][1]]]},y.constrain=function(e){return arguments.length?(i=e,y):i},y.duration=function(e){return arguments.length?(s=+e,y):s},y.interpolate=function(e){return arguments.length?(f=e,y):f},y.on=function(){var e=d.on.apply(d,arguments);return e===d?y:e},y.clickDistance=function(e){return arguments.length?(h=(e=+e)*e,y):Math.sqrt(h)},y.tapDistance=function(e){return arguments.length?(v=+e,y):v},y}().scaleExtent([e.minZoom,e.maxZoom]).translateExtent(t),r=function(e){return"string"==typeof e?new ea([[document.querySelector(e)]],[document.documentElement]):new ea([[e]],Ji)}(N.current).call(n),o=Ze(E[0],t[0][0],t[1][0]),i=Ze(E[1],t[0][1],t[1][1]),a=Ze(O,e.minZoom,e.maxZoom),u=hu.translate(o,i).scale(a);n.transform(r,u),L({d3Zoom:n,d3Selection:r,d3ZoomHandler:r.on("wheel.zoom"),transform:[o,i,a]})}}),[]),(0,r.useEffect)((function(){R&&D&&(d&&!I?R.on("wheel",(function(e){e.preventDefault(),e.stopImmediatePropagation();var t=R.property("__zoom").k||1;if(e.ctrlKey&&s){var n=function(e,t){if(e=function(e){let t;for(;t=e.sourceEvent;)e=t;return e}(e),void 0===t&&(t=e.currentTarget),t){var n=t.ownerSVGElement||t;if(n.createSVGPoint){var r=n.createSVGPoint();return r.x=e.clientX,r.y=e.clientY,[(r=r.matrixTransform(t.getScreenCTM().inverse())).x,r.y]}if(t.getBoundingClientRect){var o=t.getBoundingClientRect();return[e.clientX-o.left-t.clientLeft,e.clientY-o.top-t.clientTop]}}return[e.pageX,e.pageY]}(e),r=-e.deltaY*(1===e.deltaMode?.05:e.deltaMode?1:.002)*10,o=t*Math.pow(2,r);D.scaleTo(R,o,n)}else{var i=1===e.deltaMode?20:1,a=y===pu.Vertical?0:e.deltaX*i,u=y===pu.Horizontal?0:e.deltaY*i;D.translateBy(R,-a/t*h,-u/t*h)}})).on("wheel.zoom",null):void 0!==A&&R.on("wheel",null).on("wheel.zoom",A))}),[d,y,R,D,A,I,s]),(0,r.useEffect)((function(){D&&(b?D.on("zoom",null):D.on("zoom",(function(e){if(z([e.transform.x,e.transform.y,e.transform.k]),o){var t=Eu(e.transform);o(t)}})))}),[b,D,z,o]),(0,r.useEffect)((function(){D&&(i?D.on("start",(function(e){if(xu(T.current,e.transform)){var t=Eu(e.transform);T.current=t,i(t)}})):D.on("start",null))}),[D,i]),(0,r.useEffect)((function(){D&&(a?D.on("end",(function(e){if(xu(T.current,e.transform)){var t=Eu(e.transform);T.current=t,a(t)}})):D.on("end",null))}),[D,a]),(0,r.useEffect)((function(){D&&D.filter((function(e){var t=I||l,n=s&&e.ctrlKey;return!(!(S||t||d||m||s)||b||!m&&"dblclick"===e.type||e.target.closest(".nowheel")&&"wheel"===e.type||(e.target.closest(".react-flow__node")||e.target.closest(".react-flow__edge"))&&"wheel"!==e.type||e.target.closest(".react-flow__nodesselection")&&"wheel"!==e.type||!s&&e.ctrlKey&&"wheel"===e.type||!(t||d||n||"wheel"!==e.type)||!(S||"mousedown"!==e.type&&"touchstart"!==e.type)||e.ctrlKey&&"wheel"!==e.type||e.button)}))}),[D,l,s,d,m,S,b,w,I]),r.createElement("div",{className:"react-flow__renderer react-flow__zoompane",ref:N},M)};function Ou(e){var t=e.target.closest(".react-flow");if(t){var n=t.getBoundingClientRect();return{x:e.clientX-n.left,y:e.clientY-n.top}}}var Pu,Cu=function(){var e=Ue((function(e){return e.userSelectionRect}));return e.draw?r.createElement("div",{className:"react-flow__selection",style:{width:e.width,height:e.height,transform:"translate(".concat(e.x,"px, ").concat(e.y,"px)")}}):null},Mu=(0,r.memo)((function(e){var t=e.selectionKeyPressed,n=Ue((function(e){return e.selectionActive})),o=Ue((function(e){return e.elementsSelectable})),i=Be((function(e){return e.setUserSelection})),a=Be((function(e){return e.updateUserSelection})),u=Be((function(e){return e.unsetUserSelection})),l=Be((function(e){return e.unsetNodesSelection}));return o&&(n||t)?r.createElement("div",{className:"react-flow__selectionpane",onMouseDown:function(e){var t=Ou(e);t&&i(t)},onMouseMove:function(e){if(t&&n){var r=Ou(e);r&&a(r)}},onMouseUp:function(){return u()},onMouseLeave:function(){u(),l()}},r.createElement(Cu,null)):null})),Nu={exports:{}},Tu={},ju={exports:{}};Pu=ju,function(){var e={}.hasOwnProperty;function t(){for(var n=[],r=0;r<arguments.length;r++){var o=arguments[r];if(o){var i=typeof o;if("string"===i||"number"===i)n.push(o);else if(Array.isArray(o)&&o.length){var a=t.apply(null,o);a&&n.push(a)}else if("object"===i)for(var u in o)e.call(o,u)&&o[u]&&n.push(u)}}return n.join(" ")}Pu.exports?(t.default=t,Pu.exports=t):window.classNames=t}();var Du={},Ru={};Object.defineProperty(Ru,"__esModule",{value:!0}),Ru.findInArray=function(e,t){for(var n=0,r=e.length;n<r;n++)if(t.apply(t,[e[n],n,e]))return e[n]},Ru.isFunction=function(e){return"function"==typeof e||"[object Function]"===Object.prototype.toString.call(e)},Ru.isNum=function(e){return"number"==typeof e&&!isNaN(e)},Ru.int=function(e){return parseInt(e,10)},Ru.dontSetMe=function(e,t,n){if(e[t])return new Error("Invalid prop ".concat(t," passed to ").concat(n," - do not set this, set it on the child."))};var Au={};Object.defineProperty(Au,"__esModule",{value:!0}),Au.getPrefix=zu,Au.browserPrefixToKey=Iu,Au.browserPrefixToStyle=function(e,t){return t?"-".concat(t.toLowerCase(),"-").concat(e):e},Au.default=void 0;var Lu=["Moz","Webkit","O","ms"];function zu(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"transform";if("undefined"==typeof window||void 0===window.document)return"";var t=window.document.documentElement.style;if(e in t)return"";for(var n=0;n<Lu.length;n++)if(Iu(e,Lu[n])in t)return Lu[n];return""}function Iu(e,t){return t?"".concat(t).concat(function(e){for(var t="",n=!0,r=0;r<e.length;r++)n?(t+=e[r].toUpperCase(),n=!1):"-"===e[r]?n=!0:t+=e[r];return t}(e)):e}var Bu=zu();function Uu(e){return(Uu="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}Au.default=Bu,Object.defineProperty(Du,"__esModule",{value:!0}),Du.matchesSelector=Zu,Du.matchesSelectorAndParentsTo=function(e,t,n){var r=e;do{if(Zu(r,t))return!0;if(r===n)return!1;r=r.parentNode}while(r);return!1},Du.addEvent=function(e,t,n,r){if(e){var o=Wu({capture:!0},r);e.addEventListener?e.addEventListener(t,n,o):e.attachEvent?e.attachEvent("on"+t,n):e["on"+t]=n}},Du.removeEvent=function(e,t,n,r){if(e){var o=Wu({capture:!0},r);e.removeEventListener?e.removeEventListener(t,n,o):e.detachEvent?e.detachEvent("on"+t,n):e["on"+t]=null}},Du.outerHeight=function(e){var t=e.clientHeight,n=e.ownerDocument.defaultView.getComputedStyle(e);return(t+=(0,Fu.int)(n.borderTopWidth))+(0,Fu.int)(n.borderBottomWidth)},Du.outerWidth=function(e){var t=e.clientWidth,n=e.ownerDocument.defaultView.getComputedStyle(e);return(t+=(0,Fu.int)(n.borderLeftWidth))+(0,Fu.int)(n.borderRightWidth)},Du.innerHeight=function(e){var t=e.clientHeight,n=e.ownerDocument.defaultView.getComputedStyle(e);return(t-=(0,Fu.int)(n.paddingTop))-(0,Fu.int)(n.paddingBottom)},Du.innerWidth=function(e){var t=e.clientWidth,n=e.ownerDocument.defaultView.getComputedStyle(e);return(t-=(0,Fu.int)(n.paddingLeft))-(0,Fu.int)(n.paddingRight)},Du.offsetXYFromParent=function(e,t,n){var r=t===t.ownerDocument.body?{left:0,top:0}:t.getBoundingClientRect();return{x:(e.clientX+t.scrollLeft-r.left)/n,y:(e.clientY+t.scrollTop-r.top)/n}},Du.createCSSTransform=function(e,t){var n=qu(e,t,"px");return Yu({},(0,Hu.browserPrefixToKey)("transform",Hu.default),n)},Du.createSVGTransform=function(e,t){return qu(e,t,"")},Du.getTranslation=qu,Du.getTouch=function(e,t){return e.targetTouches&&(0,Fu.findInArray)(e.targetTouches,(function(e){return t===e.identifier}))||e.changedTouches&&(0,Fu.findInArray)(e.changedTouches,(function(e){return t===e.identifier}))},Du.getTouchIdentifier=function(e){return e.targetTouches&&e.targetTouches[0]?e.targetTouches[0].identifier:e.changedTouches&&e.changedTouches[0]?e.changedTouches[0].identifier:void 0},Du.addUserSelectStyles=function(e){if(e){var t=e.getElementById("react-draggable-style-el");t||((t=e.createElement("style")).type="text/css",t.id="react-draggable-style-el",t.innerHTML=".react-draggable-transparent-selection *::-moz-selection {all: inherit;}\n",t.innerHTML+=".react-draggable-transparent-selection *::selection {all: inherit;}\n",e.getElementsByTagName("head")[0].appendChild(t)),e.body&&Gu(e.body,"react-draggable-transparent-selection")}},Du.removeUserSelectStyles=function(e){if(e)try{if(e.body&&Ku(e.body,"react-draggable-transparent-selection"),e.selection)e.selection.empty();else{var t=(e.defaultView||window).getSelection();t&&"Caret"!==t.type&&t.removeAllRanges()}}catch(e){}},Du.addClassName=Gu,Du.removeClassName=Ku;var Fu=Ru,Hu=function(e){if(e&&e.__esModule)return e;if(null===e||"object"!==Uu(e)&&"function"!=typeof e)return{default:e};var t=Vu();if(t&&t.has(e))return t.get(e);var n={},r=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var o in e)if(Object.prototype.hasOwnProperty.call(e,o)){var i=r?Object.getOwnPropertyDescriptor(e,o):null;i&&(i.get||i.set)?Object.defineProperty(n,o,i):n[o]=e[o]}return n.default=e,t&&t.set(e,n),n}(Au);function Vu(){if("function"!=typeof WeakMap)return null;var e=new WeakMap;return Vu=function(){return e},e}function Xu(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Wu(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Xu(Object(n),!0).forEach((function(t){Yu(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Xu(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function Yu(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var $u="";function Zu(e,t){return $u||($u=(0,Fu.findInArray)(["matches","webkitMatchesSelector","mozMatchesSelector","msMatchesSelector","oMatchesSelector"],(function(t){return(0,Fu.isFunction)(e[t])}))),!!(0,Fu.isFunction)(e[$u])&&e[$u](t)}function qu(e,t,n){var r=e.x,o=e.y,i="translate(".concat(r).concat(n,",").concat(o).concat(n,")");if(t){var a="".concat("string"==typeof t.x?t.x:t.x+n),u="".concat("string"==typeof t.y?t.y:t.y+n);i="translate(".concat(a,", ").concat(u,")")+i}return i}function Gu(e,t){e.classList?e.classList.add(t):e.className.match(new RegExp("(?:^|\\s)".concat(t,"(?!\\S)")))||(e.className+=" ".concat(t))}function Ku(e,t){e.classList?e.classList.remove(t):e.className=e.className.replace(new RegExp("(?:^|\\s)".concat(t,"(?!\\S)"),"g"),"")}var Qu={};Object.defineProperty(Qu,"__esModule",{value:!0}),Qu.getBoundPosition=function(e,t,n){if(!e.props.bounds)return[t,n];var r=e.props.bounds;r="string"==typeof r?r:function(e){return{left:e.left,top:e.top,right:e.right,bottom:e.bottom}}(r);var o=tl(e);if("string"==typeof r){var i,a=o.ownerDocument,u=a.defaultView;if(!((i="parent"===r?o.parentNode:a.querySelector(r))instanceof u.HTMLElement))throw new Error('Bounds selector "'+r+'" could not find an element.');var l=u.getComputedStyle(o),c=u.getComputedStyle(i);r={left:-o.offsetLeft+(0,Ju.int)(c.paddingLeft)+(0,Ju.int)(l.marginLeft),top:-o.offsetTop+(0,Ju.int)(c.paddingTop)+(0,Ju.int)(l.marginTop),right:(0,el.innerWidth)(i)-(0,el.outerWidth)(o)-o.offsetLeft+(0,Ju.int)(c.paddingRight)-(0,Ju.int)(l.marginRight),bottom:(0,el.innerHeight)(i)-(0,el.outerHeight)(o)-o.offsetTop+(0,Ju.int)(c.paddingBottom)-(0,Ju.int)(l.marginBottom)}}return(0,Ju.isNum)(r.right)&&(t=Math.min(t,r.right)),(0,Ju.isNum)(r.bottom)&&(n=Math.min(n,r.bottom)),(0,Ju.isNum)(r.left)&&(t=Math.max(t,r.left)),(0,Ju.isNum)(r.top)&&(n=Math.max(n,r.top)),[t,n]},Qu.snapToGrid=function(e,t,n){return[Math.round(t/e[0])*e[0],Math.round(n/e[1])*e[1]]},Qu.canDragX=function(e){return"both"===e.props.axis||"x"===e.props.axis},Qu.canDragY=function(e){return"both"===e.props.axis||"y"===e.props.axis},Qu.getControlPosition=function(e,t,n){var r="number"==typeof t?(0,el.getTouch)(e,t):null;if("number"==typeof t&&!r)return null;var o=tl(n),i=n.props.offsetParent||o.offsetParent||o.ownerDocument.body;return(0,el.offsetXYFromParent)(r||e,i,n.props.scale)},Qu.createCoreData=function(e,t,n){var r=e.state,o=!(0,Ju.isNum)(r.lastX),i=tl(e);return o?{node:i,deltaX:0,deltaY:0,lastX:t,lastY:n,x:t,y:n}:{node:i,deltaX:t-r.lastX,deltaY:n-r.lastY,lastX:r.lastX,lastY:r.lastY,x:t,y:n}},Qu.createDraggableData=function(e,t){var n=e.props.scale;return{node:t.node,x:e.state.x+t.deltaX/n,y:e.state.y+t.deltaY/n,deltaX:t.deltaX/n,deltaY:t.deltaY/n,lastX:e.state.x,lastY:e.state.y}};var Ju=Ru,el=Du;function tl(e){var t=e.findDOMNode();if(!t)throw new Error("<DraggableCore>: Unmounted during event!");return t}var nl={},rl={};Object.defineProperty(rl,"__esModule",{value:!0}),rl.default=function(){},Object.defineProperty(nl,"__esModule",{value:!0}),nl.default=void 0;var ol=function(e){if(e&&e.__esModule)return e;if(null===e||"object"!==pl(e)&&"function"!=typeof e)return{default:e};var t=dl();if(t&&t.has(e))return t.get(e);var n={},r=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var o in e)if(Object.prototype.hasOwnProperty.call(e,o)){var i=r?Object.getOwnPropertyDescriptor(e,o):null;i&&(i.get||i.set)?Object.defineProperty(n,o,i):n[o]=e[o]}return n.default=e,t&&t.set(e,n),n}(r),il=fl(v.exports),al=fl(o),ul=Du,ll=Qu,cl=Ru,sl=fl(rl);function fl(e){return e&&e.__esModule?e:{default:e}}function dl(){if("function"!=typeof WeakMap)return null;var e=new WeakMap;return dl=function(){return e},e}function pl(e){return(pl="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function hl(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(e)){var n=[],r=!0,o=!1,i=void 0;try{for(var a,u=e[Symbol.iterator]();!(r=(a=u.next()).done)&&(n.push(a.value),!t||n.length!==t);r=!0);}catch(e){o=!0,i=e}finally{try{r||null==u.return||u.return()}finally{if(o)throw i}}return n}}(e,t)||function(e,t){if(e){if("string"==typeof e)return vl(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?vl(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function vl(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function yl(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function gl(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function ml(e,t){return(ml=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function bl(e,t){return!t||"object"!==pl(t)&&"function"!=typeof t?wl(e):t}function wl(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function _l(e){return(_l=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function Sl(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var xl={start:"touchstart",move:"touchmove",stop:"touchend"},El={start:"mousedown",move:"mousemove",stop:"mouseup"},kl=El,Ol=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&ml(e,t)}(a,e);var t,n,r,o,i=(r=a,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=_l(r);if(o){var n=_l(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return bl(this,e)});function a(){var e;yl(this,a);for(var t=arguments.length,n=new Array(t),r=0;r<t;r++)n[r]=arguments[r];return Sl(wl(e=i.call.apply(i,[this].concat(n))),"state",{dragging:!1,lastX:NaN,lastY:NaN,touchIdentifier:null}),Sl(wl(e),"mounted",!1),Sl(wl(e),"handleDragStart",(function(t){if(e.props.onMouseDown(t),!e.props.allowAnyClick&&"number"==typeof t.button&&0!==t.button)return!1;var n=e.findDOMNode();if(!n||!n.ownerDocument||!n.ownerDocument.body)throw new Error("<DraggableCore> not mounted on DragStart!");var r=n.ownerDocument;if(!(e.props.disabled||!(t.target instanceof r.defaultView.Node)||e.props.handle&&!(0,ul.matchesSelectorAndParentsTo)(t.target,e.props.handle,n)||e.props.cancel&&(0,ul.matchesSelectorAndParentsTo)(t.target,e.props.cancel,n))){"touchstart"===t.type&&t.preventDefault();var o=(0,ul.getTouchIdentifier)(t);e.setState({touchIdentifier:o});var i=(0,ll.getControlPosition)(t,o,wl(e));if(null!=i){var a=i.x,u=i.y,l=(0,ll.createCoreData)(wl(e),a,u);(0,sl.default)("DraggableCore: handleDragStart: %j",l),(0,sl.default)("calling",e.props.onStart),!1!==e.props.onStart(t,l)&&!1!==e.mounted&&(e.props.enableUserSelectHack&&(0,ul.addUserSelectStyles)(r),e.setState({dragging:!0,lastX:a,lastY:u}),(0,ul.addEvent)(r,kl.move,e.handleDrag),(0,ul.addEvent)(r,kl.stop,e.handleDragStop))}}})),Sl(wl(e),"handleDrag",(function(t){var n=(0,ll.getControlPosition)(t,e.state.touchIdentifier,wl(e));if(null!=n){var r=n.x,o=n.y;if(Array.isArray(e.props.grid)){var i=r-e.state.lastX,a=o-e.state.lastY,u=hl((0,ll.snapToGrid)(e.props.grid,i,a),2);if(i=u[0],a=u[1],!i&&!a)return;r=e.state.lastX+i,o=e.state.lastY+a}var l=(0,ll.createCoreData)(wl(e),r,o);if((0,sl.default)("DraggableCore: handleDrag: %j",l),!1!==e.props.onDrag(t,l)&&!1!==e.mounted)e.setState({lastX:r,lastY:o});else try{e.handleDragStop(new MouseEvent("mouseup"))}catch(t){var c=document.createEvent("MouseEvents");c.initMouseEvent("mouseup",!0,!0,window,0,0,0,0,0,!1,!1,!1,!1,0,null),e.handleDragStop(c)}}})),Sl(wl(e),"handleDragStop",(function(t){if(e.state.dragging){var n=(0,ll.getControlPosition)(t,e.state.touchIdentifier,wl(e));if(null!=n){var r=n.x,o=n.y,i=(0,ll.createCoreData)(wl(e),r,o);if(!1===e.props.onStop(t,i)||!1===e.mounted)return!1;var a=e.findDOMNode();a&&e.props.enableUserSelectHack&&(0,ul.removeUserSelectStyles)(a.ownerDocument),(0,sl.default)("DraggableCore: handleDragStop: %j",i),e.setState({dragging:!1,lastX:NaN,lastY:NaN}),a&&((0,sl.default)("DraggableCore: Removing handlers"),(0,ul.removeEvent)(a.ownerDocument,kl.move,e.handleDrag),(0,ul.removeEvent)(a.ownerDocument,kl.stop,e.handleDragStop))}}})),Sl(wl(e),"onMouseDown",(function(t){return kl=El,e.handleDragStart(t)})),Sl(wl(e),"onMouseUp",(function(t){return kl=El,e.handleDragStop(t)})),Sl(wl(e),"onTouchStart",(function(t){return kl=xl,e.handleDragStart(t)})),Sl(wl(e),"onTouchEnd",(function(t){return kl=xl,e.handleDragStop(t)})),e}return t=a,(n=[{key:"componentDidMount",value:function(){this.mounted=!0;var e=this.findDOMNode();e&&(0,ul.addEvent)(e,xl.start,this.onTouchStart,{passive:!1})}},{key:"componentWillUnmount",value:function(){this.mounted=!1;var e=this.findDOMNode();if(e){var t=e.ownerDocument;(0,ul.removeEvent)(t,El.move,this.handleDrag),(0,ul.removeEvent)(t,xl.move,this.handleDrag),(0,ul.removeEvent)(t,El.stop,this.handleDragStop),(0,ul.removeEvent)(t,xl.stop,this.handleDragStop),(0,ul.removeEvent)(e,xl.start,this.onTouchStart,{passive:!1}),this.props.enableUserSelectHack&&(0,ul.removeUserSelectStyles)(t)}}},{key:"findDOMNode",value:function(){return this.props.nodeRef?this.props.nodeRef.current:al.default.findDOMNode(this)}},{key:"render",value:function(){return ol.cloneElement(ol.Children.only(this.props.children),{onMouseDown:this.onMouseDown,onMouseUp:this.onMouseUp,onTouchEnd:this.onTouchEnd})}}])&&gl(t.prototype,n),a}(ol.Component);nl.default=Ol,Sl(Ol,"displayName","DraggableCore"),Sl(Ol,"propTypes",{allowAnyClick:il.default.bool,disabled:il.default.bool,enableUserSelectHack:il.default.bool,offsetParent:function(e,t){if(e[t]&&1!==e[t].nodeType)throw new Error("Draggable's offsetParent must be a DOM Node.")},grid:il.default.arrayOf(il.default.number),handle:il.default.string,cancel:il.default.string,nodeRef:il.default.object,onStart:il.default.func,onDrag:il.default.func,onStop:il.default.func,onMouseDown:il.default.func,scale:il.default.number,className:cl.dontSetMe,style:cl.dontSetMe,transform:cl.dontSetMe}),Sl(Ol,"defaultProps",{allowAnyClick:!1,cancel:null,disabled:!1,enableUserSelectHack:!0,offsetParent:null,handle:null,grid:null,transform:null,onStart:function(){},onDrag:function(){},onStop:function(){},onMouseDown:function(){},scale:1}),function(e){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"DraggableCore",{enumerable:!0,get:function(){return s.default}}),e.default=void 0;var t=function(e){if(e&&e.__esModule)return e;if(null===e||"object"!==h(e)&&"function"!=typeof e)return{default:e};var t=p();if(t&&t.has(e))return t.get(e);var n={},r=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var o in e)if(Object.prototype.hasOwnProperty.call(e,o)){var i=r?Object.getOwnPropertyDescriptor(e,o):null;i&&(i.get||i.set)?Object.defineProperty(n,o,i):n[o]=e[o]}return n.default=e,t&&t.set(e,n),n}(r),n=d(v.exports),i=d(o),a=d(ju.exports),u=Du,l=Qu,c=Ru,s=d(nl),f=d(rl);function d(e){return e&&e.__esModule?e:{default:e}}function p(){if("function"!=typeof WeakMap)return null;var e=new WeakMap;return p=function(){return e},e}function h(e){return(h="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function y(){return(y=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function g(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function m(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function b(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?m(Object(n),!0).forEach((function(t){O(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):m(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function w(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function _(e,t,n){return t&&w(e.prototype,t),n&&w(e,n),e}function S(e,t){return(S=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function x(e,t){return!t||"object"!==h(t)&&"function"!=typeof t?E(e):t}function E(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function k(e){return(k=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function O(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var P=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&S(e,t)}(c,e);var n,r,o=(n=c,r=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=k(n);if(r){var o=k(this).constructor;e=Reflect.construct(t,arguments,o)}else e=t.apply(this,arguments);return x(this,e)});function c(e){var t;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,c),O(E(t=o.call(this,e)),"onDragStart",(function(e,n){if((0,f.default)("Draggable: onDragStart: %j",n),!1===t.props.onStart(e,(0,l.createDraggableData)(E(t),n)))return!1;t.setState({dragging:!0,dragged:!0})})),O(E(t),"onDrag",(function(e,n){if(!t.state.dragging)return!1;(0,f.default)("Draggable: onDrag: %j",n);var r,o,i=(0,l.createDraggableData)(E(t),n),a={x:i.x,y:i.y};if(t.props.bounds){var u=a.x,c=a.y;a.x+=t.state.slackX,a.y+=t.state.slackY;var s=(r=(0,l.getBoundPosition)(E(t),a.x,a.y),o=2,function(e){if(Array.isArray(e))return e}(r)||function(e,t){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(e)){var n=[],r=!0,o=!1,i=void 0;try{for(var a,u=e[Symbol.iterator]();!(r=(a=u.next()).done)&&(n.push(a.value),!t||n.length!==t);r=!0);}catch(e){o=!0,i=e}finally{try{r||null==u.return||u.return()}finally{if(o)throw i}}return n}}(r,o)||function(e,t){if(e){if("string"==typeof e)return g(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?g(e,t):void 0}}(r,o)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),d=s[0],p=s[1];a.x=d,a.y=p,a.slackX=t.state.slackX+(u-a.x),a.slackY=t.state.slackY+(c-a.y),i.x=a.x,i.y=a.y,i.deltaX=a.x-t.state.x,i.deltaY=a.y-t.state.y}if(!1===t.props.onDrag(e,i))return!1;t.setState(a)})),O(E(t),"onDragStop",(function(e,n){if(!t.state.dragging)return!1;if(!1===t.props.onStop(e,(0,l.createDraggableData)(E(t),n)))return!1;(0,f.default)("Draggable: onDragStop: %j",n);var r={dragging:!1,slackX:0,slackY:0};if(Boolean(t.props.position)){var o=t.props.position,i=o.x,a=o.y;r.x=i,r.y=a}t.setState(r)})),t.state={dragging:!1,dragged:!1,x:e.position?e.position.x:e.defaultPosition.x,y:e.position?e.position.y:e.defaultPosition.y,prevPropsPosition:b({},e.position),slackX:0,slackY:0,isElementSVG:!1},!e.position||e.onDrag||e.onStop||console.warn("A `position` was applied to this <Draggable>, without drag handlers. This will make this component effectively undraggable. Please attach `onDrag` or `onStop` handlers so you can adjust the `position` of this element."),t}return _(c,null,[{key:"getDerivedStateFromProps",value:function(e,t){var n=e.position,r=t.prevPropsPosition;return!n||r&&n.x===r.x&&n.y===r.y?null:((0,f.default)("Draggable: getDerivedStateFromProps %j",{position:n,prevPropsPosition:r}),{x:n.x,y:n.y,prevPropsPosition:b({},n)})}}]),_(c,[{key:"componentDidMount",value:function(){void 0!==window.SVGElement&&this.findDOMNode()instanceof window.SVGElement&&this.setState({isElementSVG:!0})}},{key:"componentWillUnmount",value:function(){this.setState({dragging:!1})}},{key:"findDOMNode",value:function(){return this.props.nodeRef?this.props.nodeRef.current:i.default.findDOMNode(this)}},{key:"render",value:function(){var e,n=this.props;n.axis,n.bounds;var r=n.children,o=n.defaultPosition,i=n.defaultClassName,c=n.defaultClassNameDragging,f=n.defaultClassNameDragged,d=n.position,p=n.positionOffset;n.scale;var h=function(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}(n,["axis","bounds","children","defaultPosition","defaultClassName","defaultClassNameDragging","defaultClassNameDragged","position","positionOffset","scale"]),v={},g=null,m=!Boolean(d)||this.state.dragging,w=d||o,_={x:(0,l.canDragX)(this)&&m?this.state.x:w.x,y:(0,l.canDragY)(this)&&m?this.state.y:w.y};this.state.isElementSVG?g=(0,u.createSVGTransform)(_,p):v=(0,u.createCSSTransform)(_,p);var S=(0,a.default)(r.props.className||"",i,(O(e={},c,this.state.dragging),O(e,f,this.state.dragged),e));return t.createElement(s.default,y({},h,{onStart:this.onDragStart,onDrag:this.onDrag,onStop:this.onDragStop}),t.cloneElement(t.Children.only(r),{className:S,style:b(b({},r.props.style),v),transform:g}))}}]),c}(t.Component);e.default=P,O(P,"displayName","Draggable"),O(P,"propTypes",b(b({},s.default.propTypes),{},{axis:n.default.oneOf(["both","x","y","none"]),bounds:n.default.oneOfType([n.default.shape({left:n.default.number,right:n.default.number,top:n.default.number,bottom:n.default.number}),n.default.string,n.default.oneOf([!1])]),defaultClassName:n.default.string,defaultClassNameDragging:n.default.string,defaultClassNameDragged:n.default.string,defaultPosition:n.default.shape({x:n.default.number,y:n.default.number}),positionOffset:n.default.shape({x:n.default.oneOfType([n.default.number,n.default.string]),y:n.default.oneOfType([n.default.number,n.default.string])}),position:n.default.shape({x:n.default.number,y:n.default.number}),className:c.dontSetMe,style:c.dontSetMe,transform:c.dontSetMe})),O(P,"defaultProps",b(b({},s.default.defaultProps),{},{axis:"both",bounds:!1,defaultClassName:"react-draggable",defaultClassNameDragging:"react-draggable-dragging",defaultClassNameDragged:"react-draggable-dragged",defaultPosition:{x:0,y:0},position:null,scale:1}))}(Tu);var Pl=Tu.default,Cl=Tu.DraggableCore;Nu.exports=Pl,Nu.exports.default=Pl;var Ml=Nu.exports.DraggableCore=Cl,Nl=Nu.exports;function Tl(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function jl(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Tl(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Tl(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var Dl=function(e){var t=e.onSelectionDragStart,n=e.onSelectionDrag,o=e.onSelectionDragStop,i=e.onSelectionContextMenu,a=We(Ue((function(e){return e.transform})),3),u=a[0],l=a[1],c=a[2],s=Ue((function(e){return e.selectedNodesBbox})),f=Ue((function(e){return e.selectionActive})),d=Ue((function(e){return e.selectedElements})),p=Ue((function(e){return e.snapToGrid})),h=Ue((function(e){return e.snapGrid})),v=Ue((function(e){return e.nodes})),y=Be((function(e){return e.updateNodePosDiff})),g=(0,r.useRef)(null),m=(0,r.useMemo)((function(){return p?h:[1,1]}),[p,h]),b=(0,r.useMemo)((function(){return d?d.filter(et).map((function(e){var t=v.find((function(t){return t.id===e.id}));return jl(jl({},t),{},{position:null==t?void 0:t.__rf.position})})):[]}),[d,v]),w=(0,r.useMemo)((function(){return{transform:"translate(".concat(u,"px,").concat(l,"px) scale(").concat(c,")")}}),[u,l,c]),_=(0,r.useMemo)((function(){return{width:s.width,height:s.height,top:s.y,left:s.x}}),[s]),S=(0,r.useCallback)((function(e){null==t||t(e,b)}),[t,b]),x=(0,r.useCallback)((function(e,t){n&&n(e,b),y({diff:{x:t.deltaX,y:t.deltaY},isDragging:!0})}),[n,b,y]),E=(0,r.useCallback)((function(e){y({isDragging:!1}),null==o||o(e,b)}),[b,o]),k=(0,r.useCallback)((function(e){var t=d?d.filter(et).map((function(e){return v.find((function(t){return t.id===e.id}))})):[];null==i||i(e,t)}),[i]);return!d||f?null:r.createElement("div",{className:"react-flow__nodesselection",style:w},r.createElement(Nl,{scale:c,grid:m,onStart:function(e){return S(e)},onDrag:function(e,t){return x(e,t)},onStop:function(e){return E(e)},nodeRef:g,enableUserSelectHack:!1},r.createElement("div",{ref:g,className:"react-flow__nodesselection-rect",onContextMenu:k,style:_})))},Rl=function(e){var t=e.children,n=e.onPaneClick,o=e.onPaneContextMenu,i=e.onPaneScroll,a=e.onElementsRemove,u=e.deleteKeyCode,l=e.onMove,c=e.onMoveStart,s=e.onMoveEnd,f=e.selectionKeyCode,d=e.multiSelectionKeyCode,p=e.zoomActivationKeyCode,h=e.elementsSelectable,v=e.zoomOnScroll,y=e.zoomOnPinch,g=e.panOnScroll,m=e.panOnScrollSpeed,b=e.panOnScrollMode,w=e.zoomOnDoubleClick,_=e.paneMoveable,S=e.defaultPosition,x=e.defaultZoom,E=e.translateExtent,k=e.onSelectionDragStart,O=e.onSelectionDrag,P=e.onSelectionDragStop,C=e.onSelectionContextMenu,M=Be((function(e){return e.unsetNodesSelection})),N=Be((function(e){return e.resetSelectedElements})),T=Ue((function(e){return e.nodesSelectionActive})),j=Ge(f);!function(e){var t=e.deleteKeyCode,n=e.multiSelectionKeyCode,o=e.onElementsRemove,i=Fe(),a=Be((function(e){return e.unsetNodesSelection})),u=Be((function(e){return e.setMultiSelectionActive})),l=Be((function(e){return e.resetSelectedElements})),c=Ge(t),s=Ge(n);(0,r.useEffect)((function(){var e=i.getState(),t=e.edges,n=e.selectedElements;if(o&&c&&n){var r=n.filter(et),u=st(r,t),s=[].concat(Xe(n),Xe(u)).reduce((function(e,t){return e.set(t.id,t)}),new Map);o(Array.from(s.values())),a(),l()}}),[c]),(0,r.useEffect)((function(){u(s)}),[s])}({onElementsRemove:a,deleteKeyCode:u,multiSelectionKeyCode:d});var D=(0,r.useCallback)((function(e){null==n||n(e),M(),N()}),[n]),R=(0,r.useCallback)((function(e){null==o||o(e)}),[o]),A=(0,r.useCallback)((function(e){null==i||i(e)}),[i]);return r.createElement(ku,{onMove:l,onMoveStart:c,onMoveEnd:s,selectionKeyPressed:j,elementsSelectable:h,zoomOnScroll:v,zoomOnPinch:y,panOnScroll:g,panOnScrollSpeed:m,panOnScrollMode:b,zoomOnDoubleClick:w,paneMoveable:_,defaultPosition:S,defaultZoom:x,translateExtent:E,zoomActivationKeyCode:p},t,r.createElement(Mu,{selectionKeyPressed:j}),T&&r.createElement(Dl,{onSelectionDragStart:k,onSelectionDrag:O,onSelectionDragStop:P,onSelectionContextMenu:C}),r.createElement("div",{className:"react-flow__pane",onClick:D,onContextMenu:R,onWheel:A}))};Rl.displayName="FlowRenderer";var Al=(0,r.memo)(Rl),Ll=function(e){var t=Ue((function(e){return e.transform})),n=Ue((function(e){return e.selectedElements})),o=Ue((function(e){return e.nodesDraggable})),i=Ue((function(e){return e.nodesConnectable})),a=Ue((function(e){return e.elementsSelectable})),u=Ue((function(e){return e.width})),l=Ue((function(e){return e.height})),c=Ue((function(e){return e.nodes})),s=Be((function(e){return e.updateNodeDimensions})),f=e.onlyRenderVisibleElements?ct(c,{x:0,y:0,width:u,height:l},t,!0):c,d=(0,r.useMemo)((function(){return{transform:"translate(".concat(t[0],"px,").concat(t[1],"px) scale(").concat(t[2],")")}}),[t[0],t[1],t[2]]),p=(0,r.useMemo)((function(){return"undefined"==typeof ResizeObserver?null:new ResizeObserver((function(e){var t=e.map((function(e){return{id:e.target.getAttribute("data-id"),nodeElement:e.target}}));s(t)}))}),[]);return r.createElement("div",{className:"react-flow__nodes",style:d},f.map((function(u){var l=u.type||"default",c=e.nodeTypes[l]||e.nodeTypes.default;e.nodeTypes[l]||console.warn('Node type "'.concat(l,'" not found. Using fallback type "default".'));var s=!!(u.draggable||o&&void 0===u.draggable),f=!!(u.selectable||a&&void 0===u.selectable),d=!!(u.connectable||i&&void 0===u.connectable);return r.createElement(c,{key:u.id,id:u.id,className:u.className,style:u.style,type:l,data:u.data,sourcePosition:u.sourcePosition,targetPosition:u.targetPosition,isHidden:u.isHidden,xPos:u.__rf.position.x,yPos:u.__rf.position.y,isDragging:u.__rf.isDragging,isInitialized:null!==u.__rf.width&&null!==u.__rf.height,snapGrid:e.snapGrid,snapToGrid:e.snapToGrid,selectNodesOnDrag:e.selectNodesOnDrag,onClick:e.onElementClick,onMouseEnter:e.onNodeMouseEnter,onMouseMove:e.onNodeMouseMove,onMouseLeave:e.onNodeMouseLeave,onContextMenu:e.onNodeContextMenu,onNodeDoubleClick:e.onNodeDoubleClick,onNodeDragStart:e.onNodeDragStart,onNodeDrag:e.onNodeDrag,onNodeDragStop:e.onNodeDragStop,scale:t[2],selected:(null==n?void 0:n.some((function(e){return e.id===u.id})))||!1,isDraggable:s,isSelectable:f,isConnectable:d,resizeObserver:p})})))};Ll.displayName="NodeRenderer";var zl=(0,r.memo)(Ll),Il=["x","y","label","labelStyle","labelShowBg","labelBgStyle","labelBgPadding","labelBgBorderRadius","children","className"];function Bl(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}var Ul=function(e){var t=e.x,n=e.y,o=e.label,l=e.labelStyle,c=void 0===l?{}:l,s=e.labelShowBg,f=void 0===s||s,d=e.labelBgStyle,p=void 0===d?{}:d,h=e.labelBgPadding,v=void 0===h?[2,4]:h,y=e.labelBgBorderRadius,g=void 0===y?2:y,m=e.children,b=e.className,w=a(e,Il),_=(0,r.useRef)(null),S=We((0,r.useState)({x:0,y:0,width:0,height:0}),2),x=S[0],E=S[1],k=u(["react-flow__edge-textwrapper",b]);return(0,r.useEffect)((function(){if(_.current){var e=_.current.getBBox();E({x:e.x,y:e.y,width:e.width,height:e.height})}}),[o]),void 0!==o&&o?r.createElement("g",function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Bl(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Bl(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}({transform:"translate(".concat(t-x.width/2," ").concat(n-x.height/2,")"),className:k},w),f&&r.createElement("rect",{width:x.width+2*v[0],x:-v[0],y:-v[1],height:x.height+2*v[1],className:"react-flow__edge-textbg",style:p,rx:g,ry:g}),r.createElement("text",{className:"react-flow__edge-text",y:x.height/2,dy:"0.3em",ref:_,style:c},o),m):null},Fl=(0,r.memo)(Ul),Hl=function(e,t){return void 0!==t&&t?"url(#".concat(t,")"):void 0!==e?"url(#react-flow__".concat(e,")"):"none"},Vl=[lu.Left,lu.Right],Xl=function(e){var t=e.sourceX,n=e.sourceY,r=e.targetX,o=e.targetY,i=e.sourcePosition,a=void 0===i?lu.Bottom:i,u=e.targetPosition,l=void 0===u?lu.Top:u,c=Vl.includes(a),s=Vl.includes(l);if(c&&!s||s&&!c){var f=c?Math.abs(r-t):0,d=t>r?t-f:t+f,p=c?0:Math.abs(o-n);return[d,n<o?n+p:n-p,f,p]}var h=Math.abs(r-t)/2,v=r<t?r+h:r-h,y=Math.abs(o-n)/2;return[v,o<n?o+y:o-y,h,y]};function Wl(e){var t=e.sourceX,n=e.sourceY,r=e.sourcePosition,o=void 0===r?lu.Bottom:r,i=e.targetX,a=e.targetY,u=e.targetPosition,l=void 0===u?lu.Top:u,c=e.centerX,s=e.centerY,f=We(Xl({sourceX:t,sourceY:n,targetX:i,targetY:a}),2),d=f[0],p=f[1],h=[lu.Left,lu.Right],v=void 0!==c?c:d,y=void 0!==s?s:p,g="M".concat(t,",").concat(n," C").concat(t,",").concat(y," ").concat(i,",").concat(y," ").concat(i,",").concat(a);return h.includes(o)&&h.includes(l)?g="M".concat(t,",").concat(n," C").concat(v,",").concat(n," ").concat(v,",").concat(a," ").concat(i,",").concat(a):h.includes(l)?g="M".concat(t,",").concat(n," C").concat(t,",").concat(a," ").concat(t,",").concat(a," ").concat(i,",").concat(a):h.includes(o)&&(g="M".concat(t,",").concat(n," C").concat(i,",").concat(n," ").concat(i,",").concat(n," ").concat(i,",").concat(a)),g}var Yl=(0,r.memo)((function(e){var t=e.sourceX,n=e.sourceY,o=e.targetX,i=e.targetY,a=e.sourcePosition,u=void 0===a?lu.Bottom:a,l=e.targetPosition,c=void 0===l?lu.Top:l,s=e.label,f=e.labelStyle,d=e.labelShowBg,p=e.labelBgStyle,h=e.labelBgPadding,v=e.labelBgBorderRadius,y=e.style,g=e.arrowHeadType,m=e.markerEndId,b=We(Xl({sourceX:t,sourceY:n,targetX:o,targetY:i,sourcePosition:u,targetPosition:c}),2),w=b[0],_=b[1],S=Wl({sourceX:t,sourceY:n,sourcePosition:u,targetX:o,targetY:i,targetPosition:c}),x=s?r.createElement(Fl,{x:w,y:_,label:s,labelStyle:f,labelShowBg:d,labelBgStyle:p,labelBgPadding:h,labelBgBorderRadius:v}):null,E=Hl(g,m);return r.createElement(r.Fragment,null,r.createElement("path",{style:y,d:S,className:"react-flow__edge-path",markerEnd:E}),x)})),$l=function(e,t,n){return"L ".concat(e,",").concat(t-n,"Q ").concat(e,",").concat(t," ").concat(e+n,",").concat(t)},Zl=function(e,t,n){return"L ".concat(e+n,",").concat(t,"Q ").concat(e,",").concat(t," ").concat(e,",").concat(t-n)},ql=function(e,t,n){return"L ".concat(e,",").concat(t-n,"Q ").concat(e,",").concat(t," ").concat(e-n,",").concat(t)},Gl=function(e,t,n){return"L ".concat(e-n,",").concat(t,"Q ").concat(e,",").concat(t," ").concat(e,",").concat(t-n)},Kl=function(e,t,n){return"L ".concat(e+n,",").concat(t,"Q ").concat(e,",").concat(t," ").concat(e,",").concat(t+n)},Ql=function(e,t,n){return"L ".concat(e,",").concat(t+n,"Q ").concat(e,",").concat(t," ").concat(e+n,",").concat(t)},Jl=function(e,t,n){return"L ".concat(e,",").concat(t+n,"Q ").concat(e,",").concat(t," ").concat(e-n,",").concat(t)},ec=function(e,t,n){return"L ".concat(e-n,",").concat(t,"Q ").concat(e,",").concat(t," ").concat(e,",").concat(t+n)};function tc(e){var t=e.sourceX,n=e.sourceY,r=e.sourcePosition,o=void 0===r?lu.Bottom:r,i=e.targetX,a=e.targetY,u=e.targetPosition,l=void 0===u?lu.Top:u,c=e.borderRadius,s=void 0===c?5:c,f=e.centerX,d=e.centerY,p=We(Xl({sourceX:t,sourceY:n,targetX:i,targetY:a}),4),h=p[0],v=p[1],y=p[2],g=p[3],m=Math.min(s,Math.abs(i-t)),b=Math.min(s,Math.abs(a-n)),w=Math.min(m,b,y,g),_=[lu.Left,lu.Right],S=void 0!==f?f:h,x=void 0!==d?d:v,E=null,k=null;return t<=i?(E=n<=a?$l(t,x,w):Ql(t,x,w),k=n<=a?ec(i,x,w):Gl(i,x,w)):(E=n<a?ql(t,x,w):Jl(t,x,w),k=n<a?Kl(i,x,w):Zl(i,x,w)),_.includes(o)&&_.includes(l)?t<=i&&(E=n<=a?ec(S,n,w):Gl(S,n,w),k=n<=a?$l(S,a,w):Ql(S,a,w)):_.includes(o)&&!_.includes(l)?(E=t<=i?n<=a?ec(i,n,w):Gl(i,n,w):n<=a?Kl(i,n,w):Zl(i,n,w),k=""):!_.includes(o)&&_.includes(l)&&(E=t<=i?n<=a?$l(t,a,w):Ql(t,a,w):n<=a?ql(t,a,w):Jl(t,a,w),k=""),"M ".concat(t,",").concat(n).concat(E).concat(k,"L ").concat(i,",").concat(a)}var nc=(0,r.memo)((function(e){var t=e.sourceX,n=e.sourceY,o=e.targetX,i=e.targetY,a=e.label,u=e.labelStyle,l=e.labelShowBg,c=e.labelBgStyle,s=e.labelBgPadding,f=e.labelBgBorderRadius,d=e.style,p=e.sourcePosition,h=void 0===p?lu.Bottom:p,v=e.targetPosition,y=void 0===v?lu.Top:v,g=e.arrowHeadType,m=e.markerEndId,b=e.borderRadius,w=void 0===b?5:b,_=We(Xl({sourceX:t,sourceY:n,targetX:o,targetY:i,sourcePosition:h,targetPosition:y}),2),S=_[0],x=_[1],E=tc({sourceX:t,sourceY:n,sourcePosition:h,targetX:o,targetY:i,targetPosition:y,borderRadius:w}),k=Hl(g,m),O=a?r.createElement(Fl,{x:S,y:x,label:a,labelStyle:u,labelShowBg:l,labelBgStyle:c,labelBgPadding:s,labelBgBorderRadius:f}):null;return r.createElement(r.Fragment,null,r.createElement("path",{style:d,className:"react-flow__edge-path",d:E,markerEnd:k}),O)})),rc=function(e){var t=e.connectionNodeId,n=e.connectionHandleId,o=e.connectionHandleType,i=e.connectionLineStyle,a=e.connectionPositionX,u=e.connectionPositionY,l=e.connectionLineType,c=void 0===l?du.Bezier:l,s=e.nodes,f=void 0===s?[]:s,d=e.transform,p=e.isConnectable,h=e.CustomConnectionLineComponent,v=We((0,r.useState)(null),2),y=v[0],g=v[1],m=t,b=n;if((0,r.useEffect)((function(){var e=f.find((function(e){return e.id===m}))||null;g(e)}),[]),!y||!p)return null;var w=b?y.__rf.handleBounds[o].find((function(e){return e.id===b})):y.__rf.handleBounds[o][0],_=w?w.x+w.width/2:y.__rf.width/2,S=w?w.y+w.height/2:y.__rf.height,x=y.__rf.position.x+_,E=y.__rf.position.y+S,k=(a-d[0])/d[2],O=(u-d[1])/d[2],P=(null==w?void 0:w.position)===lu.Left||(null==w?void 0:w.position)===lu.Right?lu.Left:lu.Top;if(h)return r.createElement("g",{className:"react-flow__connection"},r.createElement(h,{sourceX:x,sourceY:E,sourcePosition:null==w?void 0:w.position,targetX:k,targetY:O,targetPosition:P,connectionLineType:c,connectionLineStyle:i}));var C;return C=c===du.Bezier?Wl({sourceX:x,sourceY:E,sourcePosition:null==w?void 0:w.position,targetX:k,targetY:O,targetPosition:P}):c===du.Step?tc({sourceX:x,sourceY:E,sourcePosition:null==w?void 0:w.position,targetX:k,targetY:O,targetPosition:P,borderRadius:0}):c===du.SmoothStep?tc({sourceX:x,sourceY:E,sourcePosition:null==w?void 0:w.position,targetX:k,targetY:O,targetPosition:P}):"M".concat(x,",").concat(E," ").concat(k,",").concat(O),r.createElement("g",{className:"react-flow__connection"},r.createElement("path",{d:C,className:"react-flow__connection-path",style:i}))},oc=function(e){var t=e.id,n=e.children;return r.createElement("marker",{className:"react-flow__arrowhead",id:t,markerWidth:"12.5",markerHeight:"12.5",viewBox:"-10 -10 20 20",orient:"auto",refX:"0",refY:"0"},n)},ic=function(e){var t=e.color;return r.createElement("defs",null,r.createElement(oc,{id:"react-flow__arrowclosed"},r.createElement("polyline",{stroke:t,strokeLinecap:"round",strokeLinejoin:"round",strokeWidth:"1",fill:t,points:"-5,-4 0,0 -5,4 -5,-4"})),r.createElement(oc,{id:"react-flow__arrow"},r.createElement("polyline",{stroke:t,strokeLinecap:"round",strokeLinejoin:"round",strokeWidth:"1.5",fill:"none",points:"-5,-4 0,0 -5,4"})))};function ac(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function uc(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?ac(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):ac(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}ic.displayName="MarkerDefinitions";var lc=(0,r.memo)((function(e){return r.createElement(nc,uc(uc({},e),{},{borderRadius:0}))})),cc=(0,r.memo)((function(e){var t=e.sourceX,n=e.sourceY,o=e.targetX,i=e.targetY,a=e.label,u=e.labelStyle,l=e.labelShowBg,c=e.labelBgStyle,s=e.labelBgPadding,f=e.labelBgBorderRadius,d=e.style,p=e.arrowHeadType,h=e.markerEndId,v=Math.abs(i-n)/2,y=i<n?i+v:i-v,g=Math.abs(o-t)/2,m=o<t?o+g:o-g,b=Hl(p,h),w=a?r.createElement(Fl,{x:m,y,label:a,labelStyle:u,labelShowBg:l,labelBgStyle:c,labelBgPadding:s,labelBgBorderRadius:f}):null;return r.createElement(r.Fragment,null,r.createElement("path",{style:d,className:"react-flow__edge-path",d:"M ".concat(t,",").concat(n,"L ").concat(o,",").concat(i),markerEnd:b}),w)}));function sc(e,t,n,r,o,i,a){var u=a.elementFromPoint(e.clientX,e.clientY),l=(null==u?void 0:u.classList.contains("target"))||!1,c=(null==u?void 0:u.classList.contains("source"))||!1,s={elementBelow:u,isValid:!1,connection:{source:null,target:null,sourceHandle:null,targetHandle:null},isHoveringHandle:!1};if(u&&(l||c)&&(s.isHoveringHandle=!0,t!==fu.Strict||n&&c||!n&&l)){var f=u.getAttribute("data-nodeid"),d=u.getAttribute("data-handleid"),p=n?{source:f,sourceHandle:d,target:r,targetHandle:o}:{source:r,sourceHandle:o,target:f,targetHandle:d};s.connection=p,s.isValid=i(p)}return s}function fc(e){null==e||e.classList.remove("react-flow__handle-valid"),null==e||e.classList.remove("react-flow__handle-connecting")}function dc(e,t,n,r,o,i,a,u,l,c,s,f,d,p){var h,v,y,g=e.target.closest(".react-flow"),m=(null===(v=(h=e.target).getRootNode)||void 0===v?void 0:v.call(h))||(null===(y=window)||void 0===y?void 0:y.document);if(m){var b=m.elementFromPoint(e.clientX,e.clientY),w=null==b?void 0:b.classList.contains("target"),_=null==b?void 0:b.classList.contains("source");if(g&&(w||_||c)){var S,x=c||(w?"target":"source"),E=g.getBoundingClientRect();o({x:e.clientX-E.left,y:e.clientY-E.top}),r({connectionNodeId:n,connectionHandleId:t,connectionHandleType:x}),null==f||f(e,{nodeId:n,handleId:t,handleType:x}),m.addEventListener("mousemove",k),m.addEventListener("mouseup",(function e(o){var f=sc(o,l,a,n,t,u,m),h=f.connection,v=f.isValid;null==d||d(o),v&&(null==i||i(h)),null==p||p(o),c&&s&&s(o),fc(S),r({connectionNodeId:null,connectionHandleId:null,connectionHandleType:null}),m.removeEventListener("mousemove",k),m.removeEventListener("mouseup",e)}))}}function k(e){o({x:e.clientX-E.left,y:e.clientY-E.top});var r=sc(e,l,a,n,t,u,m),i=r.connection,c=r.elementBelow,s=r.isValid;if(!r.isHoveringHandle)return fc(S);i.source!==i.target&&c&&(S=c,c.classList.add("react-flow__handle-connecting"),c.classList.toggle("react-flow__handle-valid",s))}}var pc=function(e,t,n){return n===lu.Left?e-t:n===lu.Right?e+t:e},hc=function(e,t,n){return n===lu.Top?e-t:n===lu.Bottom?e+t:e},vc=function(e){var t=e.className,n=e.position,o=e.centerX,i=e.centerY,a=e.radius,l=void 0===a?10:a;return r.createElement("circle",{className:u(["react-flow__edgeupdater",t]),cx:pc(o,l,n),cy:hc(i,l,n),r:l,stroke:"transparent",fill:"transparent"})},yc=function(e){var t=function(t){var n=t.id,o=t.className,i=t.type,a=t.data,l=t.onClick,c=t.onEdgeDoubleClick,s=t.selected,f=t.animated,d=t.label,p=t.labelStyle,h=t.labelShowBg,v=t.labelBgStyle,y=t.labelBgPadding,g=t.labelBgBorderRadius,m=t.style,b=t.arrowHeadType,w=t.source,_=t.target,S=t.sourceX,x=t.sourceY,E=t.targetX,k=t.targetY,O=t.sourcePosition,P=t.targetPosition,C=t.elementsSelectable,M=t.markerEndId,N=t.isHidden,T=t.sourceHandleId,j=t.targetHandleId,D=t.handleEdgeUpdate,R=t.onConnectEdge,A=t.onContextMenu,L=t.onMouseEnter,z=t.onMouseMove,I=t.onMouseLeave,B=t.edgeUpdaterRadius,U=t.onEdgeUpdateStart,F=t.onEdgeUpdateEnd,H=Be((function(e){return e.addSelectedElements})),V=Be((function(e){return e.setConnectionNodeId})),X=Be((function(e){return e.unsetNodesSelection})),W=Be((function(e){return e.setConnectionPosition})),Y=Ue((function(e){return e.connectionMode})),$=We((0,r.useState)(!1),2),Z=$[0],q=$[1],G=!C&&!l,K=u(["react-flow__edge","react-flow__edge-".concat(i),o,{selected:s,animated:f,inactive:G,updating:Z}]),Q=(0,r.useMemo)((function(){var e={id:n,source:w,target:_,type:i};return T&&(e.sourceHandle=T),j&&(e.targetHandle=j),void 0!==a&&(e.data=a),e}),[n,w,_,i,T,j,a]),J=(0,r.useCallback)((function(e){C&&(X(),H(Q)),null==l||l(e,Q)}),[C,Q,l]),ee=(0,r.useCallback)((function(e){null==c||c(e,Q)}),[Q,c]),te=(0,r.useCallback)((function(e){null==A||A(e,Q)}),[Q,A]),ne=(0,r.useCallback)((function(e){null==L||L(e,Q)}),[Q,A]),re=(0,r.useCallback)((function(e){null==z||z(e,Q)}),[Q,A]),oe=(0,r.useCallback)((function(e){null==I||I(e,Q)}),[Q,A]),ie=(0,r.useCallback)((function(e,t){var n=t?_:w,r=t?j:T,o=t;null==U||U(e,Q),dc(e,r,n,V,W,R,o,(function(){return!0}),Y,t?"target":"source",F?function(e){return F(e,Q)}:void 0)}),[n,w,_,i,T,j,V,W,Q]),ae=(0,r.useCallback)((function(e){ie(e,!0)}),[n,w,T,ie]),ue=(0,r.useCallback)((function(e){ie(e,!1)}),[n,_,j,ie]),le=(0,r.useCallback)((function(){return q(!0)}),[q]),ce=(0,r.useCallback)((function(){return q(!1)}),[q]);return N?null:r.createElement("g",{className:K,onClick:J,onDoubleClick:ee,onContextMenu:te,onMouseEnter:ne,onMouseMove:re,onMouseLeave:oe},r.createElement(e,{id:n,source:w,target:_,selected:s,animated:f,label:d,labelStyle:p,labelShowBg:h,labelBgStyle:v,labelBgPadding:y,labelBgBorderRadius:g,data:a,style:m,arrowHeadType:b,sourceX:S,sourceY:x,targetX:E,targetY:k,sourcePosition:O,targetPosition:P,markerEndId:M,sourceHandleId:T,targetHandleId:j}),D&&r.createElement("g",{onMouseDown:ae,onMouseEnter:le,onMouseOut:ce},r.createElement(vc,{position:O,centerX:S,centerY:x,radius:B})),D&&r.createElement("g",{onMouseDown:ue,onMouseEnter:le,onMouseOut:ce},r.createElement(vc,{position:P,centerX:E,centerY:k,radius:B})))};return t.displayName="EdgeWrapper",(0,r.memo)(t)};function gc(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function mc(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?gc(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):gc(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function bc(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:null,r=((null==n?void 0:n.x)||0)+t.__rf.position.x,o=((null==n?void 0:n.y)||0)+t.__rf.position.y,i=(null==n?void 0:n.width)||t.__rf.width,a=(null==n?void 0:n.height)||t.__rf.height;switch(e){case lu.Top:return{x:r+i/2,y:o};case lu.Right:return{x:r+i,y:o+a/2};case lu.Bottom:return{x:r+i/2,y:o+a};case lu.Left:return{x:r,y:o+a/2}}}function wc(e,t){if(!e)return null;var n=null;return 1!==e.length&&t?t&&(n=e.find((function(e){return e.id===t}))):n=e[0],void 0===n?null:n}var _c=function(e){var t=e.edge,n=e.props,o=e.nodes,i=e.selectedElements,a=e.elementsSelectable,u=e.transform,l=e.width,c=e.height,s=e.onlyRenderVisibleElements,f=e.connectionMode,d=t.sourceHandle||null,p=t.targetHandle||null,h=function(e,t){return t.reduce((function(t,n){return n.id===e.source&&(t.sourceNode=n),n.id===e.target&&(t.targetNode=n),t}),{sourceNode:null,targetNode:null})}(t,o),v=h.sourceNode,y=h.targetNode,g=(0,r.useCallback)((function(e){var r;null===(r=n.onEdgeUpdate)||void 0===r||r.call(n,t,e)}),[t]);if(!v)return console.warn("couldn't create edge for source id: ".concat(t.source,"; edge id: ").concat(t.id)),null;if(!y)return console.warn("couldn't create edge for target id: ".concat(t.target,"; edge id: ").concat(t.id)),null;if(!v.__rf.width||!y.__rf.width)return null;var m=t.type||"default",b=n.edgeTypes[m]||n.edgeTypes.default,w=y.__rf.handleBounds,_=f===fu.Strict?w.target:w.target||w.source,S=wc(v.__rf.handleBounds.source,d),x=wc(_,p),E=S?S.position:lu.Bottom,k=x?x.position:lu.Top;if(!S)return console.warn("couldn't create edge for source handle id: ".concat(d,"; edge id: ").concat(t.id)),null;if(!x)return console.warn("couldn't create edge for target handle id: ".concat(p,"; edge id: ").concat(t.id)),null;var O=function(e,t,n,r,o,i){var a=bc(n,e,t),u=bc(i,r,o);return{sourceX:a.x,sourceY:a.y,targetX:u.x,targetY:u.y}}(v,S,E,y,x,k),P=O.sourceX,C=O.sourceY,M=O.targetX,N=O.targetY;if(s&&!function(e){var t=e.sourcePos,n=e.targetPos,r=e.width,o=e.height,i=e.transform,a={x:Math.min(t.x,n.x),y:Math.min(t.y,n.y),x2:Math.max(t.x,n.x),y2:Math.max(t.y,n.y)};a.x===a.x2&&(a.x2+=1),a.y===a.y2&&(a.y2+=1);var u=at({x:(0-i[0])/i[2],y:(0-i[1])/i[2],width:r/i[2],height:o/i[2]}),l=Math.max(0,Math.min(u.x2,a.x2)-Math.max(u.x,a.x)),c=Math.max(0,Math.min(u.y2,a.y2)-Math.max(u.y,a.y));return Math.ceil(l*c)>0}({sourcePos:{x:P,y:C},targetPos:{x:M,y:N},width:l,height:c,transform:u}))return null;var T=(null==i?void 0:i.some((function(e){return Je(e)&&e.id===t.id})))||!1;return r.createElement(b,{key:t.id,id:t.id,className:t.className,type:t.type,data:t.data,onClick:n.onElementClick,selected:T,animated:t.animated,label:t.label,labelStyle:t.labelStyle,labelShowBg:t.labelShowBg,labelBgStyle:t.labelBgStyle,labelBgPadding:t.labelBgPadding,labelBgBorderRadius:t.labelBgBorderRadius,style:t.style,arrowHeadType:t.arrowHeadType,source:t.source,target:t.target,sourceHandleId:d,targetHandleId:p,sourceX:P,sourceY:C,targetX:M,targetY:N,sourcePosition:E,targetPosition:k,elementsSelectable:a,markerEndId:n.markerEndId,isHidden:t.isHidden,onConnectEdge:g,handleEdgeUpdate:void 0!==n.onEdgeUpdate,onContextMenu:n.onEdgeContextMenu,onMouseEnter:n.onEdgeMouseEnter,onMouseMove:n.onEdgeMouseMove,onMouseLeave:n.onEdgeMouseLeave,edgeUpdaterRadius:n.edgeUpdaterRadius,onEdgeDoubleClick:n.onEdgeDoubleClick,onEdgeUpdateStart:n.onEdgeUpdateStart,onEdgeUpdateEnd:n.onEdgeUpdateEnd})},Sc=function(e){var t=Ue((function(e){return e.transform})),n=Ue((function(e){return e.nodes})),o=Ue((function(e){return e.edges})),i=Ue((function(e){return e.connectionNodeId})),a=Ue((function(e){return e.connectionHandleId})),u=Ue((function(e){return e.connectionHandleType})),l=Ue((function(e){return e.connectionPosition})),c=Ue((function(e){return e.selectedElements})),s=Ue((function(e){return e.nodesConnectable})),f=Ue((function(e){return e.elementsSelectable})),d=Ue((function(e){return e.width})),p=Ue((function(e){return e.height}));if(!d)return null;var h=e.connectionLineType,v=e.arrowHeadColor,y=e.connectionLineStyle,g=e.connectionLineComponent,m=e.onlyRenderVisibleElements,b="translate(".concat(t[0],",").concat(t[1],") scale(").concat(t[2],")"),w=i&&u;return r.createElement("svg",{width:d,height:p,className:"react-flow__edges"},r.createElement(ic,{color:v}),r.createElement("g",{transform:b},o.map((function(o){return r.createElement(_c,{key:o.id,edge:o,props:e,nodes:n,selectedElements:c,elementsSelectable:f,transform:t,width:d,height:p,onlyRenderVisibleElements:m})})),w&&r.createElement(rc,{nodes:n,connectionNodeId:i,connectionHandleId:a,connectionHandleType:u,connectionPositionX:l.x,connectionPositionY:l.y,transform:t,connectionLineStyle:y,connectionLineType:h,isConnectable:s,CustomConnectionLineComponent:g})))};Sc.displayName="EdgeRenderer";var xc=(0,r.memo)(Sc),Ec=.1,kc={zoomIn:function(){},zoomOut:function(){},zoomTo:function(e){},transform:function(e){},fitView:function(){},setCenter:function(e,t){},fitBounds:function(e){},project:function(e){return e},initialized:!1},Oc=function(){var e=Fe(),t=Ue((function(e){return e.d3Zoom})),n=Ue((function(e){return e.d3Selection}));return(0,r.useMemo)((function(){return n&&t?{zoomIn:function(){return t.scaleBy(n,1.2)},zoomOut:function(){return t.scaleBy(n,1/1.2)},zoomTo:function(e){return t.scaleTo(n,e)},transform:function(e){var r=hu.translate(e.x,e.y).scale(e.zoom);t.transform(n,r)},fitView:function(){var r,o=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{padding:Ec,includeHiddenNodes:!1},i=e.getState(),a=i.nodes,u=i.width,l=i.height,c=i.minZoom,s=i.maxZoom;if(a.length){var f=lt(o.includeHiddenNodes?a:a.filter((function(e){return!e.isHidden}))),d=ht(f,u,l,c,s,null!==(r=o.padding)&&void 0!==r?r:Ec),p=We(d,3),h=p[0],v=p[1],y=p[2],g=hu.translate(h,v).scale(y);t.transform(n,g)}},setCenter:function(r,o,i){var a=e.getState(),u=a.width,l=a.height,c=a.maxZoom,s=void 0!==i?i:c,f=u/2-r*s,d=l/2-o*s,p=hu.translate(f,d).scale(s);t.transform(n,p)},fitBounds:function(r){var o=arguments.length>1&&void 0!==arguments[1]?arguments[1]:Ec,i=e.getState(),a=i.width,u=i.height,l=i.minZoom,c=i.maxZoom,s=ht(r,a,u,l,c,o),f=We(s,3),d=f[0],p=f[1],h=f[2],v=hu.translate(d,p).scale(h);t.transform(n,v)},project:function(t){var n=e.getState(),r=n.transform,o=n.snapToGrid,i=n.snapGrid;return tt(t,r,o,i)},initialized:!0}:kc}),[t,n])},Pc=function(e){var t=e.nodeTypes,n=e.edgeTypes,o=e.onMove,i=e.onMoveStart,a=e.onMoveEnd,u=e.onLoad,l=e.onElementClick,c=e.onNodeDoubleClick,s=e.onEdgeDoubleClick,f=e.onNodeMouseEnter,d=e.onNodeMouseMove,p=e.onNodeMouseLeave,h=e.onNodeContextMenu,v=e.onNodeDragStart,y=e.onNodeDrag,g=e.onNodeDragStop,m=e.onSelectionDragStart,b=e.onSelectionDrag,w=e.onSelectionDragStop,_=e.onSelectionContextMenu,S=e.connectionMode,x=e.connectionLineType,E=e.connectionLineStyle,k=e.connectionLineComponent,O=e.selectionKeyCode,P=e.multiSelectionKeyCode,C=e.zoomActivationKeyCode,M=e.onElementsRemove,N=e.deleteKeyCode,T=e.onConnect,j=e.onConnectStart,D=e.onConnectStop,R=e.onConnectEnd,A=e.snapToGrid,L=e.snapGrid,z=e.onlyRenderVisibleElements,I=e.nodesDraggable,B=e.nodesConnectable,U=e.elementsSelectable,F=e.selectNodesOnDrag,H=e.minZoom,V=e.maxZoom,X=e.defaultZoom,W=e.defaultPosition,Y=e.translateExtent,$=e.nodeExtent,Z=e.arrowHeadColor,q=e.markerEndId,G=e.zoomOnScroll,K=e.zoomOnPinch,Q=e.panOnScroll,J=e.panOnScrollSpeed,ee=e.panOnScrollMode,te=e.zoomOnDoubleClick,ne=e.paneMoveable,re=e.onPaneClick,oe=e.onPaneScroll,ie=e.onPaneContextMenu,ae=e.onEdgeUpdate,ue=e.onEdgeContextMenu,le=e.onEdgeMouseEnter,ce=e.onEdgeMouseMove,se=e.onEdgeMouseLeave,fe=e.edgeUpdaterRadius,de=e.onEdgeUpdateStart,pe=e.onEdgeUpdateEnd,he=(0,r.useRef)(!1),ve=Be((function(e){return e.setOnConnect})),ye=Be((function(e){return e.setOnConnectStart})),ge=Be((function(e){return e.setOnConnectStop})),me=Be((function(e){return e.setOnConnectEnd})),be=Be((function(e){return e.setSnapGrid})),we=Be((function(e){return e.setSnapToGrid})),_e=Be((function(e){return e.setNodesDraggable})),Se=Be((function(e){return e.setNodesConnectable})),xe=Be((function(e){return e.setElementsSelectable})),Ee=Be((function(e){return e.setMinZoom})),ke=Be((function(e){return e.setMaxZoom})),Oe=Be((function(e){return e.setTranslateExtent})),Pe=Be((function(e){return e.setNodeExtent})),Ce=Be((function(e){return e.setConnectionMode})),Me=Fe(),Ne=Oc(),Te=Ne.zoomIn,je=Ne.zoomOut,De=Ne.zoomTo,Re=Ne.transform,Ae=Ne.fitView,Le=Ne.initialized;return(0,r.useEffect)((function(){!he.current&&Le&&(u&&u({fitView:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{padding:.1};return Ae(e)},zoomIn:Te,zoomOut:je,zoomTo:De,setTransform:Re,project:nt(Me),getElements:dt(Me),toObject:pt(Me)}),he.current=!0)}),[u,Te,je,De,Re,Ae,Le]),(0,r.useEffect)((function(){T&&ve(T)}),[T]),(0,r.useEffect)((function(){j&&ye(j)}),[j]),(0,r.useEffect)((function(){D&&ge(D)}),[D]),(0,r.useEffect)((function(){R&&me(R)}),[R]),(0,r.useEffect)((function(){void 0!==A&&we(A)}),[A]),(0,r.useEffect)((function(){void 0!==L&&be(L)}),[L]),(0,r.useEffect)((function(){void 0!==I&&_e(I)}),[I]),(0,r.useEffect)((function(){void 0!==B&&Se(B)}),[B]),(0,r.useEffect)((function(){void 0!==U&&xe(U)}),[U]),(0,r.useEffect)((function(){void 0!==H&&Ee(H)}),[H]),(0,r.useEffect)((function(){void 0!==V&&ke(V)}),[V]),(0,r.useEffect)((function(){void 0!==Y&&Oe(Y)}),[Y]),(0,r.useEffect)((function(){void 0!==$&&Pe($)}),[$]),(0,r.useEffect)((function(){void 0!==S&&Ce(S)}),[S]),r.createElement(Al,{onPaneClick:re,onPaneContextMenu:ie,onPaneScroll:oe,onElementsRemove:M,deleteKeyCode:N,selectionKeyCode:O,multiSelectionKeyCode:P,zoomActivationKeyCode:C,elementsSelectable:U,onMove:o,onMoveStart:i,onMoveEnd:a,zoomOnScroll:G,zoomOnPinch:K,zoomOnDoubleClick:te,panOnScroll:Q,panOnScrollSpeed:J,panOnScrollMode:ee,paneMoveable:ne,defaultPosition:W,defaultZoom:X,translateExtent:Y,onSelectionDragStart:m,onSelectionDrag:b,onSelectionDragStop:w,onSelectionContextMenu:_},r.createElement(zl,{nodeTypes:t,onElementClick:l,onNodeDoubleClick:c,onNodeMouseEnter:f,onNodeMouseMove:d,onNodeMouseLeave:p,onNodeContextMenu:h,onNodeDragStop:g,onNodeDrag:y,onNodeDragStart:v,selectNodesOnDrag:F,snapToGrid:A,snapGrid:L,onlyRenderVisibleElements:z}),r.createElement(xc,{edgeTypes:n,onElementClick:l,onEdgeDoubleClick:s,connectionLineType:x,connectionLineStyle:E,connectionLineComponent:k,connectionMode:S,arrowHeadColor:Z,markerEndId:q,onEdgeUpdate:ae,onlyRenderVisibleElements:z,onEdgeContextMenu:ue,onEdgeMouseEnter:le,onEdgeMouseMove:ce,onEdgeMouseLeave:se,onEdgeUpdateStart:de,onEdgeUpdateEnd:pe,edgeUpdaterRadius:fe}))};Pc.displayName="GraphView";var Cc=(0,r.memo)(Pc),Mc=function(e){var t=e.elements,n=Be((function(e){return e.setElements}));return(0,r.useEffect)((function(){n(t)}),[t]),null},Nc=(0,r.createContext)(null),Tc=Nc.Provider;Nc.Consumer;var jc=["type","position","isValidConnection","isConnectable","id","onConnect","children","className"];function Dc(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}var Rc=function(){return!0},Ac=function(e){var t=e.type,n=void 0===t?"source":t,o=e.position,l=void 0===o?lu.Top:o,c=e.isValidConnection,s=void 0===c?Rc:c,f=e.isConnectable,d=void 0===f||f,p=e.id,h=e.onConnect,v=e.children,y=e.className,g=a(e,jc),m=(0,r.useContext)(Nc),b=Be((function(e){return e.setConnectionPosition})),w=Be((function(e){return e.setConnectionNodeId})),_=Ue((function(e){return e.onConnect})),S=Ue((function(e){return e.onConnectStart})),x=Ue((function(e){return e.onConnectStop})),E=Ue((function(e){return e.onConnectEnd})),k=Ue((function(e){return e.connectionMode})),O=p||null,P="target"===n,C=(0,r.useCallback)((function(e){null==_||_(e),null==h||h(e)}),[_,h]),M=(0,r.useCallback)((function(e){dc(e,O,m,w,b,C,P,s,k,void 0,void 0,S,x,E)}),[O,m,w,b,C,P,s,k,S,x,E]),N=u(["react-flow__handle","react-flow__handle-".concat(l),"nodrag",y,{source:!P,target:P,connectable:d}]);return r.createElement("div",function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Dc(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Dc(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}({"data-handleid":O,"data-nodeid":m,"data-handlepos":l,className:N,onMouseDown:M},g),v)};Ac.displayName="Handle";var Lc=(0,r.memo)(Ac),zc=function(e){var t=e.data,n=e.isConnectable,o=e.targetPosition,i=void 0===o?lu.Top:o,a=e.sourcePosition,u=void 0===a?lu.Bottom:a;return r.createElement(r.Fragment,null,r.createElement(Lc,{type:"target",position:i,isConnectable:n}),t.label,r.createElement(Lc,{type:"source",position:u,isConnectable:n}))};zc.displayName="DefaultNode";var Ic=(0,r.memo)(zc),Bc=function(e){var t=e.data,n=e.isConnectable,o=e.sourcePosition,i=void 0===o?lu.Bottom:o;return r.createElement(r.Fragment,null,t.label,r.createElement(Lc,{type:"source",position:i,isConnectable:n}))};Bc.displayName="InputNode";var Uc=(0,r.memo)(Bc),Fc=function(e){var t=e.data,n=e.isConnectable,o=e.targetPosition,i=void 0===o?lu.Top:o;return r.createElement(r.Fragment,null,r.createElement(Lc,{type:"target",position:i,isConnectable:n}),t.label)};Fc.displayName="OutputNode";var Hc=(0,r.memo)(Fc);function Vc(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}var Xc=function(e){var t=function(t){var n=t.id,o=t.type,a=t.data,l=t.scale,c=t.xPos,s=t.yPos,f=t.selected,d=t.onClick,p=t.onMouseEnter,h=t.onMouseMove,v=t.onMouseLeave,y=t.onContextMenu,g=t.onNodeDoubleClick,m=t.onNodeDragStart,b=t.onNodeDrag,w=t.onNodeDragStop,_=t.style,S=t.className,x=t.isDraggable,E=t.isSelectable,k=t.isConnectable,O=t.selectNodesOnDrag,P=t.sourcePosition,C=t.targetPosition,M=t.isHidden,N=t.isInitialized,T=t.snapToGrid,j=t.snapGrid,D=t.isDragging,R=t.resizeObserver,A=Be((function(e){return e.updateNodeDimensions})),L=Be((function(e){return e.addSelectedElements})),z=Be((function(e){return e.updateNodePosDiff})),I=Be((function(e){return e.unsetNodesSelection})),B=(0,r.useRef)(null),U=(0,r.useMemo)((function(){return{id:n,type:o,position:{x:c,y:s},data:a}}),[n,o,c,s,a]),F=(0,r.useMemo)((function(){return T?j:[1,1]}),[T,j]),H=(0,r.useMemo)((function(){return function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Vc(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Vc(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}({zIndex:f?10:3,transform:"translate(".concat(c,"px,").concat(s,"px)"),pointerEvents:E||x||d||p||h||v?"all":"none",opacity:N?1:0},_)}),[f,c,s,E,x,d,N,_,p,h,v]),V=(0,r.useMemo)((function(){if(p&&!D)return function(e){return p(e,U)}}),[p,D,U]),X=(0,r.useMemo)((function(){if(h&&!D)return function(e){return h(e,U)}}),[h,D,U]),W=(0,r.useMemo)((function(){if(v&&!D)return function(e){return v(e,U)}}),[v,D,U]),Y=(0,r.useMemo)((function(){if(y)return function(e){return y(e,U)}}),[y,U]),$=(0,r.useCallback)((function(e){x||(E&&(I(),f||L(U)),null==d||d(e,U))}),[E,f,x,d,U]),Z=(0,r.useCallback)((function(e){null==m||m(e,U),O&&E?(I(),f||L(U)):O||f||!E||(I(),L([]))}),[U,f,O,E,m]),q=(0,r.useCallback)((function(e,t){b&&(U.position.x+=t.deltaX,U.position.y+=t.deltaY,b(e,U)),z({id:n,diff:{x:t.deltaX,y:t.deltaY},isDragging:!0})}),[n,U,b]),G=(0,r.useCallback)((function(e){if(!D)return!E||O||f||L(U),void(null==d||d(e,U));z({id:U.id,isDragging:!1}),null==w||w(e,U)}),[U,E,O,d,w,D,f]),K=(0,r.useCallback)((function(e){null==g||g(e,U)}),[U,g]);if((0,r.useLayoutEffect)((function(){B.current&&!M&&A([{id:n,nodeElement:B.current,forceUpdate:!0}])}),[n,M,P,C]),(0,r.useEffect)((function(){if(B.current){var e=B.current;return null==R||R.observe(e),function(){return null==R?void 0:R.unobserve(e)}}}),[]),M)return null;var Q=u(["react-flow__node","react-flow__node-".concat(o),S,{selected:f,selectable:E}]);return r.createElement(Ml,{onStart:Z,onDrag:q,onStop:G,scale:l,disabled:!x,cancel:".nodrag",nodeRef:B,grid:F,enableUserSelectHack:!1},r.createElement("div",{className:Q,ref:B,style:H,onMouseEnter:V,onMouseMove:X,onMouseLeave:W,onContextMenu:Y,onClick:$,onDoubleClick:K,"data-id":n},r.createElement(Tc,{value:n},r.createElement(e,{id:n,data:a,type:o,xPos:c,yPos:s,selected:f,isConnectable:k,sourcePosition:P,targetPosition:C,isDragging:D}))))};return t.displayName="NodeWrapper",(0,r.memo)(t)};function Wc(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Yc(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Wc(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Wc(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var $c=function(e){var t=e.onSelectionChange,n=Ue((function(e){return e.selectedElements}));return(0,r.useEffect)((function(){t(n)}),[n]),null},Zc=function e(t,n){if(t===n)return!0;if(t&&n&&"object"==typeof t&&"object"==typeof n){if(t.constructor!==n.constructor)return!1;var r,o,i;if(Array.isArray(t)){if((r=t.length)!=n.length)return!1;for(o=r;0!=o--;)if(!e(t[o],n[o]))return!1;return!0}if(t.constructor===RegExp)return t.source===n.source&&t.flags===n.flags;if(t.valueOf!==Object.prototype.valueOf)return t.valueOf()===n.valueOf();if(t.toString!==Object.prototype.toString)return t.toString()===n.toString();if((r=(i=Object.keys(t)).length)!==Object.keys(n).length)return!1;for(o=r;0!=o--;)if(!Object.prototype.hasOwnProperty.call(n,i[o]))return!1;for(o=r;0!=o--;){var a=i[o];if(!e(t[a],n[a]))return!1}return!0}return t!=t&&n!=n};function qc(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}var Gc=function(e,t){var n=e.getBoundingClientRect();return{source:Kc(".source",e,n,t),target:Kc(".target",e,n,t)}},Kc=function(e,t,n,r){var o=t.querySelectorAll(e);return o&&o.length?Array.from(o).map((function(e){var t=e.getBoundingClientRect(),o=$e(e);return function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?qc(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):qc(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}({id:e.getAttribute("data-handleid"),position:e.getAttribute("data-handlepos"),x:(t.left-n.left)/r,y:(t.top-n.top)/r},o)})):null};function Qc(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Jc(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Qc(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Qc(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function es(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:ts,t=arguments.length>1?arguments[1]:void 0;switch(t.type){case se:var n=t.payload,r={nextNodes:[],nextEdges:[]},o=n.reduce((function(t,n){if(et(n)){var r=e.nodes.find((function(e){return e.id===n.id}));if(r){var o=Jc(Jc({},r),n);r.position.x===n.position.x&&r.position.y===n.position.y||(o.__rf.position=n.position),void 0!==n.type&&n.type!==r.type&&(o.__rf.width=null),t.nextNodes.push(o)}else t.nextNodes.push(rt(n,e.nodeExtent))}else if(Je(n)){var i=e.edges.find((function(e){return e.id===n.id}));i?t.nextEdges.push(Jc(Jc({},i),n)):t.nextEdges.push(ot(n))}return t}),r),i=o.nextNodes,a=o.nextEdges;return Jc(Jc({},e),{},{nodes:i,edges:a});case fe:var u=e.nodes.map((function(n){var r=t.payload.find((function(e){return e.id===n.id}));if(r){var o=$e(r.nodeElement);if(o.width&&o.height&&(n.__rf.width!==o.width||n.__rf.height!==o.height||r.forceUpdate)){var i=Gc(r.nodeElement,e.transform[2]);return Jc(Jc({},n),{},{__rf:Jc(Jc(Jc({},n.__rf),o),{},{handleBounds:i})})}}return n}));return Jc(Jc({},e),{},{nodes:u});case de:var l=t.payload,c=l.id,s=l.pos,f=s;if(e.snapToGrid){var d=We(e.snapGrid,2),p=d[0],h=d[1];f={x:p*Math.round(s.x/p),y:h*Math.round(s.y/h)}}var v=e.nodes.map((function(e){return e.id===c?Jc(Jc({},e),{},{__rf:Jc(Jc({},e.__rf),{},{position:f})}):e}));return Jc(Jc({},e),{},{nodes:v});case pe:var y=t.payload,g=y.id,m=y.diff,b=y.isDragging,w=e.nodes.map((function(t){var n;if(g===t.id||null!==(n=e.selectedElements)&&void 0!==n&&n.find((function(e){return e.id===t.id}))){var r=Jc(Jc({},t),{},{__rf:Jc(Jc({},t.__rf),{},{isDragging:b})});return m&&(r.__rf.position={x:t.__rf.position.x+m.x,y:t.__rf.position.y+m.y}),r}return t}));return Jc(Jc({},e),{},{nodes:w});case he:var _=t.payload;return Jc(Jc({},e),{},{selectionActive:!0,userSelectionRect:{width:0,height:0,startX:_.x,startY:_.y,x:_.x,y:_.y,draw:!0}});case ve:var S,x,E=t.payload,k=null!==(S=e.userSelectionRect.startX)&&void 0!==S?S:0,O=null!==(x=e.userSelectionRect.startY)&&void 0!==x?x:0,P=Jc(Jc({},e.userSelectionRect),{},{x:E.x<k?E.x:e.userSelectionRect.x,y:E.y<O?E.y:e.userSelectionRect.y,width:Math.abs(E.x-k),height:Math.abs(E.y-O)}),C=ct(e.nodes,P,e.transform),M=st(C,e.edges),N=[].concat(Xe(C),Xe(M)),T=!Zc(N,e.selectedElements),j=T?{selectedElements:N.length>0?N:null}:{};return Jc(Jc(Jc({},e),j),{},{userSelectionRect:P});case ye:var D,R=null===(D=e.selectedElements)||void 0===D?void 0:D.filter((function(e){return et(e)&&e.__rf})),A=Jc(Jc({},e),{},{selectionActive:!1,userSelectionRect:Jc(Jc({},e.userSelectionRect),{},{draw:!1})});if(R&&0!==R.length){var L=lt(R);A.selectedNodesBbox=L,A.nodesSelectionActive=!0}else A.selectedElements=null,A.nodesSelectionActive=!1;return A;case me:var z=t.payload,I=Array.isArray(z)?z:[z],B=!Zc(I,e.selectedElements),U=B?I:e.selectedElements;return Jc(Jc({},e),{},{selectedElements:U});case we:var F=e.multiSelectionActive,H=e.selectedElements,V=t.payload,X=Array.isArray(V)?V:[V],W=X;F&&(W=H?[].concat(Xe(H),Xe(X)):X);var Y=!Zc(W,e.selectedElements),$=Y?W:e.selectedElements;return Jc(Jc({},e),{},{selectedElements:$});case xe:var Z=t.payload,q=Z.d3Zoom,G=Z.d3Selection,K=Z.d3ZoomHandler,Q=Z.transform;return Jc(Jc({},e),{},{d3Zoom:q,d3Selection:G,d3ZoomHandler:K,transform:Q});case Ee:var J,ee=t.payload;return null===(J=e.d3Zoom)||void 0===J||J.scaleExtent([ee,e.maxZoom]),Jc(Jc({},e),{},{minZoom:ee});case ke:var te,ne=t.payload;return null===(te=e.d3Zoom)||void 0===te||te.scaleExtent([e.minZoom,ne]),Jc(Jc({},e),{},{maxZoom:ne});case Oe:var re,oe=t.payload;return null===(re=e.d3Zoom)||void 0===re||re.translateExtent(oe),Jc(Jc({},e),{},{translateExtent:oe});case ze:var ie=t.payload;return Jc(Jc({},e),{},{nodeExtent:ie,nodes:e.nodes.map((function(e){return Jc(Jc({},e),{},{__rf:Jc(Jc({},e.__rf),{},{position:qe(e.__rf.position,ie)})})}))});case ae:case ue:case le:case ce:case be:case ge:case _e:case Se:case Pe:case Ce:case Me:case Ne:case Te:case je:case De:case Re:case Ae:case Le:return Jc(Jc({},e),t.payload);default:return e}}var ts={width:0,height:0,transform:[0,0,1],nodes:[],edges:[],selectedElements:null,selectedNodesBbox:{x:0,y:0,width:0,height:0},d3Zoom:null,d3Selection:null,d3ZoomHandler:void 0,minZoom:.5,maxZoom:2,translateExtent:[[Number.NEGATIVE_INFINITY,Number.NEGATIVE_INFINITY],[Number.POSITIVE_INFINITY,Number.POSITIVE_INFINITY]],nodeExtent:[[Number.NEGATIVE_INFINITY,Number.NEGATIVE_INFINITY],[Number.POSITIVE_INFINITY,Number.POSITIVE_INFINITY]],nodesSelectionActive:!1,selectionActive:!1,userSelectionRect:{startX:0,startY:0,x:0,y:0,width:0,height:0,draw:!1},connectionNodeId:null,connectionHandleId:null,connectionHandleType:"source",connectionPosition:{x:0,y:0},connectionMode:fu.Strict,snapGrid:[15,15],snapToGrid:!1,nodesDraggable:!0,nodesConnectable:!0,elementsSelectable:!0,multiSelectionActive:!1,reactFlowVersion:"9.6.1"},ns=p(es,ts),rs=function(e){var t=e.children,n=(0,r.useContext)(F);return(0,r.useMemo)((function(){var e,t;return null==n||null===(e=n.store)||void 0===e||null===(t=e.getState())||void 0===t?void 0:t.reactFlowVersion}),[n])?r.createElement(r.Fragment,null,t):r.createElement($,{store:ns},t)};function os(e,t){void 0===t&&(t={});var n=t.insertAt;if(e&&"undefined"!=typeof document){var r=document.head||document.getElementsByTagName("head")[0],o=document.createElement("style");o.type="text/css","top"===n&&r.firstChild?r.insertBefore(o,r.firstChild):r.appendChild(o),o.styleSheet?o.styleSheet.cssText=e:o.appendChild(document.createTextNode(e))}}rs.displayName="ReactFlowWrapper",os(".react-flow{width:100%;height:100%;position:relative;overflow:hidden}.react-flow__pane,.react-flow__renderer,.react-flow__selectionpane{width:100%;height:100%;position:absolute;top:0;left:0}.react-flow__pane{z-index:1}.react-flow__renderer{z-index:4}.react-flow__selectionpane{z-index:5}.react-flow__edges,.react-flow__selection{position:absolute;top:0;left:0}.react-flow__edges{pointer-events:none;z-index:2}.react-flow__edge{pointer-events:visibleStroke;}.react-flow__edge.inactive{pointer-events:none}@-webkit-keyframes dashdraw{0%{stroke-dashoffset:10}}@keyframes dashdraw{0%{stroke-dashoffset:10}}.react-flow__edge-path{fill:none}.react-flow__edge-textwrapper{pointer-events:all}.react-flow__edge-text{pointer-events:none;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.react-flow__connection{pointer-events:none;}.react-flow__connection .animated{stroke-dasharray:5;-webkit-animation:dashdraw .5s linear infinite;animation:dashdraw .5s linear infinite}.react-flow__connection-path{fill:none}.react-flow__nodes{width:100%;height:100%;pointer-events:none;z-index:3}.react-flow__node,.react-flow__nodes{position:absolute;transform-origin:0 0}.react-flow__node{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;pointer-events:all}.react-flow__nodesselection{z-index:3;position:absolute;width:100%;height:100%;top:0;left:0;transform-origin:left top;pointer-events:none;}.react-flow__nodesselection-rect{position:absolute;pointer-events:all;cursor:-webkit-grab;cursor:grab}.react-flow__handle{pointer-events:none;}.react-flow__handle.connectable{pointer-events:all}.react-flow__handle-bottom{top:auto;left:50%;bottom:-4px;transform:translate(-50%)}.react-flow__handle-top{left:50%;top:-4px;transform:translate(-50%)}.react-flow__handle-left{top:50%;left:-4px;transform:translateY(-50%)}.react-flow__handle-right{right:-4px;top:50%;transform:translateY(-50%)}.react-flow__edgeupdater{cursor:move;pointer-events:all}.react-flow__background{position:absolute;top:0;left:0;width:100%;height:100%}.react-flow__controls{position:absolute;z-index:5;bottom:10px;left:10px;}.react-flow__controls-button{width:24px;height:24px;border:none;}.react-flow__controls-button svg{width:100%}.react-flow__minimap{position:absolute;z-index:5;bottom:10px;right:10px}"),os(".react-flow__selection{background:rgba(0,89,220,.08);border:1px dotted rgba(0,89,220,.8)}.react-flow__edge.selected .react-flow__edge-path{stroke:#555}.react-flow__edge.animated path{stroke-dasharray:5;-webkit-animation:dashdraw .5s linear infinite;animation:dashdraw .5s linear infinite}.react-flow__edge.updating .react-flow__edge-path{stroke:#777}.react-flow__edge-path{stroke:#b1b1b7;stroke-width:1}.react-flow__edge-text{font-size:10px}.react-flow__edge-textbg{fill:#fff}.react-flow__connection-path{stroke:#b1b1b7;stroke-width:1}.react-flow__node{cursor:-webkit-grab;cursor:grab}.react-flow__node-default,.react-flow__node-input,.react-flow__node-output{padding:10px;border-radius:3px;width:150px;font-size:12px;color:#222;text-align:center;border-width:1px;border-style:solid}.react-flow__node-default.selectable:hover,.react-flow__node-input.selectable:hover,.react-flow__node-output.selectable:hover{box-shadow:0 1px 4px 1px rgba(0,0,0,.08)}.react-flow__node-input{background:#fff;border-color:#0041d0;}.react-flow__node-input.selected,.react-flow__node-input.selected:hover{box-shadow:0 0 0 .5px #0041d0}.react-flow__node-input .react-flow__handle{background:#0041d0}.react-flow__node-default{background:#fff;border-color:#1a192b;}.react-flow__node-default.selected,.react-flow__node-default.selected:hover{box-shadow:0 0 0 .5px #1a192b}.react-flow__node-default .react-flow__handle{background:#1a192b}.react-flow__node-output{background:#fff;border-color:#ff0072;}.react-flow__node-output.selected,.react-flow__node-output.selected:hover{box-shadow:0 0 0 .5px #ff0072}.react-flow__node-output .react-flow__handle{background:#ff0072}.react-flow__nodesselection-rect{background:rgba(0,89,220,.08);border:1px dotted rgba(0,89,220,.8)}.react-flow__handle{position:absolute;width:6px;height:6px;background:#555;border:1px solid #fff;border-radius:100%;}.react-flow__handle.connectable{cursor:crosshair}.react-flow__minimap{background-color:#fff}.react-flow__controls{box-shadow:0 0 2px 1px rgba(0,0,0,.08);}.react-flow__controls-button{background:#fefefe;border-bottom:1px solid #eee;box-sizing:content-box;display:flex;justify-content:center;align-items:center;width:16px;height:16px;cursor:pointer;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;padding:5px;}.react-flow__controls-button svg{max-width:12px;max-height:12px}.react-flow__controls-button:hover{background:#f4f4f4}");var is=["elements","className","nodeTypes","edgeTypes","onElementClick","onLoad","onMove","onMoveStart","onMoveEnd","onElementsRemove","onConnect","onConnectStart","onConnectStop","onConnectEnd","onNodeMouseEnter","onNodeMouseMove","onNodeMouseLeave","onNodeContextMenu","onNodeDoubleClick","onNodeDragStart","onNodeDrag","onNodeDragStop","onSelectionChange","onSelectionDragStart","onSelectionDrag","onSelectionDragStop","onSelectionContextMenu","connectionMode","connectionLineType","connectionLineStyle","connectionLineComponent","deleteKeyCode","selectionKeyCode","multiSelectionKeyCode","zoomActivationKeyCode","snapToGrid","snapGrid","onlyRenderVisibleElements","selectNodesOnDrag","nodesDraggable","nodesConnectable","elementsSelectable","minZoom","maxZoom","defaultZoom","defaultPosition","translateExtent","nodeExtent","arrowHeadColor","markerEndId","zoomOnScroll","zoomOnPinch","panOnScroll","panOnScrollSpeed","panOnScrollMode","zoomOnDoubleClick","paneMoveable","onPaneClick","onPaneScroll","onPaneContextMenu","children","onEdgeUpdate","onEdgeContextMenu","onEdgeDoubleClick","onEdgeMouseEnter","onEdgeMouseMove","onEdgeMouseLeave","onEdgeUpdateStart","onEdgeUpdateEnd","edgeUpdaterRadius","nodeTypesId","edgeTypesId"];function as(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function us(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?as(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):as(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var ls={input:Uc,default:Ic,output:Hc},cs={default:Yl,straight:cc,step:lc,smoothstep:nc};(0,r.forwardRef)((function(e,t){var n=e.elements,o=void 0===n?[]:n,i=e.className,l=e.nodeTypes,c=void 0===l?ls:l,s=e.edgeTypes,f=void 0===s?cs:s,d=e.onElementClick,p=e.onLoad,h=e.onMove,v=e.onMoveStart,y=e.onMoveEnd,g=e.onElementsRemove,m=e.onConnect,b=e.onConnectStart,w=e.onConnectStop,_=e.onConnectEnd,S=e.onNodeMouseEnter,x=e.onNodeMouseMove,E=e.onNodeMouseLeave,k=e.onNodeContextMenu,O=e.onNodeDoubleClick,P=e.onNodeDragStart,C=e.onNodeDrag,M=e.onNodeDragStop,N=e.onSelectionChange,T=e.onSelectionDragStart,j=e.onSelectionDrag,D=e.onSelectionDragStop,R=e.onSelectionContextMenu,A=e.connectionMode,L=void 0===A?fu.Strict:A,z=e.connectionLineType,I=void 0===z?du.Bezier:z,B=e.connectionLineStyle,U=e.connectionLineComponent,F=e.deleteKeyCode,H=void 0===F?"Backspace":F,V=e.selectionKeyCode,X=void 0===V?"Shift":V,W=e.multiSelectionKeyCode,Y=void 0===W?"Meta":W,$=e.zoomActivationKeyCode,Z=void 0===$?"Meta":$,q=e.snapToGrid,G=void 0!==q&&q,K=e.snapGrid,Q=void 0===K?[15,15]:K,J=e.onlyRenderVisibleElements,ee=void 0!==J&&J,te=e.selectNodesOnDrag,ne=void 0===te||te,re=e.nodesDraggable,oe=e.nodesConnectable,ie=e.elementsSelectable,ae=e.minZoom,ue=e.maxZoom,le=e.defaultZoom,ce=void 0===le?1:le,se=e.defaultPosition,fe=void 0===se?[0,0]:se,de=e.translateExtent,pe=e.nodeExtent,he=e.arrowHeadColor,ve=void 0===he?"#b1b1b7":he,ye=e.markerEndId,ge=e.zoomOnScroll,me=void 0===ge||ge,be=e.zoomOnPinch,we=void 0===be||be,_e=e.panOnScroll,Se=void 0!==_e&&_e,xe=e.panOnScrollSpeed,Ee=void 0===xe?.5:xe,ke=e.panOnScrollMode,Oe=void 0===ke?pu.Free:ke,Pe=e.zoomOnDoubleClick,Ce=void 0===Pe||Pe,Me=e.paneMoveable,Ne=void 0===Me||Me,Te=e.onPaneClick,je=e.onPaneScroll,De=e.onPaneContextMenu,Re=e.children,Ae=e.onEdgeUpdate,Le=e.onEdgeContextMenu,ze=e.onEdgeDoubleClick,Ie=e.onEdgeMouseEnter,Be=e.onEdgeMouseMove,Ue=e.onEdgeMouseLeave,Fe=e.onEdgeUpdateStart,He=e.onEdgeUpdateEnd,Ve=e.edgeUpdaterRadius,Xe=void 0===Ve?10:Ve,We=e.nodeTypesId,Ye=void 0===We?"1":We,$e=e.edgeTypesId,Ze=void 0===$e?"1":$e,qe=a(e,is),Ge=(0,r.useMemo)((function(){return function(e){var t={input:Xc(e.input||Uc),default:Xc(e.default||Ic),output:Xc(e.output||Hc)},n=Object.keys(e).filter((function(e){return!["input","default","output"].includes(e)})).reduce((function(t,n){return t[n]=Xc(e[n]||Ic),t}),{});return Yc(Yc({},t),n)}(c)}),[Ye]),Ke=(0,r.useMemo)((function(){return function(e){var t={default:yc(e.default||Yl),straight:yc(e.bezier||cc),step:yc(e.step||lc),smoothstep:yc(e.step||nc)},n=Object.keys(e).filter((function(e){return!["default","bezier"].includes(e)})).reduce((function(t,n){return t[n]=yc(e[n]||Yl),t}),{});return mc(mc({},t),n)}(f)}),[Ze]),Qe=u(["react-flow",i]);return r.createElement("div",us(us({},qe),{},{ref:t,className:Qe}),r.createElement(rs,null,r.createElement(Cc,{onLoad:p,onMove:h,onMoveStart:v,onMoveEnd:y,onElementClick:d,onNodeMouseEnter:S,onNodeMouseMove:x,onNodeMouseLeave:E,onNodeContextMenu:k,onNodeDoubleClick:O,onNodeDragStart:P,onNodeDrag:C,onNodeDragStop:M,nodeTypes:Ge,edgeTypes:Ke,connectionMode:L,connectionLineType:I,connectionLineStyle:B,connectionLineComponent:U,selectionKeyCode:X,onElementsRemove:g,deleteKeyCode:H,multiSelectionKeyCode:Y,zoomActivationKeyCode:Z,onConnect:m,onConnectStart:b,onConnectStop:w,onConnectEnd:_,snapToGrid:G,snapGrid:Q,onlyRenderVisibleElements:ee,nodesDraggable:re,nodesConnectable:oe,elementsSelectable:ie,selectNodesOnDrag:ne,minZoom:ae,maxZoom:ue,defaultZoom:ce,defaultPosition:fe,translateExtent:de,nodeExtent:pe,arrowHeadColor:ve,markerEndId:ye,zoomOnScroll:me,zoomOnPinch:we,zoomOnDoubleClick:Ce,panOnScroll:Se,panOnScrollSpeed:Ee,panOnScrollMode:Oe,paneMoveable:Ne,onPaneClick:Te,onPaneScroll:je,onPaneContextMenu:De,onSelectionDragStart:T,onSelectionDrag:j,onSelectionDragStop:D,onSelectionContextMenu:R,onEdgeUpdate:Ae,onEdgeContextMenu:Le,onEdgeDoubleClick:ze,onEdgeMouseEnter:Ie,onEdgeMouseMove:Be,onEdgeMouseLeave:Ue,onEdgeUpdateStart:Fe,onEdgeUpdateEnd:He,edgeUpdaterRadius:Xe}),r.createElement(Mc,{elements:o}),N&&r.createElement($c,{onSelectionChange:N}),Re))})).displayName="ReactFlow";var ss=function(e){var t=e.x,n=e.y,o=e.width,i=e.height,a=e.style,l=e.color,c=e.strokeColor,s=e.strokeWidth,f=e.className,d=e.borderRadius,p=e.shapeRendering,h=a||{},v=h.background,y=h.backgroundColor,g=l||v||y;return r.createElement("rect",{className:u(["react-flow__minimap-node",f]),x:t,y:n,rx:d,ry:d,width:o,height:i,fill:g,stroke:c,strokeWidth:s,shapeRendering:p})};ss.displayName="MiniMapNode";var fs;i(fs={},su.Dots,"#81818a"),i(fs,su.Lines,"#eee")},934:(e,t,n)=>{"use strict";n.d(t,{VK:()=>A});var r=n(552),o=n(294),i=n(697),a=n.n(i),u=n(122);function l(e){return"/"===e.charAt(0)}function c(e,t){for(var n=t,r=n+1,o=e.length;r<o;n+=1,r+=1)e[n]=e[r];e.pop()}const s=function(e,t){if(!e)throw new Error("Invariant failed")};function f(e){return"/"===e.charAt(0)?e:"/"+e}function d(e,t){return function(e,t){return 0===e.toLowerCase().indexOf(t.toLowerCase())&&-1!=="/?#".indexOf(e.charAt(t.length))}(e,t)?e.substr(t.length):e}function p(e){return"/"===e.charAt(e.length-1)?e.slice(0,-1):e}function h(e){var t=e.pathname,n=e.search,r=e.hash,o=t||"/";return n&&"?"!==n&&(o+="?"===n.charAt(0)?n:"?"+n),r&&"#"!==r&&(o+="#"===r.charAt(0)?r:"#"+r),o}function v(e,t,n,r){var o;"string"==typeof e?(o=function(e){var t=e||"/",n="",r="",o=t.indexOf("#");-1!==o&&(r=t.substr(o),t=t.substr(0,o));var i=t.indexOf("?");return-1!==i&&(n=t.substr(i),t=t.substr(0,i)),{pathname:t,search:"?"===n?"":n,hash:"#"===r?"":r}}(e)).state=t:(void 0===(o=(0,u.Z)({},e)).pathname&&(o.pathname=""),o.search?"?"!==o.search.charAt(0)&&(o.search="?"+o.search):o.search="",o.hash?"#"!==o.hash.charAt(0)&&(o.hash="#"+o.hash):o.hash="",void 0!==t&&void 0===o.state&&(o.state=t));try{o.pathname=decodeURI(o.pathname)}catch(e){throw e instanceof URIError?new URIError('Pathname "'+o.pathname+'" could not be decoded. This is likely caused by an invalid percent-encoding.'):e}return n&&(o.key=n),r?o.pathname?"/"!==o.pathname.charAt(0)&&(o.pathname=function(e,t){void 0===t&&(t="");var n,r=e&&e.split("/")||[],o=t&&t.split("/")||[],i=e&&l(e),a=t&&l(t),u=i||a;if(e&&l(e)?o=r:r.length&&(o.pop(),o=o.concat(r)),!o.length)return"/";if(o.length){var s=o[o.length-1];n="."===s||".."===s||""===s}else n=!1;for(var f=0,d=o.length;d>=0;d--){var p=o[d];"."===p?c(o,d):".."===p?(c(o,d),f++):f&&(c(o,d),f--)}if(!u)for(;f--;f)o.unshift("..");!u||""===o[0]||o[0]&&l(o[0])||o.unshift("");var h=o.join("/");return n&&"/"!==h.substr(-1)&&(h+="/"),h}(o.pathname,r.pathname)):o.pathname=r.pathname:o.pathname||(o.pathname="/"),o}function y(){var e=null,t=[];return{setPrompt:function(t){return e=t,function(){e===t&&(e=null)}},confirmTransitionTo:function(t,n,r,o){if(null!=e){var i="function"==typeof e?e(t,n):e;"string"==typeof i?"function"==typeof r?r(i,o):o(!0):o(!1!==i)}else o(!0)},appendListener:function(e){var n=!0;function r(){n&&e.apply(void 0,arguments)}return t.push(r),function(){n=!1,t=t.filter((function(e){return e!==r}))}},notifyListeners:function(){for(var e=arguments.length,n=new Array(e),r=0;r<e;r++)n[r]=arguments[r];t.forEach((function(e){return e.apply(void 0,n)}))}}}var g=!("undefined"==typeof window||!window.document||!window.document.createElement);function m(e,t){t(window.confirm(e))}var b="popstate",w="hashchange";function _(){try{return window.history.state||{}}catch(e){return{}}}function S(e){void 0===e&&(e={}),g||s(!1);var t,n=window.history,r=(-1===(t=window.navigator.userAgent).indexOf("Android 2.")&&-1===t.indexOf("Android 4.0")||-1===t.indexOf("Mobile Safari")||-1!==t.indexOf("Chrome")||-1!==t.indexOf("Windows Phone"))&&window.history&&"pushState"in window.history,o=!(-1===window.navigator.userAgent.indexOf("Trident")),i=e,a=i.forceRefresh,l=void 0!==a&&a,c=i.getUserConfirmation,S=void 0===c?m:c,x=i.keyLength,E=void 0===x?6:x,k=e.basename?p(f(e.basename)):"";function O(e){var t=e||{},n=t.key,r=t.state,o=window.location,i=o.pathname+o.search+o.hash;return k&&(i=d(i,k)),v(i,r,n)}function P(){return Math.random().toString(36).substr(2,E)}var C=y();function M(e){(0,u.Z)(F,e),F.length=n.length,C.notifyListeners(F.location,F.action)}function N(e){(function(e){return void 0===e.state&&-1===navigator.userAgent.indexOf("CriOS")})(e)||D(O(e.state))}function T(){D(O(_()))}var j=!1;function D(e){j?(j=!1,M()):C.confirmTransitionTo(e,"POP",S,(function(t){t?M({action:"POP",location:e}):function(e){var t=F.location,n=A.indexOf(t.key);-1===n&&(n=0);var r=A.indexOf(e.key);-1===r&&(r=0);var o=n-r;o&&(j=!0,z(o))}(e)}))}var R=O(_()),A=[R.key];function L(e){return k+h(e)}function z(e){n.go(e)}var I=0;function B(e){1===(I+=e)&&1===e?(window.addEventListener(b,N),o&&window.addEventListener(w,T)):0===I&&(window.removeEventListener(b,N),o&&window.removeEventListener(w,T))}var U=!1,F={length:n.length,action:"POP",location:R,createHref:L,push:function(e,t){var o="PUSH",i=v(e,t,P(),F.location);C.confirmTransitionTo(i,o,S,(function(e){if(e){var t=L(i),a=i.key,u=i.state;if(r)if(n.pushState({key:a,state:u},null,t),l)window.location.href=t;else{var c=A.indexOf(F.location.key),s=A.slice(0,c+1);s.push(i.key),A=s,M({action:o,location:i})}else window.location.href=t}}))},replace:function(e,t){var o="REPLACE",i=v(e,t,P(),F.location);C.confirmTransitionTo(i,o,S,(function(e){if(e){var t=L(i),a=i.key,u=i.state;if(r)if(n.replaceState({key:a,state:u},null,t),l)window.location.replace(t);else{var c=A.indexOf(F.location.key);-1!==c&&(A[c]=i.key),M({action:o,location:i})}else window.location.replace(t)}}))},go:z,goBack:function(){z(-1)},goForward:function(){z(1)},block:function(e){void 0===e&&(e=!1);var t=C.setPrompt(e);return U||(B(1),U=!0),function(){return U&&(U=!1,B(-1)),t()}},listen:function(e){var t=C.appendListener(e);return B(1),function(){B(-1),t()}}};return F}var x=1073741823,E="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:void 0!==n.g?n.g:{};function k(e){var t=[];return{on:function(e){t.push(e)},off:function(e){t=t.filter((function(t){return t!==e}))},get:function(){return e},set:function(n,r){e=n,t.forEach((function(t){return t(e,r)}))}}}const O=o.createContext||function(e,t){var n,i,u,l="__create-react-context-"+((E[u="__global_unique_id__"]=(E[u]||0)+1)+"__"),c=function(e){function n(){var t;return(t=e.apply(this,arguments)||this).emitter=k(t.props.value),t}(0,r.Z)(n,e);var o=n.prototype;return o.getChildContext=function(){var e;return(e={})[l]=this.emitter,e},o.componentWillReceiveProps=function(e){if(this.props.value!==e.value){var n,r=this.props.value,o=e.value;((i=r)===(a=o)?0!==i||1/i==1/a:i!=i&&a!=a)?n=0:(n="function"==typeof t?t(r,o):x,0!=(n|=0)&&this.emitter.set(e.value,n))}var i,a},o.render=function(){return this.props.children},n}(o.Component);c.childContextTypes=((n={})[l]=a().object.isRequired,n);var s=function(t){function n(){var e;return(e=t.apply(this,arguments)||this).state={value:e.getValue()},e.onUpdate=function(t,n){0!=((0|e.observedBits)&n)&&e.setState({value:e.getValue()})},e}(0,r.Z)(n,t);var o=n.prototype;return o.componentWillReceiveProps=function(e){var t=e.observedBits;this.observedBits=null==t?x:t},o.componentDidMount=function(){this.context[l]&&this.context[l].on(this.onUpdate);var e=this.props.observedBits;this.observedBits=null==e?x:e},o.componentWillUnmount=function(){this.context[l]&&this.context[l].off(this.onUpdate)},o.getValue=function(){return this.context[l]?this.context[l].get():e},o.render=function(){return(e=this.props.children,Array.isArray(e)?e[0]:e)(this.state.value);var e},n}(o.Component);return s.contextTypes=((i={})[l]=a().object,i),{Provider:c,Consumer:s}};var P=n(779),C=n.n(P),M=(n(663),n(756)),N=(n(679),function(e){var t=O();return t.displayName="Router-History",t}()),T=function(e){var t=O();return t.displayName="Router",t}(),j=function(e){function t(t){var n;return(n=e.call(this,t)||this).state={location:t.history.location},n._isMounted=!1,n._pendingLocation=null,t.staticContext||(n.unlisten=t.history.listen((function(e){n._isMounted?n.setState({location:e}):n._pendingLocation=e}))),n}(0,r.Z)(t,e),t.computeRootMatch=function(e){return{path:"/",url:"/",params:{},isExact:"/"===e}};var n=t.prototype;return n.componentDidMount=function(){this._isMounted=!0,this._pendingLocation&&this.setState({location:this._pendingLocation})},n.componentWillUnmount=function(){this.unlisten&&this.unlisten()},n.render=function(){return o.createElement(T.Provider,{value:{history:this.props.history,location:this.state.location,match:t.computeRootMatch(this.state.location.pathname),staticContext:this.props.staticContext}},o.createElement(N.Provider,{children:this.props.children||null,value:this.props.history}))},t}(o.Component);o.Component,o.Component;var D={},R=0;o.Component,o.Component,o.Component,o.useContext;var A=function(e){function t(){for(var t,n=arguments.length,r=new Array(n),o=0;o<n;o++)r[o]=arguments[o];return(t=e.call.apply(e,[this].concat(r))||this).history=S(t.props),t}return(0,r.Z)(t,e),t.prototype.render=function(){return o.createElement(j,{history:this.history,children:this.props.children})},t}(o.Component);o.Component;var L=function(e,t){return"function"==typeof e?e(t):e},z=function(e,t){return"string"==typeof e?v(e,null,null,t):e},I=function(e){return e},B=o.forwardRef;void 0===B&&(B=I);var U=B((function(e,t){var n=e.innerRef,r=e.navigate,i=e.onClick,a=(0,M.Z)(e,["innerRef","navigate","onClick"]),l=a.target,c=(0,u.Z)({},a,{onClick:function(e){try{i&&i(e)}catch(t){throw e.preventDefault(),t}e.defaultPrevented||0!==e.button||l&&"_self"!==l||function(e){return!!(e.metaKey||e.altKey||e.ctrlKey||e.shiftKey)}(e)||(e.preventDefault(),r())}});return c.ref=I!==B&&t||n,o.createElement("a",c)})),F=B((function(e,t){var n=e.component,r=void 0===n?U:n,i=e.replace,a=e.to,l=e.innerRef,c=(0,M.Z)(e,["component","replace","to","innerRef"]);return o.createElement(T.Consumer,null,(function(e){e||s(!1);var n=e.history,f=z(L(a,e.location),e.location),d=f?n.createHref(f):"",p=(0,u.Z)({},c,{href:d,navigate:function(){var t=L(a,e.location);(i?n.replace:n.push)(t)}});return I!==B?p.ref=t||l:p.innerRef=l,o.createElement(r,p)}))})),H=function(e){return e},V=o.forwardRef;void 0===V&&(V=H),V((function(e,t){var n=e["aria-current"],r=void 0===n?"page":n,i=e.activeClassName,a=void 0===i?"active":i,l=e.activeStyle,c=e.className,f=e.exact,d=e.isActive,p=e.location,h=e.sensitive,v=e.strict,y=e.style,g=e.to,m=e.innerRef,b=(0,M.Z)(e,["aria-current","activeClassName","activeStyle","className","exact","isActive","location","sensitive","strict","style","to","innerRef"]);return o.createElement(T.Consumer,null,(function(e){e||s(!1);var n=p||e.location,i=z(L(g,n),n),w=i.pathname,_=w&&w.replace(/([.+*?=^!:${}()[\]|/\\])/g,"\\$1"),S=_?function(e,t){void 0===t&&(t={}),("string"==typeof t||Array.isArray(t))&&(t={path:t});var n=t,r=n.path,o=n.exact,i=void 0!==o&&o,a=n.strict,u=void 0!==a&&a,l=n.sensitive,c=void 0!==l&&l;return[].concat(r).reduce((function(t,n){if(!n&&""!==n)return null;if(t)return t;var r=function(e,t){var n=""+t.end+t.strict+t.sensitive,r=D[n]||(D[n]={});if(r[e])return r[e];var o=[],i={regexp:C()(e,o,t),keys:o};return R<1e4&&(r[e]=i,R++),i}(n,{end:i,strict:u,sensitive:c}),o=r.regexp,a=r.keys,l=o.exec(e);if(!l)return null;var s=l[0],f=l.slice(1),d=e===s;return i&&!d?null:{path:n,url:"/"===n&&""===s?"/":s,isExact:d,params:a.reduce((function(e,t,n){return e[t.name]=f[n],e}),{})}}),null)}(n.pathname,{path:_,exact:f,sensitive:h,strict:v}):null,x=!!(d?d(S,n):S),E=x?function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return t.filter((function(e){return e})).join(" ")}(c,a):c,k=x?(0,u.Z)({},y,{},l):y,O=(0,u.Z)({"aria-current":x&&r||null,className:E,style:k,to:i},b);return H!==V?O.ref=t||m:O.innerRef=m,o.createElement(F,O)}))}))},86:(e,t)=>{"use strict";var n="function"==typeof Symbol&&Symbol.for;n&&Symbol.for("react.element"),n&&Symbol.for("react.portal"),n&&Symbol.for("react.fragment"),n&&Symbol.for("react.strict_mode"),n&&Symbol.for("react.profiler"),n&&Symbol.for("react.provider"),n&&Symbol.for("react.context"),n&&Symbol.for("react.async_mode"),n&&Symbol.for("react.concurrent_mode"),n&&Symbol.for("react.forward_ref"),n&&Symbol.for("react.suspense"),n&&Symbol.for("react.suspense_list"),n&&Symbol.for("react.memo"),n&&Symbol.for("react.lazy"),n&&Symbol.for("react.block"),n&&Symbol.for("react.fundamental"),n&&Symbol.for("react.responder"),n&&Symbol.for("react.scope")},663:(e,t,n)=>{"use strict";n(86)},420:function(e,t,n){var r;r=function(e,t,n){return function(){"use strict";var r={"./src/Xarrow/utils/buzzier.js":function(e,t,n){n.r(t),n.d(t,{bzFunction:function(){return r},buzzierMinSols:function(){return o}});var r=function(e,t,n,r){return function(o){return Math.pow(1-o,3)*e+3*Math.pow(1-o,2)*o*t+3*(1-o)*Math.pow(o,2)*n+Math.pow(o,3)*r}},o=function(e,t,n,o){var i=r(e,t,n,o),a=-6*e+12*t-6*n,u=Math.pow(-6*e+12*t-6*n,2)-4*(3*t-3*e)*(-3*e+9*t-9*n+3*o),l=2*(-3*e+9*t-9*n+3*o);return[i((a+Math.sqrt(u))/l),i((a-Math.sqrt(u))/l)]}},"./src/Xarrow/Xarrow.tsx":function(e,t,n){var r=this&&this.__assign||function(){return(r=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)},o=this&&this.__createBinding||(Object.create?function(e,t,n,r){void 0===r&&(r=n),Object.defineProperty(e,r,{enumerable:!0,get:function(){return t[n]}})}:function(e,t,n,r){void 0===r&&(r=n),e[r]=t[n]}),i=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),a=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)"default"!==n&&Object.prototype.hasOwnProperty.call(e,n)&&o(t,e,n);return i(t,e),t},u=this&&this.__spreadArray||function(e,t){for(var n=0,r=t.length,o=e.length;n<r;n++,o++)e[o]=t[n];return e},l=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var c=a(n("react")),s=l(n("./src/Xarrow/useXarrowProps.ts")),f=n("./src/Xwrapper.tsx"),d=l(n("./src/Xarrow/propTypes.ts")),p=n("./src/Xarrow/utils/GetPosition.tsx"),h=(console.log,function(e){var t,n=c.useRef({svgRef:c.useRef(null),lineRef:c.useRef(null),headRef:c.useRef(null),tailRef:c.useRef(null),lineDrawAnimRef:c.useRef(null),lineDashAnimRef:c.useRef(null),headOpacityAnimRef:c.useRef(null)}),o=n.current,i=o.svgRef,a=o.lineRef,l=o.headRef,d=(o.tailRef,o.lineDrawAnimRef),h=o.lineDashAnimRef,v=o.headOpacityAnimRef;c.useContext(f.XarrowContext);var y=s.default(e,n.current),g=y[0],m=g.labels,b=g.lineColor,w=g.headColor,_=g.tailColor,S=g.strokeWidth,x=g.showHead,E=g.showTail,k=g.dashness,O=g.headShape,P=g.tailShape,C=g.showXarrow,M=g.animateDrawing,N=g.zIndex,T=g.passProps,j=g.arrowBodyProps,D=g.arrowHeadProps,R=g.arrowTailProps,A=g.SVGcanvasProps,L=g.divContainerProps,z=g.divContainerStyle,I=g.SVGcanvasStyle,B=g._debug,U=g.shouldUpdatePosition;M=e.animateDrawing;var F=c.useState(!M),H=F[0],V=F[1],X=c.useState({})[1],W=function(){return X({})},Y=c.useState({cx0:0,cy0:0,cw:0,ch:0,x1:0,y1:0,x2:0,y2:0,dx:0,dy:0,absDx:0,absDy:0,cpx1:0,cpy1:0,cpx2:0,cpy2:0,headOrient:0,tailOrient:0,arrowHeadOffset:{x:0,y:0},arrowTailOffset:{x:0,y:0},headOffset:0,excRight:0,excLeft:0,excUp:0,excDown:0,startPoints:[],endPoints:[],mainDivPos:{x:0,y:0},xSign:1,ySign:1,lineLength:0,fHeadSize:1,fTailSize:1,arrowPath:"",labelStartPos:{x:0,y:0},labelMiddlePos:{x:0,y:0},labelEndPos:{x:0,y:0}}),$=Y[0],Z=Y[1];c.useLayoutEffect((function(){if(U.current){var e=p.getPosition(y,n);Z(e),U.current=!1}}));var q=$.x2-$.arrowHeadOffset.x,G=$.y2-$.arrowHeadOffset.y,K=$.x1-$.arrowTailOffset.x,Q=$.y1-$.arrowTailOffset.y,J=k.strokeLen+k.nonStrokeLen,ee=1;k.animation<0&&(k.animation*=-1,ee=-1);var te,ne,re,oe,ie=0;return M&&0==H?("boolean"==typeof M&&(M=1),ne=M+"s",te=$.lineLength,oe=$.lineLength,re=1,M<0&&(oe=(t=[ie,oe])[0],ie=t[1],ne=-1*M+"s")):(te=k.strokeLen+" "+k.nonStrokeLen,ne=1/k.animation+"s",oe=J*ee,re="indefinite",ie=0),c.useLayoutEffect((function(){a.current&&Z((function(e){var t,n;return r(r({},e),{lineLength:null!==(n=null===(t=a.current)||void 0===t?void 0:t.getTotalLength())&&void 0!==n?n:0})}))}),[a.current]),c.useEffect((function(){var e=function(){window.addEventListener("resize",W);var e=function(){var e,t;V(!0),null===(e=v.current)||void 0===e||e.beginElement(),null===(t=h.current)||void 0===t||t.beginElement()},t=function(){return l.current.style.opacity="0"};return d.current&&l.current&&(d.current.addEventListener("endEvent",e),d.current.addEventListener("beginEvent",t)),function(){window.removeEventListener("resize",W),d.current&&(d.current.removeEventListener("endEvent",e),l.current&&d.current.removeEventListener("beginEvent",t))}}();return function(){V(!1),e()}}),[C]),c.default.createElement("div",r({},L,{style:r({position:"absolute",zIndex:N},z)}),C?c.default.createElement(c.default.Fragment,null,c.default.createElement("svg",r({ref:i,width:$.cw,height:$.ch,style:r({position:"absolute",left:$.cx0,top:$.cy0,pointerEvents:"none",border:B?"1px dashed yellow":null},I),overflow:"auto"},A),c.default.createElement("path",r({ref:a,d:$.arrowPath,stroke:b,strokeDasharray:te,strokeWidth:S,fill:"transparent",pointerEvents:"visibleStroke"},T,j),c.default.createElement(c.default.Fragment,null,H?c.default.createElement(c.default.Fragment,null,k.animation?c.default.createElement("animate",{ref:h,attributeName:"stroke-dashoffset",values:J*ee+";0",dur:1/k.animation+"s",repeatCount:"indefinite"}):null):c.default.createElement(c.default.Fragment,null,M?c.default.createElement("animate",{ref:d,id:"svgEndAnimate",attributeName:"stroke-dashoffset",values:oe+";"+ie,dur:ne,repeatCount:re}):null))),E?c.default.createElement("g",r({fill:_,pointerEvents:"auto",transform:"translate("+K+","+Q+") rotate("+$.tailOrient+") scale("+$.fTailSize+")"},T,R),P.svgElem):null,x?c.default.createElement("g",r({ref:l,fill:w,pointerEvents:"auto",transform:"translate("+q+","+G+") rotate("+$.headOrient+") scale("+$.fHeadSize+")",opacity:M&&!H?0:1},T,D),c.default.createElement("animate",{ref:v,dur:"0.4",attributeName:"opacity",from:"0",to:"1",begin:"indefinite",repeatCount:"0",fill:"freeze"}),O.svgElem):null,B?c.default.createElement(c.default.Fragment,null,c.default.createElement("circle",{r:"5",cx:$.cpx1,cy:$.cpy1,fill:"green"}),c.default.createElement("circle",{r:"5",cx:$.cpx2,cy:$.cpy2,fill:"blue"}),c.default.createElement("rect",{x:$.excLeft,y:$.excUp,width:$.absDx,height:$.absDy,fill:"none",stroke:"pink",strokeWidth:"2px"})):null),m.start?c.default.createElement("div",{style:{transform:$.dx<0?"translate(-100% , -50%)":"translate(-0% , -50%)",width:"max-content",position:"absolute",left:$.cx0+$.labelStartPos.x,top:$.cy0+$.labelStartPos.y-S-5}},m.start):null,m.middle?c.default.createElement("div",{style:{display:"table",width:"max-content",transform:"translate(-50% , -50%)",position:"absolute",left:$.cx0+$.labelMiddlePos.x,top:$.cy0+$.labelMiddlePos.y}},m.middle):null,m.end?c.default.createElement("div",{style:{transform:$.dx>0?"translate(-100% , -50%)":"translate(-0% , -50%)",width:"max-content",position:"absolute",left:$.cx0+$.labelEndPos.x,top:$.cy0+$.labelEndPos.y+S+5}},m.end):null,B?c.default.createElement(c.default.Fragment,null,u(u([],$.startPoints),$.endPoints).map((function(e,t){return c.default.createElement("div",{key:t,style:{background:"gray",opacity:.5,borderRadius:"50%",transform:"translate(-50%, -50%)",height:5,width:5,position:"absolute",left:e.x-$.mainDivPos.x,top:e.y-$.mainDivPos.y}})}))):null):null)});h.propTypes=d.default,t.default=h},"./src/Xarrow/anchors.ts":function(e,t,n){e=n.nmd(e),Object.defineProperty(t,"__esModule",{value:!0}),t.calcAnchors=void 0,t.calcAnchors=function(e,t){return e.map((function(e){var n,r,o=(n=t.right-t.x,r=t.bottom-t.y,{middle:{x:.5*n,y:.5*r},left:{x:0,y:.5*r},right:{x:n,y:.5*r},top:{x:.5*n,y:0},bottom:{x:.5*n,y:r}})[e.position],i=o.x,a=o.y;return{x:t.x+i+e.offset.x,y:t.y+a+e.offset.y,anchor:e}}))},n.c[n.s]},"./src/Xarrow/propTypes.ts":function(e,t,n){var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var o=r(n("prop-types")),i=n("./src/constants.tsx"),a=o.default.oneOf(i.cAnchorEdge),u=o.default.exact({position:a.isRequired,offset:o.default.exact({x:o.default.number,y:o.default.number}).isRequired}),l=o.default.oneOfType([a,u]),c=o.default.oneOfType([l,o.default.arrayOf(l)]),s=o.default.oneOfType([o.default.string,o.default.exact({current:o.default.any})]),f=o.default.oneOfType([o.default.element,o.default.string]),d=o.default.exact({start:f,middle:f,end:f}),p=o.default.oneOf(Object.keys(i.arrowShapes)),h=o.default.any,v=o.default.oneOfType([p,o.default.exact({svgElem:h,offsetForward:o.default.number}).isRequired]),y={start:s.isRequired,end:s.isRequired,startAnchor:c,endAnchor:c,labels:o.default.oneOfType([f,d]),color:o.default.string,lineColor:o.default.string,showHead:o.default.bool,headColor:o.default.string,headSize:o.default.number,tailSize:o.default.number,tailColor:o.default.string,strokeWidth:o.default.number,showTail:o.default.bool,path:o.default.oneOf(i.cPaths),showXarrow:o.default.bool,curveness:o.default.number,gridBreak:o.default.string,dashness:o.default.oneOfType([o.default.bool,o.default.object]),headShape:v,tailShape:v,animateDrawing:o.default.oneOfType([o.default.bool,o.default.number]),zIndex:o.default.number,passProps:o.default.object,arrowBodyProps:o.default.object,arrowHeadProps:o.default.object,arrowTailProps:o.default.object,SVGcanvasProps:o.default.object,divContainerProps:o.default.object,_extendSVGcanvas:o.default.number,_debug:o.default.bool,_cpx1Offset:o.default.number,_cpy1Offset:o.default.number,_cpx2Offset:o.default.number,_cpy2Offset:o.default.number};t.default=y},"./src/Xarrow/useXarrowProps.ts":function(e,t,n){var r=this&&this.__assign||function(){return(r=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)},o=this&&this.__createBinding||(Object.create?function(e,t,n,r){void 0===r&&(r=n),Object.defineProperty(e,r,{enumerable:!0,get:function(){return t[n]}})}:function(e,t,n,r){void 0===r&&(r=n),e[r]=t[n]}),i=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),a=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)"default"!==n&&Object.prototype.hasOwnProperty.call(e,n)&&o(t,e,n);return i(t,e),t},u=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var l=a(n("react")),c=n("./src/Xarrow/utils/index.ts"),s=u(n("lodash")),f=n("./src/constants.tsx"),d=function(e){var t=(Array.isArray(e)?e:[e]).map((function(e){return"string"==typeof e?{position:e}:e}));0==(t=t.filter((function(e){return f.cAnchorEdge.includes(e.position)}))).length&&(t=[{position:"auto"}]);var n=t.filter((function(e){return"auto"===e.position}));return n.length>0&&(t=t.filter((function(e){return"auto"!==e.position}))).push.apply(t,n.flatMap((function(e){return["left","right","top","bottom"].map((function(t){return r(r({},e),{position:t})}))}))),t.map((function(e){if("object"==typeof e){var t=e;return t.position||(t.position="auto"),t.offset||(t.offset={x:0,y:0}),t.offset.y||(t.offset.y=0),t.offset.x||(t.offset.x=0),t}return e}))},p=function(e){return"string"==typeof e&&(e in f.arrowShapes?e=f.arrowShapes[e]:(console.warn("'"+e+"' is not supported arrow shape. the supported arrow shapes is one of "+f.cArrowShapes+".\n           reverting to default shape."),e=f.arrowShapes.arrow1)),void 0===(null==(e=e)?void 0:e.offsetForward)&&(e.offsetForward=.25),void 0===(null==e?void 0:e.svgElem)&&(e.svgElem="path"),e},h=function(e,t){return t&&(t.current=!0),e},v=function(e){return e},y=function(e,t,n){return h(e,n)},g=function(e,t,n){return h(Number(e),n)},m={start:function(e){return c.getElementByPropGiven(e)},end:function(e){return c.getElementByPropGiven(e)},startAnchor:function(e,t,n){return h(d(e),n)},endAnchor:function(e,t,n){return h(d(e),n)},labels:function(e){return function(e){var t={start:null,middle:null,end:null};if(e)if("string"==typeof e||l.default.isValidElement(e))t.middle=e;else for(var n in e)t[n]=e[n];return t}(e)},color:v,lineColor:function(e,t){return e||t.color},headColor:function(e,t){return e||t.color},tailColor:function(e,t){return e||t.color},strokeWidth:g,showHead:y,headSize:g,showTail:y,tailSize:g,path:y,curveness:g,gridBreak:function(e,t,n){return h((r=e,(o=c.xStr2absRelative(r))||(o={relative:.5,abs:0}),o),n);var r,o},dashness:function(e,t){return r=t,i=0,a=0,"object"==typeof(n=e)?(i=n.strokeLen||2*r.strokeWidth,a=n.strokeLen?n.nonStrokeLen:r.strokeWidth,o=n.animation?n.animation:null):"boolean"==typeof n&&n&&(i=2*r.strokeWidth,a=r.strokeWidth,o=null),{strokeLen:i,nonStrokeLen:a,animation:o,animDirection:1};var n,r,o,i,a},headShape:function(e){return p(e)},tailShape:function(e){return p(e)},showXarrow:v,animateDrawing:v,zIndex:function(e){return Number(e)},passProps:v,arrowBodyProps:y,arrowHeadProps:y,arrowTailProps:y,SVGcanvasProps:y,divContainerProps:y,divContainerStyle:y,SVGcanvasStyle:y,_extendSVGcanvas:y,_debug:y,_cpx1Offset:y,_cpy1Offset:y,_cpx2Offset:y,_cpy2Offset:y},b={};for(var w in m)b[w]=[w];for(var _=0,S=["lineColor","headColor","tailColor"];_<S.length;_++)b[w=S[_]].push("color");var x={start:null,end:null,startAnchor:"auto",endAnchor:"auto",labels:null,color:"CornflowerBlue",lineColor:null,headColor:null,tailColor:null,strokeWidth:4,showHead:!0,headSize:6,showTail:!1,tailSize:6,path:"smooth",curveness:.8,gridBreak:"50%",dashness:!1,headShape:"arrow1",tailShape:"arrow1",showXarrow:!0,animateDrawing:!1,zIndex:0,passProps:{},arrowBodyProps:{},arrowHeadProps:{},arrowTailProps:{},SVGcanvasProps:{},divContainerProps:{},divContainerStyle:{},SVGcanvasStyle:{},_extendSVGcanvas:0,_debug:!1,_cpx1Offset:0,_cpy1Offset:0,_cpx2Offset:0,_cpy2Offset:0},E={};E=function(e,t){for(var n,r=0,o=Object.entries(e);r<o.length;r++){var i=o[r],a=i[0],u=i[1];t[a]=null===(n=null==m?void 0:m[a])||void 0===n?void 0:n.call(m,u,t)}return t}(x,E);var k={startPos:{x:0,y:0,right:0,bottom:0},endPos:{x:0,y:0,right:0,bottom:0}};function O(e){var t,n,r=l.useRef();return t=e,n=r.current,s.default.isEqual(t,n)||(r.current=e),r.current}function P(e,t){l.useLayoutEffect(e,t.map(O))}t.default=function(e,t){var n=l.useState(E),o=n[0],i=n[1],a=l.useRef(!1);o.shouldUpdatePosition=a;var u=r(r({},x),e),s=function(t){l.useLayoutEffect((function(){var e;o[t]=null===(e=null==m?void 0:m[t])||void 0===e?void 0:e.call(m,u[t],o,a),i(r({},o))}),b[t].map((function(t){return e[t]})))};for(var f in x)s(f);var d=l.useState(k),p=d[0],h=d[1],v=c.getElemPos(o.start);P((function(){p.startPos=v,a.current=!0,h(r({},p))}),[v]);var y=c.getElemPos(o.end);return P((function(){p.endPos=y,a.current=!0,h(r({},p))}),[y]),l.useLayoutEffect((function(){a.current=!0,h(r({},p))}),[o.headShape.svgElem,o.tailShape.svgElem]),[o,p]}},"./src/Xarrow/utils/GetPosition.tsx":function(e,t,n){var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.getPosition=void 0;var o=n("./src/Xarrow/anchors.ts"),i=n("./src/Xarrow/utils/index.ts"),a=r(n("lodash")),u=n("./src/constants.tsx"),l=n("./src/Xarrow/utils/buzzier.js");t.getPosition=function(e,t){var n,r,c,s,f=e[0],d=e[1],p=f.startAnchor,h=f.endAnchor,v=f.strokeWidth,y=f.showHead,g=f.headSize,m=f.showTail,b=f.tailSize,w=f.path,_=f.curveness,S=f.gridBreak,x=f.headShape,E=f.tailShape,k=f._extendSVGcanvas,O=f._cpx1Offset,P=f._cpy1Offset,C=f._cpx2Offset,M=f._cpy2Offset,N=d.startPos,T=d.endPos,j=t.current,D=j.svgRef,R=j.lineRef,A=0,L=0,z=o.calcAnchors(p,N),I=o.calcAnchors(h,T),B=i.getShortestLine(z,I),U=B.chosenStart,F=B.chosenEnd,H=U.anchor.position,V=F.anchor.position,X=a.default.pick(U,["x","y"]),W=a.default.pick(F,["x","y"]),Y=i.getSvgPos(D),$=Math.min(X.x,W.x)-Y.x,Z=Math.min(X.y,W.y)-Y.y,q=W.x-X.x,G=W.y-X.y,K=Math.abs(W.x-X.x),Q=Math.abs(W.y-X.y),J=q>0?1:-1,ee=G>0?1:-1,te=[x.offsetForward,E.offsetForward],ne=te[0],re=te[1],oe=g*v,ie=b*v,ae=0,ue=0,le=0,ce=0,se=oe*ne,fe=ie*re,de=Number(_);u.cPaths.includes(w)||(w="smooth"),"straight"===w&&(de=0,w="smooth");var pe=v+v*(g>b?g:b)/2,he=pe,ve=pe,ye=pe,ge=pe;ve+=Number(k),he+=Number(k),ye+=Number(k),ge+=Number(k);var me=0,be=K,we=0,_e=Q;if(q<0&&(me=(n=[be,me])[0],be=n[1]),G<0&&(we=(r=[_e,we])[0],_e=r[1]),0===de){var Se=Math.atan(Q/K);y&&(be-=oe*(1-ne)*J*Math.cos(Se),_e-=oe*(1-ne)*ee*Math.sin(Se),Se*=ee,J<0&&(Se=(Math.PI-Se*J)*J),ae=Math.cos(Se)*se-Math.sin(Se)*oe/2,ue=Math.cos(Se)*oe/2+Math.sin(Se)*se,A=180*Se/Math.PI);var xe=Math.atan(Q/K);m&&(me+=ie*(1-re)*J*Math.cos(xe),we+=ie*(1-re)*ee*Math.sin(xe),xe*=-ee,J>0&&(xe=(Math.PI-xe*J)*J),le=Math.cos(xe)*fe-Math.sin(xe)*ie/2,ce=Math.cos(xe)*ie/2+Math.sin(xe)*fe,L=180*xe/Math.PI)}else"middle"===V&&(V=K>Q?J?"left":"right":ee?"top":"bottom"),y&&(["left","right"].includes(V)?(ae+=se*J,be-=oe*(1-ne)*J,ue+=oe*J/2,"left"===V?(A=0,J<0&&(A+=180)):(A=180,J>0&&(A+=180))):["top","bottom"].includes(V)&&(ae+=oe*-ee/2,_e-=oe*ee-(ue+=se*ee),"top"===V?(A=270,ee>0&&(A+=180)):(A=90,ee<0&&(A+=180))));m&&0!==de&&(["left","right"].includes(H)?(me+=ie*J+(le+=fe*-J),ce+=-ie*J/2,"left"===H?(L=180,J<0&&(L+=180)):(L=0,J>0&&(L+=180))):["top","bottom"].includes(H)&&(we+=ie*ee+(ce+=fe*-ee),le+=ie*ee/2,"top"===H?(L=90,ee>0&&(L+=180)):(L=270,ee<0&&(L+=180))));var Ee={x:ae,y:ue},ke={x:le,y:ce},Oe=me,Pe=we,Ce=be,Me=_e,Ne={};"smooth"===w?Ne={hh:function(){Oe+=K*de*J,Ce-=K*de*J},vv:function(){Pe+=Q*de*ee,Me-=Q*de*ee},hv:function(){Oe+=K*de*J,Me-=Q*de*ee},vh:function(){Pe+=Q*de*ee,Ce-=K*de*J}}:"grid"===w&&(Ne={hh:function(){Oe+=(K*S.relative+S.abs)*J,Ce-=(K*(1-S.relative)-S.abs)*J,y&&(Oe-=oe*(1-ne)/2*J,Ce+=oe*(1-ne)/2*J),m&&(Oe-=ie*(1-re)/2*J,Ce+=ie*(1-re)/2*J)},vv:function(){Pe+=(Q*S.relative+S.abs)*ee,Me-=(Q*(1-S.relative)-S.abs)*ee,y&&(Pe-=oe*(1-ne)/2*ee,Me+=oe*(1-ne)/2*ee),m&&(Pe-=ie*(1-re)/2*ee,Me+=ie*(1-re)/2*ee)},hv:function(){Oe=be},vh:function(){Pe=_e}});var Te="";["left","right"].includes(H)?Te+="h":["bottom","top"].includes(H)?Te+="v":"middle"===H&&(Te+="m"),["left","right"].includes(V)?Te+="h":["bottom","top"].includes(V)?Te+="v":"middle"===V&&(Te+="m"),Ne[Te=K>Q?Te.replace(/m/g,"h"):Te.replace(/m/g,"v")](),Oe+=O,Pe+=P,Ce+=C,Me+=M;var je=l.buzzierMinSols(me,Oe,Ce,be),De=je[0],Re=je[1],Ae=l.buzzierMinSols(we,Pe,Me,_e),Le=Ae[0],ze=Ae[1];De<0&&(ve+=-De),Re>K&&(he+=Re-K),Le<0&&(ye+=-Le),ze>Q&&(ge+=ze-Q),"grid"===w&&(ve+=pe,he+=pe,ye+=pe,ge+=pe),me+=ve,be+=ve,we+=ye,_e+=ye,Oe+=ve,Ce+=ve,Pe+=ye,Me+=ye;var Ie=K+ve+he,Be=Q+ye+ge;$-=ve,Z-=ye;var Ue,Fe=l.bzFunction(me,Oe,Ce,be),He=l.bzFunction(we,Pe,Me,_e),Ve={x:Fe(.01),y:He(.01)},Xe={x:Fe(.5),y:He(.5)},We={x:Fe(.99),y:He(.99)};return"grid"===w?Ue="M "+me+" "+we+" L  "+Oe+" "+Pe+" L "+Ce+" "+Me+" "+be+" "+_e:"smooth"===w&&(Ue="M "+me+" "+we+" C "+Oe+" "+Pe+", "+Ce+" "+Me+", "+be+" "+_e),{cx0:$,cy0:Z,x1:me,x2:be,y1:we,y2:_e,cw:Ie,ch:Be,cpx1:Oe,cpy1:Pe,cpx2:Ce,cpy2:Me,dx:q,dy:G,absDx:K,absDy:Q,headOrient:A,tailOrient:L,labelStartPos:Ve,labelMiddlePos:Xe,labelEndPos:We,excLeft:ve,excRight:he,excUp:ye,excDown:ge,headOffset:se,arrowHeadOffset:Ee,arrowTailOffset:ke,startPoints:z,endPoints:I,mainDivPos:Y,xSign:J,ySign:ee,lineLength:null!==(s=null===(c=R.current)||void 0===c?void 0:c.getTotalLength())&&void 0!==s?s:0,fHeadSize:oe,fTailSize:ie,arrowPath:Ue}}},"./src/Xarrow/utils/index.ts":function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.getSvgPos=t.getElemPos=t.getShortestLine=t.xStr2absRelative=t.factorDpathStr=t.getElementByPropGiven=void 0,t.getElementByPropGiven=function(e){return"string"==typeof e?document.getElementById(e):null==e?void 0:e.current},t.factorDpathStr=function(e,t){var n=e.split(/(\d+(?:\.\d+)?)/);return(n=n.map((function(e){return Number(e)?(Number(e)*t).toString():e}))).join("")},t.xStr2absRelative=function(e){if("string"!=typeof e)return{abs:0,relative:.5};var t=e.split("%"),n=0,r=0;if(1==t.length){var o=parseFloat(t[0]);if(!isNaN(o))return{abs:n=o,relative:0}}else if(2==t.length){var i=[parseFloat(t[0]),parseFloat(t[1])],a=i[0],u=i[1];if(isNaN(a)||(r=a/100),isNaN(u)||(n=u),!isNaN(a)||!isNaN(u))return{abs:n,relative:r}}},t.getShortestLine=function(e,t){var n,r=1/0,o=1/0;return e.forEach((function(e){t.forEach((function(t){var i,a;i=e,a=t,(o=Math.sqrt(Math.pow(i.x-a.x,2)+Math.pow(i.y-a.y,2)))<r&&(r=o,n={chosenStart:e,chosenEnd:t})}))})),n},t.getElemPos=function(e){if(!e)return{x:0,y:0,right:0,bottom:0};var t=e.getBoundingClientRect();return{x:t.left,y:t.top,right:t.right,bottom:t.bottom}},t.getSvgPos=function(e){if(!e.current)return{x:0,y:0};var t=e.current.getBoundingClientRect(),n=t.left,r=t.top,o=getComputedStyle(e.current);return{x:n-Number(o.left.slice(0,-2)),y:r-Number(o.top.slice(0,-2))}}},"./src/Xwrapper.tsx":function(e,t,n){var r=this&&this.__createBinding||(Object.create?function(e,t,n,r){void 0===r&&(r=n),Object.defineProperty(e,r,{enumerable:!0,get:function(){return t[n]}})}:function(e,t,n,r){void 0===r&&(r=n),e[r]=t[n]}),o=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),i=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)"default"!==n&&Object.prototype.hasOwnProperty.call(e,n)&&r(t,e,n);return o(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.XarrowContext=t.XelemContext=void 0;var a=i(n("react"));t.XelemContext=a.default.createContext(null),t.XarrowContext=a.default.createContext(null);var u={},l=0,c=(console.log,function(e){var n=e.children,r=e.instanceCount;return a.default.createElement(t.XelemContext.Provider,{value:u[r.current]},n)});t.default=function(e){var n=e.children,r=a.useRef(l),o=a.useState({})[1];return a.useEffect((function(){return l++,o({}),function(){delete u[r.current]}}),[]),a.default.createElement(c,{instanceCount:r},a.default.createElement((console.log,function(e){var n=e.children,r=e.instanceCount,o=a.useState({})[1],i=function(){return o({})};return a.useEffect((function(){r.current=l,u[r.current]=i}),[]),a.default.createElement(t.XarrowContext.Provider,{value:i},n)}),{instanceCount:r},n))}},"./src/constants.tsx":function(e,t,n){var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.cArrowShapes=t.arrowShapes=t.cSvgElems=t.cPaths=t.cAnchorEdge=void 0;var o=r(n("react"));t.cAnchorEdge=["middle","left","right","top","bottom","auto"],t.cPaths=["smooth","grid","straight"],t.cSvgElems=["circle","ellipse","line","path","polygon","polyline","rect"],t.arrowShapes={arrow1:{svgElem:o.default.createElement("path",{d:"M 0 0 L 1 0.5 L 0 1 L 0.25 0.5 z"}),offsetForward:.25},heart:{svgElem:o.default.createElement("path",{d:"M 0,0.25 A 0.125,0.125 0,0,1 0.5,0.25 A 0.125,0.125 0,0,1 1,0.25 Q 1,0.625 0.5,1 Q 0,0.625 0,0.25 z"}),offsetForward:.1},circle:{svgElem:o.default.createElement("circle",{r:.5,cx:.5,cy:.5}),offsetForward:0}},t.cArrowShapes=Object.keys(t.arrowShapes)},"./src/index.tsx":function(e,t,n){var r=this&&this.__createBinding||(Object.create?function(e,t,n,r){void 0===r&&(r=n),Object.defineProperty(e,r,{enumerable:!0,get:function(){return t[n]}})}:function(e,t,n,r){void 0===r&&(r=n),e[r]=t[n]}),o=this&&this.__exportStar||function(e,t){for(var n in e)"default"===n||Object.prototype.hasOwnProperty.call(t,n)||r(t,e,n)},i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.useXarrow=t.Xwrapper=t.default=void 0;var a=n("./src/Xarrow/Xarrow.tsx");Object.defineProperty(t,"default",{enumerable:!0,get:function(){return i(a).default}}),o(n("./src/types.ts"),t),o(n("./src/constants.tsx"),t);var u=n("./src/Xwrapper.tsx");Object.defineProperty(t,"Xwrapper",{enumerable:!0,get:function(){return i(u).default}});var l=n("./src/useXarrow.tsx");Object.defineProperty(t,"useXarrow",{enumerable:!0,get:function(){return i(l).default}})},"./src/types.ts":function(e,t){Object.defineProperty(t,"__esModule",{value:!0})},"./src/useXarrow.tsx":function(e,t,n){Object.defineProperty(t,"__esModule",{value:!0});var r=n("react"),o=n("./src/Xwrapper.tsx");t.default=function(){var e=r.useState({})[1],t=r.useContext(o.XelemContext);return t||(t=function(){}),r.useLayoutEffect((function(){t()})),function(){return e({})}}},lodash:function(e){e.exports=t},"prop-types":function(e){e.exports=n},react:function(t){t.exports=e}},o={};function i(e){var t=o[e];if(void 0!==t)return t.exports;var n=o[e]={id:e,loaded:!1,exports:{}};return r[e].call(n.exports,n,n.exports,i),n.loaded=!0,n.exports}return i.c=o,i.d=function(e,t){for(var n in t)i.o(t,n)&&!i.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},i.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},i.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},i.nmd=function(e){return e.paths=[],e.children||(e.children=[]),e},i(i.s="./src/index.tsx")}()},e.exports=r(n(294),n(486),n(697))},408:(e,t,n)=>{"use strict";var r=n(418),o=60103,i=60106;t.Fragment=60107,t.StrictMode=60108,t.Profiler=60114;var a=60109,u=60110,l=60112;t.Suspense=60113;var c=60115,s=60116;if("function"==typeof Symbol&&Symbol.for){var f=Symbol.for;o=f("react.element"),i=f("react.portal"),t.Fragment=f("react.fragment"),t.StrictMode=f("react.strict_mode"),t.Profiler=f("react.profiler"),a=f("react.provider"),u=f("react.context"),l=f("react.forward_ref"),t.Suspense=f("react.suspense"),c=f("react.memo"),s=f("react.lazy")}var d="function"==typeof Symbol&&Symbol.iterator;function p(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var h={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},v={};function y(e,t,n){this.props=e,this.context=t,this.refs=v,this.updater=n||h}function g(){}function m(e,t,n){this.props=e,this.context=t,this.refs=v,this.updater=n||h}y.prototype.isReactComponent={},y.prototype.setState=function(e,t){if("object"!=typeof e&&"function"!=typeof e&&null!=e)throw Error(p(85));this.updater.enqueueSetState(this,e,t,"setState")},y.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},g.prototype=y.prototype;var b=m.prototype=new g;b.constructor=m,r(b,y.prototype),b.isPureReactComponent=!0;var w={current:null},_=Object.prototype.hasOwnProperty,S={key:!0,ref:!0,__self:!0,__source:!0};function x(e,t,n){var r,i={},a=null,u=null;if(null!=t)for(r in void 0!==t.ref&&(u=t.ref),void 0!==t.key&&(a=""+t.key),t)_.call(t,r)&&!S.hasOwnProperty(r)&&(i[r]=t[r]);var l=arguments.length-2;if(1===l)i.children=n;else if(1<l){for(var c=Array(l),s=0;s<l;s++)c[s]=arguments[s+2];i.children=c}if(e&&e.defaultProps)for(r in l=e.defaultProps)void 0===i[r]&&(i[r]=l[r]);return{$$typeof:o,type:e,key:a,ref:u,props:i,_owner:w.current}}function E(e){return"object"==typeof e&&null!==e&&e.$$typeof===o}var k=/\/+/g;function O(e,t){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+e.replace(/[=:]/g,(function(e){return t[e]}))}(""+e.key):t.toString(36)}function P(e,t,n,r,a){var u=typeof e;"undefined"!==u&&"boolean"!==u||(e=null);var l=!1;if(null===e)l=!0;else switch(u){case"string":case"number":l=!0;break;case"object":switch(e.$$typeof){case o:case i:l=!0}}if(l)return a=a(l=e),e=""===r?"."+O(l,0):r,Array.isArray(a)?(n="",null!=e&&(n=e.replace(k,"$&/")+"/"),P(a,t,n,"",(function(e){return e}))):null!=a&&(E(a)&&(a=function(e,t){return{$$typeof:o,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}}(a,n+(!a.key||l&&l.key===a.key?"":(""+a.key).replace(k,"$&/")+"/")+e)),t.push(a)),1;if(l=0,r=""===r?".":r+":",Array.isArray(e))for(var c=0;c<e.length;c++){var s=r+O(u=e[c],c);l+=P(u,t,n,s,a)}else if("function"==typeof(s=function(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=d&&e[d]||e["@@iterator"])?e:null}(e)))for(e=s.call(e),c=0;!(u=e.next()).done;)l+=P(u=u.value,t,n,s=r+O(u,c++),a);else if("object"===u)throw t=""+e,Error(p(31,"[object Object]"===t?"object with keys {"+Object.keys(e).join(", ")+"}":t));return l}function C(e,t,n){if(null==e)return e;var r=[],o=0;return P(e,r,"","",(function(e){return t.call(n,e,o++)})),r}function M(e){if(-1===e._status){var t=e._result;t=t(),e._status=0,e._result=t,t.then((function(t){0===e._status&&(t=t.default,e._status=1,e._result=t)}),(function(t){0===e._status&&(e._status=2,e._result=t)}))}if(1===e._status)return e._result;throw e._result}var N={current:null};function T(){var e=N.current;if(null===e)throw Error(p(321));return e}var j={ReactCurrentDispatcher:N,ReactCurrentBatchConfig:{transition:0},ReactCurrentOwner:w,IsSomeRendererActing:{current:!1},assign:r};t.Children={map:C,forEach:function(e,t,n){C(e,(function(){t.apply(this,arguments)}),n)},count:function(e){var t=0;return C(e,(function(){t++})),t},toArray:function(e){return C(e,(function(e){return e}))||[]},only:function(e){if(!E(e))throw Error(p(143));return e}},t.Component=y,t.PureComponent=m,t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=j,t.cloneElement=function(e,t,n){if(null==e)throw Error(p(267,e));var i=r({},e.props),a=e.key,u=e.ref,l=e._owner;if(null!=t){if(void 0!==t.ref&&(u=t.ref,l=w.current),void 0!==t.key&&(a=""+t.key),e.type&&e.type.defaultProps)var c=e.type.defaultProps;for(s in t)_.call(t,s)&&!S.hasOwnProperty(s)&&(i[s]=void 0===t[s]&&void 0!==c?c[s]:t[s])}var s=arguments.length-2;if(1===s)i.children=n;else if(1<s){c=Array(s);for(var f=0;f<s;f++)c[f]=arguments[f+2];i.children=c}return{$$typeof:o,type:e.type,key:a,ref:u,props:i,_owner:l}},t.createContext=function(e,t){return void 0===t&&(t=null),(e={$$typeof:u,_calculateChangedBits:t,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null}).Provider={$$typeof:a,_context:e},e.Consumer=e},t.createElement=x,t.createFactory=function(e){var t=x.bind(null,e);return t.type=e,t},t.createRef=function(){return{current:null}},t.forwardRef=function(e){return{$$typeof:l,render:e}},t.isValidElement=E,t.lazy=function(e){return{$$typeof:s,_payload:{_status:-1,_result:e},_init:M}},t.memo=function(e,t){return{$$typeof:c,type:e,compare:void 0===t?null:t}},t.useCallback=function(e,t){return T().useCallback(e,t)},t.useContext=function(e,t){return T().useContext(e,t)},t.useDebugValue=function(){},t.useEffect=function(e,t){return T().useEffect(e,t)},t.useImperativeHandle=function(e,t,n){return T().useImperativeHandle(e,t,n)},t.useLayoutEffect=function(e,t){return T().useLayoutEffect(e,t)},t.useMemo=function(e,t){return T().useMemo(e,t)},t.useReducer=function(e,t,n){return T().useReducer(e,t,n)},t.useRef=function(e){return T().useRef(e)},t.useState=function(e){return T().useState(e)},t.version="17.0.2"},294:(e,t,n)=>{"use strict";e.exports=n(408)},53:(e,t)=>{"use strict";var n,r,o,i;if("object"==typeof performance&&"function"==typeof performance.now){var a=performance;t.unstable_now=function(){return a.now()}}else{var u=Date,l=u.now();t.unstable_now=function(){return u.now()-l}}if("undefined"==typeof window||"function"!=typeof MessageChannel){var c=null,s=null,f=function(){if(null!==c)try{var e=t.unstable_now();c(!0,e),c=null}catch(e){throw setTimeout(f,0),e}};n=function(e){null!==c?setTimeout(n,0,e):(c=e,setTimeout(f,0))},r=function(e,t){s=setTimeout(e,t)},o=function(){clearTimeout(s)},t.unstable_shouldYield=function(){return!1},i=t.unstable_forceFrameRate=function(){}}else{var d=window.setTimeout,p=window.clearTimeout;if("undefined"!=typeof console){var h=window.cancelAnimationFrame;"function"!=typeof window.requestAnimationFrame&&console.error("This browser doesn't support requestAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills"),"function"!=typeof h&&console.error("This browser doesn't support cancelAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills")}var v=!1,y=null,g=-1,m=5,b=0;t.unstable_shouldYield=function(){return t.unstable_now()>=b},i=function(){},t.unstable_forceFrameRate=function(e){0>e||125<e?console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"):m=0<e?Math.floor(1e3/e):5};var w=new MessageChannel,_=w.port2;w.port1.onmessage=function(){if(null!==y){var e=t.unstable_now();b=e+m;try{y(!0,e)?_.postMessage(null):(v=!1,y=null)}catch(e){throw _.postMessage(null),e}}else v=!1},n=function(e){y=e,v||(v=!0,_.postMessage(null))},r=function(e,n){g=d((function(){e(t.unstable_now())}),n)},o=function(){p(g),g=-1}}function S(e,t){var n=e.length;e.push(t);e:for(;;){var r=n-1>>>1,o=e[r];if(!(void 0!==o&&0<k(o,t)))break e;e[r]=t,e[n]=o,n=r}}function x(e){return void 0===(e=e[0])?null:e}function E(e){var t=e[0];if(void 0!==t){var n=e.pop();if(n!==t){e[0]=n;e:for(var r=0,o=e.length;r<o;){var i=2*(r+1)-1,a=e[i],u=i+1,l=e[u];if(void 0!==a&&0>k(a,n))void 0!==l&&0>k(l,a)?(e[r]=l,e[u]=n,r=u):(e[r]=a,e[i]=n,r=i);else{if(!(void 0!==l&&0>k(l,n)))break e;e[r]=l,e[u]=n,r=u}}}return t}return null}function k(e,t){var n=e.sortIndex-t.sortIndex;return 0!==n?n:e.id-t.id}var O=[],P=[],C=1,M=null,N=3,T=!1,j=!1,D=!1;function R(e){for(var t=x(P);null!==t;){if(null===t.callback)E(P);else{if(!(t.startTime<=e))break;E(P),t.sortIndex=t.expirationTime,S(O,t)}t=x(P)}}function A(e){if(D=!1,R(e),!j)if(null!==x(O))j=!0,n(L);else{var t=x(P);null!==t&&r(A,t.startTime-e)}}function L(e,n){j=!1,D&&(D=!1,o()),T=!0;var i=N;try{for(R(n),M=x(O);null!==M&&(!(M.expirationTime>n)||e&&!t.unstable_shouldYield());){var a=M.callback;if("function"==typeof a){M.callback=null,N=M.priorityLevel;var u=a(M.expirationTime<=n);n=t.unstable_now(),"function"==typeof u?M.callback=u:M===x(O)&&E(O),R(n)}else E(O);M=x(O)}if(null!==M)var l=!0;else{var c=x(P);null!==c&&r(A,c.startTime-n),l=!1}return l}finally{M=null,N=i,T=!1}}var z=i;t.unstable_IdlePriority=5,t.unstable_ImmediatePriority=1,t.unstable_LowPriority=4,t.unstable_NormalPriority=3,t.unstable_Profiling=null,t.unstable_UserBlockingPriority=2,t.unstable_cancelCallback=function(e){e.callback=null},t.unstable_continueExecution=function(){j||T||(j=!0,n(L))},t.unstable_getCurrentPriorityLevel=function(){return N},t.unstable_getFirstCallbackNode=function(){return x(O)},t.unstable_next=function(e){switch(N){case 1:case 2:case 3:var t=3;break;default:t=N}var n=N;N=t;try{return e()}finally{N=n}},t.unstable_pauseExecution=function(){},t.unstable_requestPaint=z,t.unstable_runWithPriority=function(e,t){switch(e){case 1:case 2:case 3:case 4:case 5:break;default:e=3}var n=N;N=e;try{return t()}finally{N=n}},t.unstable_scheduleCallback=function(e,i,a){var u=t.unstable_now();switch(a="object"==typeof a&&null!==a&&"number"==typeof(a=a.delay)&&0<a?u+a:u,e){case 1:var l=-1;break;case 2:l=250;break;case 5:l=1073741823;break;case 4:l=1e4;break;default:l=5e3}return e={id:C++,callback:i,priorityLevel:e,startTime:a,expirationTime:l=a+l,sortIndex:-1},a>u?(e.sortIndex=a,S(P,e),null===x(O)&&e===x(P)&&(D?o():D=!0,r(A,a-u))):(e.sortIndex=l,S(O,e),j||T||(j=!0,n(L))),e},t.unstable_wrapCallback=function(e){var t=N;return function(){var n=N;N=t;try{return e.apply(this,arguments)}finally{N=n}}}},840:(e,t,n)=>{"use strict";e.exports=n(53)},379:(e,t,n)=>{"use strict";var r,o=function(){return void 0===r&&(r=Boolean(window&&document&&document.all&&!window.atob)),r},i=function(){var e={};return function(t){if(void 0===e[t]){var n=document.querySelector(t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}e[t]=n}return e[t]}}(),a=[];function u(e){for(var t=-1,n=0;n<a.length;n++)if(a[n].identifier===e){t=n;break}return t}function l(e,t){for(var n={},r=[],o=0;o<e.length;o++){var i=e[o],l=t.base?i[0]+t.base:i[0],c=n[l]||0,s="".concat(l," ").concat(c);n[l]=c+1;var f=u(s),d={css:i[1],media:i[2],sourceMap:i[3]};-1!==f?(a[f].references++,a[f].updater(d)):a.push({identifier:s,updater:y(d,t),references:1}),r.push(s)}return r}function c(e){var t=document.createElement("style"),r=e.attributes||{};if(void 0===r.nonce){var o=n.nc;o&&(r.nonce=o)}if(Object.keys(r).forEach((function(e){t.setAttribute(e,r[e])})),"function"==typeof e.insert)e.insert(t);else{var a=i(e.insert||"head");if(!a)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");a.appendChild(t)}return t}var s,f=(s=[],function(e,t){return s[e]=t,s.filter(Boolean).join("\n")});function d(e,t,n,r){var o=n?"":r.media?"@media ".concat(r.media," {").concat(r.css,"}"):r.css;if(e.styleSheet)e.styleSheet.cssText=f(t,o);else{var i=document.createTextNode(o),a=e.childNodes;a[t]&&e.removeChild(a[t]),a.length?e.insertBefore(i,a[t]):e.appendChild(i)}}function p(e,t,n){var r=n.css,o=n.media,i=n.sourceMap;if(o?e.setAttribute("media",o):e.removeAttribute("media"),i&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),e.styleSheet)e.styleSheet.cssText=r;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(r))}}var h=null,v=0;function y(e,t){var n,r,o;if(t.singleton){var i=v++;n=h||(h=c(t)),r=d.bind(null,n,i,!1),o=d.bind(null,n,i,!0)}else n=c(t),r=p.bind(null,n,t),o=function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)};return r(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;r(e=t)}else o()}}e.exports=function(e,t){(t=t||{}).singleton||"boolean"==typeof t.singleton||(t.singleton=o());var n=l(e=e||[],t);return function(e){if(e=e||[],"[object Array]"===Object.prototype.toString.call(e)){for(var r=0;r<n.length;r++){var o=u(n[r]);a[o].references--}for(var i=l(e,t),c=0;c<n.length;c++){var s=u(n[c]);0===a[s].references&&(a[s].updater(),a.splice(s,1))}n=i}}}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,